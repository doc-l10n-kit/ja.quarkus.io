msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:3
#, fuzzy
msgid "Mocking CDI beans in Quarkus"
msgstr "QuarkusでCDI Beanをモックする。"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:4
#, fuzzy
msgid "2020-04-28"
msgstr "2020-04-28"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:5
#, fuzzy
msgid "testing"
msgstr "テスティング"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:6
#, fuzzy
msgid "Quarkus 1.4 introduces some interesting new capabilities for mocking CDI beans."
msgstr "Quarkus 1.4では、CDI Beanをモックするための興味深い新機能が導入されました。"

#. type: YAML Front Matter
#: upstream/_posts/2020-04-29-mocking.adoc:7
msgid "geoand"
msgstr "geoand"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:10
#, fuzzy
msgid ""
"Testing Quarkus applications has been an important part of the Quarkus Developer Joy, which is why\n"
"`@QuarkusTest` for testing JVM applications and `@NativeTest` for black-box testing of the native images have been\n"
"part of Quarkus since the first release.\n"
"A recurring request however amongst our community members has been to have Quarkus allow them to selectively\n"
"mock certain CDI beans for specific tests. This post will introduce the new mocking capabilities\n"
"that `1.4` brings which aim to address those concerns, while also providing a glimpse of additional\n"
"improvements in this are that will be part of `1.5`."
msgstr "Quarkusアプリケーションのテストは、Quarkus開発者の喜びの重要な部分です。そのため、JVMアプリケーションのテスト用の `@QuarkusTest` 、ネイティブイメージのブラックボックステスト用の `@NativeTest` 、最初のリリースからQuarkusの一部になっています。しかし、コミュニティメンバーの間では、Quarkusで特定のCDI Beanを特定のテスト用に選択的にモックできるようにしてほしいという要望が繰り返し出ています。この記事では、 `1.4` が提供する新しいモッキング機能を紹介し、これらの懸念に対処することを目指します。また、 `1.5` の一部であるこの分野のさらなる改善点についても紹介します。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:18
#, fuzzy
msgid "Old approach"
msgstr "旧アプローチ"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:20
#, fuzzy
msgid "Let us assume that a Quarkus application contains the following (purely contrived) bean:"
msgstr "Quarkusアプリケーションに、次のような（純粋に作られた）Beanが含まれていると仮定します："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:47
#, fuzzy
msgid ""
"When testing the `generateSendInvoice` method we most likely don't want to use the actual `InvoiceNotificationService` as it would\n"
"result in sending real notifications. With the old Quarkus approach one could \"override\"\n"
"the `InvoiceNotificationService` in tests by adding the following bean in the test sources:"
msgstr "`generateSendInvoice` メソッドをテストする場合、実際の通知を送信することになるため、実際の `InvoiceNotificationService` を使用したくない場合がほとんどです。Quarkusの古いアプローチでは、テストソースに以下のBeanを追加することで、テスト内で `InvoiceNotificationService` を「オーバーライド」することができました："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:66
#, fuzzy
msgid ""
"When Quarkus scanned this code, the use of `@Mock` would result in `MockInvoiceNotificationService` being used as\n"
"the implementation of `InvoiceNotificationService` in every place where a `InvoiceNotificationService` bean was injected\n"
"(in CDI terms this is called an injection point)."
msgstr "Quarkusがこのコードをスキャンすると、 `@Mock` を使用すると、 `InvoiceNotificationService` Beanが注入されたすべての場所（CDI用語ではこれを注入ポイントと呼びます）で、 `InvoiceNotificationService` の実装として `MockInvoiceNotificationService` が使用されることになります。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:70
#, fuzzy
msgid "Although this mechanism is fairly straightforward to use, it nonetheless suffers from a few problems:"
msgstr "この仕組みは非常にわかりやすいのですが、それでもいくつかの問題があります："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:72
#, fuzzy
msgid ""
"A new class (or a new CDI producer method) needs to be used for each bean type that requires a mock. In a large application where a lot of\n"
"mocks are needed, the amount of boilerplate code increases unacceptably."
msgstr "モックを必要とする Bean タイプごとに新しいクラス (または新しい CDI プロデューサーメソッド) を使用する必要があります。多くのモックが必要とされる大規模なアプリケーションでは、定型的なコードの量が許容できないほど増加します。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:74
#, fuzzy
msgid ""
"There is no way for a mock to be used for certain tests only. This is due to the fact that beans that are annotated with `@Mock` are normal\n"
"CDI beans (and are therefore used throughout the application).\n"
"Depending on what needs to be tested, this can be very problematic."
msgstr "モックを特定のテストだけに使用する方法はありません。これは、 `@Mock` でアノテーションされた Bean は通常の CDI Bean である (したがって、アプリケーション全体で使用される) という事実が原因です。何をテストする必要があるかによって、これは非常に問題になることがあります。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:77
#, fuzzy
msgid ""
"There is a no out of the box integration with https://site.mockito.org/[Mockito], which is the de-facto standard for\n"
"mocking in Java applications. Users can certainly use Mockito (most commonly by using a CDI producer method), but there\n"
"is boilerplate code involved."
msgstr "Javaアプリケーションのモッキングのデファクトスタンダードである link:https://site.mockito.org/[Mockitoとの] 統合は、最初から存在しません。ユーザは確かにMockitoを使うことができますが（最も一般的なのはCDIプロデューサー・メソッドを使うことです）、ボイラープレート・コードが含まれます。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:81
#, fuzzy
msgid "New approach"
msgstr "新しいアプローチ"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:83
#, fuzzy
msgid ""
"Starting with Quarkus `1.4`, users have the ability to create and inject per-test mocks for normal scoped CDI beans using\n"
"`io.quarkus.test.junit.QuarkusMock`. Moreover, Quarkus provides out of the box integration with Mockito\n"
"allowing for zero effort mocking of CDI beans using the `io.quarkus.test.junit.mockito.@InjectMock` annotation."
msgstr "Quarkusでは、 `1.4` 、通常のスコープを持つCDI Beanのテストごとのモックを作成し、注入することができます（ `io.quarkus.test.junit.QuarkusMock` ）。さらに、QuarkusはMockitoとすぐに統合できるため、 `io.quarkus.test.junit.mockito.@InjectMock` アノテーションを使用してCDI Beanのモックをゼロから作成することができます。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:87
#, fuzzy
msgid "Using QuarkusMock"
msgstr "QuarkusMockの使用"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:89
#, fuzzy
msgid ""
"`QuarkusMock` provides the foundation for mocking normal scoped CDI beans and is also used under the hood by `@InjectMock`, so let us examine\n"
"it first. The best way to do this is using an example:"
msgstr "`QuarkusMock` は、通常のスコープを持つCDI Beanをモックするための基礎を提供し、 、その下でも使用されています。したがって、まずそれを調べてみましょう。これを行うための最良の方法は、例を使用することです： `@InjectMock`"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:147
#, fuzzy
msgid "This part of the  example uses Mockito for convenience's sake only. `QuarkusMock` is not tied to Mockito in any way."
msgstr "この例の部分では、便宜上Mockitoを使用しています。 `QuarkusMock` 、Mockitoとは一切関係ありません。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:148
#, fuzzy
msgid ""
"We use `QuarkusMock.installMockForType()` because the injected bean instance is not yet available. Very important to note is that\n"
"the mock setup in a JUnit `@BeforeAll` method, is used for *all* test methods of the class (other test classes are *not* affected by this)."
msgstr "注入された Bean インスタンスはまだ利用できないので、 `QuarkusMock.installMockForType()` を使用しています。非常に重要なのは、JUnit `@BeforeAll` メソッドで設定したモックは、そのクラスの *すべての* テストメソッドで使用されるということです（他のテストクラスはこの影響を *受けません* ）。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:153
#, fuzzy
msgid "The mock for `MockableBean1` is being used as it was defined for all test methods of the class."
msgstr "`MockableBean1` のモックは、クラスのすべてのテストメソッドで定義されたものがそのまま使われています。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:151
#, fuzzy
msgid "Since no mock has been set up for `MockableBean2`, the CDI bean is being used."
msgstr "`MockableBean2` にはモックが設定されていないため、CDI Bean が使用されています。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:152
#, fuzzy
msgid "We use `QuarkusMock.installMockForInstance()` here because inside the test method, the injected bean instance is available."
msgstr "ここで `QuarkusMock.installMockForInstance()` 、テストメソッドの内部では注入されたBeanインスタンスが利用できるためです。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:154
#, fuzzy
msgid "As we used `BonjourMockableBean2` as a mock `MockableBean2`, this class is now used."
msgstr "`BonjourMockableBean2` をモック `MockableBean2` として使用したため、このクラスが使用されるようになりました。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:158
#, fuzzy
msgid ""
"`QuarkusMock` can be used for any normal scoped CDI bean - the most common of which are `@ApplicationScoped` and `@RequestScoped`.\n"
"This means that beans with `@Singleton` and `@Dependent` scope *cannot* be used with `QuarkusMock`."
msgstr "`QuarkusMock` は、通常のスコープを持つCDIビーン（最も一般的なものは と ）に使用することができます。つまり、 と のスコープを持つ Bean は、 で使用することは `@ApplicationScoped` `@RequestScoped` `@Singleton` `@Dependent` `QuarkusMock` *できません* 。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:161
#, fuzzy
msgid "Furthermore, `QuarkusMock` will not work properly when it's used in tests that run parallel in the same JVM."
msgstr "さらに、 `QuarkusMock` 、同じJVMで並行して実行されるテストで使用すると、正しく動作しません。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:164
#, fuzzy
msgid ""
"Returning to the original example of the blog post, we could get rid of the `MockInvoiceNotificationService` class and\n"
"instead use something like the following:"
msgstr "ブログ記事の元の例に戻ると、 `MockInvoiceNotificationService` クラスを削除して、代わりに次のようなものを使用することができます："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:192
#, fuzzy
msgid ""
"Note that in this case we don't need to create a new class implementing `InvoiceNotificationService`.\n"
"Moreover, we have full and per test control over the mock, something which grants up a lot of flexibility when writing tests."
msgstr "この場合、 `InvoiceNotificationService` を実装した新しいクラスを作成する必要がないことに注意してください。さらに、モックをテストごとに完全に制御することができるので、テストを書く際に多くの柔軟性を与えることができます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:195
#, fuzzy
msgid ""
"For example, if we had some other test where we did want to use the real `InvoiceNotificationService`, then in that test\n"
"we would simply not do any mocking of `InvoiceNotificationService`."
msgstr "例えば、本物の `InvoiceNotificationService` を使いたいテストがあった場合、そのテストでは `InvoiceNotificationService` のモックを一切行わないことになります。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:198
#, fuzzy
msgid ""
"If yet another test needed to mock `InvoiceNotificationService` in some other way, then it would be perfectly free to do so,\n"
"using the same method `OrderServiceTest` uses, without causing any problems to the other tests."
msgstr "もし、別のテストが他の方法で `InvoiceNotificationService` をモックする必要がある場合、 `OrderServiceTest` が使っているのと同じ方法で、他のテストに問題を起こすことなく、完全に自由にモックすることができます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:201
#, fuzzy
msgid "Finally, note in the example above we didn't mock `InvoiceService`, which meant that the real `InvoiceService` was being used in `OrderServiceTest`."
msgstr "最後に、上記の例では、 `InvoiceService` をモックしていないため、実際の `InvoiceService` が `OrderServiceTest` で使用されていることに注意してください。"

#. type: Title ===
#: upstream/_posts/2020-04-29-mocking.adoc:203
#, fuzzy
msgid "Using @InjectMock"
msgstr "InjectMockを使う"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:205
#, fuzzy
msgid ""
"Hopefully the previous section convinced you of the merits of `QuarkusMock` over the old approach. You might also be wondering\n"
"however if there is a way to reduce boilerplate code even further and provide tighter integration with Mockito. That is\n"
"where `@InjectMock` comes in handy."
msgstr "前節で、 `QuarkusMock` 、従来の方法よりも優れていることがお分かりいただけたかと思います。しかし、さらに定型的なコードを減らし、Mockitoとより緊密に統合する方法はないかとお考えかもしれません。そこで、 `@InjectMock` が役に立ちます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:209
#, fuzzy
msgid "To demonstrate `@InjectMock` let's rewrite the `MockTestCase` from the previous section."
msgstr "`@InjectMock` を実証するために、前節の `MockTestCase` を書き換えてみましょう。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:211
#, fuzzy
msgid "First of all, we need to add the following dependency:"
msgstr "まず、以下の依存関係を追加する必要があります："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:222
#, fuzzy
msgid "Now we can rewrite the `MockTestCase` like so:"
msgstr "これで、 `MockTestCase` を次のように書き換えることができます："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:270
#, fuzzy
msgid "`@InjectMock` results in a mock being created and being available in *all* test methods of the test class (other test classes are *not* affected by this)"
msgstr "`@InjectMock` の場合、モックが作成され、テストクラスの *すべての* テストメソッドで利用可能になります（他のテストクラスはこの影響を *受けません* ）。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:271
#, fuzzy
msgid "The `mockableBean1` is configured here for all test methods of the class"
msgstr "`mockableBean1` は、クラスのすべてのテストメソッドに対してここで設定されます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:272
#, fuzzy
msgid "Configure `mockableBean2` for this test only"
msgstr "`mockableBean2` をこのテスト用にのみ設定する"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:276
#, fuzzy
msgid "Since `@InjectMock` uses `QuarkusMock` under the hood, the same limitations apply to its use."
msgstr "`@InjectMock` は `QuarkusMock` を下敷きにしているため、その使用には同じ制限があります。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:278
#, fuzzy
msgid ""
"Additionally, `@InjectMock` works like an injection point for the bean, so for it to work properly when\n"
"the target bean uses CDI qualifiers, those qualifiers also need to be added to the field.\n"
"We will see an example of this in next section about mocking a `@RestClient` bean."
msgstr "さらに、 `@InjectMock` は Bean の注入ポイントのように機能するので、ターゲット Bean が CDI修飾子を使用するときに正しく動作するためには、それらの修飾子もフィールドに追加される必要があります。この例は、 `@RestClient` Beanをモックすることについて、次のセクションで見ることになります。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:283
#, fuzzy
msgid "As a final example, we can rewrite the `OrderServiceTest` test like so:"
msgstr "最後の例として、 `OrderServiceTest` のテストを次のように書き換えてみます："

#. type: Title ====
#: upstream/_posts/2020-04-29-mocking.adoc:311
#, fuzzy
msgid "Using @InjectMock with @RestClient"
msgstr "InjectMockを@RestClientで使う"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:313
#, fuzzy
msgid ""
"A very common need is to mock `@RestClient` beans. Thankfully it's a need well covered by `@InjectMock` - as long\n"
"as two principles are followed:"
msgstr "`@RestClient` Beanをモックすることは、非常によくあるニーズです。ありがたいことに、このニーズは `@InjectMock` で十分にカバーされています - 2つの原則に従う限り："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:316
#, fuzzy
msgid "The bean is made `@ApplicationScoped` (instead of accepting the default scope which `@RegisterRestClient` implies, i.e. `@Dependent`)"
msgstr "Beanは、 `@ApplicationScoped` （ `@RegisterRestClient` が意味するデフォルトのスコープ、すなわち `@Dependent` を受け入れるのではなく）作られます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:317
#, fuzzy
msgid "The `@RestClient` CDI qualifier is used when injecting the bean into the test."
msgstr "`@RestClient` CDI修飾子は、Beanをテストに注入する際に使用されます。"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:319
#, fuzzy
msgid "As usual, an example best demonstrates these requirements. Say we have a `GreetingService` which we wish to use to build a rest client:"
msgstr "いつものように、これらの要件を最もよく示すのは例である。例えば、 `GreetingService` 、それを使ってレストクライアントを構築したいとします："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:334
#, fuzzy
msgid "`@ApplicationScoped` needs to be used to make `GreetingService` mockable."
msgstr "`@ApplicationScoped` は、 をモッカブルにするために使用する必要があります。 `GreetingService` "

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:336
#, fuzzy
msgid "An example test class could be:"
msgstr "テストクラスの例としては、次のようなものがあります："

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:360
#, fuzzy
msgid "We need to use the `@RestClient` CDI qualifier, since Quarkus creates the `GreetingService` bean with this qualifier."
msgstr "Quarkusはこの修飾子で `GreetingService` Beanを作成するため、 `@RestClient` CDI修飾子を使用する必要があります。"

#. type: Title ==
#: upstream/_posts/2020-04-29-mocking.adoc:362
#, fuzzy
msgid "More Mocking in Quarkus 1.5"
msgstr "Quarkus1.5のモッキングをもっと見る"

#. type: Plain Text
#: upstream/_posts/2020-04-29-mocking.adoc:364
#, fuzzy
msgid ""
"Quarkus 1.5 will ship with a new testing module (`quarkus-panache-mock`) that will make mocking Panache entities a breeze.\n"
"If you are eager to see what this feature is all about, check out https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[this]\n"
"and feel free to give us early feedback."
msgstr "Quarkus 1.5には、Panacheエンティティのモッキングを容易にする新しいテストモジュール( `quarkus-panache-mock` )が同梱されます。この機能がどんなものか見てみたいという方は、 link:https://github.com/quarkusio/quarkus/blob/3a5680ea367c5dad60655dcef0ca9765f14d5efe/docs/src/main/asciidoc/getting-started-testing.adoc#73-mocking-with-panache[こちらを] ご覧いただき、お気軽に初期のフィードバックをお寄せください。"
