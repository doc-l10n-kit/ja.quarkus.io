msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:3
#, fuzzy
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "エミッター - 命令的な世界と反応的な世界の架け橋になる"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:4
#, fuzzy
msgid "2020-10-06"
msgstr "2020-10-06"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:5
#, fuzzy
msgid "reactive mutiny messaging kafka"
msgstr "Reactive mutiny メッセージング kafka"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:6
#, fuzzy
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "Reactive Messaging Emittersによるメッセージの発信"

#. type: YAML Front Matter
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:10
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "KafkaとAvroに関する link:https://quarkus.io/blog/kafka-avro/[以前のブログ記事で] 、Kafkaメッセージを送信するために _エミッターを_ 使用しました。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:12
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=\"architecture\", width=\"70%\"]"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:14
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "今回は、このエミッターの構成について、もう少し詳しく見ていきましょう。"

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:16
#, fuzzy
msgid "Injecting an Emitter"
msgstr "エミッターの注入"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:18
#, fuzzy
msgid ""
"Injecting an emitter is straightforward.\n"
"You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "エミッターを注入するのは簡単です。対象となるチャンネル、つまりメッセージを送信する場所を指定します："

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:26
#, fuzzy
msgid ""
"Remember that reactive messaging uses _channels_ as a primary abstraction.\n"
"They can be in-memory channels or mapped to a remote broker."
msgstr "リアクティブ・メッセージングでは、主要な抽象化として _チャネルを_ 使用することを忘れないでください。チャネルはインメモリチャネルであったり、リモートブローカーにマッピングされたりしています。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:29
#, fuzzy
msgid ""
"In the previous code snippet, we inject an `Emitter<Movie>`.\n"
"It means you will send messages containing movies as payload.\n"
"So, the specified type is the payload type.\n"
"That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "先ほどのコードスニペットでは、 `Emitter<Movie>` を注入しています。 ペイロードとしてムービーを含むメッセージを送信することを意味します。つまり、指定されたタイプはペイロード・タイプです。これにより、次のように送ることができます：ペイロードを直接（メッセージに自動的にラップ）、またはペイロードとしてムービーを含むより詳細なメッセージを送信します："

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:45
#, fuzzy
msgid "Sending payloads"
msgstr "ペイロードの送信"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:47
#, fuzzy
msgid ""
"Sending payload is the simplest way to send data.\n"
"You just pass the payload to the `send` method like an instance of `Movie`.\n"
"Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "ペイロードの送信は、データを送信する最も簡単な方法です。ペイロードを `Movie` のインスタンスのように `send` メソッドに渡すだけです。 裏側では、ペイロードを包むシンプルな `Message` を作成するだけです。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:51
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "ペイロードとともに使用された場合、 `send` メソッドは、メッセージ処理が成功したか失敗したかを示す `CompletionStage` を返す："

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:65
#, fuzzy
msgid ""
"Processing, and will see later event the emission, happens asynchronously.\n"
"So, the returned `CompletionStage` lets you know when the message is processed.\n"
"The `CompletionStage` is completed successfully when the message is acknowledged.\n"
"Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.\n"
"If something wrong happens, the `CompletionStage` is completed exceptionally.\n"
"The passed exception gives you an idea of the reason."
msgstr "処理は、後で見るイベントの発光は、非同期に起こります。ですから、返された `CompletionStage` 、メッセージがいつ処理されたかを知ることができます。 `CompletionStage` は、メッセージが承認されると正常に完了します。ほとんどの場合、処理がスムーズに完了したか、メッセージがブローカーに正常に送信されたことを意味します。何か問題が発生した場合、 `CompletionStage` は例外的に完了します。渡された例外がその理由のヒントになります。"

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:72
msgid "Sending messages"
msgstr "メッセージの送信"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:74
#, fuzzy
msgid ""
"While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.\n"
"The emitter also allows sending messages, and so attach the metadata you want.\n"
"In the following example, we configure the outbound Kafka record.\n"
"We set the key, the topic, and so on.\n"
"That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "ペイロードを送信する方がわかりやすいですが、Kafkaにどのように書き込むかの設定やトレース情報など、メッセージにメタデータを付けたい場合もあります。エミッターではメッセージの送信も可能なので、必要なメタデータを添付します。次の例では、アウトバウンドKafkaレコードを設定します。キーやトピックなどを設定します。こうすることで、異なるトピックにメッセージをディスパッチしたり、動的に決定したりすることもできる："

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:89
#, fuzzy
msgid "Emissions are asynchronous"
msgstr "排出は非同期"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:91
#, fuzzy
msgid ""
"Emitters form a bridge between the imperative and the reactive worlds.\n"
"When you emit a message, this message is not processed immediately.\n"
"The downstream component consuming the message are part of a _Reactive Streams_.\n"
"Passing the message immediately would violate the Reactive Streams protocol.\n"
"We must be sure that the downstream components are ready to accept this message.\n"
"As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "エミッターは、命令的な世界と反応的な世界の間の橋渡しをします。Emitしたメッセージは、すぐに処理されるわけではありません。メッセージを消費する下流のコンポーネントは、 _Reactive Streamsの_ 一部です。メッセージをすぐに渡すと、Reactive Streamsのプロトコルに違反することになります。下流のコンポーネントがこのメッセージを受け入れる準備ができていることを確認する必要があります。そのため、エミッターはメッセージを直接プッシュするのではなく、下流のキャパシティ（Reactive Streamsの用語ではリクエスト）を処理するためのバッファにエンキューしています。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:98
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=\"buffer\", width=\"90%\"]"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:100
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "下流のコンポーネントは、リクエストに応じてメッセージを受信し、その容量を超えることがないようにします。"

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:102
#, fuzzy
msgid "Overflow management"
msgstr "オーバーフロー管理"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:104
#, fuzzy
msgid ""
"But with buffer comes... overflow.\n"
"If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.\n"
"Then, you cannot emit anymore, and attempting to emit will throw exceptions.\n"
"But what can we do in this case?\n"
"When injecting the emitter, you can configure an Overflow strategy.\n"
"For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.\n"
"By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "しかし、バッファには...オーバーフローがつきものです。もしあなたがあまりにも多くのメッセージを発して、下流がそれに追いつけなくなった場合、メッセージはバッファの最大容量に達するまで保存されます。すると、それ以上発することができなくなり、発しようとすると例外が発生します。しかし、この場合どうすればいいのでしょうか？エミッタを注入する際に、Overflow戦略を設定することができます。例えば、バッファサイズを設定する、バインドされていないバッファを使う、メッセージを落とす、失敗する、背圧を無視してダウンストリームに処理させる、などが可能です。デフォルトではバッファを使用しますが、ユースケースによっては別の設定にしたい場合もあります："

#. type: Title ==
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:130
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:132
#, fuzzy
msgid ""
"This post is a brief introduction to the `Emitter` construct from Reactive Messaging.\n"
"More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "この投稿は、Reactive Messagingの `Emitter` コンストラクトを簡単に紹介するものです。より詳細な情報は、SmallRye link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[Reactive Messagingのドキュメントに] 記載されています。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:135
#, fuzzy
msgid ""
"In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.\n"
"First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.\n"
"Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "Quarkusの次のバージョン（1.9）では、この機能は2つの非常に優れた機能強化が行われる予定です。まず、Mutinyのバリアントを提供し、Mutiny APIとの統合を容易にする予定です。そして、Kafkaの場合、メタデータを使用することなく、キーと値のペアを直接発行することが可能になります。"

#. type: Plain Text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:139
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "ご期待ください！Willは次の記事でこれらを取り上げる予定です！"
