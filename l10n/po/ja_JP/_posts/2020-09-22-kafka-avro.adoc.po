msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:3
#, fuzzy
msgid "How to Use Kafka, Schema Registry and Avro with Quarkus"
msgstr "QuarkusでKafka、Schema Registry、Avroを使用する方法。"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:4
#, fuzzy
msgid "2020-09-22"
msgstr "2020-09-22"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:5
#, fuzzy
msgid "reactive kafka avro apicurio"
msgstr "リアクティブ・カフカ・アブロ・アピクリオ"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:6
#, fuzzy
msgid "How to Use Kafka, Schema Registry, and Avro with Quarkus"
msgstr "QuarkusでKafka、Schema Registry、Avroを使用する方法。"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-22-kafka-avro.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:10
#, fuzzy
msgid ""
"In the Kafka world, Apache Avro is by far the most used serialization protocol.\n"
"Avro is a data serialization system.\n"
"Combined with Kafka, it provides schema-based, robust, and fast binary serialization."
msgstr "Kafkaの世界では、Apache Avroが圧倒的に多く使われているシリアライズプロトコルです。Avroはデータシリアライゼーションシステムです。Kafkaと組み合わせることで、スキーマベースで堅牢かつ高速なバイナリシリアライゼーションを実現します。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:14
#, fuzzy
msgid ""
"In this blog post, we will see how you can use Avro with a schema registry in a Quarkus application.\n"
"This blog focuses on the JVM mode.\n"
"We will cover the native mode in another post."
msgstr "このブログでは、Quarkusアプリケーションでスキーマレジストリを使用してAvroを使用する方法について説明します。このブログでは、JVMモードに焦点を当てます。ネイティブモードについては、別の記事で説明します。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:18
#, fuzzy
msgid ""
"We will write a simple application receiving HTTP requests, writing the payload into Kafka, and reading them from Kafka.\n"
"For simplicity, the same application will write into Kafka and read from it, but obviously, it would be different applications in the real world."
msgstr "HTTPリクエストを受け取り、ペイロードをKafkaに書き込み、Kafkaから読み取るというシンプルなアプリケーションを書くことにします。簡単のため、同じアプリケーションがKafkaに書き込み、Kafkaから読み取ることになりますが、当然、実際の世界では異なるアプリケーションになるでしょう。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:21
msgid "image:/assets/images/posts/kafka-avro/architecture.png[]"
msgstr "image:/assets/images/posts/kafka-avro/architecture.png[]"

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:23
#, fuzzy
msgid "How to start"
msgstr "始め方"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:25
#, fuzzy
msgid ""
"Well, let's start from the beginning.\n"
"Go to https://code.quarkus.io to create your project, and select the following extension:"
msgstr "では、最初から始めましょう。 https://code.quarkus.io にアクセスしてプロジェクトを作成し、次のエクステンションを選択します："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:28
#, fuzzy
msgid "RESTEasy JSON-B"
msgstr "RESTEasy JSON-B"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:29
msgid "SmallRye Reactive Messaging - Kafka Connector"
msgstr "SmallRye Reactive Messaging - Kafka Connector"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:30
#, fuzzy
msgid "Apache Avro"
msgstr "アパッチアブロ"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:32
#, fuzzy
msgid "image:/assets/images/posts/kafka-avro/project.png[]"
msgstr "image:/assets/images/posts/kafka-avro/project.png[alt=\"project\"]"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:34
#, fuzzy
msgid "Download the project and open it in your favorite IDE."
msgstr "プロジェクトをダウンロードし、お好きなIDEで開いてください。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:36
#, fuzzy
msgid ""
"We need to add a few more content to the generated `pom.xml`.\n"
"Open the `pom.xml` file and add the following `dependency`:"
msgstr "生成された `pom.xml` に、さらにいくつかの内容を追加する必要があります。 `pom.xml` ファイルを開き、次の `dependency` を追加します："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:54
#, fuzzy
msgid ""
"This dependency provides Avro serializer and deserializer.\n"
"There are multiple versions of this _serde_.\n"
"In this blog post, we use the ones provided by Apicurio.\n"
"You can also use Confluent's one (the artifact is not on Maven Central, so you need to add an extra repository)."
msgstr "この依存関係は Avro シリアライザーとデシリアライザーを提供します。この _serde_ には複数のバージョンがあります。このブログ記事では、Apicurioが提供するものを使用します。Confluent のものを使うこともできます（アーティファクトは Maven Central にないので、リポジトリを追加する必要があります）。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:59
#, fuzzy
msgid ""
"We also need to add the `avro-maven-plugin`.\n"
"Under `<build><plugins>`, add:"
msgstr "また、 `avro-maven-plugin` を追加する必要がある。 `<build><plugins>` の下に追加する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:84
#, fuzzy
msgid ""
"This plugin generates the code from Avro schema files located in the `src/main/avro` directory.\n"
"With this setup, we can finally start to write some code."
msgstr "このプラグインは、 `src/main/avro` ディレクトリにある Avro スキーマファイルからコードを生成します。これでようやくコードを書き始めることができます。"

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:87
#, fuzzy
msgid "The Avro schema"
msgstr "アブロのスキーマ"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:89
#, fuzzy
msgid ""
"First, we need to write the schema representing the object we will read and write in Kafka.\n"
"Create the `src/main/avro/movie.avsc` file with the following content:"
msgstr "まず、Kafkaで読み書きするオブジェクトを表すスキーマを記述する必要がある。以下の内容で `src/main/avro/movie.avsc` ファイルを作成する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:111
#, fuzzy
msgid ""
"The `avro-maven-plugin`, configured in the `pom.xml` file, generates the `me.escoffier.quarkus.Movie` class with the `title` and `year` attributes.\n"
"To generate the class, run:"
msgstr "`pom.xml` ファイルで設定された `avro-maven-plugin` は、 `title` と `year` 属性を持つ `me.escoffier.quarkus.Movie` クラスを生成します。クラスを生成するには、以下を実行します："

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:119
#, fuzzy
msgid "The Movie Resource"
msgstr "映画資料"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:121
#, fuzzy
msgid ""
"The first class we will write receives HTTP requests and writes the (Movie) payload into Kafka.\n"
"Create the `src/main/java/me/escoffier/MovieResource.java` with the following content:"
msgstr "最初に書くクラスは、HTTPリクエストを受け取り、（ムービー）ペイロードをKafkaに書き込む。 `src/main/java/me/escoffier/MovieResource.java` ："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:164
#, fuzzy
msgid ""
"This JAX-RS resource is straightforward.\n"
"It has a single endpoint method, receiving JSON payload on `/movies`.\n"
"RESTEasy maps the JSON document into `Movie` objects automatically.\n"
"As described in the `avsc` file, the expected JSON contains two fields: `title` and `year`."
msgstr "このJAX-RSリソースは単純である。 `/movies` で JSON ペイロードを受信します。RESTEasy は JSON ドキュメントを `Movie` オブジェクトに自動的にマッピングする。 `avsc` ファイルに記述されているように、期待される JSON には `title` と `year` の 2 つのフィールドがあります。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:169
#, fuzzy
msgid ""
"When using Quarkus with Reactive Messaging, you don't interact with Kafka directly.\n"
"You inject an `Emitter`, which sends an object (our movie) to a _channel_.\n"
"The application configuration maps this channel to a Kafka topic."
msgstr "QuarkusをReactive Messagingで使用する場合、Kafkaと直接やり取りすることはありません。 `Emitter` を注入し、オブジェクト（ムービー）を _チャネルに_ 送信します。アプリケーションの設定は、このチャネルをKafkaトピックにマッピングします。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:173
#, fuzzy
msgid "Speaking about configuration, open the `src/main/resources/application.properties`, and add:"
msgstr "コンフィギュレーションについて言えば、 `src/main/resources/application.properties` を開き、追加する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:187
#, fuzzy
msgid ""
"This configuration requires a bit of an explanation.\n"
"First, `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` configure the schema registry URL.\n"
"If you use the Confluent _serde_, instead of the Apicurio one, the property is named `mp.messaging.connector.smallrye-kafka.schema.registry.url`."
msgstr "この設定には少し説明が必要である。まず、 `mp.messaging.connector.smallrye-kafka.apicurio.registry.url` スキーマレジストリのURLを設定します。Apicurioのものではなく、Confluentの _serdeを_ 使用する場合、プロパティ名は `mp.messaging.connector.smallrye-kafka.schema.registry.url` 。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:191
#, fuzzy
msgid ""
"The `mp.messaging.outgoing.movies` configure the `movies` channel.\n"
"The `connector` attribute indicates that the SmallRye Kafka connector manages the channel.\n"
"The `topic` attribute (which we could omit in this case as it matches the channel name) specifies the topic's name.\n"
"`value.serializer` sets the serializer to use.\n"
"Here we use `io.apicurio.registry.utils.serde.AvroKafkaSerializer` provided by Apicurio.\n"
"The `registry.*` properties configure how the registry handles the schema."
msgstr "`mp.messaging.outgoing.movies` は `movies` チャネルを設定する。 `connector` 属性は、SmallRye Kafka コネクタがチャネルを管理していることを示す。 `topic` 属性（チャネル名と一致するので、今回は省略できる）は、トピック名を指定する。 `value.serializer` は、使用するシリアライザを設定する。ここではApicurioが提供する `io.apicurio.registry.utils.serde.AvroKafkaSerializer` 。 `registry.*` プロパティは、レジストリがスキーマをどのように扱うかを設定します。"

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:198
#, fuzzy
msgid "The movie consumer"
msgstr "映画の消費者"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:200
#, fuzzy
msgid ""
"The second half of the application is even simpler.\n"
"It just logs the received movies."
msgstr "アプリケーションの後半はさらにシンプルだ。受信したムービーを記録するだけだ。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:203
#, fuzzy
msgid "Creates the `src/main/java/me/escoffier/MovieConsumer.java` with the following content:"
msgstr "以下の内容で `src/main/java/me/escoffier/MovieConsumer.java` を作成する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:230
#, fuzzy
msgid ""
"The `@Incoming` annotation indicates that the method is called for each `Movie` object transiting on the `movies-from-kafka` channel.\n"
"In this case, we simply write a log message."
msgstr "`@Incoming` アノテーションは、 `movies-from-kafka` チャンネルを通過する `Movie` オブジェクトごとにメソッドが呼び出されることを示している。この場合、単にログ・メッセージを書きます。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:233
#, fuzzy
msgid ""
"We are almost there.\n"
"We need to configure the reception from Kafka.\n"
"Re-open the `application.properties` and add:"
msgstr "あと少しだ。Kafkaからの受信を設定する必要がある。 `application.properties` ："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:247
#, fuzzy
msgid ""
"These properties map the `movies-from-kafka` to the `movies` Kafka topic.\n"
"It also configures the deserializer (`io.apicurio.registry.utils.serde.AvroKafkaDeserializer`).\n"
"We disable Kafka auto-commit (`enable.auto.commit=false`), as Reactive Messaging handles the offset commit for you."
msgstr "これらのプロパティは、 `movies-from-kafka` を `movies` Kafka トピックにマッピングする。また、デシリアライザー ( `io.apicurio.registry.utils.serde.AvroKafkaDeserializer` ) も設定します。Reactive Messaging がオフセットコミットを処理するため、Kafka の自動コミット ( `enable.auto.commit=false` ) を無効にします。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:251
#, fuzzy
msgid "Because the sender and receiver are colocalized in the same application, we cannot use the same channel name."
msgstr "送信者と受信者は同じアプリケーション内でコロカライズされているため、同じチャンネル名を使うことはできない。"

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:253
#, fuzzy
msgid "A bit of infrastructure"
msgstr "インフラストラクチャー"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:255
#, fuzzy
msgid "Before running the application, we need:"
msgstr "アプリケーションを実行する前に"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:257
#, fuzzy
msgid "A Kafka broker"
msgstr "Kafkaブローカー"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:258
#, fuzzy
msgid "The Apicurio schema registry"
msgstr "アピクリオのスキーマ・レジストリ"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:260
#, fuzzy
msgid "Create the `docker-compose.yaml` file at the root of your project with the following content:"
msgstr "プロジェクトのルートに、以下の内容で `docker-compose.yaml` ："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:308
#, fuzzy
msgid ""
"This `docker-compose` file starts everything we need.\n"
"You may wonder about some of the properties of the Apicurio registry.\n"
"Actually, the Apicurio registry is also a Quarkus application."
msgstr "この `docker-compose` ファイルは、必要なものすべてを開始します。Apicurioレジストリのプロパティのいくつかを疑問に思うかもしれません。実はApicurioレジストリもQuarkusのアプリケーションです。"

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:312
#, fuzzy
msgid "Time to run"
msgstr "走る時間"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:314
#, fuzzy
msgid ""
"Alright, let's get this rolling.\n"
"First, start the infrastructure with:"
msgstr "さあ、始めよう。まず、インフラストラクチャーを始めよう："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:322
#, fuzzy
msgid "Stop the infrastructure with `docker-compose down; docker-compose rm`"
msgstr "でインフラを止める `docker-compose down; docker-compose rm`"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:324
#, fuzzy
msgid "Then, start the application:"
msgstr "その後、アプリケーションを起動する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:331
#, fuzzy
msgid "Once start, open another terminal and _post_ movies:"
msgstr "起動したら、別のターミナルを開いて動画を _投稿_ する："

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:356
#, fuzzy
msgid "In the application log, you should see:"
msgstr "アプリケーションのログには、こう書かれているはずだ："

#. type: Title ==
#: upstream/_posts/2020-09-22-kafka-avro.adoc:370
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:372
#, fuzzy
msgid ""
"Done!\n"
"In just a few code lines and a bit of configuration, we can integrate Kafka, Avro, and a schema registry in a Quarkus application!\n"
"You can found the code of this demo on https://github.com/cescoffier/quarkus-kafka-and-avro. The readme file contains the instructions to run it."
msgstr "できました！わずか数行のコードと少しの設定で、QuarkusアプリケーションにKafka、Avro、スキーマレジストリを統合することができます！このデモのコードは https://github.com/cescoffier/quarkus-kafka-and-avro にあります。Readmeファイルには、このデモを実行するための手順が記載されています。"

#. type: Plain Text
#: upstream/_posts/2020-09-22-kafka-avro.adoc:376
#, fuzzy
msgid "Quarkus 1.9 will be a lots of new goodies around messaging and reactive in general. Stay tuned!"
msgstr "Quarkus 1.9では、メッセージングとリアクティブ全般に関するたくさんの新機能が追加される予定です。ご期待ください！"
