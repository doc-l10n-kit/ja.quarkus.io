msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:3
msgid "Quinoa - A Quarkus extension to create Modern UI with no hassle"
msgstr "Quinoa - Modern UIを手間なく作成するためのQuarkusエクステンション"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:4
msgid "2022-05-19"
msgstr "2022-05-19"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:5
msgid "web gui react angular nodejs frontend extension"
msgstr "web gui react angular nodejs frontend extension"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:6
msgid "The Quinoa extension takes care of all the Web UI build/wiring/dev-mode hassles to let you focus of your Quarkus web application logic."
msgstr "Quinoaエクステンションを使用すると、ウェブUIのビルド、結合、開発モードに関するすべての面倒な作業の面倒を見てくれ、Quarkusのウェブアプリケーションロジックに集中することができます。"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:7
msgid "adamevin"
msgstr "adamevin"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:13
msgid "Quinoa... To be honest I wasn't really a fan at first, but then my wife made them in a bowl like a salad with avocado and raw salmon. Now I really enjoy it with a touch of soy sauce. Let's not digress too much, I am not here to talk about healthy food in this post, this is about an extension to enjoy coding modern UI with Quarkus."
msgstr "Quinoa...正直最初はあまり好きではなかったのですが、妻がアボカドや生サーモンと一緒にサラダのようにボウルに入れて作ってくれたんです。今では、醤油を少し垂らして食べるのがとても美味しいです。余談ですが、この記事では健康的な食べ物について話すのではなく、QuarkusでモダンなUIをコーディングして楽しむためのエクステンションについて話しています。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:15
msgid "This extension is not a Quarkus core extension, it is available as part of the Quarkiverse. Early feedback and contribution are requested to mature the idea."
msgstr "このエクステンションはQuarkusのコアエクステンションではなく、Quarkiverseの一部として利用可能です。このアイデアを成熟させるために、初期のフィードバックと貢献をお願いします。"

#. type: Title ==
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:17
msgid "Get started"
msgstr "入門"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:19
msgid "Create a new Quinoa project (with a base Quinoa starter code):"
msgstr "新しいQuinoaプロジェクト（ベースとなるQuinoaスターターコードを含む）を作成します。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:21
msgid "With https://code.quarkus.io/?a=quinoa-bowl&j=17&e=io.quarkiverse.quinoa%3Aquarkus-quinoa[code.quarkus.io]"
msgstr "link:https://code.quarkus.io/?a=quinoa-bowl&j=17&e=io.quarkiverse.quinoa%3Aquarkus-quinoa[code.quarkus.io] を使用した場合"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:22
msgid "With the https://quarkus.io/guides/cli-tooling[Quarkus CLI]:"
msgstr "link:https://quarkus.io/guides/cli-tooling[Quarkus CLI] を使用した場合:"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:24
#, fuzzy
msgid "quarkus create app quinoa-app -x=io.quarkiverse.quinoa:quarkus-quinoa"
msgstr "quarkus create app quinoa-app -x=io.quarkiverse.quinoa:quarkus-quinoa"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:28
msgid "Then start the live-coding *and navigate to http://0.0.0.0:8080/quinoa.html*:"
msgstr "そして、ライブコーディングを開始し、* http://0.0.0.0:8080/quinoa.html に移動*します。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:34
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#getting-started[Here] is the Quinoa guide to go deeper and configure your app with any Node based Web UI framework such as React, Angular, Lit, Webpack, Rollup, ..."
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#getting-started[これ] は、より深く、React、Angular、Lit、Webpack、Rollupなどの任意のNodeベースのWeb UIフレームワークであなたのアプリを構成するためのQuinoaのガイドです..."

#. type: Title ===
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:36
msgid "A bit of context"
msgstr "ちょっとした背景説明"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:38
msgid "Alongside Quarkus, interacting with web frameworks such as React and Angular is a natural need. Many users have been requesting a smooth integration since the early stages of Quarkus (https://github.com/quarkusio/quarkus/issues/588[#588]). This is why I created the Quinoa extension for Quarkus."
msgstr "Quarkusと共に、ReactやAngularといったWebフレームワークとの連携は、自然なニーズです。多くのユーザーは、Quarkusの初期段階から、スムーズな統合を要望していました ( link:https://github.com/quarkusio/quarkus/issues/588[#588] ）。そのため、Quarkus用のQuinoaエクステンションを作成しました。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:40
msgid "Since the creation of Quarkus (3 years ago), link:#existing-articles[many blog articles] have popped up to help in that matter, most of them taking advantage of the frontend-maven-plugin. As the creator of code.quarkus.io, I have also been confronted with this situation and I, like many others, have filled the gap using this plugin. It does the job for sure and has been good enough to fill the need for the time being. Unfortunately the overall process could be more streamlined and easier to get started with, it involves a lot of configuration, some tricky setup to copy the resources to the right place and test the frontend at the right moment. Live coding requires starting two processes and a proxy to make it work together."
msgstr "Quarkusが誕生して以来（3年前）、この問題を解決するために link:#existing-articles[多くのブログ記事] が作成されましたが、そのほとんどはfrontend-maven-pluginを利用したものでした。code.quarkus.ioの作成者として、私もこの状況に直面し、他の多くの人と同様に、このプラグインを使用してギャップを埋めました。このプラグインは確かに仕事をし、当面のニーズを満たすには十分でした。残念ながら、全体的なプロセスはもっと合理的で簡単に始められるはずです。多くの設定、リソースを正しい場所にコピーするためのトリッキーなセットアップ、適切なタイミングでフロントエンドをテストすることが必要です。ライブコーディングでは、2つのプロセスを起動し、それを一緒に動作させるためのプロキシが必要です。"

#. type: Title ===
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:42
msgid "Let's start cooking"
msgstr "調理をはじめよう"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:44
msgid "With this experience behind me, I was in a good position to contribute something to ease our lives a bit. I put an eye to all the needs, issues, propositions and blog articles and came up with a new extension to create healthy modern user-interfaces (UI) with Quarkus: Quinoa (standing for Quarkus UI with NO hAssle :)."
msgstr "この経験を背景に、私は私たちの生活を少し楽にするために何か貢献する良い立場にありました。私は、すべてのニーズ、問題、提案、ブログ記事に目を通し、Quarkusで健康的でモダンなユーザーインターフェース（UI）を作成するための新しいエクステンション、Quinoa（Quarkus UI with NO HAssle : の略）を考え出しました。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:46
msgid "Quinoa is taking care of hiding all the tasks around Web UI build/wiring/live-config to let you take care of your web application logic. Whether you create a full-stack Single Page Application or Microservice (micro-frontend); things are made easier for you."
msgstr "Quinoaは、Web UIのビルド/結合/ライブ設定にまつわるすべてのタスクを隠蔽し、Webアプリケーションのロジックに専念できるようにします。フルスタックのシングルページアプリケーションやマイクロサービス（マイクロフロントエンド）を作成する場合でも、物事をより簡単にすることができます。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:48
msgid "Node.js has great tooling to create modern frontend web applications. Quarkus has a broad ecosystem to build reliable modern backends in the cloud (microservices, rest, DBs, events, cloud native…). Quinoa is the glue to get the best of both worlds."
msgstr "Node.jsには、モダンなフロントエンドのWebアプリケーションを作成するための優れたツールがあります。Quarkusには、クラウドで信頼性の高いモダンなバックエンドを構築するための幅広いエコシステムがあります（マイクロサービス、レスト、DB、イベント、クラウド・ネイティブ...）。Quinoaは、この2つの世界の長所を得るための接着剤です。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:50
msgid "The only prerequisite for the NodeJS project to be compatible with Quinoa is to have a `build` script. It should produce static files in a specific directory (index.html, javascript, css, ...). Since teams can be different, to make everyone happy, it is possible to either have the web UI in the Quarkus project (default is `src/main/webui`) or outside (as long as it is available on the disk at build time)."
msgstr "NodeJSプロジェクトがQuinoaと互換性を持つための唯一の前提条件は、 `build` スクリプトを持っていることです。これは、特定のディレクトリに静的なファイル（index.html、javascript、css、...）を生成する必要があります。チームはさまざまなので、全員が満足できるように、ウェブUIをQuarkusプロジェクト内（デフォルトは `src/main/webui` ）または外（ビルド時にディスク上で利用可能である限り）に置くことが可能です。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:52
msgid "It is not necessary (but possible) to https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#package-manager[configure the package manager] (NPM, Yarn or PNPM), it will be auto-detected depending on the project lockfile."
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#package-manager[パッケージマネージャ] （NPM、Yarn、PNPM）を link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#package-manager[設定] する必要はありません（可能です）。プロジェクトのロックファイルによって自動的に検出されます。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:54
msgid "Quinoa will take care of the generated UI static files. During the Quarkus build, they will be bundled in the jar or native binary. At runtime, they will be served as efficiently as any other static resource in Quarkus. UI developers were also asking to enable Single Page App routing, it is now just a https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#spa-routing[boolean configuration]."
msgstr "生成されたUI静的ファイルは、Quinoaで処理されます。Quarkusのビルド時に、jarまたはネイティブバイナリにバンドルされます。実行時には、Quarkusの他の静的リソースと同じように効率的に提供されます。UI開発者は、シングルページアプリのルーティングを有効にするよう求めていましたが、現在は link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#spa-routing[ブール値で設定] するだけです。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:56
msgid ""
"Now, what about live coding? It’s a popular feature of Quarkus and most NodeJS UI frameworks already have such a mode.\n"
"Quinoa provides two options:"
msgstr "さて、ライブコーディングはどうでしょうか。これはQuarkusの人気機能で、ほとんどのNodeJS UIフレームワークにはすでにこのようなモードがあります。Quinoaには2つのオプションがあります。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:59
msgid "Delegate to the UI live coding server. https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#dev-server[You configure the port of the UI server]. By convention Quinoa will call the `start` script from the package.json to start the UI server process. Then it will transparently proxy relevant requests to the given port."
msgstr "UIライブコーディングサーバーに委譲。 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/#dev-server[UIサーバーのポートを設定] します。慣習として、Quinoa は UI サーバープロセスを開始するために package.json から `start` スクリプトを呼び出します。その後、指定されたポートに関連するリクエストを透過的にプロキシします。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:60
msgid "Quarkus watches the files and Quinoa triggers a new Web UI build on changes (you can configure different builds for dev and prod)."
msgstr "Quarkusがファイルを監視し、Quinoaは変更時に新しいWeb UIビルドをトリガー（devとprodで異なるビルドを構成することができます）。"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:62
msgid "Either way, when starting Quarkus dev-mode your Web UI will be served seamlessly (by default on http://0.0.0.0:8080). Both are viable options and allow you to live-code on both backend and frontend at the same time with close to no setup! Pretty awesome right?"
msgstr "どちらの方法でも、Quarkusのdevモードを起動すると、Web UIがシームレスに提供されます（デフォルトでは http://0.0.0.0:8080 ）。どちらも実行可能なオプションで、バックエンドとフロントエンドの両方を同時にライブコーディングすることができます。かなり素晴らしいでしょう？"

#. type: Title ==
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:64
msgid "Documentation"
msgstr "ドキュメント"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:66
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/"
msgstr " https://quarkiverse.github.io/quarkiverse-docs/quarkus-quinoa/dev/ "

#. type: Title ===
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:69
msgid "Articles on modern UI development with Quarkus before Quinoa"
msgstr "Quinoa以前のQuarkusを使ったモダンUI開発に関する記事"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:71
msgid "https://quarkus.io/blog/gui-react-patternfly/[Adding Eyecandy to your Quarkus App with React and Patternfly]"
msgstr "link:https://quarkus.io/blog/gui-react-patternfly/[ReactとPatternflyでQuarkusアプリにEyecandyを追加する]"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:72
msgid "https://blog.marcnuri.com/react-quarkus-integration-using-maven[React + Quarkus integration using Maven]"
msgstr "link:https://blog.marcnuri.com/react-quarkus-integration-using-maven[Mavenを使用したReact + Quarkusの統合]"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:73
#, fuzzy
msgid "https://sgitario.github.io/quarkus-app-with-react-and-keycloak/[Quarkus App with React frontend secured with Keycloak]"
msgstr "link:https://sgitario.github.io/quarkus-app-with-react-and-keycloak/[Quarkusアプリ、ReactフロントエンドをKeycloakでセキュア化。]"

#. type: Plain Text
#: upstream/_posts/2022-05-19-quinoa-modern-ui-with-no-hassle.adoc:74
#, fuzzy
msgid "https://medium.com/quarkify/build-run-and-deploy-react-app-with-quarkus-6cc4f6074d6[Build, run and deploy React app with Quarkus]"
msgstr "link:https://medium.com/quarkify/build-run-and-deploy-react-app-with-quarkus-6cc4f6074d6[QuarkusでReactアプリをビルド、実行、デプロイする]"
