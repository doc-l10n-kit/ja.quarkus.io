msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:3
msgid "Adding Eyecandy to your Quarkus App with React and Patternfly"
msgstr "ReactとPatternflyでQuarkusアプリにEyecandyを追加する"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:4
msgid "2021-04-15"
msgstr "2021-04-15"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:5
msgid "web gui react patternfly"
msgstr "web gui react patternfly"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:6
msgid "Find out how to easily integrate the React and Patternfly GUI frameworks into your projects for development as well as production"
msgstr "ReactとPatternflyのGUIフレームワークを、開発やプロダクションのためにプロジェクトに簡単に統合する方法をご紹介します。"

#. type: YAML Front Matter
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:7
msgid "dbrintzi"
msgstr "dbrintzi"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:10
msgid "A common pattern for containerized and distributed Quarkus applications is to serve as an efficient and scalable backend for a separate frontend application.  In the Kubernetes world a frontend application could be a pure web layer pod such as React, Angular or Vue.js, delegating all REST calls to these Quarkus service layer pods."
msgstr "コンテナ化された分散型のQuarkusアプリケーションで一般的なパターンとして、別のフロントエンドアプリケーションのための効率的でスケーラブルなバックエンドとして機能することがあります。Kubernetesの世界では、フロントエンドアプリケーションはReact、Angular、Vue.jsなどの純粋なウェブレイヤーPodであり、すべてのRESTコールをQuarkusのサービスレイヤーPodに委ねることができます。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:15
msgid "While this approach has the benefit of independent container scaling as well as an independent lifecycle it may sometimes be over engineered for small applications."
msgstr "このアプローチには、独立したコンテナのスケーリングと独立したライフサイクルという利点がありますが、小規模なアプリケーションには過剰なエンジニアリングとなる場合があります。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:17
#, fuzzy
msgid "Perhaps you just want to create a small self-contained CRUD application without compromising in modern web GUI technologies?  We have seen how to achieve this with https://quarkus.io/blog/quarkus-and-web-ui-development-mode/[Angular] but what about React which at least according to GitHub stars has surpassed Angular in terms of popularity?  It is all about choice and I will show you how you can not only integrate React but also use a web component framework called https://www.patternfly.org/[Patternfly].  Patternfly is a collection of patterns, components and styles for creating rich, consistent and interactive GUIs."
msgstr "おそらくあなたは、最新のウェブGUI技術で妥協することなく、小さな自己完結型のCRUDアプリケーションを作りたいだけなのではないでしょうか？ link:https://quarkus.io/blog/quarkus-and-web-ui-development-mode/[Angularで] これを実現する方法を見てきましたが、少なくともGitHubのスターによれば、人気という点ではAngularを凌駕しているReactはどうでしょうか？Reactを統合するだけでなく、 link:https://www.patternfly.org/[Patternflyという] ウェブ・コンポーネント・フレームワークを使う方法を紹介しよう。Patternflyは、リッチで一貫性のあるインタラクティブなGUIを作成するためのパターン、コンポーネント、スタイルのコレクションです。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:19
msgid "Let's create a Quarkus App with a REST endpoint that serves atomic particle objects to be displayed in a React/Patternfly table.  The sourcecode for the final application can be found https://github.com/nexus-Six/quarkus-gui-react-patternfly[here]."
msgstr "React/Patternflyのテーブルに表示される原子パーティクルオブジェクトを提供するRESTエンドポイントを持つQuarkus Appを作成してみましょう。最終的なアプリケーションのソースコードは link:https://github.com/nexus-Six/quarkus-gui-react-patternfly[こちら]にあります。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:21
msgid "Step 1 - Generate the Quarkus Project"
msgstr "ステップ1 - Quarkusプロジェクトの生成"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:23
msgid "To generate a starter project go to https://code.quarkus.io. Enter 'io.quarkus' as Maven Group and 'quarkus-react' as Artifact.  In the list of extensions choose *RESTEasy JAX-RS* and *RESTEasy JSON-B*. Then generate and download the project, unzip it on your local machine and open the project folder in your favorite IDE."
msgstr "スタータープロジェクトを生成するには、 https://code.quarkus.io  にアクセスします。Maven Groupとして \"io.quarkus\" 、Artifactとして \"quarkus-react\" を入力します。エクステンションのリストで、 *RESTEasy JAX-RS* と *RESTEasy JSON-B* を選択します。その後、プロジェクトを生成してダウンロードし、ローカル・マシンで解凍して、お気に入りのIDEでプロジェクト・フォルダを開きます。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:25
msgid "Step 2 - Add the Quarkus REST Endpoint"
msgstr "ステップ2 - Quarkus RESTエンドポイントの追加"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:27
msgid "In the Java package folder /src/main/java/io/quarkus where the sample *GreetingResource.java* resides, create a new bean class called *Particle.java* with the following content:"
msgstr "サンプルの *GreetingResource.java* が存在するJavaパッケージフォルダ/src/main/java/io/quarkusに、 *Particle.java* という名前の新しいBeanクラスを以下の内容で作成します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:50
msgid "Now create a new REST resource class called *ParticleResource.java* where we return some test particles (neglecting any atomic physics implications here)."
msgstr "ここで、 *ParticleResource.java* という新しいRESTリソースクラスを作成し、いくつかのテストパーティクルを返します（ここでは原子物理学的な意味合いは無視します）。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:83
msgid "Test if everything works by starting up Quarkus in dev mode:"
msgstr "開発モードでQuarkusを起動して、すべてが動作するかどうかをテストします。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:90
msgid "In a new terminal call the endpoint to see your particle response:"
msgstr "新しい端末で、エンドポイントを呼び出して、パーティクルの応答を確認します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:99
msgid "Our Quarkus data layer is now ready, so let's create the React GUI next."
msgstr "Quarkusのデータレイヤーの準備ができたので、次はReactのGUIを作りましょう。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:101
msgid "Step 3 - Generate the React Project"
msgstr "ステップ3 - Reactプロジェクトの生成"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:103
msgid "Make sure you have installed *Node.js* and *npm* on your system.  Refer to the https://nodejs.org/en/download/[official documentation] for more information if required."
msgstr "お使いのシステムに *Node.js* と *npm* がインストールされていることを確認してください。必要に応じて、 link:https://nodejs.org/en/download/[公式ドキュメント]を参照してください。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:105
msgid "Create a new folder in your project /src/main/*webapp* which will be the base folder for your React project. Now open another terminal in this folder, run the React project initializer and then add the Patternfly node module:"
msgstr "プロジェクト内に新しいフォルダ/src/main/ *webapp* を作成し、これをReactプロジェクトのベースフォルダとします。このフォルダで別のターミナルを開き、Reactプロジェクトイニシャライザを実行して、Patternfly Nodeモジュールを追加します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:113
msgid "When starting the React app it will run on port 3000 by default. When we then try to access our Quarkus endpoint on port 8080 the browser will prevent this due to https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[CORS security policies].  In production this will not matter as the compiled static React app will be served from Quarkus over port 8080 as well but during development this is an issue."
msgstr "Reactアプリを起動すると、デフォルトではポート3000で実行されます。その後、ポート8080でQuarkusのエンドポイントにアクセスしようとすると、 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[CORSセキュリティポリシー]のためにブラウザがこれを阻止します。本番環境では、コンパイルされた静的なReactアプリがポート8080でQuarkusから提供されるため、これは問題になりませんが、開発中はこれが問題になります。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:115
msgid "Fortunately React has a neat little feature called *proxy* which forwards all requests for unknown endpoints to another URL. In the */webapp* folder open the file *package.json* and add the proxy line forwarding everything to our Quarkus port on 8080:"
msgstr "幸いなことに、Reactには未知のエンドポイントへのすべてのリクエストを別のURLに転送する *proxy* というちょっとした機能があります。 *webapp* フォルダで *package.json* ファイルを開き、proxyの行を追加して、すべてのリクエストをQuarkusのポート8080に転送します。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:161
msgid "Step 4 - Create a Patternfly Table Component to Populate with our Data"
msgstr "ステップ4 - Patternflyのテーブルコンポーネントを作成して、データで埋める"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:163
msgid "Import the Patternfly CSS in the React project in */webapp/src/index.js*"
msgstr "Reactプロジェクトの */webapp/index.js* にPatternflyのCSSをインポートします。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:174
msgid "In /webapp/src create a new folder called *components*, inside create a file called *particles.js* and generate a Patternfly table by looping over a list of particle objects:"
msgstr "webapp/srcに *components* という新しいフォルダを作り、その中に *particles.js* というファイルを作り、パーティクルオブジェクトのリストをループさせてPatternflyのテーブルを生成します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:207
msgid "Next adjust */webapp/src/App.js* to call our Quarkus service endpoint and render our particle component with the response data:"
msgstr "次に、 */webapp/src/App.js* を調整して、Quarkusサービスのエンドポイントを呼び出し、レスポンスデータを使ってパーティクルコンポーネントをレンダリングします。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:238
msgid "We are now ready to test our GUI in React development mode."
msgstr "これで、Reactの開発モードでGUIをテストする準備が整いました。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:240
msgid "Make sure Quarkus is still running in another terminal."
msgstr "別のターミナルでQuarkusがまだ起動していることを確認します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:242
msgid "In the */webapp* folder execute :"
msgstr "*/webapp* フォルダ内で実行します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:249
msgid "A browser will open to http://localhost:3000.  If not navigate to that URL.  You should see our table dynamically populated from your Quarkus particle backend.  In the developer tools of your browser you will see that the data is actually retrieved from http://localhost:3000/particles"
msgstr "ブラウザで http://localhost:3000 を開きます。開かない場合は、そのURLに移動してください。Quarkusのパーティクルバックエンドからテーブルが動的に入力されているのがわかると思います。ブラウザの開発者ツールでは、データが実際に http://localhost:3000/particles から取得されていることがわかります。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:253
msgid "We are running in a double developer mode now. Any changes made to either your Java or Javascript code will be applied immediately.  Isn't that developer bliss?"
msgstr "現在、ダブルデベロッパーモードで運用しています。JavaとJavascriptのどちらかのコードに加えられた変更は、すぐに適用されます。これは開発者にとって至福の時ではないでしょうか。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:255
msgid "But what about containerized deployment you ask? Well, once your shiny new GUI app is ready for primetime there are some last adjustments that we need to build runnable jars and images."
msgstr "しかし、コンテナを使ったデプロイについてはどうでしょうか？新しいGUIアプリが完成したら、実行可能なjarやイメージを作成するために、いくつかの調整が必要になります。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:257
msgid "Step 5 - Prepare our Project for Production Build"
msgstr "ステップ5 - プロジェクトの本番ビルドへの準備"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:259
msgid "In */webapp/package.json* add a prod build phase:"
msgstr "*webapp/package.json* にprodのビルドフェーズを追加:"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:270
msgid "This will do a production build of the static React assets and copy them over into the default Quarkus directory for static files."
msgstr "これにより、静的なReactアセットのプロダクションビルドが行われ、Quarkusのデフォルトの静的ファイル用ディレクトリにコピーされます。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:272
msgid "The rsync command is specific for Linux.  For other operating systems please substitute with an equivalent command."
msgstr "rsyncコマンドは、Linux専用です。他のOSの場合は、同等のコマンドで代用してください。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:274
msgid "For the last step we will add the excellent https://github.com/eirslett/frontend-maven-plugin[frontend-maven-plugin] to our pom.xml that will trigger these React build phases from a normal maven build. Adjust the npm and node versions to match your locally installed ones. The maven install phase would actually install these two packages which can be handy for a CI/CD build or when starting with this project."
msgstr "最後のステップでは、優れた link:https://github.com/eirslett/frontend-maven-plugin[frontend-maven-plugin]を pom.xml に追加して、通常の maven ビルドから React のビルドフェーズを起動します。npmとnodeのバージョンを、ローカルにインストールされているものに合わせて調整します。mavenのインストールフェーズでは、実際にこれらの2つのパッケージがインストールされますが、これはCI/CDビルドやこのプロジェクトの起動時に便利です。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:322
msgid "Now let's build our runnable jar:"
msgstr "それでは、実行可能なjarをビルドしてみましょう。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:327
msgid "Stop all other running environments to free up the ports and run:"
msgstr "他の稼働中の環境をすべて停止してポートを空け、実行します。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:334
msgid "Open your browser to http://localhost:8080 to see you table again, now running from a single optimized Quarkus jar."
msgstr "ブラウザで http://localhost:8080 を開くと、最適化された単一のQuarkus jarから実行されているテーブルが表示されます。"

#. type: Title ==
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:336
msgid "Take Away"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:338
msgid "There you go. With just a few easy steps you can use the power of React and Patternfly to add slick looking interactive GUIs to your Quarkus apps."
msgstr "いくつかの簡単なステップで、ReactとPatternflyの力を使って、Quarkusアプリに洗練された見た目のインタラクティブなGUIを追加することができます。"

#. type: Plain Text
#: upstream/_posts/2021-04-15-gui-react-patternfly.adoc:340
#, fuzzy
msgid "How about compiling this app to https://quarkus.io/guides/building-native-image[native] next to deploy an extremely lightweight webapp? Or you may want to look at some of other https://www.patternfly.org/v4/get-started/develop/[Patternfly components] to create a more sophisticated web interface. Either way there no boundaries except for your creativity to make you Quarkus apps shine."
msgstr "このアプリを次に link:https://quarkus.io/guides/building-native-image[ネイティブに] コンパイルして、非常に軽量なウェブアプリをデプロイするのはどうでしょうか？あるいは、より洗練されたウェブインターフェースを作成するために、他の link:https://www.patternfly.org/v4/get-started/develop/[Patternflyコンポーネントに] 目を向けるのもよいでしょう。いずれにせよ、Quarkusアプリを輝かせるために、あなたの創造性以外に境界はありません。"
