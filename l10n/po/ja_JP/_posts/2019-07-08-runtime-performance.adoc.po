msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-08-runtime-performance.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-08-runtime-performance.adoc:3
#, fuzzy
msgid "2019-07-08 00:00 +0100"
msgstr "2019-07-08 00:00 +0100"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-08-runtime-performance.adoc:4
msgid "johara"
msgstr "johara"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-08-runtime-performance.adoc:5
#, fuzzy
msgid "performance"
msgstr "パフォーマンス"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-08-runtime-performance.adoc:6
#, fuzzy
msgid "Quarkus has so far been focused on start-up time and memory footprint, but runtime performance is important as well. Find out how well Quarkus performs in both Native and JVM modes."
msgstr "Quarkusはこれまで、起動時間とメモリフットプリントに重点を置いてきましたが、ランタイムパフォーマンスも重要です。QuarkusがNativeモードとJVMモードの両方でどの程度のパフォーマンスを発揮するか、ご確認ください。"

#. type: Title =
#: upstream/_posts/2019-07-08-runtime-performance.adoc:9
#, fuzzy
msgid "Quarkus Runtime Performance"
msgstr "Quarkusのランタイムパフォーマンス"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:12
#, fuzzy
msgid "This the first part of a blog series that delves deeper into Quarkus performance.  There are many aspects to the performance of a framework from bootstrap time to memory usage, compile time and runtime performance."
msgstr "今回は、Quarkusのパフォーマンスについて深く掘り下げるブログシリーズの第一弾です。フレームワークのパフォーマンスには、起動時間からメモリ使用量、コンパイル時、実行時のパフォーマンスまで、多くの側面があります。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:14
#, fuzzy
msgid "The definition of _\"performance\"_ is contextual and these series of blog posts aims to investigate the performance of Quarkus in varying contexts."
msgstr "_パフォーマンス_ 」の定義は文脈に左右されるものであり、この一連のブログ記事は、さまざまな文脈におけるQuarkusのパフォーマンスを調査することを目的としています。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:16
#, fuzzy
msgid "This article will focus on **runtime performance** of applications built with Quarkus."
msgstr "この記事では、Quarkusで構築されたアプリケーションの *ランタイムパフォーマンスに* 焦点を当てます。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:59
#, fuzzy
msgid "tl;dr - Summary"
msgstr "tl;dr - まとめ"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:61
#, fuzzy
msgid "A REST application that retrieves data from a postgres database using transactions was created to compare the throughput and response latencies of Quarkus and Thorntail.  The application was put under varying degrees of load, to demonstrate how Quarkus scales."
msgstr "QuarkusとThorntailのスループットと応答遅延を比較するために、トランザクションを使用してPostgresデータベースからデータを取得するRESTアプリケーションを作成しました。Quarkusのスケールを実証するため、アプリケーションはさまざまな負荷にさらされました。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:63
#, fuzzy
msgid "Quarkus running in native mode, supporting 40 concurrent connections, has shown to provide up to an {quarkusNativeMaxThroughputIncrease}% increase in maximum throughput whilst reducing maximum response time latencies by up to {quarkusnativemaxresponsetimereduction}% compared to Thorntail for a single process."
msgstr "Quarkusをネイティブモードで実行し、40の同時接続をサポートすることで、最大スループットが最大{quarkusNativeMaxThroughputIncrease}%増加し、最大応答時間のレイテンシーがシングルプロセスのThorntailと比較して最大{quarkusnativemaxresponsetimereduction}%減少することが示されています。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:65
#, fuzzy
msgid "Quarkus running in JVM mode, supporting 40 concurrent connections, has shown to provide up to an {quarkusJvmMaxThroughputIncrease}% increase in maximum throughput whilst reducing maximum response time latencies by up to {quarkusJvmmaxresponsetimereduction}% compared to Thorntail, for a single process."
msgstr "JVMモードで動作するQuarkusは、40の同時接続をサポートし、最大スループットを最大{quarkusJvmMaxThroughputIncrease}%向上させ、最大応答時間の待ち時間をThorntailと比べて最大{quarkusJvmaxresponsetimereduction}%低減することが示されている（単一プロセス）。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:67
#, fuzzy
msgid "Quarkus running on the JVM provides improved throughput and response time compared to Native mode for a single process, but uses up to {2gQuarkusJvmMaxCompareThorntail}% more memory (RSS)."
msgstr "JVM上で動作するQuarkusは、単一プロセスのNativeモードと比較してスループットと応答時間が向上しますが、最大{2gQuarkusJvmMaxCompareThorntail}%多くのメモリを使用します（RSS）。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:69
#, fuzzy
msgid "For applications running in containers, constrained to 2048MB of RAM, it is theoretically possible to improve application throughput by up to *{2gQuarkusJvmMaxCompareThorntailIncrease}%* by running multiple instances of a Quarkus application in JVM mode, or *{2gQuarkusNativeMaxCompareThorntailIncrease}%* running multiple Quarkus instances in Native mode, compared to a Thorntail application."
msgstr "2048MBのRAMに制限されたコンテナで実行するアプリケーションの場合、Quarkusアプリケーションの複数のインスタンスをJVMモードで実行すると、理論的にはThorntailアプリケーションに比べて最大 *{2gQuarkusJvmMaxCompareThorntailIncrease}%、* 複数のQuarkusインスタンスをネイティブモードで実行すると *{2gQuarkusNativeMaxCompareThorntailIncrease}%まで* アプリケーションスループットを向上できることがあります。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:71
#, fuzzy
msgid "Native images are **not just** for short running processes. The tests ran for up to 3 hours, without process restarts, and the native image served over *{quarkusNativeNumberRequestsMillion} MILLION* requests!"
msgstr "ネイティブイメージは、短時間で動作するプロセスの *ためだけの* ものではありません。テストでは、プロセスの再起動なしに最大3時間実行し、ネイティブイメージは *{quarkusNativeNumberRequestsMillion}* 以上のサービスを提供しました。 *MILLION* リクエスト！"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:73
#, fuzzy
msgid "**One size does not fit all! Quarkus gives you the option to scale up in JVM mode if you need a single instance with a larger heap, or scale out in Native mode if you need more, lighter-weight instances**"
msgstr "*1つのサイズですべてに対応できるわけではありません！Quarkusでは、より大きなヒープを持つ単一のインスタンスが必要な場合はJVMモードでスケールアップし、より多くの軽量インスタンスが必要な場合はネイティブモードでスケールアウトすることができます。*"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:75
#, fuzzy
msgid "Elephant in the Room"
msgstr "エレファント・イン・ザ・ルーム"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:77
#, fuzzy
msgid "*\"It's all well and good optimizing for bootstrap start-up times and image size, but response time is still important\"*."
msgstr "*「ブートストラップの起動時間や画像サイズを最適化するのは良いことだが、やはりレスポンスタイムは重要* だ」。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:79
#, fuzzy
msgid "Let us first address the elephant in the room, Quarkus has so far been focused on start-up time and Memory Footprint."
msgstr "Quarkusはこれまで、スタートアップ時間とメモリーフットプリントに重点を置いてきました。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:81
#, fuzzy
msgid "*\"That's because native performance sucks right?!\"* _Wrong!_"
msgstr "*\"それはネイティブのパフォーマンスが最悪だからでしょ？\"* _それは違う！_"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:83
#, fuzzy
msgid "By running a sample application, retrieving data from a PostgreSQL database via transactional REST HTTP requests, I will address"
msgstr "PostgreSQLデータベースからトランザクションREST HTTPリクエストでデータを取得するサンプルアプリケーションを実行することで、次のことに取り組みます。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:85
#, fuzzy
msgid "Single process Throughput and Reponse Time in Native mode and JVM mode, compared to Thorntail"
msgstr "NativeモードとJVMモードにおけるシングルプロセスのスループットと応答時間（Thorntailとの比較"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:86
#, fuzzy
msgid "Native images for long running processes"
msgstr "長時間動作するプロセスのネイティブイメージ"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:88
#, fuzzy
msgid "Details of the application and test methodology can be found at the end of this post in the <<Test Application>> section."
msgstr "アプリケーションとテスト方法の詳細は、この記事の最後、 <<Test Application>> のセクションに記載されています。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:90
#, fuzzy
msgid "What does Quarkus give you?"
msgstr "Quarkusは何をくれるのですか？"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:92
#, fuzzy
msgid "Quarkus provides you with a choice of 2 run modes.  You can either run as a native binary *or* as bytecode on a JVM."
msgstr "Quarkusでは、2つの実行モードを選択することができます。ネイティブバイナリとして実行 *するか、* JVM上のバイトコードとして実行するかです。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:94
#, fuzzy
msgid "That means you can choose the runtime that meets *your* needs for *your* application. If a native image doesn't give you what you need, no problem, choose your favourite JVM."
msgstr "つまり、 *アプリケーションの* ニーズを満たすランタイムを選択できるのです。ネイティブイメージで必要なものが得られない場合でも、問題ありません、お気に入りのJVMを選んでください。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:96
#, fuzzy
msgid "But don't think that running on the JVM is a second rate citizen, Quarkus is optimized for running on the JVM as well as in native mode"
msgstr "Quarkusは、ネイティブモードだけでなく、JVM上で動作するように最適化されています。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:98
#, fuzzy
msgid "Why compare with Thorntail?"
msgstr "ソーンテールと比較する理由は？"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:100
#, fuzzy
msgid "Thorntail is a more traditional cloud-native stack that has its base from the WildFly community and we decided that it's fair to compare with a runtime that we know how to optimize. The point of this performance test is not to compare frameworks vs framework, but to show that the optimizations done in Quarkus goes beyond just startup time and initial memory consumption. Thorntail is a great runtime, but just like other traditional cloud-native stacks the runtime dynamics behavior that wasn't a concern on a standalone deployment is turning out to be a cause of significant overhead for modern deployment scenarios."
msgstr "Thorntailは、WildFlyコミュニティから基盤を得た、より伝統的なクラウドネイティブスタックで、私たちは、最適化する方法を知っているランタイムと比較するのが公正だと判断しました。このパフォーマンステストのポイントは、フレームワークとフレームワークを比較することではなく、Quarkusで行われた最適化が、起動時間や初期メモリ消費量だけではないことを示すことにあります。Thorntailは素晴らしいランタイムですが、他の伝統的なクラウドネイティブスタックと同様に、スタンドアロンでは気にならなかったランタイムダイナミクス動作が、最新のデプロイシナリオでは大きなオーバーヘッドの原因となることが判明しています。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:102
#, fuzzy
msgid "Throughput (Req/Sec)"
msgstr "スループット（Req/Sec）"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:104
#, fuzzy
msgid "Maximum throughput, measured in requests per second (Req/Sec) tells us the maximum number of request the single process application can service per second.  The higher the maximum throughput, the better."
msgstr "最大スループットは、1秒あたりのリクエスト数（Req/Sec）で測定され、単一プロセスのアプリケーションが1秒間に処理できるリクエストの最大数を示します。最大スループットは高ければ高いほどよい。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:106
#, fuzzy
msgid "Comparing a native Quarkus application to Thorntail running on a JVM, the maximum throughput is consistent as the number of concurrent users increases."
msgstr "QuarkusのネイティブアプリケーションとJVM上で動作するThorntailを比較すると、最大スループットは、同時使用ユーザー数が増加しても一貫しています。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:110
#, fuzzy
msgid "**Quarkus {quarkusVersion}, running a single instance in Native mode with 40 concurrent connections, provides a {quarkusNativeMaxThroughputIncrease}% increase in maximum throughput compared to Thorntail {thorntailVersion} running on the JVM**."
msgstr "*Quarkus{quarkusVersion}をNativeモードで単一インスタンスを40同時接続で実行すると、JVM上で実行するThorntail{thorntailVersion}と比較して、最大スループットが{quarkusNativeMaxThroughputIncrease}%向上* します。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:115
#, fuzzy
msgid "**Quarkus {quarkusVersion}, running a single instance in JVM mode with 40 concurrent connections, out-performs Thorntail {thorntailVersion} by {quarkusJvmMaxThroughputIncrease}%**."
msgstr "*Quarkus{quarkusVersion}は、JVMモードで単一インスタンスを40の同時接続で実行しており、Thorntail{thorntailVersion}よりも{quarkusJvmMaxThroughputIncrease}%性能が優れて* います。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:225
msgid "{sp}"
msgstr "{sp}"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:119
#, fuzzy
msgid "Maximum throughput (req/sec) as a function of concurrent users"
msgstr "最大スループット（req/sec）を同時接続ユーザーの数で表したものです。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:123
#, fuzzy
msgid "Maximum Throughput (Req/Sec)"
msgstr "最大スループット（Req/秒）"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
#, fuzzy
msgid "Concurrent Connections"
msgstr "コンカレントコネクション"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "Thorntail"
msgstr "Thorntail"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "Quarkus - Native"
msgstr "Quarkus - Native"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "Quarkus - JVM"
msgstr "Quarkus - JVM"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "1"
msgstr "1"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:127
msgid "3,273"
msgstr "3,273"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:127
msgid "3,316"
msgstr "3,316"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:127
msgid "5,138"
msgstr "5,138"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "5"
msgstr "5"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:128
msgid "14,092"
msgstr "14,092"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:128
msgid "14,998"
msgstr "14,998"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:128
msgid "24,417"
msgstr "24,417"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "10"
msgstr "10"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:129
msgid "25,512"
msgstr "25,512"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:129
msgid "26,328"
msgstr "26,328"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:129
msgid "44,196"
msgstr "44,196"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "15"
msgstr "15"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:130
msgid "31,855"
msgstr "31,855"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:130
msgid "33,389"
msgstr "33,389"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:130
msgid "59,007"
msgstr "59,007"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "20"
msgstr "20"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:131
msgid "35,006"
msgstr "35,006"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:131
msgid "36,515"
msgstr "36,515"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:131
msgid "69,146"
msgstr "69,146"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "25"
msgstr "25"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:132
msgid "37,082"
msgstr "37,082"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:132
msgid "38,416"
msgstr "38,416"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:132
msgid "73,790"
msgstr "73,790"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "30"
msgstr "30"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:133
msgid "33,369"
msgstr "33,369"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:133
msgid "38,849"
msgstr "38,849"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:133
msgid "76,992"
msgstr "76,992"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "35"
msgstr "35"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:134
msgid "32,974"
msgstr "32,974"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:134
msgid "41,691"
msgstr "41,691"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:134
msgid "77,118"
msgstr "77,118"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "40"
msgstr "40"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:135
msgid "32,391"
msgstr "32,391"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:135
msgid "44,841"
msgstr "44,841"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:135
msgid "76,488"
msgstr "76,488"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:138
msgid "Response Times (ms)"
msgstr "Response Times (ms)"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:140
#, fuzzy
msgid "I would like to start this section with the statement that **\"Everything You Know About Latency Is Wrong\"** footnote:[https://bravenewgeek.com/everything-you-know-about-latency-is-wrong/]"
msgstr "この項では、 *「Everything You Know About Latency Is Wrong」* [ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"]]という言葉から始めたいと思います。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:142
#, fuzzy
msgid "Response time is a measure of the time it takes for the application to respond to a request. The lower the response time, the better. But mean response time is not the overall picture of application responsiveness.  Maximum response time tells us more about user experience than mean response time."
msgstr "レスポンスタイムは、アプリケーションがリクエストに応答するのにかかる時間を示す指標です。レスポンスタイムは低いほど良い。しかし、平均レスポンスタイムはアプリケーションの応答性の全体像ではありません。最大応答時間は、平均応答時間よりもユーザーエクスペリエンスについてより多くのことを教えてくれます。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:144
#, fuzzy
msgid "Why is this important?  **Maximum response time tells us the worst case scenario, and between 26-93% of page loads will experience the 99th centile response time footnote:[https://bravenewgeek.com/everything-you-know-about-latency-is-wrong/].  Having a super low, super stable maximum response latency increases application responsiveness.**"
msgstr "なぜこれが重要なのでしょうか？ *最大レスポンスタイムは最悪のシナリオを示し、ページロードの26～93%は99%のレスポンスタイムを経験します<sup class=\"footnote\">[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ]</sup>。超低速で超安定した最大応答待ち時間を持つことは、アプリケーションの応答性を高めます。*"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:146
#, fuzzy
msgid "Under high numbers of concurrent users; Mean response time for Quarkus in JVM mode is {quarkusJvmMeanResponseTime40}ms vs {thorntailMeanResponseTime40}ms for Thorntail. When running in Native mode, mean response time shifts to {quarkusNativeMeanResponseTime40}ms in exchange for the lower memory utilization."
msgstr "多数の同時ユーザーがいる場合、JVMモードのQuarkusの平均応答時間は{quarkusJvmMeanResponseTime40}ms、Thorntailの平均応答時間は{thorntailMeanResponseTime40}msとなりました。ネイティブモードで実行すると、メモリ使用率が下がる代わりに、平均応答時間は{quarkusNativeMeanResponseTime40}msにシフトします。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:148
#, fuzzy
msgid "If we look at the Maximum response time; Thorntail took {thorntailMaxResponseTime}ms to service at least one request, compared to {quarkusJvmMaxResponseTime}ms for Quarkus JVM and {quarkusNativeMaxResponseTime}ms for Quarkus Native."
msgstr "最大応答時間を見ると、Thorntailは少なくとも1つのリクエストを処理するのに{thorntailMaxResponseTime}msかかり、Quarkus JVMの{quarkusJvmMaxResponseTime}ms、Quarkus Nativeの{quarkusNativeMaxResponseTime}msと比較されました。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:152
#, fuzzy
msgid "The maximum response time for Quarkus in native mode is super-stable and up to {quarkusNativeMaxResponseTimeReduction}% lower than Thorntail."
msgstr "Quarkusのネイティブモードでの最大応答時間は超安定で、Thorntailよりも最大{quarkusNativeMaxResponseTimeReduction}%低くなっています。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:157
#, fuzzy
msgid "The lower mean response time latencies running on the JVM are due to the GC implementations available in the JVM are superior to the GC implementation currently available in GraalVM. Quarkus is currently still a Beta release, and improvements are planned for running in native mode"
msgstr "JVM上で動作する平均応答時間レイテンシーが低いのは、JVMで利用可能なGC実装が、現在GraalVMで利用可能なGC実装よりも優れているためです。Quarkusは現在まだベータリリースであり、ネイティブモードで実行するための改良が予定されています。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:161
#, fuzzy
msgid "Mean Response Time (ms) as a function of concurrent users"
msgstr "同時接続ユーザー数の関数としての平均応答時間(ms)"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:165
#, fuzzy
msgid "Maximum Response Time (ms) as a function of concurrent users"
msgstr "同時接続ユーザー数による最大応答時間（ms）の推移"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:169
msgid "Response Time (ms)"
msgstr "Response Time (ms)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Thorntail (mean)"
msgstr "Thorntail (mean)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Thorntail (max)"
msgstr "Thorntail (max)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Quarkus - Native (mean)"
msgstr "Quarkus - Native (mean)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Quarkus - Native (max)"
msgstr "Quarkus - Native (max)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Quarkus - JVM (mean)"
msgstr "Quarkus - JVM (mean)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:172
msgid "Quarkus - JVM (max)"
msgstr "Quarkus - JVM (max)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "0.324"
msgstr "0.324"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "9.31"
msgstr "9.31"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "0.327"
msgstr "0.327"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "6.13"
msgstr "6.13"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "0.196"
msgstr "0.196"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:173
msgid "9.52"
msgstr "9.52"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "0.461"
msgstr "0.461"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "13.12"
msgstr "13.12"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "0.494"
msgstr "0.494"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "9.86"
msgstr "9.86"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "0.232"
msgstr "0.232"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:174
msgid "13.85"
msgstr "13.85"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "0.53"
msgstr "0.53"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "11.3"
msgstr "11.3"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "0.698"
msgstr "0.698"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "14.24"
msgstr "14.24"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "0.278"
msgstr "0.278"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:175
msgid "16.08"
msgstr "16.08"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "0.842"
msgstr "0.842"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "145.16"
msgstr "145.16"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "0.91"
msgstr "0.91"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "14.86"
msgstr "14.86"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "0.334"
msgstr "0.334"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:176
msgid "18.38"
msgstr "18.38"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "1.02"
msgstr "1.02"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "134.9"
msgstr "134.9"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "1.15"
msgstr "1.15"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "16.4"
msgstr "16.4"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "0.389"
msgstr "0.389"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:177
msgid "23.7"
msgstr "23.7"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "1.2"
msgstr "1.2"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "145.3"
msgstr "145.3"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "1.3"
msgstr "1.3"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "16.86"
msgstr "16.86"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "0.472"
msgstr "0.472"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:178
msgid "21.25"
msgstr "21.25"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "1.26"
msgstr "1.26"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "34.87"
msgstr "34.87"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "1.69"
msgstr "1.69"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "26.52"
msgstr "26.52"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "0.545"
msgstr "0.545"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:179
msgid "83.27"
msgstr "83.27"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "1.35"
msgstr "1.35"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "30.94"
msgstr "30.94"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "1.84"
msgstr "1.84"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "65.01"
msgstr "65.01"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "0.78"
msgstr "0.78"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:180
msgid "32.9"
msgstr "32.9"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "143.49"
msgstr "143.49"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "2.43"
msgstr "2.43"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "48.37"
msgstr "48.37"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:181
msgid "63.71"
msgstr "63.71"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:184
#, fuzzy
msgid "Application Start Time"
msgstr "応募開始時間"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:186
#, fuzzy
msgid "start-up times and memory usage were measured for each runtime using the method described here https://quarkus.io/guides/performance-measure"
msgstr "起動時間とメモリ使用量は、ここに記載された方法で各実行時間について測定されました https://quarkus.io/guides/performance-measure"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:190
#, fuzzy
msgid "Metric"
msgstr "メートル"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:191
#, fuzzy
msgid "Start Time"
msgstr "開始時間"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:191
#, fuzzy
msgid "{thorntailStartTime} ms"
msgstr "{ソーンテール開始時間} ms"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:191
#, fuzzy
msgid "{quarkusNativeStartTime} ms"
msgstr "{quarkusNativeStartTime}ミリ秒"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:191
msgid "{quarkusJvmStartTime} ms"
msgstr "{quarkusJvmStartTime} ms"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:195
msgid "Maximum Memory Usage"
msgstr "Maximum Memory Usage"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:197
#, fuzzy
msgid "Memory for each application process was measured with `ps`"
msgstr "各アプリケーション・プロセスのメモリは `ps`"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:202
msgid "The maximum memory usage during the runs was captured."
msgstr "The maximum memory usage during the runs was captured."

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:207
msgid "{thorntailRSS} MB"
msgstr "{thorntailRSS} MB"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:207
msgid "{quarkusJvmRSS} MB"
msgstr "{quarkusJvmRSS} MB"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:207
msgid "{quarkusNativeRSS} MB"
msgstr "{quarkusNativeRSS} MB"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:213
#, fuzzy
msgid "Compared to Thorntail, Quarkus in native mode used only *{quarkusNativeRssCompareThorntail}%* of memory to service *{quarkusNativeThroughputCompareThorntail}% more requests* and Quarkus in JVM mode used *{quarkusJvmRssCompareThorntail}%* of memory to service *{quarkusJvmThroughputCompareThorntail}%* more requests"
msgstr "Thorntailと比較して、ネイティブモードのQuarkusは *{quarkusNativeRssCompareThorntail}%の* メモリを使用して *{quarkusNativeThroughputCompareThorntail}%のリクエストを* 処理し、JVMモードのQuarkusは *{quarkusJvmRssCompareThorntail}%の* メモリを使用して *{quarkusJvmThroughputCompareThorntail}%の* リクエストを処理した。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:216
#, fuzzy
msgid "Therefore, **using a machine with 2048MB of memory**, running more than one process (not constrained by CPU), it should be possible to achieve the following increases in throughput over Thorntail;"
msgstr "したがって、 *2048MBのメモリを* 搭載し、複数のプロセスを実行する *マシン* （CPUに制約されない）を *使用* することで、Thorntailよりも以下のスループットの向上を達成できるはずです；"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Runtime Mode"
msgstr "ランタイムモード"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Memory (MB)"
msgstr "メモリ(MB)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Number processes per 2048MB"
msgstr "2048MBあたりのプロセス数"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Max Throughput per Process (Req/Sec)"
msgstr "1プロセスあたりの最大スループット(Req/Sec)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Overall Max Throughput (Req/Sec)"
msgstr "全体の最大スループット(Req/Sec)"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:220
#, fuzzy
msgid "Compared to Thorntail"
msgstr "ソーンテイルと比較すると"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "{thorntailRSS}"
msgstr "{thorntailRSS}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "{2gThorntailMaxInstances}"
msgstr "{2gThorntailMaxInstances}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "{thorntailMaxThroughput}"
msgstr "{thorntailMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "{2gThorntailMaxThroughput}"
msgstr "{2gThorntailMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:221
msgid "{2gThorntailMaxThroughputCompareThorntail}%"
msgstr "{2gThorntailMaxThroughputCompareThorntail}%"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "{quarkusJvmRSS}"
msgstr "{quarkusJvmRSS}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "{2gQuarkusJvmMaxInstances}"
msgstr "{2gQuarkusJvmMaxInstances}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "{quarkusJvmMaxThroughput}"
msgstr "{quarkusJvmMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "{2gQuarkusJvmMaxThroughput}"
msgstr "{2gQuarkusJvmMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:222
msgid "{2gQuarkusJvmMaxCompareThorntail}%"
msgstr "{2gQuarkusJvmMaxCompareThorntail}%"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "{quarkusNativeRSS}"
msgstr "{quarkusNativeRSS}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "{2gQuarkusNativeMaxInstances}"
msgstr "{2gQuarkusNativeMaxInstances}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "{quarkusNativeMaxThroughput}"
msgstr "{quarkusNativeMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "{2gQuarkusNativeMaxThroughput}"
msgstr "{2gQuarkusNativeMaxThroughput}"

#. type: Table
#: upstream/_posts/2019-07-08-runtime-performance.adoc:223
msgid "{2gQuarkusNativeMaxThroughputCompareThorntail}%"
msgstr "{2gQuarkusNativeMaxThroughputCompareThorntail}%"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:229
#, fuzzy
msgid "For applications running in cloud environments, it is theoretically possible to improve application throughput by up to *{2gQuarkusNativeMaxCompareThorntailIncrease}%* for the same amount of memory by running multiple instances of a Quarkus application in native mode."
msgstr "クラウド環境で実行されるアプリケーションでは、Quarkusアプリケーションの複数のインスタンスをネイティブモードで実行することにより、理論的には、同じ量のメモリで最大 *{2gQuarkusNativeMaxCompareThorntailIncrease}%まで* アプリケーションスループットを改善することが可能です。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:232
#, fuzzy
msgid "Quarkus native - Long running processes"
msgstr "Quarkusネイティブ - 長時間実行中のプロセス"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:234
#, fuzzy
msgid "Another concern is that Quarkus running in native mode is not suitable for long running processes."
msgstr "また、ネイティブモードで動作するQuarkusは、長時間動作するプロセスには適さないという懸念もあります。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:239
#, fuzzy
msgid "During testing, Quarkus was running in native mode for more than 3hrs at a time, and serviced over *51,890,000* requests!"
msgstr "テスト中、Quarkusは一度に3時間以上ネイティブモードで動作し、 *51,890,000* 以上のリクエストに対応しました！"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:242
#, fuzzy
msgid "These requests caused hundreds of Full GC cycles, and the process remained stable throughout."
msgstr "これらのリクエストは何百回ものFull GCサイクルを引き起こし、プロセスは終始安定したままでした。"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:244
#, fuzzy
msgid "Test Application"
msgstr "テストアプリケーション"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:246
#, fuzzy
msgid "The test application is a Transactional REST/JPA application that makes calls to a PostgreSQL database. The application and database were both running inside a Docker container."
msgstr "テストアプリケーションは、PostgreSQLデータベースへの呼び出しを行うTransactional REST/JPAアプリケーションです。アプリケーションとデータベースは、いずれもDockerコンテナ内で実行されていました。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:248
#, fuzzy
msgid "Sources are available here: https://github.com/johnaohara/quarkusRestCrudDemo"
msgstr "ソースはこちらからご覧いただけます link:https://github.com/johnaohara/quarkusRestCrudDemo[：https://github.com/johnaohara/quarkusRestCrudDemo]"

#. type: Title ===
#: upstream/_posts/2019-07-08-runtime-performance.adoc:250
#, fuzzy
msgid "Building and Running test Application"
msgstr "テストアプリケーションの構築と実行"

#. type: Title ====
#: upstream/_posts/2019-07-08-runtime-performance.adoc:252
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:254
msgid "Docker (min v1.13.1)"
msgstr "Docker (min v1.13.1)"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:255
msgid "Maven (min 3v.5.4)"
msgstr "Maven (min 3v.5.4)"

#. type: Title ====
#: upstream/_posts/2019-07-08-runtime-performance.adoc:257
#, fuzzy
msgid "Build;"
msgstr "構築する；"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:259
#, fuzzy
msgid "Quarkus JVM"
msgstr "クオーカスJVM"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:297
#, fuzzy
msgid "or Quarkus Native"
msgstr "またはQuarkus Nativeです。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:302
#, fuzzy
msgid "or Thorntail"
msgstr "またはソーンテイル"

#. type: Title ====
#: upstream/_posts/2019-07-08-runtime-performance.adoc:279
#, fuzzy
msgid "Run;"
msgstr "走ってください；"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:281
#, fuzzy
msgid "First start PostgreSQL running in a Docker container;"
msgstr "まずDockerコンテナでPostgreSQLを起動させます；"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:291
#, fuzzy
msgid "then start the application running in a Docker container;"
msgstr "をクリックすると、Dockerコンテナで動作するアプリケーションを起動します；"

#. type: Title ====
#: upstream/_posts/2019-07-08-runtime-performance.adoc:309
#, fuzzy
msgid "Runtime validation"
msgstr "ランタイムバリデーション"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:311
#, fuzzy
msgid "Navigate browser to http://{REMOTE_HOST}:8080/"
msgstr "ブラウザを http://{REMOTE_HOST}:8080/ に移動します。"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:313
msgid "or"
msgstr "or"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:327
msgid "Runtime Performance Metrics"
msgstr "実行時パフォーマンスメトリクス"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:329
msgid "Throughput and Response Time were measured using the wrk command line tool https://github.com/wg/wrk."
msgstr "Throughput and Response Time were measured using the wrk command line tool https://github.com/wg/wrk."

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:331
#, fuzzy
msgid "A shell script for running wrk is provided;"
msgstr "wrkを実行するためのシェルスクリプトが用意されている；"

#. type: Title ==
#: upstream/_posts/2019-07-08-runtime-performance.adoc:336
msgid "Runtime Environment"
msgstr "実行環境"

#. type: Title ===
#: upstream/_posts/2019-07-08-runtime-performance.adoc:338
msgid "System Under Test"
msgstr "System Under Test"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:339
msgid "CPU: 32 x Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz"
msgstr "CPU: 32 x Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:341
msgid "Operating System: Red Hat Enterprise Linux Server release 7.6 (3.10.0-693.25.2.el7.x86_64)"
msgstr "Operating System: Red Hat Enterprise Linux Server release 7.6 (3.10.0-693.25.2.el7.x86_64)"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:343
msgid "Memory: 262GB"
msgstr "Memory: 262GB"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:345
msgid "Ethernet: Solarflare Communications SFC9020 10G Ethernet Controller"
msgstr "Ethernet: Solarflare Communications SFC9020 10G Ethernet Controller"

#. type: Title ===
#: upstream/_posts/2019-07-08-runtime-performance.adoc:347
msgid "Client system"
msgstr "Client system"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:349
msgid "CPU: 24 x Intel(R) Xeon(R) CPU E5-2640 @ 2.80GHz"
msgstr "CPU: 24 x Intel(R) Xeon(R) CPU E5-2640 @ 2.80GHz"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:351
msgid "Operating System: Red Hat Enterprise Linux Server release 7.6 (3.10.0-229.el7.x86_64)"
msgstr "Operating System: Red Hat Enterprise Linux Server release 7.6 (3.10.0-229.el7.x86_64)"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:353
msgid "Memory: 64GB"
msgstr "Memory: 64GB"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:355
msgid "Ethernet: Solarflare Communications SFC9020 [Solarstorm]"
msgstr "Ethernet: Solarflare Communications SFC9020 [Solarstorm]"

#. type: Title ===
#: upstream/_posts/2019-07-08-runtime-performance.adoc:357
msgid "JVM"
msgstr "JVM"

#. type: Plain Text
#: upstream/_posts/2019-07-08-runtime-performance.adoc:358
msgid "Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)"
msgstr "Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)"
