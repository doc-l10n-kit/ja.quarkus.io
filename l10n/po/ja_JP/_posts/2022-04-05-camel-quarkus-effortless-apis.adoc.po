msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:2
msgid "post"
msgstr "post"

#. type: Title =
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:11
msgid "Riding Camel Quarkus: effortless APIs"
msgstr "Camel Quarkusに乗る：容易なAPI"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:4
msgid "2022-04-05"
msgstr "2022-04-05"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:5
#, fuzzy
msgid "camel openapi api integration atlasmap rest swagger-ui data-mapping web"
msgstr "camel openapi api integration atlasmap rest swagger-ui データマッピング web"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:15
msgid "Discover Camel, the swiss-knife of integration brought to Quarkus. The example encourages API best practices, with effortless coding effort showcasing AtlasMap for data transformation."
msgstr "Quarkusに導入されたインテグレーションのスイス・アーミーナイフ、Camelを発見してください。この例では、データ変換用のAtlasMapを紹介する簡単なコーディング作業で、APIのベストプラクティスを奨励しています。"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:7
msgid "bmeseguer"
msgstr "bmeseguer"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:17
msgid "Introduction"
msgstr "はじめに"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:19
msgid "Quarkus offers an extensive collection of extensions to connect to web, data and messaging systems, providing the developer fantastic functionality at his disposal. However, in many cases, the problem at hand already belongs to one (or more) of the well-known https://www.enterpriseintegrationpatterns.com/toc.html[enterprise integration patterns^]."
msgstr "Quarkusには、Web、データ、メッセージングシステムに接続するためのエクステンションが豊富に用意されており、開発者が自由に使える素晴らしい機能が提供されています。しかし、多くの場合、手元の問題はすでによく知られた link:https://www.enterpriseintegrationpatterns.com/toc.html[エンタープライズ統合, window=_blank]パターンの1つ（または複数）に属しています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:21
msgid "Developers often kickstart their projects unaware that Apache Camel has perfected how to best address integration patterns. Camel Quarkus provides https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[hundreds of connectors^] and rich functionality for data mediation: data formats, transformers, templating, custom processors, etc."
msgstr "開発者は、Apache Camelがインテグレーションパターンに対応する最善の方法を完成させていることを知らずにプロジェクトを開始しがちです。Camel Quarkusは、データ形式、トランスフォーマー、テンプレート化、カスタムプロセッサーなど、 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[数百のコネクター, window=_blank] とデータ仲介のための豊富な機能を提供します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:23
msgid "https://camel.apache.org/camel-quarkus/[Camel Quarkus^] is a subproject in the https://camel.apache.org/[Apache Camel^] community that enables Camel to run on https://developers.redhat.com/products/quarkus/overview[Quarkus^]. Apache Camel, often called the swiss-knife of integration, is the most popular open source community project aimed at solving all things integration."
msgstr "link:https://camel.apache.org/camel-quarkus/[Camel Quarkus, window=_blank]は、 link:https://camel.apache.org/[Apache Camel, window=_blank]コミュニティのサブプロジェクトで、 link:https://developers.redhat.com/products/quarkus/overview[Quarkus, window=_blank]上でCamelを実行できるようにするものです。Apache Camelは、しばしばインテグレーションのスイス・アーミーナイフと呼ばれ、インテグレーションに関するあらゆることを解決することを目的とした、最も人気のあるオープンソースコミュニティプロジェクトです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:349
msgid "<br>"
msgstr "<br>"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:29
msgid "An OpenAPI example"
msgstr "OpenAPIの例"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:31
msgid "Let’s pick a helpful example that highlights the benefits of using Camel Quarkus in contrast with other development approaches. Implementing and evolving API services sounds like a use case almost every reader can relate to. We’ll use the broadly adopted OpenApi specification."
msgstr "他の開発アプローチと対比して、Camel Quarkusを使用する利点を強調する役に立つ例を選んでみましょう。APIサービスの実装と進化は、ほとんどすべての読者が共感できるユースケースのように聞こえます。ここでは、広く採用されているOpenApiの仕様を使用します。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:33
msgid "Piecing together an OpenAPI service"
msgstr "OpenAPIサービスを組み立てる"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:36
msgid "Of course, the example illustrated in this article plays in the context of integration, where you’re enabling access or integrating source systems, performing data processing of some sort, and connecting and sending data to back endpoints."
msgstr "もちろん、この記事の例では、ソースシステムへのアクセスやインテグレーションを可能にし、何らかのデータ処理を行い、バックエンドポイントにデータを接続して送信するという、インテグレーションの文脈で説明されています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:38
#, fuzzy
msgid "By all means, Camel Quarkus is not a “one to rule them all” solution. It will not be a good fit if your scenario deviates from the above context, for instance, a data access layer with heavy datastore interaction,  a web server, a media application, etc."
msgstr "Camel Quarkusは、\"1つですべてを解決する \"ソリューションではありません。例えば、データストアとのやり取りが多いデータアクセスレイヤー、ウェブサーバー、メディアアプリケーションなどです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:40
#, fuzzy
msgid "We find many Quarkus (non-Quarkus too) examples showing how to define and implement APIs. They all try to be as helpful as possible and propose the way forward. I realise this article is no different. However, I’m certain Camel Quarkus brings an elegant and effortless approach worth considering."
msgstr "Quarkus（Quarkus以外も含む）には、APIの定義や実装の方法を示す例がたくさんあります。それらはすべて、できる限り役に立ち、進むべき道を提案しようとするものです。この記事もそうであることに気づいています。しかし、Camel Quarkusは、検討する価値のあるエレガントで楽なアプローチをもたらすと確信しています。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:43
msgid "Code-first vs Contract-first"
msgstr "コード・ファーストと契約・ファースト"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:45
#, fuzzy
msgid "Although these are two different strategies to implement APIs, with their pros and cons, we are sticking to the contract-first approach, that is, when the API specification (the contract) is provided before the code implementation begins."
msgstr "これらはAPIを実装するための2つの異なる戦略で、それぞれ長所と短所がありますが、私たちは契約優先アプローチ、つまり、コードの実装を始める前にAPIの仕様（契約）を提供する場合にこだわっています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:47
#, fuzzy
msgid "In our example, the development team does not own the API. Their task is to implement the services to expose and comply with the given API specification. A different team in the organisation is responsible for designing, releasing, and delivering API governance. The picture below illustrates a contract-first approach."
msgstr "この例では、開発チームはAPIを所有しません。彼らのタスクは、公開するサービスを実装し、与えられたAPI仕様に準拠することです。組織内の別のチームが、APIガバナンスの設計、リリース、配信に責任を持つ。下の図は、コントラクトファーストのアプローチを示しています。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:49
msgid "Contract-first approach"
msgstr "契約ファーストのアプローチ"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:52
#, fuzzy
msgid "A code-first strategy implies the API specification derives from the implemented code. You can use libraries to auto-generate the specification based on the code the developer has crafted. Code-first would be more appropriate for fast prototyping or simply when you have complete control over the API with a very open, relaxed and flexible approach to your development with little or no impact on others."
msgstr "コードファースト戦略とは、API仕様が実装されたコードから派生していることを意味します。開発者が作成したコードに基づいて仕様を自動生成するライブラリを使用することができます。コードファーストは、迅速なプロトタイピングや、APIを完全に制御し、非常にオープンでリラックスした柔軟なアプローチで開発を行い、他者にほとんど影響を与えない場合に適しています。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:54
msgid "Code-first approach"
msgstr "コードファーストのアプローチ"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:61
msgid "Basics about Camel and REST"
msgstr "CamelとRESTに関する基礎知識"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:63
msgid "Here's a speedy summary for those unfamiliar with Camel and how to implement REST APIs."
msgstr "ここでは、CamelとREST APIの実装方法についてよく知らない方のために、スピーディーにまとめてみました。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:65
msgid "Camel has its domain-specific language (DSL) to define processing flows, known as the Camel DSL. You use Camel components (aka. connectors) in the DSL to move data from sources to targets. Camel Quarkus has https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300+ available extensions^]."
msgstr "Camelには、処理の流れを定義するためのドメイン特化型言語（DSL）があり、Camel DSLと呼ばれています。DSLでCamelコンポーネント（別名：コネクター）を使用して、ソースからターゲットにデータを移動します。Camel Quarkusには、 link:https://camel.apache.org/camel-quarkus/2.7.x/reference/index.html[300以上の利用可能なエクステンションが, window=_blank]あります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:67
#, fuzzy
msgid "Camel provides an additional domain-specific language for specific REST implementations: the REST DSL. When implementing REST services with Camel, you chain both DSLs to define the service’s end-to-end behaviour."
msgstr "Camelは、特定のREST実装のための追加のドメイン固有言語であるREST DSLを提供します。CamelでRESTサービスを実装する場合、サービスのエンドツーエンドの動作を定義するために、両方のDSLを連鎖させます。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:69
#, fuzzy
msgid "Camel DSLs chained to process incoming requests."
msgstr "Camel DSLを連鎖させて、受信したリクエストを処理する。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:72
#, fuzzy
msgid "Camel forwards incoming REST requests from the REST DSL to the main DSL via the Camel ‘direct’ component, which is essentially a connector used for internal invocations, as if calling a Java method from a line of Java code."
msgstr "Camelは、REST DSLから入ってくるRESTリクエストを、Camelの「direct」コンポーネントを介してメインDSLに転送します。このコンポーネントは、基本的に、Javaコードの行からJavaメソッドを呼び出すように、内部呼び出しに用いられるコネクタです。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:78
#, fuzzy
msgid "Easy ride preparations"
msgstr "簡単な乗り物の準備"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:80
#, fuzzy
msgid "The ultimate goal is to relieve the developer from dealing with API related preparations and configurations and allow him to concentrate on the business logic."
msgstr "最終的な目標は、開発者がAPI関連の準備や設定から解放され、ビジネスロジックに集中できるようにすることです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:82
#, fuzzy
msgid "To be more specific, in the previous diagram, the REST DSL comes handy when developers adopt a code-first approach. However, its definition feels redundant in a contract-first world since the provided OpenAPI specification already defines all the API details."
msgstr "より具体的に言うと、先ほどの図では、開発者がコードファーストのアプローチを採用する場合にREST DSLが便利です。しかし、OpenAPI仕様がすでにAPIの詳細をすべて定義しているため、コントラクトファーストの世界ではその定義は冗長に感じられます。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:84
#, fuzzy
msgid "Camel allows you to auto-generate the REST DSL out of an OpenAPI specification. This automation simplifies the work by letting the developer just focus on the processing flow implementation."
msgstr "Camelでは、OpenAPIの仕様からREST DSLを自動生成することができます。この自動化により、開発者は処理フローの実装だけに集中することができ、作業が簡素化されます。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:86
#, fuzzy
msgid "Automated REST DSL, hand coded Main DSL."
msgstr "自動化されたREST DSL、ハンドコーディングされたMain DSL。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:89
#, fuzzy
msgid "The automated code generation shown above is enabled via the configuration of the following Maven plugin:"
msgstr "上記の自動コード生成は、以下のMavenプラグインの設定によって有効になります："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:112
#, fuzzy
msgid "Notice the `+<outputDirectory>+` parameter set to a destination inside the target directory. The setting allows Quarkus to load the Camel REST resource at start-up time and prevents the source directory from being polluted with unnecessary code."
msgstr "`<outputDirectory>` パラメーターがターゲットディレクトリ内の保存先に設定されていることに注目してください。この設定により、Quarkusは起動時にCamel RESTリソースをロードし、ソースディレクトリが不要なコードで汚染されるのを防ぐことができます。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:114
#, fuzzy
msgid "Also, you’ll observe we’re picking the OpenApi specification from the project’s source directory. The best practice would be to fetch, via another Maven plugin, the OpenAPI from a remote Service Registry representing the source of truth."
msgstr "また、プロジェクトのソースディレクトリから OpenAPI 仕様を選択していることがわかります。ベストプラクティスは、別のMavenプラグインを介して、真実のソースを表すリモートサービスレジストリからOpenAPIをフェッチすることでしょう。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:118
#, fuzzy
msgid "The OpenApi definition used in our example has been created with https://www.apicur.io/[Apicurio Studio^], a beautiful and intuitive design time visual tool."
msgstr "この例で使用されているOpenAPI定義は、美しく直感的なデザインタイムビジュアルツールである link:https://www.apicur.io/[Apicurio Studioで] 作成されています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:121
#, fuzzy
msgid "Let’s pretend we do fetch the OpenApi definition from a remote server. Under that assumption, the diagram below shows how the project is kept simple and clean. Maven injects both the OpenApi and REST definition into the target directory at compilation time. When packaging the solution, it includes all necessary artefacts to run."
msgstr "ここでは、OpenAPIの定義をリモートサーバーから取得すると仮定しましょう。その前提で、下図は、プロジェクトがシンプルでクリーンな状態に保たれていることを示しています。Mavenは、コンパイル時にOpenApiとREST定義の両方をターゲットディレクトリに注入します。ソリューションをパッケージ化する際、実行に必要なすべてのアーティファクトが含まれます。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:123
#, fuzzy
msgid "Source is clean. Essential artefacts are generated and injected"
msgstr "ソースはクリーン。必要不可欠なアーティファクトが生成・注入される"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:128
#, fuzzy
msgid "The best practice is to fetch the OpenAPI specification from a remote https://www.apicur.io/registry/[Service Registry^] (the source of truth). For simplicity, our project already includes the specification."
msgstr "ベストプラクティスは、リモートの link:https://www.apicur.io/registry/[サービスレジストリ] （真実の源）から OpenAPI 仕様を取得することです。簡単のために、私たちのプロジェクトにはすでに仕様が含まれています。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:135
#, fuzzy
msgid "Application version 1.0"
msgstr "アプリケーションバージョン1.0"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:137
#, fuzzy
msgid "Let’s look at our chosen (example) API service and see how to drive its implementation in its first iteration. The API Design team has released an OpenApi specification v1.0 for a service called ‘Individual’, and we, the developers, need to implement the service in compliance with its definition."
msgstr "私たちが選んだ（例の）APIサービスを見て、最初のイテレーションでその実装をどのように推進するかを見てみましょう。APIデザインチームは、「Individual」というサービスのOpenApi仕様v1.0を公開しており、我々開発者はその定義に準拠してサービスを実装する必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:139
#, fuzzy
msgid "This first version of the service has a single operation to retrieve the details of an individual. By setting up our project to parse and auto-generate the REST DSL as described in the previous section, we just need to implement a single Camel Route to process incoming service calls, as illustrated below:"
msgstr "このサービスの最初のバージョンは、個人の詳細を取得するための単一の操作を持っています。前のセクションで説明したように、REST DSLを解析して自動生成するようにプロジェクトを設定することで、以下の図のように、受信するサービスコールを処理するために1つのCamelルートを実装するだけです："

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:141
#, fuzzy
msgid "First version of the service to implement."
msgstr "サービスの最初のバージョンを実装する。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:144
#, fuzzy
msgid "We’ll keep the use case relatively thin; our focus stays at “Easy APIs with Camel Quarkus”.  But still, we want the scenario to be within an integration context to showcase some Camel Quarkus capabilities."
msgstr "ユースケースは比較的薄くし、「Camel Quarkusを使った簡単なAPI」に焦点を当てます。しかし、Camel Quarkusの機能を紹介するために、統合の文脈でシナリオを作成したいと思います。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:146
#, fuzzy
msgid "Our Camel route connects with a legacy backend that enables access to ‘individual’ data. The processing logic requires adapting the incoming OpenApi call to the legacy backend system’s interface. This data adaptation requires data transformation both during the request and response flows."
msgstr "私たちのCamelルートは、「個別」データへのアクセスを可能にするレガシーバックエンドと接続しています。処理ロジックでは、受信するOpenAPIコールをレガシーバックエンドシステムのインターフェースに適応させる必要があります。このデータ適応には、リクエストとレスポンスの両方のフローでデータ変換が必要です。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:148
#, fuzzy
msgid "End to end processing flow."
msgstr "End to Endの処理フロー。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:151
#, fuzzy
msgid "In a classic development approach, the developer needs to incorporate a Java data model to operate and handle incoming and outgoing data, for example, by defining Java classes and data structures to represent the data the service needs to manipulate."
msgstr "古典的な開発手法では、開発者は、サービスが操作する必要のあるデータを表現するJavaクラスやデータ構造を定義するなど、入出力データを操作・処理するJavaデータモデルを組み込む必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:153
#, fuzzy
msgid "In our example, the OpenApi contract already predefined the data model describing the inputs and outputs of each operation. Likewise, the backend also defines a contract (or interface) to comply with when triggering calls."
msgstr "この例では、OpenAPI契約は、各操作の入力と出力を記述するデータモデルをすでに事前定義しています。同様に、バックエンドも、呼び出しをトリガーする際に準拠する契約（またはインターフェース）を定義しています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:155
#, fuzzy
msgid "With Apache Camel, we can keep the implementation very clean by using Camel functionality dedicated explicitly to data transformation. In our example, we’ll use the AtlasMap component for various reasons:"
msgstr "Apache Camelでは、データ変換に特化したCamelの機能を使用することで、非常にクリーンな実装を維持することができます。この例では、さまざまな理由からAtlasMapコンポーネントを使用します："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:157
#, fuzzy
msgid ""
"<ul>\n"
"  <li>It provides intuitive visual tooling to map source data to target data</li>\n"
"  <li>It performs structural and data transformation (JSON ⇄ XML) in a single action </li>\n"
"  <li>It does not require predefined Java data models</li>\n"
"</ul>"
msgstr "<ul> <li>ソース データをターゲット データにマッピングするための直感的な視覚的ツールを提供します。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:165
#, fuzzy
msgid "AtlasMap combines 2 actions in 1: structural and format transformations."
msgstr "AtlasMapは、構造変換とフォーマット変換の2つのアクションを1つにまとめています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:168
#, fuzzy
msgid "Let’s start looking at the route definition the developer needs to produce and how Camel links the OpenAPI operation to its code implementation:"
msgstr "まず、開発者が作成する必要があるルート定義と、CamelがOpenAPI操作とそのコード実装をどのようにリンクさせるかを見てみましょう："

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:170
#, fuzzy
msgid "Camel uses the `+operationId+` as a link to invoke the Camel route."
msgstr "Camelは、 `operationId` をCamelルートを呼び出すためのリンクとして使用します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:173
#, fuzzy
msgid "Camel Quarkus uses the `+operationId+` from the OpenAPI specification to trigger an internal call (using the `+direct+` component) and expects a Camel consumer (`+from+` tag) with a matching `+operationId+` value to process the client request."
msgstr "Camel Quarkusは、OpenAPI仕様の `operationId` 、内部呼び出しをトリガーし（ `direct` コンポーネントを使用）、クライアントリクエストを処理するために、 `operationId` 値が一致するCamelコンシューマー（ `from` タグ）を期待します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:175
#, fuzzy
msgid "The Camel route couldn’t be simpler:"
msgstr "キャメルルートは、これ以上ないほどシンプルです："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:186
#, fuzzy
msgid ""
"<ol>\n"
"  <li>The first line declares the route (and matches the `+operationId+`).</li>\n"
"  <li>The second line applies a data adaptation (or mapping) to prepare the back-end call's payload.</li>\n"
"  <li>The third line invokes a Camel route that calls the backend and collects the response.</li>\n"
"  <li>The fourth line maps the response XML into JSON data in compliance with the OpenApi definition.</li>\n"
"</ol>"
msgstr "<ol> <li>最初の行はルートを宣言します(そして `operationId` にマッチします)。</li> <li>2番目の行はバックエンド呼び出しのペイロードを準備するためにデータ適合(またはマッピング)を適用します。</li> <li>3行目はバックエンドを呼び出しレスポンスを収集するCamelルートを呼び出します。</li> <li>4行目はレスポンスのXMLをOpenApiの定義に従ってJSONデータにマッピングします。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:195
#, fuzzy
msgid ""
"You can easily create the data mapping definitions using AtlasMap’s VSCode extension.\n"
"When editing the Camel route in VSCode, you’ll find a contextual and actionable hint you can click (over the ‘atlasmap’ code line) that launches the AtlasMap editor with the data mapping definition loaded."
msgstr "AtlasMapのVSCodeエクステンションを使用すると、データマッピング定義を簡単に作成できます。VSCodeでCamelルートを編集する際、（'atlasmap'コード行の上で）クリックすると、データマッピング定義を読み込んだ状態でAtlasMapエディターを起動する、コンテキストとアクション可能なヒントが見つかります。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:198
#, fuzzy
msgid "VSCode prepends an action link to open the visual mapping editor."
msgstr "VSCodeは、ビジュアルマッピングエディタを開くためのアクションリンクを前置します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:203
#, fuzzy
msgid "The following https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[blog in the Apache Camel^] community describes how to use the tooling."
msgstr "link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[Apache Camelコミュニティの] 以下の link:https://camel.apache.org/blog/2021/11/vscode-atlasmap-release-0.1.0/[ブログで] 、ツールの使い方が紹介されています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:206
#, fuzzy
msgid "The picture below shows the data mapping definition in AtlasMap for the request flow:"
msgstr "下図は、リクエストフローに対してAtlasMapでデータマッピングを定義したものです："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:210
#, fuzzy
msgid "The property `+id+` (left) represents the `+{id}+` path parameter from the HTTP URL. It maps  to the target XML data structure, connected to the `+id+` node (right). You define mappings with drag and drop actions from left to the right."
msgstr "プロパティ `id` (左) は、HTTP URL からの `{id}` パス・パラメータを表す。これは、 `id` ノード（右）に接続されたターゲット XML データ構造にマッピングされます。左から右へのドラッグ＆ドロップ操作でマッピングを定義します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:212
#, fuzzy
msgid "Following the data transformation action, the flow invokes the backend. The snippet below shows the developer's Camel route definition to trigger the HTTP request."
msgstr "データ変換アクションに続いて、フローはバックエンドを呼び出します。以下のスニペットは、HTTPリクエストをトリガーするための開発者のCamelルート定義を示しています。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:223
#, fuzzy
msgid "The two main actions in this route are:"
msgstr "このルートでは、主に2つのアクションを行います："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:225
#, fuzzy
msgid ""
"<ol>\n"
"  <li>Set headers (ensuring we clean up incoming ones)</li>\n"
"  <li>Trigger the call using Camel’s HTTP component. </li>\n"
"</ol>"
msgstr "<ol> <li>ヘッダーを設定する（受信ヘッダーを確実にクリーンアップする）</li> <li>キャメルのHTTPコンポーネントを使用して呼び出しをトリガーする。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:232
#, fuzzy
msgid "The expected XML interaction with the legacy backend system is as follows:"
msgstr "レガシーバックエンドシステムと予想されるXMLのやり取りは以下の通りです："

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:234
#, fuzzy
msgid "Call from Camel to the backend."
msgstr "Camelからバックエンドに呼び出す。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:237
#, fuzzy
msgid "The response data mapping definition would be defined in AtlasMap as shown below:"
msgstr "レスポンスデータのマッピング定義は、AtlasMapで以下のように定義することになります："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:241
#, fuzzy
msgid "The data structure on the left represents the source XML to map (backend response), and the data structure on the right represents the target JSON data to compose and send back to the client."
msgstr "左のデータ構造はマッピングするソースXML（バックエンドのレスポンス）を表し、右のデータ構造は合成してクライアントに送り返すターゲットJSONデータを表します。"

#. type: Title ===
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:332
msgid "Summary"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:245
#, fuzzy
msgid "Let’s review the implementation effort the developer needs to undergo in this first iteration of the Individual API:"
msgstr "このIndividual APIの最初のイテレーションで、開発者が受けなければならない実装の労力を確認してみましょう："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:248
#, fuzzy
msgid ""
"<ol>\n"
"    <li>Setup the project (include dependencies, plugins, etc.)</li>\n"
"    <br>\n"
"    <li>Define the Camel routes:</li>\n"
"    <ol type=\"a\">\n"
"        <li><span>The main Camel route<br/>(4 lines of code)</span></li>\n"
"        <li><span>The backend invocation route <br/>(5 lines of code)</span></li>\n"
"    </ol>\n"
"    <br>\n"
"    <li>Define the data transformations:</li>\n"
"    <ol type=\"a\">\n"
"        <li>Request mapping</li>\n"
"        <li>Response mapping</li>\n"
"    </ol>\n"
"</ol>\n"
"<br>"
msgstr "<ol> <li>プロジェクトをセットアップする (依存関係、プラグインなどを含める)。</li> <li>Camelルートを定義します：</li> <ol type=\"a\"> <li><span>メインのCamelルート<br/>(4行のコード)</span></li> <li><spanバックエンドの呼び出しルート<br/>（5行のコード）</span></li> </ol> <br> <li>データ変換を定義します：</li> <ol type=\"a\"> <li>リクエストマッピング</li> <li>レスポンスマッピング</li> </ol> </ol> <br> <li>データ変換を定義します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:268
#, fuzzy
msgid "That’s looks neat to me."
msgstr "私にはそれがきちんと見える。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:274
#, fuzzy
msgid "Application version 2.0"
msgstr "アプリケーションバージョン2.0"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:276
#, fuzzy
msgid "The real benefit of this development approach, and its simplicity using Camel Quarkus, becomes more evident when the DEV team receives a new version 2.0 of the Individual API, released by the Design team, with a new operation to be implemented."
msgstr "この開発手法の本当のメリット、そしてCamel Quarkusを使ったシンプルさは、DEVチームが、デザインチームがリリースしたIndividual APIの新しいバージョン2.0を受け取り、実装すべき新しいオペレーションを受け取ったときに、より明らかになります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:278
#, fuzzy
msgid "Version 1.0 was only intended for internal consumption. Now there is a demand to expose the service externally, which requires introducing a level of data protection to ensure the customer’s data is kept confidential."
msgstr "バージョン1.0は内部消費のみを目的としていました。現在では、このサービスを外部に公開したいという要望があり、顧客のデータの機密性を確保するために、データ保護のレベルを導入する必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:280
#, fuzzy
msgid "Version 2.0 defines a new operation the developer needs to implement. Hopefully, the impact on the current code will not be too significant."
msgstr "バージョン2.0では、開発者が実装する必要のある新しい操作を定義しています。現在のコードへの影響があまり大きくならないことを祈ります。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:282
#, fuzzy
msgid "Second version of the service with a new operation."
msgstr "新操作によるサービスの第2弾。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:285
#, fuzzy
msgid "The main goal of the new operation is to anonymise sensitive data in the JSON response payload to send back. Other than that, the same logic applies, we prepare and invoke the backend in the same manner to obtain the individual data."
msgstr "新しい操作の主な目的は、送り返すJSONレスポンスペイロードの機密データを匿名化することです。それ以外は同じロジックが適用され、同じ方法でバックエンドを準備して呼び出し、個々のデータを取得します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:287
#, fuzzy
msgid "In version 1.0, we saw the routes implemented using the Java DSL. In version 2.0, we will use the XML DSL."
msgstr "バージョン1.0では、Java DSLを使ったルートの実装を見ました。バージョン2.0では、XML DSLを使用する予定です。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:291
#, fuzzy
msgid "The use of one DSL over the other is more of a user preference. The XML DSL helps in keeping Camel routes definitions well organised. In contrast, the Java DSL is placed inside Java classes, at times challenging to locate, along with other regular Java code. Your code can get a bit messy and disorganised. Also, the Java DSL doesn’t enjoy the support of graphical tooling, while XML and YAML are DSLs that allow visual helpers."
msgstr "1つのDSLを他のDSLより使用することは、ユーザーの好みによります。XML DSLは、Camelのルート定義をうまく整理しておくのに役立ちます。一方、Java DSLはJavaクラス内に配置され、他の通常のJavaコードと一緒に配置することが困難な場合があります。そのため、コードが乱雑になり、整理されなくなる可能性があります。また、Java DSLはグラフィカルなツールのサポートを受けられませんが、XMLとYAMLは視覚的なヘルパーを使用できるDSLです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:294
#, fuzzy
msgid "Let’s look at the new Camel route definition the developer has coded in XML:"
msgstr "開発者がXMLでコーディングした新しいCamelのルート定義を見てみましょう："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:306
#, fuzzy
msgid "The new route is almost identical to the first one. You will observe only two differences:"
msgstr "新しいルートは、最初のルートとほぼ同じです。違いは2つだけです："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:308
#, fuzzy
msgid ""
"<ol>\n"
"    <li>The <code>‘direct’</code> component matches the new <code>‘operationId’</code> in version 2.0</li>\n"
"    <li>The response data mapping is new</li>\n"
"</ol>"
msgstr "<ol> <li><code>'direct'</code>コンポーネントは、バージョン2.0の新しい<code>'operationId'</code>と一致します</li> <li>レスポンスデータのマッピングは新しいものです</li> </ol>"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:315
#, fuzzy
msgid "The data mapping definition from 2) looks as follows in the AtlasMap editor:"
msgstr "2)のデータマッピング定義は、AtlasMapエディタでは次のようになります："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:320
#, fuzzy
msgid "The main highlight from above is the definition of an `+‘anonymous’+` constant that maps to the `+‘fullName’+` and `+‘passportId’+` target fields:"
msgstr "上記の主なハイライトは、 `‘fullName’` と `‘passportId’` のターゲットフィールドに対応する `‘anonymous’` 定数の定義です："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:322
#, fuzzy
msgid ""
"<ul>\n"
"    <li><code>Name:  anonymous</code></li>\n"
"    <li><code>Value: *********</code></li>\n"
"</ul>"
msgstr "<ul> <li><code>名前: anonymous</code></li> <li><code>値： *<strong></strong>* ***</code></li> </ul>"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:329
#, fuzzy
msgid "The new Camel route and the new mapping definition completes the implementation of the new operation in v2.0. At this stage, the developer is sweating from the enormous effort and the long hours it took to deliver the new version."
msgstr "新しいCamelルートと新しいマッピング定義によって、v2.0での新しい操作の実装が完了しました。この段階で、開発者は新バージョンを提供するためにかかった膨大な労力と長い時間に汗を流していることでしょう。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:334
#, fuzzy
msgid "Let’s quickly review the actions required to complete the second iteration of the service:"
msgstr "早速、2回目のイテレーションサービスを完成させるために必要なアクションを確認しましょう："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:336
#, fuzzy
msgid ""
"<ol>\n"
"    <li>Replace the OpenApi v1.0 with the new specification v2.0</li>\n"
"    <br/>\n"
"    <li><span>Create the new Camel route<br/>(1-line if you copy/paste)</span></li>\n"
"    <br/>\n"
"    <li><span>Create the new data mapping<br/>(2 drag and drop actions if you copy/paste)</span></li>\n"
"</ol>\n"
"<br>"
msgstr "<ol> <li>OpenApiのv1.0を新しい仕様のv2.0に置き換えます。0</li> <br/> <li><span>新しいCamelルートを作成する<br/>(コピー/貼り付けの場合は1行)</span></li> <br/> <li><span>新しいデータマッピングを作成する。<li><span><br/> 新しいデータ マッピングを作成します</span></li> </ol> <br> <li><span>新しいデータ マッピングを作成します</span><br/> (コピー/貼り付けの場合、2 つのドラッグ アンド ドロップ操作)</span></li> </ol> <br> <br"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:347
#, fuzzy
msgid "Again, not bad at all. The effort was truly minimal."
msgstr "今回も全く問題ありません。努力は本当に最小限で済みました。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:353
#, fuzzy
msgid "Trying out the operations"
msgstr "操作を試してみる"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:355
#, fuzzy
msgid "To discover and explore services in code-first developments, you need to ensure the project auto-generates the specification from the implemented code."
msgstr "コードファーストの開発でサービスを発見・探索するためには、実装されたコードからプロジェクトが仕様を自動生成するようにする必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:357
#, fuzzy
msgid "In our case (contract-first) the specification is already provided. We can easily expose it and embed a Swagger-UI client using the Smallrye OpenApi extension that Quarkus provides. Ensure your POM file includes the following dependency:"
msgstr "私たちの場合（contract-first）、仕様はすでに提供されています。Quarkusが提供するSmallRye OpenApiエクステンションを使用して、簡単にそれを公開し、Swagger-UIクライアントを埋め込むことができます。POMファイルに次の依存関係が含まれていることを確認してください："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:367
#, fuzzy
msgid "For more detailed information on how to expose OpenApi definitions, you can read the following section in the Quarkus documentation. There are different settings we can configure to our liking. We’ve configured some of them. If you feel curious, we encourage you to look at the source code provided with the article."
msgstr "OpenApiの定義を公開する方法の詳細については、Quarkusのドキュメントの次のセクションをお読みください。私たちの好みに合わせて構成できるさまざまな設定があります。私たちはそのうちのいくつかを設定しました。気になるようであれば、記事と一緒に提供されているソースコードを見てみることをお勧めします。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:369
#, fuzzy
msgid "We can compile and run our application locally with the following command:"
msgstr "次のコマンドで、アプリケーションをローカルにコンパイルして実行することができます："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:379
#, fuzzy
msgid "Remember, our Camel integration invokes a legacy backend. We’ve provided one included in the GitHub project. Ensure you read and follow the ‘Readme.md’ instructions to prepare the stub (legacy backend)."
msgstr "Camelの統合は、レガシーバックエンドを呼び出すことを忘れないでください。GitHubプロジェクトに含まれるものを提供しています。スタブ（レガシーバックエンド）を準備するために、「Readme.md」の指示を読み、それに従っていることを確認します。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:382
#, fuzzy
msgid "Once the application is up and running, open a browser and discover the service by entering the following URL on your address bar:"
msgstr "アプリケーションを起動したら、ブラウザを開き、アドレスバーに以下のURLを入力してサービスを発見してください："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:384
#, fuzzy
msgid "http://localhost:8080/camel/openapi.json"
msgstr "http://localhost:8080/camel/openapi.json"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:386
#, fuzzy
msgid "Click and try out the v1.0 operation:"
msgstr "クリックして、v1.0の動作を試してみてください："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:390
#, fuzzy
msgid "Enter a dummy value for the `+{id}+` parameter, for example, `+‘123’+`. If your legacy system (stub) is up and running, you should obtain the following response:"
msgstr "`{id}` パラメータにダミーの値を入力します。例えば、 `‘123’` 。レガシーシステム（スタブ）が稼働している場合、次のような応答が得られるはずです："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:403
#, fuzzy
msgid "Now, give a go to our v.2.0 operation:"
msgstr "それでは、v.2.0の操作に挑戦してください："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:407
msgid "You should obtain the following response:"
msgstr "次のような応答が得られるはずです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:420
#, fuzzy
msgid "You will observe some of the fields now anonymised as per the mapping settings in AtlasMap."
msgstr "AtlasMapのマッピング設定により、一部のフィールドが匿名化されていることが確認できます。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:423
#, fuzzy
msgid "Last words"
msgstr "最後の言葉"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:425
#, fuzzy
msgid "This article shows you how choosing Camel Quarkus, and a contract-first implementation approach provides great simplicity and low maintenance cost. It allows rapid functionality growth."
msgstr "この記事では、Camel Quarkusを選択し、契約優先の実装アプローチを採用することで、非常にシンプルで低いメンテナンスコストを実現する方法を紹介します。これにより、迅速な機能拡張が可能になります。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:427
#, fuzzy
msgid "When your processes move data from sources to targets, use Camel Quarkus, probably the best fit for the job when building integration services."
msgstr "プロセスでデータをソースからターゲットに移動させる場合は、統合サービスを構築する際におそらく最も適していると思われるCamel Quarkusを使用します。"

#. type: Title ==
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:430
msgid "Resources:"
msgstr "リソース:"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:432
#, fuzzy
msgid "Here is a list of related resources you may be interested to explore:"
msgstr "ここでは、ご興味のある関連リソースをご紹介します："

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:434
#, fuzzy
msgid "https://github.com/brunoNetId/camel-quarkus-api-first[Github project] where the blog's source code lives."
msgstr "ブログのソースコードが存在する link:https://github.com/brunoNetId/camel-quarkus-api-first[Githubプロジェクト] 。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:435
#, fuzzy
msgid "https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[Article] covering Camel Quarkus and Camel K, also based in Quarkus."
msgstr "キャメルQuarkusと、同じくQuarkusを拠点とするキャメルKを取材した link:https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1[記事] です。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:436
#, fuzzy
msgid "https://camel.apache.org/camel-quarkus/next/index.html[Camel Quarkus] home page in Apache Camel."
msgstr "Apache link:https://camel.apache.org/camel-quarkus/next/index.html[Camelの] Quarkusのホームページです。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:437
#, fuzzy
msgid "https://www.atlasmap.io/[AtlasMap] home page, the visual data mapping tool that accelerates your implementation."
msgstr "導入を加速させるビジュアルデータマッピングツール「 link:https://www.atlasmap.io/[AtlasMap] 」のホームページ。"

#. type: Plain Text
#: upstream/_posts/2022-04-05-camel-quarkus-effortless-apis.adoc:438
#, fuzzy
msgid "https://www.apicur.io/[Apicurio] home page, the Design time tool to create your OpenAPI contracts."
msgstr "OpenAPIコントラクトを作成するためのDesign timeツール「 link:https://www.apicur.io/[Apicurio] 」のホームページです。"
