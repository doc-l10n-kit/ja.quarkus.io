msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Express Hibernate Queries as Type-Safe Java Streams"
msgstr "Hibernateのクエリを型安全なJavaストリームとして表現する。"

#. type: YAML Front Matter: synopsis
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the JPAStreamer Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "Criteria APIを使用してHibernateクエリを記述することは、直感的でなく、言葉足らずの犠牲となることがあります。この記事では、JPAStreamer Quarkusエクステンションが、不必要に複雑化することなく、タイプセーフなHibernateクエリを容易にする方法について学びます。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Writing Hibernate queries using the Criteria API can be anything but intuitive and comes at the expense of wordiness. In this article, you will learn how the  Quarkus extension facilitates type-safe Hibernate queries without unnecessary complexity."
msgstr "Criteria APIを使用してHibernateクエリを記述することは、直感的ではありません。この記事では、Quarkus エクステンションを使用することで、不要な複雑さを伴わずに型安全な Hibernate クエリを作成する方法を学びます。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "As much as the JPA Criteria builder is expressive, JPA queries are often equally verbose, and the API itself can be unintuitive to use, especially for newcomers. In the Quarkus ecosystem, Panache is a partial remedy for these problems when using Hibernate ORM. Still, I find myself juggling the Panache’s helper methods, preconfigured Enums and raw Strings when composing anything but the simplest of queries. You could claim I am just inexperienced and impatient or instead acknowledge that the perfect API is frictionless to use for everyone. Thus, the user experience of writing JPA queries can be further improved in that direction."
msgstr "JPAクライテリアビルダーが表現力豊かであるのと同様に、JPAクエリも同様に冗長であることが多く、API自体も特に初心者にとっては直感的に使えないことがあります。Quarkusのエコシステムでは、Hibernate ORMを使用する場合、Panacheはこれらの問題の部分的な救済策となります。しかし、最も単純なクエリ以外は、Panacheのヘルパーメソッド、事前に設定されたEnum、生のStringを使いこなす必要があることに気づきました。私が経験不足でせっかちなだけだと主張することもできますし、完璧なAPIは誰にとっても摩擦なく使えるということを認めることもできます。このように、JPAクエリを書く際のユーザーエクスペリエンスは、その方向でさらに改善することができます。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "One of the remaining shortcomings is that raw Strings are inherently not type-safe, meaning my IDE rejects me the helping hand of code completion and wish me good luck at best. On the upside, Quarkus facilitates application relaunches in a split second to issue quick verdicts on my code. And nothing beats the heart-felt joy and genuine surprise when I have composed a working query on the fifth, rather than the tenth, attempt..."
msgstr "残りの欠点の1つは、生のStringは本質的に型安全でないため、IDEがコード補完の助けの手を拒否し、せいぜい幸運を祈る程度です。一方、Quarkusは一瞬でアプリケーションを再起動し、私のコードに素早い判定を下すことができます。また、10回目ではなく5回目の試行で動作するクエリを作成できたときの心からの喜びと純粋な驚きに勝るものはありません...。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "With this in mind, we built the open source library JPAStreamer to make the process of writing Hibernate queries more intuitive and less time-consuming, while leaving your existing codebase intact. It achieves this goal by allowing queries to be expressed as standard Java Streams. Upon execution, JPAStreamer translates the Stream pipeline to a HQL query for efficient execution and thereby avoids materialising anything but the relevant results."
msgstr "このことを念頭に置いて、既存のコードベースはそのままに、Hibernateクエリを書くプロセスをより直感的で時間のかからないものにするために、オープンソースのライブラリJPAStreamerを構築しました。この目的は、クエリを標準的なJavaストリームとして表現できるようにすることで達成されます。実行時には、JPAStreamerはStreamパイプラインをHQLクエリに変換して効率的に実行し、関連する結果以外のものを表示しないようにします。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Let me take an example - in some random database exists a table called person represented in a Hibernate application by the following standard `@Entity`:"
msgstr "例えば、あるランダムなデータベースに person というテーブルがあり、Hibernate アプリケーションでは以下の標準 `@Entity` で表現されています："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "To fetch the `Person` with an `Id` of 1 using JPAStreamer and Hibernate ORM, all you need is the following:"
msgstr "JPAStreamerとHibernate ORMを使って、 `Id` が 1 の `Person` を取得するために必要なのは、以下のとおりです："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Initialize JPAStreamer in one line, the underlying JPA provider handles the DB configuration."
msgstr "JPAStreamerを1行で初期化し、DBの設定は基礎となるJPAプロバイダが行う。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream source is set to be the Person table."
msgstr "StreamのソースはPersonテーブルと設定されています。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The filter operation is treated as a SQL WHERE clause and the condition is expressed type-safely with JPAStreamer predicates (more on this to follow)."
msgstr "フィルター操作はSQLのWHERE句として扱われ、条件はJPAStreamerの述語で型安全に表現されます（詳細は後述します）。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Despite it looking as if JPAStreamer operates on all `Person` objects, the pipeline is optimized to a single query, in this case:"
msgstr "JPAStreamerがすべての `Person` オブジェクトを操作しているように見えるにもかかわらず、パイプラインは、この場合、単一のクエリに最適化されています："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Thus, only the `Person` matching the search criteria is ever materialized."
msgstr "したがって、検索条件に一致する `Person` のみが実体化されることになる。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Next, we can look at a more complex example in which I am searching  for persons with a first name ending with an “A” and a last name that starts with “B”. The matches are sorted primarily by the first name and secondly by last name. I further decide to apply an offset of 5, excluding the first five results, and to limit the total results to 10. Here is the Stream pipeline to achieve this task:"
msgstr "次に、より複雑な例として、姓が \"A \"で終わり、姓が \"B \"で始まる人物を検索してみましょう。マッチは主に姓でソートされ、次に姓でソートされます。さらに、オフセットを 5 に設定し、最初の 5 件を除外して、検索結果の合計を 10 件に制限することにします。このタスクを実行するためのStreamパイプラインを以下に示します："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Filters can be combined with the and/or operators"
msgstr "フィルターは、and/or演算子と組み合わせることができます。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Easily filter on one or more properties"
msgstr "1つまたは複数のプロパティで簡単にフィルタリングできます。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Skip the first 5 Persons"
msgstr "最初の5人をスキップする"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Return at most 10 Persons"
msgstr "最大10名様までご返却可能"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "In the context of queries, the Stream operators filter, sort, limit, and skip all have a natural mapping that makes the resulting query expressive and intuitive to read while remaining compact."
msgstr "クエリーの文脈では、Streamの演算子であるfilter、sort、limit、skipはすべて、クエリーの結果をコンパクトに保ちつつ、表現力豊かで直感的に読めるようにする自然なマッピングを持っています。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "The Stream above is translated by JPAStreamer to the following HQL statement:"
msgstr "上記のStreamは、JPAStreamerによって以下のHQL文に変換されます："

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "How JPAStreamer works"
msgstr "JPAStreamerの仕組み"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Okay, it looks simple. But how does it work? JPAstreamer uses an annotation processor to form a meta-model at compile time. It inspects any classes marked with the standard JPA annotation `@Entity`, and for every entity `Foo.class`, a corresponding `Foo$.class` is created. The generated classes represent entity attributes as Fields used to form predicates on the form `User$.firstName.startsWith(\"A\")` that can be interpreted by JPAStreamer's query optimizer."
msgstr "なるほど、シンプルに見えますね。しかし、どのように動作するのでしょうか？JPAstreamerはアノテーションプロセッサーを使用して、コンパイル時にメタモデルを形成します。標準的なJPAアノテーション `@Entity` でマークされたクラスを検査し、すべてのエンティティ `Foo.class` に対して、対応する `Foo$.class` が作成されます。生成されたクラスは、JPAStreamerのクエリオプティマイザで解釈できる述語（ `User$.firstName.startsWith(\"A\")` ）を形成するために使用されるフィールドとして、エンティティの属性を表します。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "It is worth repeating that JPAStreamer does not alter or disturb the existing codebase but merely extends the API to handle Java Stream queries."
msgstr "JPAStreamerは、既存のコードベースを変更したり邪魔したりするのではなく、単にJava Streamのクエリを処理するためにAPIを拡張するだけであることは、繰り返し述べておく価値があります。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "Installing the JPAstreamer Extension"
msgstr "JPAstreamerエクステンションのインストール"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer is installed as any other Quarkus extension, using a Maven dependency:"
msgstr "JPAStreamerは、他のQuarkusエクステンションと同様に、Mavenの依存関係を使用してインストールされます："

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "After the dependency is added, rebuild your Quarkus application to trigger JPAStreamer’s annotation processor. The installation is complete once the generated fields reside in `/target/generated-sources`; you’ll recognise them by the trailing $ in the classnames, e.g. `Person$.class`."
msgstr "依存関係が追加されたら、Quarkusアプリケーションを再構築して、JPAStreamerのアノテーションプロセッサーをトリガーします。生成されたフィールドが `/target/generated-sources` に格納されれば、インストールは完了です。クラス名の末尾に $ が付いているので、 `Person$.class` などのように、フィールドを認識できます。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPAStreamer requires an underlying JPA provider, such as Hibernate ORM. For this reason, JPAStreamer needs no additional configuration as the database integration is taken care of by the JPA provider."
msgstr "JPAStreamerは、Hibernate ORMのようなJPAプロバイダを基礎としています。このため、JPAStreamerでは、データベースとの統合はJPAプロバイダが行うため、追加の設定は必要ありません。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy, no-wrap
msgid "JPAStreamer and Panache"
msgstr "JPAStreamerとPanacheについて"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "Any Panache fan will note that JPAStreamer shares some of its objectives with Panache, in simplifying many common queries. Still, JPAStreamer distinguishes itself by instilling more confidence in the queries with its type-safe Stream interface. Luckily however, no one if forced to take a pick as Panache and JPAStreamer work seamlessly alongside each other."
msgstr "Panacheのファンであれば、JPAStreamerが多くの一般的なクエリを簡略化するという点で、Panacheと目的を共有していることに気がつくでしょう。しかし、JPAStreamerは、型安全なStreamインターフェイスにより、クエリに対する信頼性を高めることで差別化を図っています。しかし、幸いなことに、PanacheとJPAStreamerは互いにシームレスに動作するため、どちらかを選ばなければならないことはありません。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "link:https://github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[Here] is an example Quarkus application that uses both JPAStreamer and Panache."
msgstr "JPAStreamerとPanacheの両方を使用するQuarkusアプリケーションの例を link:https://github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[紹介] します。"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "At the time of writing, JPAStreamer does not have support for Panache’s Active Record Pattern, as it relies on standard JPA Entities to generate its meta model. This will likely change in the near future."
msgstr "本稿執筆時点では、JPAStreamerはPanacheのActive Record Patternをサポートしておらず、メタモデルの生成には標準的なJPA Entitiesに依存しているためです。これは近い将来、変更される可能性があります。"

#. type: Title ==
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "JPA in general, and Hibernate ORM in particular, has greatly simplified application database access, but its API sometimes forces unnecessary complexity. With JPAstreamer, you can utilize JPA while keeping your codebase clean and maintainable."
msgstr "JPAは一般的に、特にHibernate ORMはアプリケーションのデータベースアクセスを大幅に簡素化しましたが、そのAPIは時として不必要な複雑さを強いることがあります。JPAstreamerを使えば、コードベースのクリーンさと保守性を保ちながらJPAを利用することができます。"

#: _posts/2023-02-10-jpastreamer-extension.adoc
msgid "Resources"
msgstr "リソース"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**GitHub:** link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"
msgstr "*GitHub:* link:https://github.com/quarkiverse/quarkus-jpastreamer[github.com/quarkiverse/quarkus-jpastreamer]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Homepage:** link:https://jpastreamer.org[jpastreamer.org]"
msgstr "*ホームページ：* link:https://jpastreamer.org[jpastreamer.org]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**JPAStreamer Quarkus Demo:** link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"
msgstr "*JPAStreamer Quarkus デモ:* link:https//github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache[github.com/speedment/jpa-streamer-demo/tree/master/quarkus-hibernate-panache]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Documentation:** link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]"
msgstr "*ドキュメント:* link:https://speedment.github.io/jpa-streamer[speedment.github.io/jpa-streamer]"

#: _posts/2023-02-10-jpastreamer-extension.adoc
#, fuzzy
msgid "**Gitter Support Chat:** link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
msgstr "*Gitter サポートチャット:* link:https://gitter.im/jpa-streamer[gitter.im/jpa-streamer]"
