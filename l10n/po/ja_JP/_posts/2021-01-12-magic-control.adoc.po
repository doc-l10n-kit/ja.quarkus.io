msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:3
msgid "Bored with magic tricks?"
msgstr "手品に飽きた？"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:4
msgid "2021-01-12"
msgstr "2021-01-12"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:5
msgid "vert.x"
msgstr "vert.x"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:6
msgid "How to control the amount of magic from Quarkus"
msgstr "Quarkusのマジックの量をコントロールする方法"

#. type: YAML Front Matter
#: upstream/_posts/2021-01-12-magic-control.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:10
msgid ""
"Just before my PTO, someone told me: '_I don't like magic._'\n"
"In this context, _magic_ refers to the amount of hidden _stuff_ done by Quarkus under the hood for the sake of simplicity.\n"
"It includes dependency injection, annotations, and so on."
msgstr "有休の直前に 誰かに言われました _\"私はマジックが好きじゃない\"_ って。この文脈では、 _マジック_ とは、シンプルにするためにQuarkusが裏側で行っている隠れた _作業_ のことを指します。これには依存性注入やアノテーションなどが含まれます。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:14
msgid ""
"It's not the first time that I get that kind of comment, and coming from the Vert.x project, it makes sense.\n"
"Vert.x has (almost) no magic, and for a good reason: too much magic can be terrible and make production tuning utterly expensive.\n"
"Sometimes you want to have more control and avoid unexpected behaviors: execute the code you wrote, and nothing else."
msgstr "このようなコメントを受けるのは初めてではないし、Vert.xプロジェクトから来ているので、それは理にかなっています。Vert.x には(ほとんど)マジックがありませんが、それには正当な理由があります: マジックが多すぎるとひどいことになり、プロダクションチューニングが全く大変になります。時には、より多くの制御をして予期せぬ動作を避けたい場合があります: ただ書いたコードだけが実行され、それ以外は何もしないで欲しい、ということです。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:18
msgid ""
"But magic is not inherently bad.\n"
"Magic is power that can be used for good or for bad.\n"
"After all, your application runs on a silicon with microcode magic powering an Operating System with abstraction magic powering the Java Virtual Machine with Just In Time magic.\n"
"There is magic, it's just magic you have enough knowledge (or trust) of vs magic you don't."
msgstr "しかし、マジックは本質的に悪いものではありません。マジックは良いことにも悪いことにも使えるパワーなのです。結局のところ、あなたのアプリケーションは、マイクロコードで力を与えられた半導体上で実行される、抽象化のマジックで力を与えられたオペレーティングシステム上の、JITのマジックで力を与えられたJava仮想マシンで動いています。マジックはありますが、それはあなたが十分な知識を持っている(または信頼している)マジックと、そうでないマジックのことです。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:23
msgid ""
"You may think that Quarkus has a lot of magic tricks.\n"
"It is true in some sense but it is easily understood and comes with strong benefits in either memory optimization, startup time optimization or last but not least developer experience improvements.\n"
"You can decide the amount of magic that you want and the amount of control you feel comfortable with.\n"
"You don't have to use dependency injection or managed clients if you prefer doing things yourself."
msgstr "Quarkusにはたくさんのマジックのトリックがあると思うかもしれません。ある意味ではそうなのですが、簡単に理解でき、メモリーの最適化、起動時間の最適化、または開発者の経験の向上のいずれかにおいて強力なメリットがあります。あなたが望むマジックの量と、あなたが快適に感じるコントロールの量を決めることができます。もし自分でやりたいのであれば、依存性注入や管理クライアントを使う必要はありません。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:28
msgid ""
"In this post, we will cover three different approaches to reducing the amount of magic.\n"
"We will go from almost no magic to just enough to get a good developer experience.\n"
"Examples from this blog post are available on https://github.com/cescoffier/quarkus-magic-control[GitHub]."
msgstr "今回の記事では、マジックの量を減らすための3つの異なるアプローチを取り上げます。マジックをほとんど使わない状態から、良い開発者体験を得るために必要なだけの状態にしていきます。このブログ記事の例は link:https://github.com/cescoffier/quarkus-magic-control[GitHub]で公開されています。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:32
msgid "The _almost no magic_ approach"
msgstr "_ほとんどマジックがない_ アプローチ"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:34
msgid ""
"Quarkus applications are Java applications.\n"
"So, somewhere there is a `public static void main(String... args)`.\n"
"While you don't need to write that method when using Quarkus, it can still be convenient and give you more control about your application startup.\n"
"It's also a good trick to start your Quarkus application directly from your IDE."
msgstr "QuarkusのアプリケーションはJavaアプリケーションです。そのため、どこかに `public static void main(String…​ args)` が存在します。Quarkusを使用する際にそのメソッドを記述する必要はありませんが、それでも便利で、アプリケーションの起動についてより多くのコントロールが可能になります。また、IDEから直接Quarkusアプリケーションを起動するのも良いでしょう。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:39
msgid "As an example, we will implement a straightforward HTTP application. Nothing fancy:"
msgstr "例として、簡単な HTTP アプリケーションを実装します。派手なものは何もありません:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:85
msgid ""
"The complete source code is available https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[here].\n"
"Don't expect much more; the application had only one Java class, but let's look into it."
msgstr "完全なソースコードは link:https://github.com/cescoffier/quarkus-magic-control/tree/main/no-magic-example[ここ]にあります。アプリケーションにはJavaクラスが1つしかありませんが、それを調べてみましょう。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:88
msgid ""
"The `@QuarkusMain` indicates that Quarkus should use this class as the _main entry point_ of the application.\n"
"The `run` method contains your application logic.\n"
"We will come back to this logic later.\n"
"First, look at the `public static void main(String... args)` method.\n"
"It just starts the application.\n"
"You can use this entry point directly from your IDE.\n"
"Yes, there is still a bit of magic behind `Quarkus.run`; that's where the extension initialization happens - not unlike _any_ framework initialization including Vert.x.\n"
"As this application does not use any extension, nothing much will happen."
msgstr "`@QuarkusMain` は、Quarkusがこのクラスをアプリケーションの _メインエントリーポイント_ として使用することを示しています。 `run` メソッドには、アプリケーションのロジックが含まれています。このロジックについては後ほど説明します。まず、 `public static void main(String…​ args)` メソッドを見てください。これはアプリケーションを起動するだけです。このエントリーポイントは、IDE から直接使用できます。そう、 `Quarkus.run` の背後にはまだちょっとしたマジックがあります。エクステンションの初期化が行われるのは、 Vert.x を含む _どの_ フレームワークの初期化とも異なります。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:97
msgid ""
"This application https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[depends] directly on Vert.x Web and Vert.x Core.\n"
"The only Quarkus dependency is Arc (not used directly but required):"
msgstr "このアプリケーションは Vert.x Web と Vert.x Core に直接 link:https://github.com/cescoffier/quarkus-magic-control/blob/main/no-magic-example/pom.xml#L17-L26[依存します]。Quarkusの依存関係はArcだけです(直接は使用しませんが必須です):"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:116
msgid ""
"Let's go back to the `run` method.\n"
"It contains the application logic, here, a dummy Vert.x application.\n"
"It creates the `Vertx` instance, a `Router`, registers a few routes, and starts the HTTP server.\n"
"Because we don't want the application to stop immediately, we _wait for exit_.\n"
"The `/bye` request handler illustrates how you can programmatically trigger the application shutdown."
msgstr "`run` メソッドに戻りましょう。これにはアプリケーション・ロジックが含まれており、ここではダミーの Vert.x アプリケーションを使用しています。 `Vertx` インスタンス、 `Router` を作成し、いくつかのルートを登録し、HTTP サーバーを起動します。アプリケーションをすぐに停止させたくないので、 _終了を待ちます_。 `/bye` リクエスト・ハンドラーは、アプリケーションのシャットダウンをプログラムでトリガーする方法を示しています。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:122
msgid ""
"This application has almost no magic, just a single annotation, and a regular Java entry point.\n"
"You may wonder why not using a bare Java program?\n"
"Even used that way, Quarkus provides benefits. For example, you can access the built-in configuration support as illustrated in the snippet:"
msgstr "このアプリケーションにはマジックはほとんどなく、ただのアノテーション1つと、普通のJavaのエントリーポイントがあるだけです。なぜむき出しのJavaプログラムを使わないのかと疑問に思うかもしれません。そのように使用しても、Quarkusには利点があります。例えば、スニペットに示されているように、組み込みの設定サポートにアクセスすることができます:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:131
msgid "The configuration is located in the `application.properties` file."
msgstr "設定は、 `application.properties` ファイルにあります。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:133
msgid ""
"This first approach has a few drawbacks.\n"
"It does not benefit from the built-time processing of Quarkus.\n"
"The logic executed at build time is packaged inside extensions, and in this case, we don't use extensions (except Arc).\n"
"Another issue is that compiling this application to native will fail because extensions are also involved during the native compilation.\n"
"Finally, the hot reload won't work, but you can directly restart the application from your IDE."
msgstr "この最初のアプローチには、いくつかの欠点があります。これはQuarkusのビルド時処理の恩恵を受けていません。ビルド時に実行されるロジックはエクステンションの中にパッケージ化されており、この場合はエクステンションは使用されません(Arcを除く)。もう一つの問題は、このアプリケーションをネイティブにコンパイルすると、ネイティブのコンパイル時にエクステンションも絡んでくるので失敗するということです。最後に、ホットリロードはうまくいきませんが、IDEから直接アプリケーションを再起動することができます。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:139
msgid "Using the managed Vert.x instance"
msgstr "管理された Vert.x インスタンスの使用"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:141
msgid ""
"Quarkus uses Vert.x heavily.\n"
"The `quarkus-vertx-core` extension manages the Vert.x instance used by Quarkus.\n"
"You can use that instance directly and avoid creating the Vert.x instance.\n"
"If you need to configure the instance, you can configure it from https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[the `application.properties`].\n"
"It also enables native packaging (as that extension contains the directive to compile Vert.x applications to native)."
msgstr "QuarkusはVert.xを多用しています。 `quarkus-vertx-core` エクステンションは、Quarkusが使用するVert.xインスタンスを管理します。そのインスタンスを直接使用することができ、Vert.xインスタンスを作成する必要はありません。インスタンスを設定する必要がある場合は、 link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus-vertx-core-eclipse-vert.x-core[`application.properties`] から設定することができます。また、ネイティブパッケージングも可能になります(このエクステンションには Vert.x アプリケーションをネイティブにコンパイルするためのディレクティブが含まれているため)。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:147
msgid "In your pom.xml file, just add the following dependency:"
msgstr "pom.xmlファイルに以下の依存関係を追加します:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:157
msgid "With this, the _run_ method becomes:"
msgstr "これにより、 _run_ メソッドは以下のようになります:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:185
msgid ""
"Note how it retrieves the managed Vert.x instance.\n"
"While you can use `@Inject`, you can also retrieve it programmatically, the rest of the code does not change.\n"
"See? No magic for you!\n"
"We can still start it from the IDE using the _main_ method."
msgstr "管理されている Vert.x インスタンスを取得する方法に注目してください。 `@Inject` を使用することができますが、プログラムで取得することも出来、残りのコードは変更しません。ご覧になりましたか?魔法はありません! _メイン_ メソッドを使用して、IDE から起動することができます。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:190
msgid "If you don't include the `quarkus-vertx-core` extension (or any extension depending on it), Quarkus won't create the Vert.x instance."
msgstr "`quarkus-vertx-core` エクステンション(またはそれに依存するエクステンション)を含まない場合、QuarkusはVert.xインスタンスを作成しません。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:192
msgid "Using extensions gives you some property wiring as well as the build time optimisations and native image compilation:"
msgstr "エクステンションを使用すると、プロパティーの設定や、ビルド時間の最適化、ネイティブイメージのコンパイルも行うことができます:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:201
msgid "But, still no hot reload 😿."
msgstr "しかし、やはりホットリロードはダメですね😿。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:203
msgid "Using the managed HTTP server"
msgstr "管理されたHTTPサーバーの使用"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:205
msgid ""
"Instead of using only the `quarkus-vertx-core` extension, we can choose to delegate the HTTP server to Quarkus.\n"
"You may see that as a loss of control, but actually, we rarely do much around it, and again, you can configure it from the `application.properties` file if needed."
msgstr "`quarkus-vertx-core` のエクステンションだけを使用するのではなく、HTTPサーバーをQuarkusに委任することもできます。 これは制御できないと思われるかもしれませんが、実際には、そのようなことは滅多にしませんが、必要なら、 `application.properties` ファイルから設定することが可能です。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:208
msgid "Instead of ``quarkus-vertx-core`, use `quarkus-vertx-http`:"
msgstr "``quarkus-vertx-core` の代わりに、 `quarkus-vertx-http` を使用してください:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:220
msgid "No need to depend on Vert.x Web directly, it's included."
msgstr "Vert.x Webに直接依存する必要はなく、含まれています。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:222
msgid "You will still register your routes, but using a managed `Router`:"
msgstr "ルートの登録は引き続き行いますが、管理されている `Router` を使用します:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:243
msgid ""
"That approach enables the Quarkus hot reload as it intercepts the HTTP requests.\n"
"You are still in control of everything related to your application logic."
msgstr "このアプローチでは、HTTPリクエストをインターセプトするため、Quarkusのホットリロードが可能になります。アプリケーションロジックに関連するすべてのことを制御することができます。"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:246
msgid "You can start the hot reload using:"
msgstr "次を使ってホットリロードを開始することができます:"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:253
msgid "The final _magic touch_"
msgstr "最後の _マジックタッチ_"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:255
msgid ""
"The question, now, is how far are we from a _regular_ Quarkus application?\n"
"Quite close, actually.\n"
"The equivalent application using RESTEasy Reactive would be something like:"
msgstr "問題は、Quarkusの _通常の_アプリケーションからどれくらい離れているかということです。実際には、かなり近いです。RESTEasy Reactiveを使った同等のアプリケーションは、次のようなものです:"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:274
msgid ""
"Unlike the previous approaches, this one leverages a declarative (annotation-based) model.\n"
"Under the hood, it's not that different from the last approach.\n"
"Quarkus registers a route (on the router), which then calls the `hello` method when a matching request is received.\n"
"The router gets initialized during the `Quarkus.run` method.\n"
"No need for the _main_ endpoint, but you can still use one, often convenient in IDEs."
msgstr "これまでのアプローチとは異なり、このアプローチは宣言的な(アノテーションベースの)モデルを活用しています。内部では、前のアプローチとそれほど違いはありません。Quarkusは(ルーター上で)ルートを登録し、一致するリクエストを受信すると `hello` メソッドを呼び出します。ルータは、 `Quarkus.run` メソッドの間に初期化されます。 _メインエンドポイント_ は必要ありませんが、1つのエンドポイントを使用することができ、IDEでは便利なことが多いです。"

#. type: Title ==
#: upstream/_posts/2021-01-12-magic-control.adoc:280
msgid "Summary"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:282
msgid ""
"Our relation to magic depends on our background and experience.\n"
"Quarkus lets you decide how much magic you accept.\n"
"This post presented fours configurations, going from almost no magic to the _regular_ Quarkus code.\n"
"Each approach has pros and cons:"
msgstr "私たちのマジックとの関係は、私たちのバックグラウンドや経験によって異なります。Quarkusでは、どの程度のマジックを受け入れるかを決めることができます。この記事では、ほとんど魔法を使わない状態から _通常の_ Quarkusコードまで、4つの設定を紹介しました。それぞれのアプローチには長所と短所があります:"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
msgid "Control"
msgstr "コントロール"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
msgid "Build time optimizations"
msgstr "ビルド時最適化"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
msgid "Native executable"
msgstr "ネイティブ実行可能ファイル"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:288
msgid "Hot Reload"
msgstr "ホットリロード"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:290
msgid "_Almost no magic_"
msgstr "_殆どマジックなし_"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:291
msgid "Full"
msgstr "完全"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:300
msgid "🥵"
msgstr "🥵"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:296
msgid "Use the managed Vert.x instance"
msgstr "管理された Vert.x インスタンスの使用"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:297
msgid "Everything but Vert.x"
msgstr "Vert.x以外はすべて"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:298
msgid "😀, for Vert.x"
msgstr "😀、Vert.xの場合"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:312
msgid "😀"
msgstr "😀"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:302
msgid "Use the managed HTTP server"
msgstr "管理されたHTTPサーバーの使用"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:303
msgid "Everything but Vert.x and the HTTP server"
msgstr "Vert.xとHTTPサーバー以外はすべて"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:304
msgid "😀, for Vert.x and HTTP"
msgstr "😀、Vert.x と HTTP の場合"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:308
msgid "_Regular_ Quarkus"
msgstr "_通常の_ Quarkus"

#. type: Table
#: upstream/_posts/2021-01-12-magic-control.adoc:309
msgid "Endpoint managed by Quarkus"
msgstr "Quarkusが管理するエンドポイント"

#. type: Plain Text
#: upstream/_posts/2021-01-12-magic-control.adoc:316
msgid ""
"Pick the approach that fits your needs.\n"
"Besides, most of Quarkus services are also available using a programmatic approach, as we have seen for configuration.\n"
"So, if you prefer avoiding managed objects, feel free just to use the available APIs."
msgstr "ニーズに合ったアプローチを選びましょう。また、設定について見てきたように、Quarkusのサービスのほとんどは、プログラム的なアプローチを使用して利用することもできます。管理されたオブジェクトを避けたい場合は、利用可能なAPIを使用してください。"
