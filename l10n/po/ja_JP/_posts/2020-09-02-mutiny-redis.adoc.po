msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:3
#, fuzzy
msgid "Using Redis with Mutiny - Composing asynchronous actions"
msgstr "MutinyでRedisを使う - 非同期アクションを構成する"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:4
#, fuzzy
msgid "2020-09-02"
msgstr "2020-09-02"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:5
#, fuzzy
msgid "reactive mutiny redis"
msgstr "リアクティブミューティニーレディス"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:6
#, fuzzy
msgid "How to compose asynchronous actions with Mutiny"
msgstr "Mutinyで非同期アクションを構成する方法"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:10
#, fuzzy
msgid "I got an interesting question from a user about Redis and Mutiny. While the problem was not specifically about Redis and could be applied to many other APIs, I found the context amusing."
msgstr "RedisとMutinyについて、あるユーザーから興味深い質問を受けた。問題はRedisに特化したものではなく、他の多くのAPIに適用できるものでしたが、私はその文脈を面白く感じました。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:12
#, fuzzy
msgid "Enrico, the user, wanted to do something like this:"
msgstr "ユーザーのエンリコは、こんなことをやりたかったんです："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:22
#, fuzzy
msgid "Enrico is using the Mutiny variant of the Vert.x Redis Client."
msgstr "Enricoは、Vert.x Redis ClientのMutinyバージョンを使用しています。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:24
#, fuzzy
msgid "This client offers a few methods to help us with our problem:"
msgstr "このクライアントは、私たちの問題を解決するために、いくつかの方法を提案しています："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:26
#, fuzzy
msgid "the `RedisClient.keys(pattern)` method returning `Uni<JsonArray>`. This array contains the list of keys matching a pattern passed to the `keys` method. To simplify this post, let's use: `keys(\"*\")` returning all the keys."
msgstr "`Uni<JsonArray>` を返す `RedisClient.keys(pattern)` メソッド。この配列には、 `keys` メソッドに渡されたパターンに一致するキーのリストが含まれています。この投稿を簡単にするために、 `keys(\"*\")` はすべてのキーを返すとします。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:27
#, fuzzy
msgid "the `RedisClient.hgetall(key)` method returning a `Uni<JsonObject>`. This method retrieves the object associated with the passed key."
msgstr "`Uni<JsonObject>` を返す `RedisClient.hgetall(key)` メソッドである。 このメソッドは、渡されたキーに関連するオブジェクトを取得する。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:29
#, fuzzy
msgid "Both methods are asynchronous (they return `Uni`), and we need to call the second one for each retrieved key. In other words, we need to iterate over the set of keys, and for each key to invoke an asynchronous action. Finally, we want to collect the result of these asynchronous actions into a `JsonArray`."
msgstr "どちらのメソッドも非同期（ `Uni` を返す）であり、取得したキーごとに2番目のメソッドを呼び出す必要があります。つまり、キーの集合を繰り返し処理し、各キーに対して非同期アクションを呼び出す必要がある。最後に、これらの非同期アクションの結果を `JsonArray` に集めたい。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:31
#, fuzzy
msgid "Let's start with the beginning; we need the Redis Client instance:"
msgstr "まずはじめに、Redis Clientのインスタンスが必要です："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:40
#, fuzzy
msgid "Note that in Quarkus, you should use the Redis extension directly, which exposes a similar API. Enrico wanted to use the Vert.x Redis Client directly."
msgstr "Quarkusでは、同様のAPIを公開するRedisエクステンションを直接使用する必要があることに注意してください。Enricoは、Vert.x Redis Clientを直接使いたかったようです。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:42
#, fuzzy
msgid "Now that we have our client, let's retrieve the list of keys:"
msgstr "さて、クライアントができたので、キーのリストを取り出してみましょう："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:49
#, fuzzy
msgid "That produces the `JsonArray`, but we want a stream of keys.  Again, it's an asynchronous method. The returned `Uni` receives the array when it's available. Once received (`onItem`), we can create a stream out of this array:"
msgstr "これは `JsonArray` を生成しますが、私たちはキーのストリームが欲しいのです。繰り返しますが、これは非同期メソッドです。返された `Uni` は、配列が利用可能になったときに受信します。受け取った後（ `onItem` ）、この配列からストリームを作成することができます："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:58
#, fuzzy
msgid "This snippet:"
msgstr "このスニペット："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:60
#, fuzzy
msgid "retrieves the `JsonArray` containing the keys"
msgstr "キーを含む `JsonArray` を取得する。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:61
#, fuzzy
msgid "creates a `Multi` streaming these keys, it's a `Multi<Object>` as a `JsonArray` is extending `Iterable<Object>`"
msgstr "は、これらのキーをストリーミングする `Multi` 、それは `JsonArray` が拡張しているように `Multi<Object>` 。 `Iterable<Object>`"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:62
#, fuzzy
msgid "maps the items from this `Multi` to `String`"
msgstr "は、この `Multi` の項目をマップします。 `String`"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:64
#, fuzzy
msgid "At this point, we have a stream of (String) keys. So, we are done with step 1."
msgstr "この時点で、(String)キーのストリームが出来上がりました。というわけで、ステップ1が終了しました。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:66
#, fuzzy
msgid "Now, step 2: for each key, we want to retrieve the associated object."
msgstr "さて、ステップ2です。各キーに対して、関連するオブジェクトを取得したいと思います。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:68
#, fuzzy
msgid "So let's use the `hgetall` method:"
msgstr "そこで、 `hgetall` 方式を使ってみましょう："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:76
#, fuzzy
msgid "This snippet requires a bit of an explanation."
msgstr "このスニペットには、少し説明が必要です。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:78
#, fuzzy
msgid "For each item of the stream `keys`, we call `hgetall`, which produces a `Uni<JsonObject>`."
msgstr "ストリーム `keys` の各項目について、 `hgetall` を呼び出し、 `Uni<JsonObject>` を生成する。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:80
#, fuzzy
msgid "So, we want to transform our key into a Uni (*transformToUni*)."
msgstr "そこで、キーをUniに変換したい *（transformToUni* ）。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:82
#, fuzzy
msgid "When you have a stream of items and need to invoke an asynchronous action for each item, you must choose how you will merge the results. Mutiny provides two strategies:"
msgstr "アイテムのストリームがあり、各アイテムに対して非同期アクションを呼び出す必要がある場合、結果をマージする方法を選択する必要があります。Mutinyは2つの戦略を提供しています："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:84
#, fuzzy
msgid "*merge -* as soon as the item produced by the `Uni` is received we send it downstream"
msgstr "*merge -* `Uni` で生産されたアイテムを受け取り次第、それを下流に送る。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:85
#, fuzzy
msgid "*concatenate* - we preserve the order of the input stream to be sure that the items are sent downstream in the same order"
msgstr "*連結* - 入力ストリームの順序を保持し、アイテムが同じ順序で下流に送られるようにする。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:87
#, fuzzy
msgid "Let's illustrate this. Imagine we have the keys `1`, `2`, `3` and to the stream `{1, 2, 3}`. Also, let's consider that in our Redis database, the key `1` is associated to `A`, `2` to `B` and `3` to `C`."
msgstr "これを図解してみよう。 `1` , `2` , `3` というキーがあり、 `{1, 2, 3}` というストリームがあるとします。また、Redisデータベースでは、キー `1` が `A` に、 `2` が `B` に、 `3` が `C` に、それぞれ関連付けられているとします。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:89
#, fuzzy
msgid "If you use the *merge* strategy, we are retrieving the associated objects in an undetermined order. We can end up with `{A, C, B}` or `{B, A, C}`. It depends on many factors, such as the latency, scheduling, load and so on. However, it also means we can retrieve all the associated objects concurrently and produce the resulting stream without taking care of the order."
msgstr "*マージ* 戦略を使用する場合、関連するオブジェクトを不確定な順序で取得することになります。 `{A, C, B}` `{B, A, C}` これは、レイテンシー、スケジューリング、負荷など、多くの要因に依存します。しかし、これは、関連するすべてのオブジェクトを同時に取得し、順序を気にすることなく結果のストリームを生成できることを意味します。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:91
#, fuzzy
msgid "If you use the *concatenate* strategy, it preserves the order from the input stream. So, it will always produce `{A, B, C}`. While it may be desirable, it may reduce the ability to retrieve the object concurrently, as Mutiny has to *wait* for all the retrieval of all the previous objects. For example, if Mutiny receives `C` first, it needs to wait for `A` and `B` before sending `C` downstream."
msgstr "*concatenate* ストラテジーを使用すると、入力ストリームからの順序が保持されます。そのため、常に `{A, B, C}` を生成することになる。これは望ましいことかもしれませんが、Mutinyは前のすべてのオブジェクトの取得を *待つ* 必要があるため、オブジェクトを同時に取得する機能が低下する可能性があります。たとえば、Mutinyが最初に `C` を受信した場合、 `C` を下流に送信する前に、 `A` と `B` を待つ必要があります。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:93
#, fuzzy
msgid "In our context, let's not preserve the order and use the *merge* strategy. So we use `transformToUniAndMerge`."
msgstr "この文脈では、順序を維持せず、 *マージ* 戦略を使用することにしましょう。そこで、 `transformToUniAndMerge` を使用します。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:95
#, fuzzy
msgid "If you run the code multiple times, you might see order changes in the resulting array."
msgstr "このコードを複数回実行すると、結果の配列に順序の変化が見られるかもしれません。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:97
#, fuzzy
msgid "Ok, step 2 done. Let's focus on the final steps: accumulate the objects into a `JsonArray`, and produce a `Uni<JsonArray>`, containing all the objects. Mutiny provides methods to gather items from a stream into lists, maps, sets, but there is no built-in `JsonArray` support. Fortunately, Mutiny offers a method that you can use to collect items in any structure:"
msgstr "OK、ステップ2は完了です。オブジェクトを `JsonArray` に集積し、すべてのオブジェクトを含む `Uni<JsonArray>` を生成します。Mutinyは、ストリームからアイテムをリスト、マップ、セットに集めるメソッドを提供していますが、ビルトインの `JsonArray` サポートはありません。幸いなことに、Mutinyには、任意の構造でアイテムを収集するために使用できるメソッドが用意されています："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:105
#, fuzzy
msgid "`collectItems().in` allows accumulating the items in your own structure. It takes two parameters: a supplier of the structure, called only once, and a bi-consumer taking the structure and the item to add, called for each item."
msgstr "`collectItems().in` は、自分自身の構造体にアイテムを蓄積することができます。構造体の供給者は一度だけ呼び出され、構造体と追加するアイテムを受け取るバイコンシューマーはアイテムごとに呼び出されます。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:107
#, fuzzy
msgid "Here we go, we have everything to solve Enrico's question."
msgstr "さあ、これでエンリコの疑問を解決するためのすべてが揃いました。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:109
#, fuzzy
msgid "The *all in one* code is the following:"
msgstr "*オールインワン* コードは以下の通りです："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:124
#, fuzzy
msgid "In this snippet, there are a few interesting patterns:"
msgstr "このスニペットでは、いくつかの興味深いパターンがあります："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:126
#, fuzzy
msgid "When you have a collection, and you want to iterate on it with Mutiny, transform it into a `Multi`"
msgstr "コレクションがあり、Mutinyでそれを反復処理したい場合、それを変換します。 `Multi`"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:127
#, fuzzy
msgid "When you execute asynchronous action for each item of a stream, think about *merge* vs. *concatenate.* Use the one that makes sense for you."
msgstr "ストリームの各アイテムに対して非同期アクションを実行する場合、 *mergeと* *concatenateを* 考える *。* 理にかなった方を使用する。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:128
#, fuzzy
msgid "To accumulate items into a structure, use `collectItems`, it offers many methods to produce your structure of choice."
msgstr "アイテムを蓄積して構造物を作るには、 `collectItems` 。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:130
#, fuzzy
msgid "If you want to see this code in action, check this https://gist.github.com/cescoffier/e8c8a18897f9e5ca15f1378876a1bd93[gist]. You even can run it directly with JBang:"
msgstr "このコードを実際に見てみたい方は、この link:https://gist.github.com/cescoffier/e8c8a18897f9e5ca15f1378876a1bd93[gistを] チェックしてみてください。JBangで直接実行することもできます："

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:137
#, fuzzy
msgid "You can replace *merge* with *concatenate* to see the difference."
msgstr "*mergeを* *concatenateに置き換えて* 、違いを確認することができます。"

#. type: Plain Text
#: upstream/_posts/2020-09-02-mutiny-redis.adoc:139
msgid "Enjoy!"
msgstr "楽しんで!"
