msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:3
#, fuzzy
msgid "Quarkus for Spring Developers"
msgstr "Spring開発者のためのQuarkus"

#. type: YAML Front Matter
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:4
#, fuzzy
msgid "2019-11-12"
msgstr "2019-11-12"

#. type: YAML Front Matter
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:5
#, fuzzy
msgid "extension spring microprofile"
msgstr "エクステンションスプリングマイクロプロファイル"

#. type: YAML Front Matter
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:6
#, fuzzy
msgid "jclingan"
msgstr "じゅりんかん"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:11
#, fuzzy
msgid "The arrival of Quarkus 1.0 brings an innovative platform for developing Linux container- and kubernetes-native Java microservices. Developers typically have to set aside their existing knowledge as they begin to evaluate new and innovative runtime frameworks. Quarkus is different because it was created by a collection of engineers with a deep expertise in a broad collection of Java technologies. This includes Spring API compatibility, brought to Quarkus by the same engineers that bring Spring Boot support to https://www.redhat.com/en/products/runtimes[Red Hat Runtimes]."
msgstr "Quarkus 1.0の登場により、LinuxコンテナやkubernetesネイティブのJavaマイクロサービスを開発するための革新的なプラットフォームが登場しました。開発者は通常、新しく革新的なランタイムフレームワークを評価し始めると、既存の知識を脇に置く必要があります。Quarkusは、幅広いJavaテクノロジーに深い専門知識を持つエンジニアの集まりによって作られたため、他とは異なります。これには、 link:https://www.redhat.com/en/products/runtimes[Red Hat Runtimesに] Spring Bootのサポートをもたらしたのと同じエンジニアによってQuarkusにもたらされたSpring APIの互換性が含まれます。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:17
#, fuzzy
msgid ""
"A free 140-page book, https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers],\n"
"is now available that discusses this topic in greater, and updated, detail."
msgstr "このトピックについて、より詳しく、そして最新の情報を記載した140ページの書籍「 link:https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers] 」が無料で提供されています。"

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:22
#, fuzzy
msgid "I'm a Spring developer. Why Quarkus?"
msgstr "私はSpringの開発者です。なぜQuarkusなのか？"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:23
#, fuzzy
msgid "It is becoming increasingly apparent that containerization in general and Kubernetes in particular is forcing a re-evaluation of Java for the development of cloud native applications. Kubernetes is a  highly dynamic shared infrastructure that becomes more cost effective as the number of applications a cluster can host grows and the responsiveness to application lifecycle changes improves, like redeployments and scaling up/down. Traditional Java cloud native runtimes have layered new functionality on an existing stack, without really re-thinking the underlying stack itself. This results in larger memory consumption and slower startup times, to the point where organizations are now willing to forgo their deep Java expertise to retrain and retool for Go and Node.js to drive more value out of their large investment in Kubernetes clusters."
msgstr "一般的なコンテナ化、特にKubernetesが、クラウド・ネイティブ・アプリケーションの開発においてJavaの再評価を迫りつつあることは、ますます明らかになりつつある。Kubernetesは非常に動的な共有インフラであり、クラスタがホストできるアプリケーションの数が増え、再デプロイやスケールアップ／ダウンのようなアプリケーション・ライフサイクルの変化への応答性が向上すればするほど、コスト効率が向上する。従来のJavaクラウド・ネイティブ・ランタイムは、基礎となるスタック自体を再考することなく、既存のスタックに新しい機能を重ねてきた。その結果、メモリ消費量が大きくなり、起動時間が遅くなる。Kubernetesクラスタへの大規模な投資からより多くの価値を引き出すために、組織はJavaの深い専門知識を捨ててGoやNode.jsの再教育と再調整を行うことを厭わなくなった。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:27
#, fuzzy
msgid "This is the very problem that Quarkus addresses.  Quarkus is optimized for memory density and rapid startup time. Quarkus applications running on the JVM can deliver nearly twice as many application instances in the same amount of RAM when compared to other cloud native Java stacks, and up to 7x more instances when packaged as a native binary. This is more than simply compiling to a native binary using https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] (a feature of https://www.graalvm.org/[GraalVM]). Quarkus has optimized traditionally “highly dynamic” frameworks for Kubernetes immutable infrastructure, resulting in reduced memory utilization and faster initialization. These optimized and https://quarkus.io/guides/[well-documented] frameworks, called “extensions”, consist of best of breed and standard APIs. The result is https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[significant improvements in runtime efficiency]."
msgstr "Quarkusが解決するのは、まさにこの問題です。Quarkusは、メモリ密度と迅速な起動時間に対して最適化されています。JVM上で動作するQuarkusアプリケーションは、他のクラウドネイティブJavaスタックと比較して、同じ量のRAMで約2倍のアプリケーションインスタンスを提供でき、ネイティブバイナリとしてパッケージ化した場合は最大で7倍のインスタンスを提供できます。これは、 link:https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] （ link:https://www.graalvm.org/[graalVMの] 機能）を使って単にネイティブバイナリにコンパイルする以上のものです。Quarkusは、従来の「高ダイナミック」なフレームワークをKubernetesの不変インフラ向けに最適化し、メモリ使用量の削減と初期化の高速化を実現しています。これらの最適化され、 link:https://quarkus.io/guides/[十分に文書化された] フレームワークは「エクステンション」と呼ばれ、ベストオブブリードと標準APIで構成されています。その結果、 link:https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[実行時の効率が大幅に改善] されます。"

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:31
#, fuzzy
msgid "What existing knowledge can Spring developers bring to Quarkus?"
msgstr "Spring開発者がQuarkusに持ち込むことができる既存の知識は何ですか？"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:32
#, fuzzy
msgid "Quarkus’ Spring API compatibility includes https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA]. Additional Spring APIs are being planned like Spring Security and Spring Config. When running on the JVM, Quarkus applications can utilize virtually any Java library. Many libraries, as long as they do not use Java reflection, will compile to native\". Lombok, a popular library among Spring developers for example, works with native compilation. To be clear, the Spring API compatibility in Quarkus is not intended to be a complete Spring platform to re-host existing Spring applications. The intent is to offer enough Spring API compatibility to make developing new applications with Quarkus a natural getting started experience. When combined with pre-optimized extensions, Quarkus delivers an https://quarkus.io/guides/[amazing amount of functionality] for microservices development. With all this being said, developers have successfully migrated Spring applications to Quarkus :-)"
msgstr "QuarkusのSpring APIの互換性には、 link:https://quarkus.io/guides/spring-di-guide[Spring DI] 、 link:https://quarkus.io/guides/spring-web-guide[Spring] Web、 link:https://quarkus.io/guides/spring-data-jpa-guide[Spring] Data link:https://quarkus.io/guides/spring-data-jpa-guide[JPAが] 含まれています。Spring SecurityやSpring Configなど、追加のSpring APIが計画されています。JVM上で実行する場合、Quarkusアプリケーションは、事実上あらゆるJavaライブラリを利用できます。多くのライブラリは、Javaのリフレクションを使用していない限り、ネイティブにコンパイルされます」。例えばSpringの開発者の間で人気のあるライブラリであるLombokは、ネイティブコンパイルで動作する。はっきり言って、QuarkusのSpring API互換は、既存のSpringアプリケーションを再ホストするための完全なSpringプラットフォームであることを意図しているわけではありません。Quarkusで新しいアプリケーションを開発する際に、自然に始められるような十分なSpring API互換性を提供することを意図しています。最適化済みのエクステンションと組み合わせることで、Quarkusはマイクロサービス開発のために link:https://quarkus.io/guides/[驚くほど多くの機能を] 提供することができます。このように、開発者は、SpringアプリケーションをQuarkusに移行することに成功しています:-)。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:36
#, fuzzy
msgid "The Spring Framework is highly dynamic in nature. To address this, the Quarkus Spring compatibility extensions map Spring APIs to APIs in existing extensions that have already been optimized for fast startup, reduced memory utilization and native compilation, like RestEasy and CDI. Also, the Quarkus Spring compatibility extensions do not utilize the Spring application context. For these reasons, attempting to utilize additional Spring libraries will likely not work."
msgstr "Spring Frameworkは、その性質上、非常に動的です。これに対処するため、Quarkus Spring互換エクステンションは、Spring APIを、RestEasyやCDIのように、高速起動、メモリ使用量の削減、ネイティブコンパイルのためにすでに最適化されている既存のエクステンションのAPIにマッピングします。また、QuarkusのSpring互換エクステンションは、Springアプリケーションコンテキストを利用しません。これらの理由から、追加のSpringライブラリを利用しようとしても、うまくいかない可能性が高いです。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:39
#, fuzzy
msgid "*Quarkus Spring Web Example*"
msgstr "*Quarkus Spring Webの例*"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:62
#, fuzzy
msgid "*Quarkus Spring Repository Example*"
msgstr "*Quarkus Springリポジトリの例*"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:75
#, fuzzy
msgid "*Quarkus Spring Service + MicroProfile Fault Tolerance Example*"
msgstr "*Quarkus Spring Service + MicroProfileフォールトトレランスの例*"

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:102
#, fuzzy
msgid "Are there additional benefits for Spring developers?"
msgstr "Spring開発者向けの追加特典はありますか？"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:103
#, fuzzy
msgid "In addition to the improved memory utilization and startup time, Quarkus offers the following benefits to Spring developers:"
msgstr "Quarkusは、メモリ使用量と起動時間の改善に加えて、Spring開発者に次のようなメリットを提供します："

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:105
#, fuzzy
msgid "*Function-as-a-Service (FaaS) Runtime.* When compiled to a native binary, Quarkus applications can start in under .0015 seconds, making it possible to use the existing Spring and Java API knowledge with FaaS functions. (https://quarkus.io/guides/azure-functions-http[Azure], https://quarkus.io/guides/amazon-lambda[AWS Lambda])"
msgstr "*FaaS（Function-as-a-Service）ランタイム。* ネイティブバイナリにコンパイルすると、Quarkusアプリケーションは0.0015秒未満で開始できるため、既存のSpringとJava APIの知識をFaaS機能で使用できます。( link:https://quarkus.io/guides/azure-functions-http[Azure] 、 link:https://quarkus.io/guides/amazon-lambda[AWS Lambda] )"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:106
#, fuzzy
msgid "*Live Coding.* Start with a “Hello World” sample app and transform it into a complex microservice without ever restarting the app. Just save and reload browser to see changes along the way. Quarkus live coding “just works” out of the box, regardless of IDE."
msgstr "*ライブコーディング。* Hello World \"サンプルアプリから始めて、アプリを再起動することなく複雑なマイクロサービスに変換します。ブラウザを保存してリロードするだけで、途中の変更を確認できます。Quarkusのライブコーディングは、IDEに関係なく、すぐに「動作」します。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:107
#, fuzzy
msgid "*Support for reactive and imperative models.* Quarkus has a reactive core that supports the traditional imperative model, reactive model, or both in the same application."
msgstr "*リアクティブモデルと命令型モデルのサポート。* Quarkusにはリアクティブコアがあり、同じアプリケーション内で従来の命令型モデル、リアクティブモデル、またはその両方をサポートします。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:108
#, fuzzy
msgid "*Early detection of dependency injection errors.* Quarkus catches dependency injection errors during compilation instead of at runtime."
msgstr "*依存性インジェクションエラーの早期検出。* Quarkusは、実行時ではなく、コンパイル時に依存性注入エラーを検出します。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:109
#, fuzzy
msgid "*Use best of breed frameworks and standards together.* Quarkus supports Spring API compatibility, Eclipse Vert.x, MicroProfile (JAX-RS, CDI, etc), reactive streams and messaging, and more in the same application. Read https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[“@Autowire MicroProfile into Spring Boot”] for using Spring and MicroProfile APIs together in the same project."
msgstr "*最高のフレームワークと標準を一緒に使用できます。* Quarkusは、Spring APIの互換性、Eclipse Vert.x、MicroProfile（JAX-RS、CDIなど）、リアクティブストリームとメッセージングなどを同じアプリケーションでサポートします。同じプロジェクトでSpringとMicroProfile APIを一緒に使用するには、 link:https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[「@Autowire MicroProfile into Spring] Boot」をお読みください。"

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:112
#, fuzzy
msgid "How should Spring developers get started with Quarkus?"
msgstr "Spring開発者は、Quarkusをどのように使い始めればよいのでしょうか？"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:113
#, fuzzy
msgid "Recommended steps include:"
msgstr "推奨される手順は以下の通りです："

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:115
#, fuzzy
msgid "Follow the https://quarkus.io/get-started/[Getting Started Guide] as a general Quarkus introduction."
msgstr "Quarkusの一般的な紹介として、『 link:https://quarkus.io/get-started/[Getting Started Guide] 』に従ってください。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:116
#, fuzzy
msgid "Follow the https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA] guides."
msgstr "Spring link:https://quarkus.io/guides/spring-di-guide[DI] 、 link:https://quarkus.io/guides/spring-web-guide[Spring] Web、Spring Data link:https://quarkus.io/guides/spring-data-jpa-guide[JPAの] ガイドに従ってください。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:117
#, fuzzy
msgid "Create a new app using https://code.quarkus.io/[code.quarkus.io]."
msgstr "link:https://code.quarkus.io/[code.] Quarkus link:https://code.quarkus.io/[.] ioを使用して、新しいアプリを作成します。"

#. type: Plain Text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:118
#, fuzzy
msgid "Optionally watch https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[Kubernetes Native Spring Apps on Quarkus] Devoxx presentation"
msgstr "オプションでKubernetes link:https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[Native Spring Apps on] Quarkus Devoxxのプレゼンテーションもご覧いただけます。"
