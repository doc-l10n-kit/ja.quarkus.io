msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:3
#, fuzzy
msgid "Generate Helm charts manifests with Quarkus Helm"
msgstr "Quarkus HelmでHelmチャートマニフェストを生成する。"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:4
#, fuzzy
msgid "2022-08-30"
msgstr "2022-08-30"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:5
msgid "extension"
msgstr "extension"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:6
#, fuzzy
msgid "How to use the Quarkus Helm extension to generate the Helm chart manifests"
msgstr "Quarkus Helmエクステンションを使用して、Helmチャートマニフェストを生成する方法。"

#. type: YAML Front Matter
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:7
msgid "jcarvaja"
msgstr "jcarvaja"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:10
#, fuzzy
msgid "https://helm.sh/[Helm] is the most popular package manager that finds, shares, and deploys software built for Kubernetes. To configure Java applications for distribution through Helm, you need to package them as Helm charts containing all the necessary metadata and resource definitions and this can be a very tedious task. The good news is that Quarkus has recently released the new https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] extension that will automatically generate all these Helm chart manifests and resources!"
msgstr "link:https://helm.sh/[Helmは] 、Kubernetes向けに構築されたソフトウェアを検索、共有、デプロイする最も人気のあるパッケージマネージャです。Helmを通じて配布するJavaアプリケーションを設定するには、必要なメタデータとリソース定義をすべて含むHelmチャートとしてパッケージ化する必要があり、これは非常に面倒な作業となります。Quarkusは最近、これらのHelmチャートのマニフェストとリソースをすべて自動生成する新しい link:https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] エクステンションをリリースしたという良い知らせがあります！"

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:12
#, fuzzy
msgid "Introduction to Helm charts"
msgstr "ヘルムチャートの紹介"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:14
#, fuzzy
msgid "First of all, let's introduce how a Helm chart looks like. A Helm chart is a collection of files inside a directory. The following files are mandatory:"
msgstr "まず、Helmチャートがどのようなものか紹介します。Helmチャートは、ディレクトリの中にあるファイルの集合体です。以下のファイルは必須です："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:16
#, fuzzy
msgid "`Chart.yaml`: Chart metadata, such as name, version, and developers."
msgstr "`Chart.yaml` :名前、バージョン、開発者などのチャートのメタデータ。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:17
#, fuzzy
msgid "`values.yaml`: Default configuration values for the chart in YAML."
msgstr "`values.yaml` :チャートのデフォルト設定値（YAML）。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:18
#, fuzzy
msgid "`templates`: A directory containing the list of resources that, in combination with `values.yaml`, generate the application when the chart is installed. The resources are also specified in YAML."
msgstr "`templates` :チャートインストール時に `values.yaml` と組み合わせてアプリケーションを生成するリソースのリストが格納されたディレクトリ。また、リソースは YAML で指定される。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:20
#, fuzzy
msgid "Find more information about Helm charts in the https://helm.sh/docs/topics/charts/[official Helm documentation]."
msgstr "Helmのチャートについては、 link:https://helm.sh/docs/topics/charts/[Helmの公式ドキュメントで] ご確認ください。"

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:22
#, fuzzy
msgid "Getting started with the Quarkus Helm extension"
msgstr "Quarkus Helmエクステンションを始めるにあたって"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:24
#, fuzzy
msgid "Let's now see how we can generate the Helm chart of a Quarkus application."
msgstr "それでは、QuarkusアプリケーションのHelmチャートを生成する方法を説明します。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:26
#, fuzzy
msgid "In this example, we’ll create a Quarkus application with the Quarkus Helm and the Quarkus Kubernetes extensions by running the following command:"
msgstr "この例では、以下のコマンドを実行して、Quarkus HelmとQuarkus Kubernetesエクステンションを使用するQuarkusアプリケーションを作成します："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:39
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the Helm extension to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトがすでに設定されている場合、プロジェクトのベースディレクトリで次のコマンドを実行することで、Helmエクステンションをプロジェクトに追加することができます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:46
#, fuzzy
msgid "This command will add the following dependency to your `pom.xml` file:"
msgstr "このコマンドは、あなたの `pom.xml` ファイルに次の依存関係を追加します："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:56
#, fuzzy
msgid "And now you can generate the Helm resources using the Maven build command:"
msgstr "そして、今度はMavenのビルドコマンドを使って、Helmのリソースを生成します："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:63
#, fuzzy
msgid "Depending on the Quarkus Kubernetes extensions that you are using in your project, the Helm resources will include some resources or others. Since we have used the Quarkus Kubernetes extension, the Helm chart resources will be generated in the `target/helm/kubernetes/<chart name>/` directory."
msgstr "プロジェクトで使用しているQuarkus Kubernetesエクステンションによって、Helmリソースにはいくつかのリソースが含まれたり、その他のリソースが含まれたりします。今回はQuarkus Kubernetesエクステンションを使用しているため、Helmチャートのリソースは `target/helm/kubernetes/<chart name>/` ディレクトリに生成されます。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:67
#, fuzzy
msgid "The `<chart name>` is set from either the property `quarkus.helm.name` or the Quarkus application name."
msgstr "`<chart name>` は、プロパティ `quarkus.helm.name` または Quarkus アプリケーション名のいずれかから設定されます。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:70
#, fuzzy
msgid "Moreover, the Helm resources include the following files in the `target/helm/kubernetes/<chart name>/templates` directory:"
msgstr "さらに、Helmのリソースには、 `target/helm/kubernetes/<chart name>/templates` ディレクトリに以下のファイルが含まれています："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:72
#, fuzzy
msgid "`deployment.yaml`"
msgstr "`deployment.yaml`"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:73
#, fuzzy
msgid "`ingress.yaml`"
msgstr "`ingress.yaml`"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:74
#, fuzzy
msgid "`service.yaml`"
msgstr "`service.yaml`"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:76
#, fuzzy
msgid "Instead, if we were using the Quarkus OpenShift extension, the Helm chart sources would be generated in the `target/helm/openshift/<chart name>/` directory and it would include the files `buildconfig.yaml`, `deploymentconfig.yaml`, `service.yaml` and `imagestream.yaml`."
msgstr "代わりに、Quarkus OpenShiftエクステンションを使用していた場合、Helmチャートソースは `target/helm/openshift/<chart name>/` ディレクトリに生成され、それはファイル `buildconfig.yaml` 、 `deploymentconfig.yaml` 、 `service.yaml` 、 `imagestream.yaml` を含むことになるであろう。"

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:78
#, fuzzy
msgid "Helm use"
msgstr "ヘルム使用"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:80
#, fuzzy
msgid "Let's see next how to use the previously generated Helm chart."
msgstr "それでは次に、先に生成したHelmチャートの使い方を説明します。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:82
#, fuzzy
msgid "First, make sure you have installed the https://helm.sh/docs/intro/install/[Helm command-line interface] (CLI) and logged into a Kubernetes cluster."
msgstr "まず、 link:https://helm.sh/docs/intro/install/[Helmコマンドラインインターフェース] （CLI）をインストールし、Kubernetesクラスタにログインしていることを確認します。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:84
#, fuzzy
msgid "Then run the following Maven command to generate the Helm artifacts:"
msgstr "そして、以下のMavenコマンドを実行して、Helmのアーティファクトを生成します："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:91
#, fuzzy
msgid "And install the generated Helm chart into the cluster:"
msgstr "そして、生成されたHelmチャートをクラスタにインストールします："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:98
#, fuzzy
msgid "The `helm` command waits until the chart is fully installed and the application is up and running."
msgstr "`helm` コマンドは、チャートが完全にインストールされ、アプリケーションが起動するまで待ちます。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:100
#, fuzzy
msgid "You can update your deployment in a couple of ways. The first is via the `upgrade` command of the Helm CLI. After having made changes to your project and regenerated the resources, you can upgrade your deployment using the following command:"
msgstr "デプロイメントを更新するには、いくつかの方法があります。1つ目は、Helm CLI の `upgrade` コマンドを使用する方法です。プロジェクトに変更を加え、リソースを再生成した後、次のコマンドを使用してデプロイメントをアップグレードすることができます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:107
#, fuzzy
msgid "The second way to update a deployment is through the `--set` option of the helm upgrade command:"
msgstr "デプロイメントをアップデートする 2 番目の方法は、helm upgrade コマンドの `--set` オプションを使用する方法です："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:114
#, fuzzy
msgid "The `app.replicas` option is a parameterized property that is mapped by the `values.yaml` file. We'll explore this function more in the next section."
msgstr "`app.replicas` オプションは、 `values.yaml` ファイルによってマッピングされるパラメータ化されたプロパティです。この機能については、次のセクションで詳しく説明します。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:116
#, fuzzy
msgid "Finally, to delete a deployment, enter:"
msgstr "最後に、デプロイメントを削除するには、次のように入力します："

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:123
#, fuzzy
msgid "Mapping values"
msgstr "マッピング値"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:125
#, fuzzy
msgid "Helm allows _mapping_ to set properties of your resources when installing your chart or after your chart has been installed. For example, suppose your deployment template in the `templates/deployment.yaml` file looks like this:"
msgstr "Helmでは、チャートのインストール時、またはチャートのインストール後に、リソースのプロパティを _マッピングで_ 設定することができます。例えば、 `templates/deployment.yaml` ファイルにあるデプロイメントテンプレートが以下のようなものだとします："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:137
#, fuzzy
msgid "You can set the number of replicas to use when installing the chart using the `helm` command, as shown in the previous section:"
msgstr "チャートをインストールする際に使用するレプリカの数は、前項で示したように `helm` コマンドで設定できます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:144
#, fuzzy
msgid "Alternatively, you can set the number of replicas to use in the generated `values.yaml` file, located in the chart's directory at `target/helm/kubernetes/<chart name>/values.yaml`:"
msgstr "また、生成された `values.yaml` ファイル（チャートのディレクトリ `target/helm/kubernetes/<chart name>/values.yaml` にある）で、使用するレプリカの数を設定することもできます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:152
#, fuzzy
msgid "So, do I need to manually update the `values.yaml` and the template resources to map these properties? No! The Quarkus Helm extension will automatically map some preconfigured properties, such as the Kubernetes replicas or the ingress host. The complete list of preconfigured properties is in the https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_values[official Quarkus Helm site] documentation."
msgstr "では、これらのプロパティをマッピングするために、 `values.yaml` とテンプレートリソースを手動で更新する必要があるのでしょうか？いいえ！Quarkus Helmエクステンションは、Kubernetesレプリカやイングレスホストなど、いくつかの事前設定されたプロパティを自動的にマッピングします。事前設定されたプロパティの完全なリストは、Quarkus link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_values[Helmの公式サイト] ドキュメントに記載されています。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:154
#, fuzzy
msgid "Let's try out an example of configuring the replicas using the Quarkus Kubernetes `quarkus.kubernetes.replicas` property. We'll see how the Quarkus Helm extension automatically maps it into the generated Helm chart."
msgstr "Quarkus Kubernetes `quarkus.kubernetes.replicas` プロパティを使用してレプリカを設定する例を試してみましょう。Quarkus Helmエクステンションが、生成されたHelmチャートに自動的にマッピングする様子を見ていきます。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:156
#, fuzzy
msgid "First, set 3 replicas in your `application.properties` file:"
msgstr "まず、 `application.properties` ファイルにレプリカを3つ設定します："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:163
#, fuzzy
msgid "Now, the generated Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will contain the replicas value:"
msgstr "これで、 `target/helm/kubernetes/<chart name>/values.yaml` で生成される Helm の値ファイルには、レプリカの値が含まれることになります："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:171
#, fuzzy
msgid "Also, the deployment template file at `target/helm/kubernetes/<chart name>/templates/deployment.yaml` will have a reference to this value."
msgstr "また、 `target/helm/kubernetes/<chart name>/templates/deployment.yaml` のデプロイメントテンプレートファイルには、この値への参照があります。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:173
#, fuzzy
msgid "But what if we want to map other properties that are not preconfigured? For example, given the following deployment template file, I want to map the value `example` that appears in the `metadata.name` property:"
msgstr "しかし、事前に設定されていない他のプロパティをマッピングしたい場合はどうすればよいでしょうか。例えば、次のようなデプロイメント・テンプレート・ファイルがあるとして、 `metadata.name` プロパティに表示される値 `example` をマッピングしたいと思います："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:184
#, fuzzy
msgid "You can configure the Quarkus Helm extension to map any properties that are present in your resources using https://github.com/yaml-path/YamlPath[YAMLPath expressions]. To continue with the preceding example, you only need to add the following configuration to your properties:"
msgstr "Quarkus Helmエクステンションは、 link:https://github.com/yaml-path/YamlPath[YAMLPath] 式を使用してリソースに存在するすべてのプロパティをマッピングするように設定できます。前述の例を続けるには、以下の設定をプロパティに追加するだけです："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:191
#, fuzzy
msgid "`property` is the property name to be set in the generated `values.yaml`"
msgstr "`property` は、生成されるプロパティに設定されるプロパティ名です。 `values.yaml`"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:192
#, fuzzy
msgid "`paths` is a list of YAMLPath expressions that identify the properties you want to use"
msgstr "`paths` は、使用したいプロパティを特定するためのYAMLPath式のリストです。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:194
#, fuzzy
msgid "Using the properties just defined, the resulting Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will now include:"
msgstr "先ほど定義したプロパティを使用すると、 `target/helm/kubernetes/<chart name>/values.yaml` 、Helmの値ファイルには次のようなものが含まれるようになります："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:205
#, fuzzy
msgid "YAMLPath expressions also support more complex scenarios. You can use the expressions to replace properties for a certain resource type, or properties described as a key-value map. You can find all the supported features in https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_user_properties_using_yamlpath_expressions[here]."
msgstr "YAMLPath式は、より複雑なシナリオにも対応しています。特定のリソースタイプのプロパティや、キーバリューマップとして記述されたプロパティを置き換えるために式を使用することができます。サポートされているすべての機能は、 link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_user_properties_using_yamlpath_expressions[ここで] 見つけることができます。"

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:207
#, fuzzy
msgid "Helm profiles"
msgstr "ヘルムプロファイル"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:209
#, fuzzy
msgid "By default, all properties are mapped to the same Helm `values.yaml` file. However, the Quarkus Helm extension also supports the generation of other Helm values files."
msgstr "デフォルトでは、すべてのプロパティは同じHelm `values.yaml` ファイルにマッピングされます。しかし、Quarkus Helmエクステンションは、他のHelm値ファイルの生成もサポートしています。"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:211
#, fuzzy
msgid "For example, let's say you have two environments: one for testing and another for production. Each environment has a different ingress host that exposes your Kubernetes application. You can configure your application as follows:"
msgstr "例えば、テスト用と本番用の2つの環境があるとします。それぞれの環境には、Kubernetesアプリケーションを公開する異なるイングレスホストがあります。アプリケーションは次のように構成できます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:226
#, fuzzy
msgid "The ingress host property is preconfigured by the Quarkus Helm extension. So you will find the `my-host` value in the `target/helm/kubernetes/<chart name>/values.yaml` file:"
msgstr "イングレスホストプロパティは、Quarkus Helmエクステンションによって事前に設定されます。そのため、 `my-host` の値は、 `target/helm/kubernetes/<chart name>/values.yaml` ファイルで見つけることができます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:234
#, fuzzy
msgid "But because you are also using a profile named `test` in one of your properties, the Quarkus Helm extension also generates a `target/helm/kubernetes/<chart name>/values-test.yaml` file with the content:"
msgstr "しかし、プロパティの1つで `test` というプロファイルも使用しているため、Quarkus Helmエクステンションでは、コンテンツのある `target/helm/kubernetes/<chart name>/values-test.yaml` ファイルも生成されます："

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:242
#, fuzzy
msgid "When installing your chart in the test environment, you can make use of this values file as shown in the following command:"
msgstr "テスト環境にチャートをインストールする場合、以下のコマンドのように、この値ファイルを利用することができます："

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:249
msgid "Summary"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:251
#, fuzzy
msgid "In this article, we learned how to easily generate Helm charts using the Quarkus Helm extension, how to map properties to be set when installing or updating your charts, and how to use Helm profiles."
msgstr "今回は、Quarkus Helmエクステンションを使用してHelmチャートを簡単に生成する方法、チャートのインストールや更新時に設定するプロパティのマッピング方法、Helmプロファイルの使用方法について学びました。"
