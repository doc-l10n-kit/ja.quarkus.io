msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:2
msgid "post"
msgstr "post"

#. type: Title ==
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:10
msgid "Quarkus support for AWS Lambda SnapStart"
msgstr "Quarkus の AWS Lambda SnapStartサポート"

#. type: YAML Front Matter
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:4
msgid "2022-11-28"
msgstr "2022-11-28"

#. type: YAML Front Matter
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:5
msgid "sshaaf"
msgstr "sshaaf"

#. type: YAML Front Matter
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:6
msgid "announcement"
msgstr "announcement"

#. type: YAML Front Matter
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:7
msgid "Amazon Web Services (AWS)  announced the SnapStart feature for AWS Lambda. SnapStart reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "Amazon Web Services（AWS）は、AWS LambdaのSnapStart機能を発表しました。SnapStartは、AWS Lambda上で動作するJavaベースの関数の起動レイテンシーを削減します。そして、Quarkusは初日からこれをサポートします！"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:13
msgid "Amazon Web Services (AWS)  http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announced] the SnapStart feature for AWS Lambda. SnapStart for Java reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "Amazon Web Services（AWS）は、AWS LambdaのSnapStart機能を link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[発表] しました。SnapStart for Javaは、AWS Lambda上で動作するJavaベースの関数の起動レイテンシーを削減します。そして、Quarkusは初日からこれをサポートします！"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:15
msgid "Quarkus is supersonic subatomic Java with a focus on cloud-native applications. The idea behind Quarkus has always been to do at build-time what traditional frameworks do at runtime. Quarkus is optimized for low memory usage and fast startup times. Quarkus brings back _developer joy_ to Java and enables every Java developer out there to use their skills to develop cloud-native apps, including AWS Lambda workloads."
msgstr "Quarkusは、クラウドネイティブアプリケーションに特化したsupersonic subatomic Java です。Quarkusの背後にあるアイデアは、従来のフレームワークが実行時に行うことをビルド時に行うことです。Quarkusは、低メモリ使用量と高速起動を実現するように最適化されています。Quarkusは、Javaに _開発者の喜び_ を取り戻し、すべてのJava開発者が、AWS Lambdaワークロードを含むクラウドネイティブアプリケーションを開発するためにそのスキルを使用できるようにします。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:17
msgid "Quarkus uses the ‘quarkus-amazon-lambda’ extension to build and deploy functions to AWS Lambda. The extension allows developers to use the Quarkus development model like live coding, continuous testing, etc., and the ability to use CDI Injections and additional quarkus extensions. Developers can deploy functions to AWS Lambda using native or Java mode. With today's http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announcement], the SnapStart feature is now an additional option to build and deploy functions written with Quarkus to AWS Lambda."
msgstr "Quarkusでは、 'quarkus-amazon-lambda' エクステンションを使用して、AWS Lambdaへの関数のビルドとデプロイを行っています。このエクステンションにより、開発者はライブコーディング、継続的テストなどのQuarkus開発モデルや、CDI Injectionsや追加のQuarkusエクステンションを使用することができるようになります。開発者は、ネイティブモードまたはJavaモードを使用して、AWS Lambdaに関数をデプロイすることができます。本日の link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[発表]により 、Quarkusで書かれた関数をAWS Lambdaにビルドしてデプロイするためのオプションとして、SnapStart機能が追加されました。"

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:19
msgid "What is SnapStart?"
msgstr "SnapStartとは？"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:21
msgid "Typically AWS Lambda creates a new execution environment when invoking a new function for the first time or when it is scaled up to handle the traffic. SnapStart takes a different approach by taking a snapshot of the execution environment(memory and application state)  of the initialized function execution environment. Furthermore, it persists the snapshot and caches it for low-latency access. When invoking the function, it does not need to spend time initializing code, dependencies, or framework. Instead, Lambda resumes the new execution environment from the persisted snapshot."
msgstr "通常、AWS Lambdaは新しい関数を初めて呼び出すときや、トラフィックを処理するためにスケールアップするときに、新しい実行環境を作成します。SnapStartは、初期化された関数の実行環境（メモリやアプリケーションの状態）のスナップショットを取得することで、異なるアプローチを取ります。さらに、そのスナップショットを永続化し、低レイテンシーでアクセスできるようにキャッシュします。関数を呼び出す際、コードや依存関係、フレームワークの初期化に時間を費やす必要はありません。その代わり、Lambdaは永続化されたスナップショットから新しい実行環境を再開します。"

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:23
msgid "SnapStart considerations"
msgstr "SnapStartの考慮事項"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:26
msgid "Because of how SnapStart works with snapshots and resumes the execution environment with low latency, this benefits functions written with Quarkus. Quarkus can leverage the snapshotting and warm-up code paths for the libraries Quarkus supports."
msgstr "SnapStartはスナップショットで動作し、低レイテンシーで実行環境を再開するため、Quarkusで記述された関数にメリットがあります。Quarkusは、Quarkusがサポートするライブラリのスナップショットおよびウォームアップのコードパスを活用できます。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:28
msgid "For the Developer's code and libraries, they need to consider particular cases when utilizing SnapStart:"
msgstr "開発者のコードやライブラリに対して、SnapStartを利用する際には、特定のケースを考慮する必要があります:"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:30
#, fuzzy
msgid ""
"*Resource connections over the network***:** Snapshots do not guarantee connections back to remote hosts when a function is resumed. Developers will need to ensure and validate the state of connections.  +\n"
"*Pulling in-memory data from sources*: Often, one needs to pull data from a different source into memory. This can also lead to inconsistency if the data at the source has changed or even expired. Ensure and verify the state of such data. +\n"
"*Randomness*: Lambda SnapStart speeds up applications by re-using a single initialized snapshot many times over to resume execution environments. As a result, unique content which was included in the snapshot during initialization may be reused across execution environments and so may no longer remain unique. Ensure that unique content is generated after initialization, and avoid caching unique content during initialization. Refer to the feature documentation to understand these considerations around uniqueness and interfaces available to customers to restore uniqueness."
msgstr ""
"*ネットワーク経由のリソース接続<strong></strong> ：* スナップショットは、機能再開時にリモートホストへの接続を保証するものではありません。開発者は接続の状態を確認し、検証する必要がある。\n"
" *ソースからのインメモリデータのプル* ：しばしば、異なるソースからデータをメモリ内に取り込む必要がある。この場合、ソースのデータが変更されていたり、有効期限が切れていたりすると、不整合が発生する可能性がある。\n"
" ** ランダム性：Lambda SnapStartは、初期化された1つのスナップショットを何度も再利用して実行環境を再開することで、アプリケーションを高速化する。その結果、初期化時にスナップショットに含まれていた一意のコンテンツが実行環境間で再利用され、一意でなくなる可能性があります。一意のコンテンツが初期化後に生成されるようにし、初期化中に一意のコンテンツをキャッシュすることは避けてください。一意性に関するこれらの考慮事項と、一意性を復元するために顧客が利用可能なインターフェイスを理解するには、機能ドキュメントを参照してください。"

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:34
msgid "Quarkus fast startup times and integration with SnapStart"
msgstr "Quarkusの高速な起動時間とSnapStartとの統合"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:36
msgid "A typical Java application uses JIT (Just in time) compilation. When an application starts up, it needs time for specific warm-up code paths to perform better, which means additional CPU cycles for warm-up times. Cloud-native applications demand a faster startup time. Ahead-of-time (AOT) compilation enables that by doing most of the optimizations at build time. A good example here is Quarkus. As a result, we have full speed from startup and no CPU overhead for compilations at startup time. Quarkus application initialization has two phases: static initialization and runtime initialization. This distinction follows the principles of the GraalVM native compilation, inlining the static initialization in the resulting executable, while the runtime initialization happens during the regular execution. We compared multiple functions to understand the benefits of each feature we added:"
msgstr "典型的なJavaアプリケーションでは、JIT（Just in time）コンパイルが使用されています。アプリケーションの起動時には、特定のウォームアップコードパスがより良いパフォーマンスを発揮するための時間が必要で、これはウォームアップ時間のための追加のCPUサイクルを意味します。クラウド・ネイティブ・アプリケーションは、より高速な起動時間を要求します。AOT（Ahead-of-Time）コンパイルは、ビルド時に最適化のほとんどを行うことで、これを可能にします。その好例がQuarkusです。その結果、起動時からフルスピードで、起動時のコンパイルにかかるCPUオーバーヘッドもありません。Quarkusのアプリケーション初期化には、静的初期化と実行時初期化という2つのフェーズがあります。この区別は、GraalVMのネイティブコンパイルの原則に従っており、静的初期化は結果の実行可能ファイルにインライン化し、実行時初期化は通常の実行中に行われます。我々は、追加した各機能の利点を理解するために、複数の関数を比較しました:"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:38
msgid "The Hello function is a simple function returning “Hello” and using the Quarkus AWS Lambda extension"
msgstr "Hello関数は、 \"Hello\" を返すシンプルな関数で、Quarkus AWS Lambdaエクステンションを使用しています。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:39
msgid "The Heroes function implements a CRUD interface on top of DynamoDB. It uses the Quarkus AWS Lamdba HTTP and RESTEasy Reactive. Invocations go through an AWS API Gateway."
msgstr "Heroes関数は、DynamoDBの上にCRUDインターフェイスを実装しています。QuarkusのAWS Lamdba HTTPとRESTEasy Reactiveを使用しています。呼び出しは、AWS API Gatewayを経由します。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:41
msgid "For each function, we compare:"
msgstr "各関数について、比較します:"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:43
msgid "The invocation duration, memory, and billed duration without SnapStart"
msgstr "SnapStartを使用しない場合の起動時間、メモリ、課金期間"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:44
msgid "The invocation duration, memory, and billed duration with a full startup during the warmup phase and the preloading of the classes."
msgstr "ウォームアップフェーズとクラスのプリロード中にフル起動した場合の起動時間、メモリ、課金時間。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:46
msgid "The class preloading loads and initializes all the classes used by the application."
msgstr "クラスプリロードは、アプリケーションが使用するすべてのクラスをロードし、初期化します。"

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:48
msgid "Results"
msgstr "結果"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:52
#, fuzzy
msgid "*Hello Function*"
msgstr "*ハローファンクション*"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, fuzzy
msgid "*Without SnapStart*"
msgstr "*SnapStartなし*"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, fuzzy
msgid "*With SnapStart*"
msgstr "*スナップスタート*"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, fuzzy
msgid "*Native*"
msgstr "*ネイティブ*"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
msgid "Total duration"
msgstr "合計期間"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#, fuzzy
msgid "2230 ms"
msgstr "2230ミリ秒"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#, fuzzy
msgid "202 ms"
msgstr "202ミリ秒"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
msgid "-90.93%"
msgstr "-90.93%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, fuzzy
msgid "356 ms"
msgstr "356 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
msgid "-84.05%"
msgstr "-84.05%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
msgid "Billed duration"
msgstr "課金期間"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, fuzzy
msgid "131 ms"
msgstr "131ミリ秒"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, fuzzy
msgid "109 ms"
msgstr "109ミリ秒"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
msgid "-16.79%"
msgstr "-16.79%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
msgid "171.76%"
msgstr "171.76%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "Memory"
msgstr "メモリ"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
msgid "115 MB"
msgstr "115 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
msgid "104 MB"
msgstr "104 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
msgid "-9.57%"
msgstr "-9.57%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
msgid "59 MB"
msgstr "59 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
msgid "-48.70%"
msgstr "-48.70%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, fuzzy
msgid "*Heroes Function*"
msgstr "*ヒーローズ機能*"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, fuzzy
msgid "15728 ms"
msgstr "15728 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, fuzzy
msgid "965 ms"
msgstr "965ミリ秒"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
msgid "-93.87%"
msgstr "-93.87%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, fuzzy
msgid "1112 ms"
msgstr "1112 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
msgid "-92.93%"
msgstr "-92.93%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, fuzzy
msgid "12550 ms"
msgstr "12550 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, fuzzy
msgid "885 ms"
msgstr "885 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
msgid "-92.95%"
msgstr "-92.95%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, fuzzy
msgid "1113 ms"
msgstr "1113 ms"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
msgid "-91.13%"
msgstr "-91.13%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "222 MB"
msgstr "222 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "173 MB"
msgstr "173 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "-22.07%"
msgstr "-22.07%"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "96 MB"
msgstr "96 MB"

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
msgid "-56.76%"
msgstr "-56.76%"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:71
msgid "Quarkus together with AWS Lambda SnapStart functions enables further runtime optimizations close to the native performance and much faster than the regular Java ones. For some functions, SnapStart is faster than a cold start of a native executable in AWS Lambda. For others, memory usage is better with the native image."
msgstr "QuarkusとAWS LambdaのSnapStart関数を組み合わせると、ネイティブのパフォーマンスに近い、通常のJavaよりもはるかに高速な実行時最適化がさらに可能になります。一部の機能では、SnapStartはAWS Lambdaでネイティブ実行可能ファイルをコールドスタートするよりも高速です。その他の機能では、メモリ使用量はネイティブイメージの方が優れています。"

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:73
msgid "Conclusion"
msgstr "結論"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:75
msgid "Developers now have three options to build and deploy functions to AWS Lambda; JVM mode, Native mode, and the latest inclusion of the SnapStart feature. All three have different use cases. It is important to note that SnapStart is an AWS Lambda feature only."
msgstr "AWS Lambdaに関数をビルドしてデプロイするには、JVMモード、Nativeモード、そして今回追加されたSnapStartの3つのオプションがあります。この3つはすべて異なるユースケースを持っています。SnapStartはAWS Lambdaの機能であることに注意することが重要です。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:77
msgid "With the SnapStart feature, it is possible to run Quarkus in JVM mode with similar and, in some cases, faster startup times than the native image in the AWS Lambda environment. For this to work, developers need to ensure that applications can startup in a safe state, e.g., network connections, resources, etc. Luckily if you are using Quarkus a lot of this is done for you."
msgstr "SnapStart機能を使用すると、AWS Lambda環境のネイティブイメージと同様の、場合によってはより高速な起動時間で、QuarkusをJVMモードで実行することが可能です。これを実現するためには、開発者はアプリケーションが安全な状態で起動できること、例えばネットワーク接続やリソースなどを確保する必要があります。幸いなことに、Quarkusを使用している場合、この多くは実施済です。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:79
msgid "With https://github.com/quarkusio/quarkus/pull/29108[PR #29108] merged into the Quarkus main branch, Quarkus applications can use the SnapStart features on AWS Lambda. The feature will land in the 2.15 platform release as an experimental feature."
msgstr "https://github.com/quarkusio/quarkus/pull/29108[PR #29108] が Quarkus メイン ブランチにマージされると、Quarkus アプリケーションは AWS Lambda で SnapStart 機能を使用できます。 この機能は、実験的な機能として 2.15 プラットフォーム リリースに組み込まれます。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:81
msgid "If you are an AWS Lambda user we encourage you to try out Quarkus with and without AWS Snapstart and compare. Let us know your results and feedback."
msgstr "AWS Lambda ユーザーの場合は、AWS Snapstart の有無にかかわらず Quarkus を試して比較することをお勧めします。 結果とフィードバックをお知らせください。"

#. type: Plain Text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:83
msgid "For more technical details, visit the AWS Lambda SnapStart blog http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[here]."
msgstr "技術的な詳細については、AWS Lambda SnapStart ブログ http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[こちら] にアクセスしてください。"
