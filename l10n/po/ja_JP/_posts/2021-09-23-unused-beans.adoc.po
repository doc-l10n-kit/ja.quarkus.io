msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:3
msgid "Unused Beans and Why We Remove Them"
msgstr "未使用のBeanとそれを取り除く理由"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:4
msgid "2021-09-23"
msgstr "2021-09-23"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:5
msgid "cdi arc"
msgstr "cdi arc"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:6
msgid "Why does Quarkus detect and remove unused beans by default?"
msgstr "Quarkusがデフォルトで未使用のBeanを検出して削除するのはなぜですか？"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-23-unused-beans.adoc:7
msgid "mkouba"
msgstr "mkouba"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:10
msgid ""
"Quarkus is a build-time oriented stack, i.e. it tries to do as much as possible at build time to improve the startup time and memory usage of your application.\n"
"However, it's not always so easy and straightforward as many existing frameworks and libraries do not take this design choice into account.\n"
"And CDI is one of them."
msgstr "Quarkusはビルド時重視のスタックです。つまり、アプリケーションの起動時間とメモリ使用量を改善するために、ビルド時に可能な限りのことをしようとします。しかし、既存のフレームワークやライブラリの多くがこの設計上の選択を考慮していないため、必ずしも簡単でわかりやすいものではありません。CDIはその一つです。"

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:14
msgid "Why Bother"
msgstr "なぜわざわざ"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:16
msgid ""
"A traditional CDI container attempts to find all beans during the application bootstrap.\n"
"For each bean a metadata object is created and kept for the lifetime of the application.\n"
"This allows for certain degree of dynamicity at runtime but it's suboptimal when it comes to memory consumption and application startup time.\n"
"Quarkus, on the other hand, attempts to detect and remove all _unused_ beans, interceptors and decorators during build by default.\n"
"And the reason is simple.\n"
"This optimization helps to minimize the amount of generated classes and the number of metadata objects used at runtime, thus conserving memory."
msgstr "従来のCDIコンテナは、アプリケーションのブートストラップ時にすべてのBeanを見つけようとします。各Beanに対して、メタデータオブジェクトが作成され、アプリケーションの寿命まで保持されます。これにより、ランタイムにある程度の動的性を持たせることができますが、メモリ消費やアプリケーションの起動時間に関しては最適ではありません。一方、Quarkusは、デフォルトでビルド時に _未使用の_ Bean、Interceptor、Decoratorをすべて検出して削除しようとします。その理由は簡単です。この最適化により、生成されるクラスの量と実行時に使用されるメタデータオブジェクトの数を最小限に抑え、メモリを節約することができます。"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:23
msgid ""
"Speaking of generated classes.\n"
"The bean discovery, validation and wiring all components together - all this is perfomed at build time.\n"
"Quarkus then stores the collected metadata in the bytecode, i.e. for each bean one or more classes are generated.\n"
"In order to fullfill some basic CDI API requirements, a bean has at least a corresponding `javax.enterprise.inject.spi.Bean` implementation.\n"
"If it's a normal scoped bean then a client proxy class must be also generated.\n"
"Finally, intercepted and decorated beans require some more internal constructs."
msgstr "生成されたクラスについて。Beanの検出、検証、すべてのコンポーネントのワイヤリングは、すべてビルド時に実行されます。Quarkusでは、収集したメタデータをバイトコードに格納し、各Beanに対して1つ以上のクラスを生成します。いくつかの基本的なCDI API要件を満たすために、Beanは少なくとも対応する `javax.enterprise.inject.spi.Bean` の実装を持っています。それが通常のスコープ付きBeanである場合，クライアントプロキシクラスも生成されなければなりません。最後に，インターセプトされたBean及び装飾されたBeanは，さらにいくつかの内部構造を必要とします。"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:30
msgid ""
"Imagine that your application contains 50 beans that are actually not used anywhere.\n"
"If they have a normal scope (e.g. `@ApplicationScoped`) and are intercepted (e.g. declare a method annotated with `@Transactional`) you can expect more than 150 generated classes.\n"
"And these classes are completely useless.\n"
"Still, the container would have to instantiate and hold a reference on those 50+ bean metadata classes.\n"
"Needless to say, that the bean classes and any referenced classes cannot be a subject to dead code elimination when a native image is generated.\n"
"Therefore, Quarkus implements an algorithm to get rid of all these classes."
msgstr "アプリケーションに、実際にはどこにも使われていない50個のBeanが含まれているとします。それらが通常のスコープ（例： `@ApplicationScoped` ）を持ち、インターセプトされた場合（例： `@Transactional` でアノテーションされたメソッドを宣言する）、150以上のクラスが生成されることが予想されます。そして、これらのクラスは全く役に立たない。それでも、コンテナはこれらの50以上のBeanメタデータクラスをインスタンス化し、参照を保持する必要があります。言うまでもなく、ネイティブイメージを生成する際に、Beanクラスや参照されるクラスをデッドコード排除の対象とすることはできません。そこで、Quarkusでは、これらのクラスをすべて削除するアルゴリズムを実装しています。"

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:37
msgid "What’s Actually Removed?"
msgstr "実際に削除されるものは？"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:39
msgid ""
"Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.\n"
"Unremovable beans:"
msgstr "Quarkusはまず、依存関係ツリーのルートを形成する、いわゆる _削除不可能な_ Beanを特定します。削除不可能なBean:"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:42
msgid "declare an observer method, or"
msgstr "オブザーバー・メソッドを宣言するか"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:43
msgid "have a name designated via `@Named`, or"
msgstr "`@Named` を通して指定された名前を持っているか"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:44
msgid "are annotated with `@io.quarkus.arc.Unremovable`, or"
msgstr "`@io.quarkus.arc.Unremovable` でアノテーションされているか"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:45
msgid "are excluded via the `quarkus.arc.unremovable-types` config property, or"
msgstr "`quarkus.arc.unremovable-types` コンフィグ・プロパティによって除外されているか"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:46
msgid "are otherwise identified by Quarkus extensions."
msgstr "Quarkusのエクステンションで識別されているか。"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:48
msgid ""
"The last point is probably most important, because this is how application entry points are made unremovable.\n"
"A good example is a JAX-RS resource class, identified by the RESTEasy extension.\n"
"Another example is a bean which declares a `@Scheduled` method, identified by the Scheduler extension."
msgstr "最後の点が最も重要であると思われます。なぜならば、これはアプリケーションのエントリーポイントが削除できないようにする方法だからです。例えば、RESTEasyエクステンションで識別されるJAX-RSリソースクラスが良い例です。もう1つの例は、 `@Scheduled` メソッドを宣言しているBeanで、Schedulerエクステンションによって識別されます。"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:52
msgid "An _unused_ bean:"
msgstr "_未使用の_Bean:"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:54
msgid "is not unremovable, and"
msgstr "削除不可能ではないこと"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:55
msgid "is not eligible for injection to any injection point in the dependency tree, and"
msgstr "依存関係ツリーのどの注入ポイントにも注入することが出来ないこと"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:56
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr "依存関係ツリーのどの注入ポイントにも注入可能なプロデューサーを宣言していないこと"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:57
msgid "is not eligible for injection into any `javax.enterprise.inject.Instance` or `javax.inject.Provider` injection point."
msgstr "`javax.enterprise.inject.Instance` または `javax.inject.Provider` の注入ポイントに注入することが出来ないこと"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:59
msgid "Finally, unused interceptors and decorators are not associated with any bean."
msgstr "最後に、未使用のインターセプターとデコレーターは、どのBeanとも関連付けられていません。"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:61
msgid "When using the dev mode (e.g. running `./mvnw quarkus:dev`), you can see more information about which beans are being removed in the Dev UI."
msgstr "開発モードを使用している場合（例： `./mvnw quarkus:dev` を実行している場合）、どのBeanが削除されているかの詳細な情報をDev UIで見ることができます。"

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:63
msgid "Main Drawback"
msgstr "主な欠点"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:65
msgid ""
"But there's one problem.\n"
"Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.\n"
"Therefore, it is possible that a certain bean removal results in a false positive error, i.e. a bean is removed although it's actually used.\n"
"In such cases, you'll notice a big warning in the log.\n"
"Of course, users and extension authors have several options how to eliminate these errors.\n"
"For users, the easiest way is to add a special annotation: `@io.quarkus.arc.Unremovable` or use the `quarkus.arc.unremovable-types` config property.\n"
"Finally, it's also possible to disable this optimization via the `quarkus.arc.remove-unused-beans=false` config property."
msgstr "しかし、1つ問題があります。Quarkusは、 `CDI.current()` 静的メソッドを介して実行されるプログラムによるルックアップを検出できません。そのため、あるビーンの削除で誤検出エラーが発生する可能性があります。つまり、実際に使用されているにもかかわらずビーンが削除されてしまうのです。このような場合には、ログに大きな警告が表示されます。もちろん、ユーザーやエクステンションの作者には、このようなエラーをなくす方法がいくつかあります。ユーザーにとって最も簡単な方法は、特別なアノテーション `@io.quarkus.arc.Unremovable` を追加するか、 `quarkus.arc.unremovable-types` 設定プロパティを使用することです。最後に、 `quarkus.arc.remove-unused-beans=false` の設定プロパティでこの最適化を無効にすることも可能です。"

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:73
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2021-09-23-unused-beans.adoc:75
msgid ""
"Quarkus detects and removes unused beans to help you on your way to a subatomic application.\n"
"And if something goes wrong, there are options that make it possible to configure the behavior of this optimization."
msgstr "Quarkusは、使用されていないBeanを検出して削除し、サブアトミックアプリケーションへの道を支援します。また、何か問題が発生した場合には、この最適化の動作を設定できるオプションが用意されています。"
