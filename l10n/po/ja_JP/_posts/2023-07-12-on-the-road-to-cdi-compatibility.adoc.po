msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:3
#, fuzzy
msgid "On the Road to CDI Compatibility"
msgstr "CDI互換性への道"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:4
#, fuzzy
msgid "2023-07-12"
msgstr "2023-07-12"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:5
#, fuzzy
msgid "arc cdi"
msgstr "アークcdi"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:6
#, fuzzy
msgid "Quarkus is now compatible with CDI Lite."
msgstr "QuarkusがCDI Liteに対応しました。"

#. type: YAML Front Matter
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:7
#, fuzzy
msgid "lthon"
msgstr "石竜子"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:10
#, fuzzy
msgid ""
"Ever since the very first days of Quarkus, the days that are now covered by the blissful fog of oblivion and the survivors only talk about them after a few pints of beer, dependency injection container was an integral part of the envisioned framework.\n"
"And not just any dependency injection container -- a link:/blog/quarkus-dependency-injection/[CDI implementation], of all things."
msgstr "Quarkusの最初の頃、今では忘却の霧に覆われ、生存者たちはビールを何杯か飲んだ後にしかその話をしないような時代から、依存性注入コンテナは、想定していたフレームワークの不可欠な一部だった。しかも、ただの依存性注入コンテナではなく、よりによって link:/blog/quarkus-dependency-injection/[CDIの実装] だった。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:13
#, fuzzy
msgid ""
"At the very beginning, the CDI implementation used was Weld.\n"
"Very soon, the Masterminds and Deep Thoughts behind the CDI work in what eventually became Quarkus, Martin Kouba and Stuart Douglas, realized that Weld cannot possibly unlock the full potential that a build-time oriented framework conceals.\n"
"Thus, ArC was born."
msgstr "当初、CDIの実装にはWeldが使用されていました。すぐに、最終的にQuarkusとなったCDI作業の首謀者であり深遠な思想の持ち主であるMartin KoubaとStuart Douglasは、Weldではビルドタイム指向のフレームワークが秘める可能性を完全に解き放つことはできないと気づいた。こうしてArCが誕生した。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:17
#, fuzzy
msgid ""
"When I first heard of ArC, I thought, surely that means _A reduced CDI_, especially with that capitalization!\n"
"Alas, I was deeply mistaken.\n"
"It is a reference to an activity that I could never possibly indulge in out of the simple concern for my health and safety: _arc welding_.\n"
"(That indeed is a backreference to Weld. There are some clever people here!)"
msgstr "ArCという名前を初めて聞いたとき、きっと _A reduced CDIの_ ことだろうと思った！しかし、それは大きな間違いだった。それは、私が健康と安全への単純な懸念から決して耽溺することのできない活動、 _アーク溶接への_ 言及である。(まさにWeldの裏返しだ。ここには賢い人たちがいる！)"

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:22
#, fuzzy
msgid "Arc Welding"
msgstr "アーク溶接"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:24
#, fuzzy
msgid ""
"ArC started with one important architectural constraint that was significantly different to all other existing CDI implementations at that time: it ought to perform the heavy lifting during application build.\n"
"Among others, this includes the entire bean discovery process.\n"
"If you are familiar with AtInject and its various implementations, this concept doesn't come as a surprise.\n"
"For example, Guice is a popular dependency injection container that does all the work at application runtime, while Dagger is a popular alternative that precomputes dependency wiring at build time."
msgstr "ArCは、当時の既存のCDI実装とは大きく異なる、ある重要なアーキテクチャ上の制約からスタートした。特に、ビーン発見プロセス全体が含まれます。AtInjectとその様々な実装に精通していれば、このコンセプトは驚きではない。例えば、Guiceはアプリケーション実行時に全ての作業を行う人気のある依存性注入コンテナであり、Daggerはビルド時に依存性配線を事前に計算する人気のある代替品です。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:29
#, fuzzy
msgid ""
"With CDI, the situation is not that simple.\n"
"CDI 2.0, the latest version at that time, includes features that ultimately preclude running bean discovery at build time; most notably, the _Portable Extensions_ API.\n"
"To be able to execute portable extensions, you need to have a running CDI container (to deliver events or use the `BeanManager` API), you need to be able to reflect on application classes (the `Annotated*` types directly expose `java.lang.reflect` types), and you need to support portable extension instances holding various kinds of state (including started threads or open sockets)."
msgstr "CDIでは、状況はそれほど単純ではない。当時の最新バージョンであるCDI 2.0には、ビルド時にビーン発見を実行することを最終的に妨げる機能が含まれている。ポータブル拡張を実行できるようにするには、実行中のCDIコンテナが必要であり（イベントを配信したり、 `BeanManager` APIを使用するため）、アプリケーションクラスを反映できる必要があり（ `Annotated*` 型は、 `java.lang.reflect` 型を直接公開する）、様々な種類の状態（開始されたスレッドやオープンされたソケットを含む）を保持するポータブル拡張インスタンスをサポートする必要があります。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:33
#, fuzzy
msgid ""
"There are also features that were challenging to implement, like efficient bean metadata storage and runtime access, or dynamic lookup, but those are _just work_.\n"
"Portable Extensions were downright impossible."
msgstr "効率的なビーンメタデータの保存やランタイムアクセス、動的なルックアップなど、実装が難しかった機能もあるが、それらは _単なる作業_ だ。ポータブル・エクステンションはまさに不可能だった。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:36
#, fuzzy
msgid ""
"ArC made an obvious choice: it will not support Portable Extensions, it will not be a fully compatible implementation of CDI, and it will not be verified by the CDI TCK.\n"
"This decision opened the door to pruning some ancient CDI features that have not been widely used or were deemed not important enough for contemporary software world: conversations, specialization, passivation, interceptors bound using the `@Interceptors` annotation, enablement using `beans.xml`, and so on.\n"
"Some other features are not a good fit for the build-time approach either: the notion of explicit bean archives, `InterceptionFactory`, or some parts of the `BeanManager` API.\n"
"This might sound like a long list, but as a matter of fact, the result was a perfectly \"just enough\" implementation of CDI that allowed running a huge number of existing CDI-based libraries and frameworks, after writing a Quarkus-specific integration."
msgstr "ArCは、Portable Extensionsをサポートせず、CDIの完全な互換性のある実装ではなく、CDI TCKによる検証も行わないという、明白な選択をした。この決定により、古くからあるCDIの機能のうち、広く使われていなかったり、現代のソフトウェアの世界では十分に重要でないと判断されたものを切り捨てる道が開かれた：会話、特殊化、パッシベーション、 `@Interceptors` アノテーションを使用してバインドされたインターセプター、 `beans.xml` を使用したイネーブルメントなど。他にも、明示的なビーンアーカイブの概念、 `InterceptionFactory` 、 `BeanManager` API の一部など、ビルド時のアプローチに適していない機能もあります。これは長いリストのように聞こえるかもしれませんが、実際のところ、Quarkus固有の統合を記述した後、膨大な数の既存のCDIベースのライブラリやフレームワークを実行することができる、CDIの完全に「ちょうどいい」実装となりました。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:41
#, fuzzy
msgid "All was nice and rosy, pink unicorns happily roamed flowery meadows, double rainbows glowed on clear sunny skies, and developers developed mighty microservices all over the link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Over time, some features that were originally omitted, such as decorators, were also implemented."
msgstr "ピンクのユニコーンがお花畑を楽しそうに歩き回り、快晴の空には二重の虹がかかり、開発者たちは link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspaceの] あちこちで強大なマイクロサービスを開発した。時間の経過とともに、デコレーターのような当初は省かれていた機能も実装されるようになった。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:43
#, fuzzy
msgid ""
"Of course, some people tried to complain that Quarkus claims it implements CDI, while it really doesn't, because it doesn't pass the TCK, but we don't have to fuss over that.\n"
"The absence of these features has been clearly documented, and majestic exclusion lists have been a noble tradition in the CDI world since the beginning of time anyway."
msgstr "もちろん、QuarkusがCDIを実装していると主張しながら、実際にはTCKをパスしていないためにCDIを実装していないと文句を言おうとする人もいたが、そんなことで騒ぐ必要はない。これらの機能がないことは明確に文書化されているし、威厳のある除外リストはCDIの世界では昔から高貴な伝統だった。"

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:46
#, fuzzy
msgid "CDI Lite"
msgstr "CDIライト"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:48
#, fuzzy
msgid "ArC has quite successfully proven that there indeed is a small seed hidden in CDI, waiting to be watered and manured, waiting to grow and blossom and show to the world that CDI need not be just \"guiced\"; it can also be \"daggered\"."
msgstr "ArCは、CDIには確かに小さな種が隠されていて、水をやり、肥料をやるのを待っている。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:50
#, fuzzy
msgid ""
"A small group of engineers convened in Red Hat, trying to contrive a diabolical plan: could this be made part of CDI proper?\n"
"The idea was link:https://github.com/jakartaee/cdi/issues/425[discussed] externally and internally fairly extensively.\n"
"Fortunately, CDI was conceived at Red Hat, so we had all the experts, and the link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[first concrete idea] of how this could be done was published relatively soon."
msgstr "エンジニアの小さなグループがレッドハットに集まり、極悪非道な計画を練ろうとした。このアイデアは外部でも内部でもかなり広範囲に link:https://github.com/jakartaee/cdi/issues/425[議論さ] れた。幸いなことに、CDIはRed Hatで考案されたものだったので、すべての専門家が揃っており、これをどのように行うかという link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[最初の具体的なアイデアは] 比較的すぐに発表された。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:54
#, fuzzy
msgid ""
"A huge part of those discussions revolved around Portable Extensions.\n"
"As mentioned earlier, they cannot be supported at build time, so we knew early on that we had to design a new extension API.\n"
"(This is when yours truly enters the scene, not planning to leave until the curtain falls.)\n"
"We made several prototypes of various aspects of the API, including a new language model, and eventually link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[published a proposal] (beware, the article is now severely outdated!).\n"
"We called it _Build Compatible Extensions_, to highlight the stark contrast with Portable Extensions: this API can be implemented both at build time and at runtime."
msgstr "これらの議論の大部分は、ポータブル・エクステンションをめぐるものだった。前述したように、これらはビルド時にはサポートされないので、新しいエクステンションAPIを設計しなければならないことは早い段階でわかっていた。(これは、幕が下りるまで去るつもりのない、私自身がこのシーンに登場した時である)。私たちは新しい言語モデルを含むAPIの様々な側面のプロトタイプをいくつか作り、最終的に link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[提案書を] 発表した(この記事は今ではかなり古いのでご注意を！)。このAPIは _ビルド_ 時とランタイムの両方で実装することができる。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:60
#, fuzzy
msgid ""
"Publishing that proposal had two effects.\n"
"First, it has shown that communication is hard, online communication is harder and online communication in a non-native language is pretty darn painful.\n"
"Second, it has shown serious interest from us in doing the necessary work.\n"
"And it wasn't just us -- some Oracle people have also shown up, most notably Graeme Rocher of the Micronaut fame.\n"
"Over the subsequent year, the Core CDI specification was link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactored] into CDI Lite and CDI Full, the Build Compatible Extensions API was link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporated] (and for that, I actually implemented two prototypes, one in ArC and the other as a Portable Extension for Weld), the CDI TCK was split to support testing only CDI Lite implementations, and so on."
msgstr "その提案を発表したことで、2つの効果があった。第一に、コミュニケーションは難しく、オンライン・コミュニケーションはより難しく、母国語でない言語でのオンライン・コミュニケーションはかなり苦痛であることを示した。第二に、必要な作業を行うことに私たちが真剣に関心を示してくれたことだ。私たちだけでなく、オラクルの関係者、特にマイクロノートで有名なグレーム・ロシェも現れた。その後1年間で、Core CDIの仕様がCDI LiteとCDI Fullに link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[リファクタリングさ] れ、Build Compatible Extensions APIが link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[組み込ま] れ（そのために、私はArCとWeldのPortable Extensionとして2つのプロトタイプを実装した）、CDI TCKがCDI Liteの実装のみをテストするために分割された。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:66
#, fuzzy
msgid "Finally, as part of Jakarta EE 10, CDI 4.0 was released, featuring the Lite specification, which became the cornerstone of Jakarta EE Core Profile, which in turn became the cornerstone of MicroProfile."
msgstr "そして、Jakarta EE 10の一部として、CDI 4.0がリリースされ、Lite仕様が採用された。Lite仕様は、Jakarta EE Core Profileの基礎となり、MicroProfileの基礎となった。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:68
#, fuzzy
msgid "End of story, go home? Not so fast."
msgstr "話は終わりだ、帰れ？そうはいかない。"

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:70
#, fuzzy
msgid "Compatible Implementation"
msgstr "互換性のある実装"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:72
#, fuzzy
msgid ""
"Now that we have the CDI Lite specification, do we have any implementations?\n"
"Of course, all existing implementations of CDI become CDI Full implementations relatively easily; the hardest part is implementing the new extension API, which is possible using a Portable Extension.\n"
"But are there any _new_ implementations?\n"
"Is ArC a CDI Lite implementation now?\n"
"Is it verified by the TCK at last?"
msgstr "CDI Lite仕様ができた今、実装はあるのでしょうか？もちろん、既存のCDIの実装はすべて比較的簡単にCDI Fullの実装になります。最も難しいのは、新しい拡張APIを実装することですが、これはPortable Extensionを使えば可能です。しかし、 _新しい_ 実装はあるのでしょうか？ArCはCDI Liteの実装ですか？ついにTCKによって検証されたのでしょうか？"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:78
#, fuzzy
msgid ""
"We naturally intended for ArC to implement CDI Lite, but it wasn't just ArC.\n"
"The link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] project also strives to become a CDI Lite implementation, and it is built on top of the Micronaut framework.\n"
"I can't speak for that project, but I can say that working on the CDI Lite specification together with the talented people behind ODI was a great experience!"
msgstr "私たちは当然ArCにCDI Liteを実装させるつもりでしたが、それはArCだけではありませんでした。 link:https://projects.eclipse.org/projects/ee4j.odi[EclipseのOpen DI] プロジェクトもCDI Liteの実装を目指しており、Micronautフレームワークの上に構築されています。そのプロジェクトのことは言えませんが、ODIを支える才能ある人たちと一緒にCDI Liteの仕様に取り組んだことは、素晴らしい経験だったと言えます！"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:82
#, fuzzy
msgid ""
"Now, when it comes to ArC, more work obviously ensued.\n"
"I fortunately already had an Arquillian adapter for ArC from the previous prototyping work (Arquillian is a testing framework the CDI TCK relies upon), and the other relevant TCKs are very easy to embed.\n"
"It wasn't too hard to start running them: the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK.\n"
"We started running the TCKs with standalone ArC, to make the work easier and faster.\n"
"The CDI Lang Model TCK was always passing, as I was developing the implementation together with the specification, and getting the AtInject TCK to pass did not require too much time (it was mostly about implementing a precise resolution of overriden methods).\n"
"The CDI Lite TCK is clearly the most complex one; at the beginning, we had roughly 2/3 of the tests passing and the remaining 1/3 failing, for many different reasons."
msgstr "さて、ArCとなると、当然ながらもっと多くの作業が発生した。ArquillianはCDI TCKが依存しているテスト・フレームワークである）そして、他の関連するTCKはとても簡単に組み込むことができる。AtInject TCK、CDI Lang Model TCK、CDI Lite TCKの実行はそれほど難しくありませんでした。TCKをスタンドアロンのArCで動かし始めたのは、作業をより簡単に、より速くするためです。CDIラングモデルTCKは、私が仕様書と一緒に実装を開発していたため、常にパスしていましたし、AtInject TCKをパスさせるのにもそれほど時間はかかりませんでした（オーバーライドされたメソッドを正確に解決する実装が主でした）。CDI Lite TCKは、明らかに最も複雑なものです。当初は、テストのおよそ2/3が合格し、残りの1/3がさまざまな理由で不合格でした。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:89
#, fuzzy
msgid ""
"During the Quarkus 2.16 development cycle, I created an initial exclusion list and we started closing the gap.\n"
"For a while, we had to work in an extra repository, until Quarkus moved from the `javax` dependencies to `jakarta`, but that was fairly simple to set up.\n"
"The Arquillian adapter needed improvements to correctly implement the CDI type discovery rules (because ArC leaves most of type discovery to the integrator).\n"
"Many validations were missing from ArC and we added those.\n"
"We even implemented some more features.\n"
"When standalone ArC was passing the TCKs, it didn't take much time to run them with full Quarkus too.\n"
"Overall, this link:https://github.com/quarkusio/quarkus/issues/28558[took] 26 pull requests and 109 commits, over the course of four to five months."
msgstr "Quarkus 2.16の開発サイクルの間に、最初の除外リストを作成し、ギャップを埋め始めました。しばらくの間、Quarkus が `javax` の依存関係から `jakarta` に移行するまで、私たちは余分なリポジトリで作業しなければなりませんでしたが、セットアップはとても簡単でした。Arquillian アダプタは CDI の型検出ルールを正しく実装するために改良が必要でした（ArC は型検出のほとんどをインテグレータに任せているため）。多くのバリデーションが ArC に欠けていたので、それらを追加しました。さらにいくつかの機能も実装しました。スタンドアロンのArCがTCKをパスしていたとき、完全なQuarkusでもそれを実行するのにそれほど時間はかかりませんでした。全体として、4～5 link:https://github.com/quarkusio/quarkus/issues/28558[ヶ月かけて] 26のプルリクエストと109のコミットを行いました。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:97
#, fuzzy
msgid ""
"We unfortunately also had to create a _strict mode_.\n"
"ArC has several usability improvements on top of the CDI specification, and a few of them go against the specification rules.\n"
"We recommend users to use the default mode which includes these improvements, but we also want to have an option to turn those improvements off, for people who value specification compatibility more."
msgstr "私たちは残念ながら、 _ストリクト・モードも_ 作らなければなりませんでした。ArC は CDI 仕様の上にいくつかの使い勝手の改善を施しており、そのうちのいくつかは仕様のルールに反しています。これらの改良を含むデフォルトモードを使用することをお勧めしますが、仕様の互換性をより重視する方々のために、これらの改良をオフにするオプションも用意したいと考えています。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:101
#, fuzzy
msgid ""
"And since we are lazy people, like all decent programmers, running the TCKs is automated as part of the Quarkus Maven build (which means they also run on all pull requests to Quarkus that touch ArC).\n"
"If you want to try it yourself, it requires very little manual work."
msgstr "私たちは怠け者なので、まともなプログラマーと同じように、TCKの実行はQuarkusのMavenビルドの一部として自動化されています（つまり、ArCに触れるQuarkusへのすべてのプルリクエストでも実行されます）。もし自分で試したいのであれば、手作業はほとんど必要ありません。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:104
#, fuzzy
msgid "Clone the Quarkus repository, if you don’t have it already:"
msgstr "まだ持っていなければ、Quarkusリポジトリをクローンしてください："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:110
#, fuzzy
msgid "Build Quarkus:"
msgstr "クアルカスを作る："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:117
#, fuzzy
msgid "Run the AtInject TCK:"
msgstr "AtInject TCKを実行する："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:124
#, fuzzy
msgid "Run the CDI Lang Model TCK:"
msgstr "CDIラングモデルTCKを走らせる："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:131
#, fuzzy
msgid "Run the CDI Lite TCK:"
msgstr "CDI Lite TCKを実行する："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:139
#, fuzzy
msgid "If everything went fine, you should see the following outputs."
msgstr "すべてがうまくいっていれば、次のような出力が表示されるはずだ。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:141
#, fuzzy
msgid "For AtInject:"
msgstr "AtInjectの場合："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:150
#, fuzzy
msgid "For CDI Lang Model:"
msgstr "CDIラングモデル用："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:159
#, fuzzy
msgid "For CDI Lite:"
msgstr "CDIライト用："

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:168
#, fuzzy
msgid "And that's all, folks!"
msgstr "以上だ！"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:170
#, fuzzy
msgid "It is my pleasure to announce that Quarkus 3.2 successfully passes the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK and hence becomes a compatible implementation of CDI Lite."
msgstr "Quarkus3.2がAtInject TCK、CDI Lang Model TCK、CDI Lite TCKに合格し、CDI Liteの互換実装となったことを発表できることを嬉しく思います。"

#. type: Plain Text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:172
#, fuzzy
msgid ""
"I would also like to extend my sincere gratitude to Martin Kouba and Matěj Novotný, our resident CDI gurus, for welcoming me and sharing with me their deep knowledge of the subject.\n"
"I mostly just tried to not wreck their code.\n"
"(Which, over time, also became my code, I guess. Whoops!)"
msgstr "また、CDI専属の達人であるMartin KoubaとMatěj Novotnýには、私を歓迎し、彼らの深い知識を共有してくれたことに心から感謝したい。私は彼らのコードを壊さないようにしただけだ。(そのうちに私のコードにもなってしまったが、おっと！）。"
