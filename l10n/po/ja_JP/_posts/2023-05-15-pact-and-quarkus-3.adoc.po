msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:3
#, fuzzy
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr "PactとQuarkusを使ってマイクロサービスのテストを飼いならす"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:4
#, fuzzy
msgid "2023-05-15"
msgstr "2023-05-15"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:5
msgid "extension"
msgstr "extension"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:6
#, fuzzy
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr "Quarkus 3とQuarkiverse Pactエクステンションにより、Quarkusは継続的にテストを実行できます。"

#. type: YAML Front Matter
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:7
#, fuzzy
msgid "hcummins"
msgstr "カミンズ"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:10
#, fuzzy
msgid ""
"In a microservices architecture, making sure each microservices works is (relatively) easy.\n"
"The microservices are usually small, and easy to test.\n"
"But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr "マイクロサービス・アーキテクチャでは、各マイクロサービスが動作することを確認するのは（比較的）簡単だ。マイクロサービスは通常小さく、テストも容易だ。しかし、マイクロサービスが連携して動作することをどうやって確認するのか？システム全体が動作するかどうかをどうやって知るのか？"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:14
#, fuzzy
msgid ""
"One answer is contract testing.\n"
"Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr "その答えのひとつが契約テストである。契約テストは、個々のサービスをテストするよりも信頼性が高いが、コストはエンド・ツー・エンドのテストよりもはるかに低い。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:17
#, fuzzy
msgid "What's wrong with end-to-end testing?"
msgstr "エンド・ツー・エンドのテストの何が問題なのか？"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:19
#, fuzzy
msgid ""
"Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.\n"
"Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM,\n"
"because the application involved dozens of microservices and they consumed so many resources.\n"
"(If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr "開発中であっても、個々のマイクロサービスのすべての依存関係とコンシューマを立ち上げるのは大変な作業です。彼は、64GBのRAMを搭載した新品のラップトップで開発スタックを実行することができませんでした。アプリケーションには何十ものマイクロサービスが含まれており、多くのリソースを消費するからです。(もしこれが聞き覚えのあるものであれば、Quarkusは link:https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[スタックのリソース消費を抑える] のに役立ちますが、それは別の話題です！)"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:24
#, fuzzy
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments]."
msgstr "チームは、ローカルのコードを注入できるリモート環境を提供することで、ローカルのマイクロサービス開発の課題に対処することがある。これは link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"リモート開発 \"] やテレプレゼンスと呼ばれることもある。もう一つの、純粋にローカルなモデルは、 link:https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[ローカルの仮想環境] だ。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:28
#, fuzzy
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr "このような環境は便利である反面、壊れやすいこともあり、その管理には専門のプラットフォーム・チームが必要になることが多い。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:30
#, fuzzy
msgid "What's wrong with mocks?"
msgstr "モックの何が問題なのか？"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:32
#, fuzzy
msgid ""
"When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.\n"
"(Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)\n"
"Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.\n"
"However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.\n"
"Users of a service will bake their own assumptions about how a service behaves into a mock.\n"
"If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr "システムの残りの部分の「実際の」バージョンをテスト対象にするのは重すぎる場合、チームはしばしばモックやスタブを使う（モックとスタブは微妙に違うが、簡単のために「モック」で両方を説明する）。モックには多くの利点がある。軽量で、外部依存性のあるコードの単体テストが可能だ。しかし、モックには大きな欠点もある。モックが本物のように振る舞う保証はないのだ。サービスの利用者は、そのサービスがどのように振る舞うかについて自分自身の思い込みをモックに焼き付ける。サービスが変更された場合、何が変更されたかを把握してモックを更新するのは消費するコード次第だ。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:39
#, fuzzy
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr "このような仮定が初めてテストされるのは、本番であることもある。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:41
#, fuzzy
msgid "Contract tests"
msgstr "契約テスト"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:43
#, fuzzy
msgid ""
"How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider?\n"
"This is where contract testing helps. A contract testing framework powers two things:"
msgstr "消費者が使っているモックと、プロバイダーが行っている機能検証を結びつけるにはどうすればいいのだろうか？ここでコントラクト・テストが役に立つ。コントラクト・テスト・フレームワークは2つのことを可能にする："

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:46
#, fuzzy
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr "生成されたモックは、コンシューマーのコードが正しく動作することを検証するためにコンシューマーが使用します。モックはコントラクトとサンプルから生成されます。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:47
#, fuzzy
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr "生成された機能テストは、プロバイダが期待通りに動作することを検証します。これらのテストは、コンシューマのモックと同じコントラクトとサンプルから生成されます。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:49
#, fuzzy
msgid ""
"With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.\n"
"You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.\n"
"This is known as \"contract-first\", and it can be a very effective development technique.\n"
"My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr "link:https://en.wikipedia.org/wiki/Test-driven_development[テスト駆動開発（TDD] ）では、テスト（望ましい振る舞いの記述）から始めて、実装まで逆算する。コントラクトテストでも同じことができます。サービスが何をする必要があるかを記述したコントラクトから始めて、実装まで逆算します。これは「コントラクトファースト」と呼ばれ、非常に効果的な開発手法となる。Red Hat App Dev Consulting の私の同僚が、コントラクトファ link:https://appdev.consulting.redhat.com/tracks/contract-first/[ースト開発の使い方] について素晴らしい記事を書いています。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:54
#, fuzzy
msgid "Contract test options"
msgstr "契約試験オプション"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:56
#, fuzzy
msgid ""
"There are a few different contract-testing frameworks out there,\n"
"including Pact, Microcks, Spring Cloud Contract.\n"
"Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.\n"
"Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr "Pact、Microcks、Spring Cloud Contractなど、いくつかの異なるコントラクト・テスト・フレームワークがある。また、機能テスト用のSchemathesisやモッキング用のPrismなど、OpenAPIベースのツールチェーンを独自に構築するチームもあります。最も人気のあるコントラクトテストソリューションは間違いなくPactであり、Quarkiverseのコントラクトテストサポートはここから始まりました。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:61
#, fuzzy
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr "Pactはポリグロットで、ほとんどすべての一般的な言語に対応している。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:62
#, fuzzy
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr "コンシューマー向けのモックとプロバイダー向けの機能テストの両方を提供する統合ソリューションだ。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:63
#, fuzzy
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr "スタンドアロンで、追加サービスを立ち上げることなく実行できるが、素晴らしい付加価値を持つパクト・ブローカーが利用できる。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:64
#, fuzzy
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr "PactはRESTのみのソリューションとしてスタートしたが、現在は link:https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[プラグイン可能] で、さまざまなプロトコルとトランスポートをサポートしている。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:66
#, fuzzy
msgid ""
"The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing\n"
"(such as validation based on an OpenAPI spec) and contract testing."
msgstr "Pactチームは、スキーマベースのテスト（OpenAPI仕様に基づく検証など）とコントラクトテストの長所と短所を link:https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[よく] 理解している。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:69
#, fuzzy
msgid "What's new with Pact and Quarkus"
msgstr "パクトとQuarkusの新情報"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:71
#, fuzzy
msgid ""
"Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0,\n"
"but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr "Quarkusのコントリビューターは、Quarkus 2.0でPactテストをサポートするために、Quarkusコアで link:https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[いくつかの] link:https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[クラスロードの調整を] 行いましたが、このサポートには制限がありました。特に、Pactテストは継続テストモードで実行できませんでした。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:74
#, fuzzy
msgid ""
"Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.\n"
"Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.\n"
"These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider]\n"
"and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr "Quarkus 3.0では、PactのサポートがQuarkusコアから独自のQuarkiverseエクステンションに移動し、より深くサポートされるようになりました。Quarkusコアには、Kotlinエクステンションのクラスロードの変更と、継続的テスト自体のクラスロードの修正も含まれています。これにより、Pact Quarkiverseの link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[プロバイダーと] link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[コンシューマーの] エクステンションで、Pactテストが `quarkus test` 、 `quarkus dev` 。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:79
#, fuzzy
msgid "To install the consumer extensions, run"
msgstr "コンシューマー・エクステンションをインストールするには、以下を実行する。"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:81
#, fuzzy
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer"
msgstr "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:85
#, fuzzy
msgid "The provider extension can be installed with"
msgstr "プロバイダーエクステンションをインストールするには"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:86
#, fuzzy
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider"
msgstr "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:90
#, fuzzy
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr "契約テストの深堀りについては、Quarkus link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Insights #117を] ご覧ください。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:93
msgid "Summary"
msgstr "概要"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:95
#, fuzzy
msgid ""
"If you're using microservices, you should seriously consider contract testing.\n"
"With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same\n"
"great workflow as other tests."
msgstr "マイクロサービスを使用している場合、コントラクトテストを真剣に検討する必要があります。新しいPactエクステンションにより、Quarkus 3では、他のテストと同じ優れたワークフローを使用してコントラクトテストを開発できます。"

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:99
#, fuzzy
msgid "More resources"
msgstr "その他のリソース"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:101
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentation for the Pact extensions]"
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[エクステンションのドキュメント]"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:102
#, fuzzy
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr "link:https://docs.pact.io/implementation_guides/jvm[Pact JVMバインディング・ドキュメント]"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:103
#, fuzzy
msgid "https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Contract Testing Module] of the Quarkus Superheroes workshop"
msgstr "Quarkus Superheroesワークショップの link:https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[契約テストモジュール]"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:104
#, fuzzy
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr "link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[エクステンションに関するQuarkusの洞察]"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:105
#, fuzzy
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr "link:https://github.com/holly-cummins/pact-quarkus-sweater-demo[Quarkus Pactエクステンションを示すサンプルアプリケーション]"

#. type: Plain Text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:106
#, fuzzy
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development] (with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr "link:https://appdev.consulting.redhat.com/tracks/contract-first/[コントラクトファースト開発] （OpenAPIGenerator、Schemhesis、Prismを使用）"
