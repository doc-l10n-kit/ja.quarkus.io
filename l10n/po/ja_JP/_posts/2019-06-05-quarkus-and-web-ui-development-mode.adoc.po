msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:2
msgid "post"
msgstr "post"

#. type: Title =
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:9
#, fuzzy
msgid "Quarkus and Web UI Development"
msgstr "QuarkusとWeb UI開発。"

#. type: YAML Front Matter
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:4
#, fuzzy
msgid "2019-06-05 14:00:00.000 -0600"
msgstr "2019-06-05 14:00:00.000 -0600"

#. type: YAML Front Matter
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:5
#, fuzzy
msgid "development-tips"
msgstr "開発秘話"

#. type: YAML Front Matter
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:6
#, fuzzy
msgid "kkhan"
msgstr "クロッカン"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:11
#, fuzzy
msgid "In this blog post we will take advantage of the respective development modes of both Quarkus and Angular CLI and see how we can develop a zero turnaround web application backed by a RESTful API on Quarkus. While I am using Angular, *the concepts are the same for other modern web application frameworks.*"
msgstr "このブログ記事では、QuarkusとAngular CLIのそれぞれの開発モードを利用し、QuarkusでRESTful APIに支えられたゼロターンアラウンドのWebアプリケーションを開発する方法について説明します。ここではAngularを使用していますが、 *コンセプトは他の最新のWebアプリケーションフレームワークでも同じ* です。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:13
#, fuzzy
msgid "The source code for this blog can be found at https://github.com/kabir/blog-quarkus-ui-development. It contains a README which explains in detail how the application was set up and how we implemented each step, addressing problems we uncovered along our way."
msgstr "このブログのソースコードは https://github.com/kabir/blog-quarkus-ui-development で見ることができます。READMEには、アプリケーションがどのようにセットアップされ、どのように各ステップを実行し、途中で発見した問題に対処したかが詳細に説明されています。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:15
#, fuzzy
msgid "You need to have https://nodejs.org/en/download/package-manager/[Node], https://yarnpkg.com/en/docs/install[Yarn] and https://cli.angular.io[Angular CLI] installed on your system, and familiarity with Angular and Quarkus is assumed."
msgstr "link:https://nodejs.org/en/download/package-manager/[Node] 、 link:https://yarnpkg.com/en/docs/install[Yarn] 、 link:https://cli.angular.io[Angular CLIが] システムにインストールされている必要があり、AngularとQuarkusに精通していることが前提です。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:17
#, fuzzy
msgid "Clone the https://github.com/kabir/blog-quarkus-ui-development[project], and go into its folder. First run:"
msgstr "link:https://github.com/kabir/blog-quarkus-ui-development[プロジェクトを] クローンして、そのフォルダに入る。最初に実行します："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:18
#, fuzzy
msgid "$mvn -Dui.deps compile"
msgstr "mvn -Dui.deps コンパイル"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:21
#, fuzzy
msgid "This downloads all the dependencies needed to build our web application. Then run:"
msgstr "これにより、Webアプリケーションの構築に必要なすべての依存関係がダウンロードされます。次に実行します："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:93
#, fuzzy
msgid "$mvn package -Dui.dev -Dui.proxy quarkus:dev"
msgstr "$mvn package -Dui.dev -Dui.proxy quarkus:dev"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:25
#, fuzzy
msgid "The `-Dui` system property enables a Maven profile to build the web application. The output directory for the web application `webapp/dist/webapp` gets bundled into the Quarkus application. We will talk about `-Dui.proxy` later on."
msgstr "`-Dui` システムプロパティは、Web アプリケーションを構築するための Maven プロファイルを有効にします。Webアプリケーションの出力ディレクトリ `webapp/dist/webapp` 、Quarkusアプリケーションにバンドルされます。 `-Dui.proxy` については、後ほど説明します。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:27
#, fuzzy
msgid "Go to http://localhost:8080 in your browser and take a look at our sample application. It contains a few different pages. Go to the one called `Rest` which makes a REST call. We can change the return value of the https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`] method. If you refresh the page you will see the changes made reflected automatically!"
msgstr "ブラウザで http://localhost:8080 にアクセスし、私たちのサンプルアプリケーションをご覧ください。いくつかの異なるページが含まれています。RESTコールを行う `Rest` というページにアクセスしてください。の戻り値を変更することができます。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleResource.java[`SampleServlet.hello()`] メソッドに対応しました。ページを更新すると、変更した内容が自動的に反映されます！"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:29
#, fuzzy
msgid "With what we have so far, if we were to make changes to the user interface in our web application, we would need to stop Quarkus and run the above command to build the web application again and restart quarkus. This is not what we want, so we take advantage of Angular's https://angular.io/guide/build#proxying-to-a-backend-server[proxy]. https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development[React] and https://cli.vuejs.org/config/#devserver-proxy[Vue] have something similar."
msgstr "これまでの内容では、Webアプリケーションのユーザーインターフェイスに変更を加える場合、Quarkusを停止して上記のコマンドを実行し、Webアプリケーションを再度構築してQuarkusを再起動する必要がありました。これでは困るので、Angularの link:https://angular.io/guide/build#proxying-to-a-backend-server[プロキシを] 活用する。 link:https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development[Reactと] link:https://cli.vuejs.org/config/#devserver-proxy[Vueにも] 似たようなものがあります。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:31
#, fuzzy
msgid "In another terminal window go into the `webapp/` folder of the cloned project, and run:"
msgstr "別のターミナルウィンドウで、クローンされたプロジェクトの `webapp/` フォルダに入り、実行します："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:97
#, fuzzy
msgid "$yarn proxy"
msgstr "プロキシ"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:35
#, fuzzy
msgid "This will start the Angular development server in proxy mode on port 4200. Go to http://localhost:4200 and you will see the same application as you saw earlier on port 8080, but served by the Angular development server while accessing the REST endpoints from the running Quarkus application. If you make any changes to any of the Angular components set up in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] you will see your changes reflected."
msgstr "これにより、Angular開発サーバーがポート4200でプロキシモードで起動します。 http://localhost:4200 にアクセスすると、ポート8080で先ほどと同じアプリケーションが表示されますが、実行中のQuarkusアプリケーションからRESTエンドポイントにアクセスしながら、Angular開発サーバーがサービスを提供しています。で設定したAngularコンポーネントに何らかの変更を加えた場合、そのコンポーネントはRESTエンドポイントにアクセスします。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] をクリックすると、変更内容が反映されます。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:37
#, fuzzy
msgid "This is great!!! We can now be super-productive and make changes in both our front-end and our back-end, and see the changes immediately without needing to rebuild, repackage and restart our application!"
msgstr "これは素晴らしいことです!フロントエンドとバックエンドの両方に変更を加え、アプリケーションを再構築、再パッケージ化、再起動することなく、すぐに変更を確認できるようになりました！"

#. type: Title ==
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:39
#, fuzzy
msgid "Adjustments Summary"
msgstr "アジャストメントサマリー"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:41
#, fuzzy
msgid "The example project has already been set up with the needed adjustments to work properly both as a bundled application and in development mode. These are the main tweaks:"
msgstr "このサンプルプロジェクトは、バンドルアプリケーションとしても開発モードでも適切に動作するように、必要な調整がすでに行われています。これらが主な調整点です："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:43
#, fuzzy
msgid "Handle the Angular routes in the UI rather than on the back-end. This is important for the bundled version (running on port 8080)."
msgstr "Angularのルートをバックエンドではなく、UIで処理する。これは、バンドル版（ポート8080で実行）にとって重要です。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:44
#, fuzzy
msgid "Enable the Angular proxy to allow for the UI to call REST endpoints served by Quarkus."
msgstr "Angularプロキシを有効にして、Quarkusが提供するRESTエンドポイントをUIから呼び出せるようにします。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:45
#, fuzzy
msgid "Signal to the back-end that the front-end is running in a proxy, i.e. not served by us. This is important if the back-end needs to redirect to a page in the front-end."
msgstr "フロントエンドがプロキシで動作していること、つまり、私たちがサービスを提供していないことをバックエンドに知らせるためのシグナルです。これは、バックエンドがフロントエンドのページにリダイレクトする必要がある場合に重要です。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:47
#, fuzzy
msgid "We will focus on the changes needed to make this work well, and not go into the details of how the application is set up."
msgstr "ここでは、これをうまく機能させるために必要な変更点に焦点を当て、アプリケーションの設定方法の詳細には触れないことにします。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:49
#, fuzzy
msgid "Handle Angular Routes"
msgstr "Angularルーティングを扱う"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:50
#, fuzzy
msgid "Add a filter, https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter.java[AngularRouteFilter]. The essence of its `doFilter()` method is:"
msgstr "link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/AngularRouteFilter.java[AngularRouteFilterという] フィルタを追加します。その `doFilter()` メソッドのエッセンスを紹介します："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:66
#, fuzzy
msgid "This filter is only needed when running the application bundled in Quarkus (port 8080). It is not needed when connecting to the application running in Angular (port 4200). It's purpose is to allow us to **bookmark pages** in the application. All the server knows about are things like:"
msgstr "このフィルターは、Quarkusにバンドルされているアプリケーションを実行するときにのみ必要です（ポート8080）。Angularで動作するアプリケーションに接続する際には必要ありません（ポート4200）。このフィルタの目的は、アプリケーションの *ページをブックマーク* できるようにすることです。サーバーが知っているのは、次のようなことだけです："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:68
#, fuzzy
msgid "the REST endpoints"
msgstr "RESTエンドポイント"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:69
#, fuzzy
msgid "deployed servlets"
msgstr "配備済みサーブレット"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:70
#, fuzzy
msgid "the resources in the `META-INF/resources/` folder of the application"
msgstr "アプリケーションの `META-INF/resources/` フォルダにあるリソースです。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:72
#, fuzzy
msgid "The `META-INF/resources/` in our case contains the application's index.html and the transpiled resources."
msgstr "この場合の `META-INF/resources/` には、アプリケーションの index.html とトランスパイルリソースが含まれています。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:74
#, fuzzy
msgid "Without this filter, if you go to one of the Angular routes directly (e.g if you try to refresh when on http://localhost:8080/rest which is the `Rest` page we saw earlier) Quarkus will think it is a file, a REST endpoint or a servlet. Since Quarkus has no knowledge of anything called `/rest` you end up with a 404 (Not Found) status. The filter checks the status code of the request after calling `chain.doFilter()`. If the status is 404 and does not seem to be a file, we forward this request to `/`, which in turn serves up the `index.html` file. By doing a forward the path and parameters of the request are preserved. Angular then figures out that `/rest` is one of its known routes and displays the appropriate page of the application. Once the web application is loaded in the browser, Angular takes over and handles all the internal links to other routes in the web application (as an example, if you are on http://localhost:8080 and click on the link taking you to http://localhost:8080/other there is no round-trip to the server)."
msgstr "このフィルターがないと、Angularルートに直接アクセスした場合（例えば、先ほど見た `Rest` のページである http://localhost:8080/rest で更新しようとした場合）、Quarkusはファイル、RESTエンドポイント、サーブレットであると判断します。Quarkusは、 `/rest` というものに対して知識がないため、404（Not Found）ステータスが表示されることになります。フィルタは、 `chain.doFilter()` を呼び出した後、リクエストのステータスコードをチェックします。ステータスが404でファイルでない場合、このリクエストを `/` に転送し、 `index.html` ファイルを提供します。転送を行うことで、リクエストのパスとパラメータは保持されます。Angularは、 `/rest` が既知のルートの1つであることを把握し、アプリケーションの適切なページを表示します。ウェブアプリケーションがブラウザに読み込まれると、Angularはウェブアプリケーション内の他のルートへの内部リンクをすべて処理します（例として、 http://localhost:8080 にいて、 http://localhost:8080/other に行くリンクをクリックすると、サーバーへのラウンドトリップは発生しません）。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:76
#, fuzzy
msgid "There are other ways you can handle this too, e.g. by checking the path against a set of hard-coded known paths that are to be handled by the back-end, but for my purposes the above has worked very well. The key is to invoke:"
msgstr "例えば、バックエンドが処理するためにハードコードされた既知のパスのセットとパスを照合するなど、他にも処理する方法はありますが、私の目的では上記の方法が非常にうまく機能しています。肝心なのは、このように呼び出すことです："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:77
#, fuzzy
msgid "request.getRequestDispatcher(\"/\").forward(request, response);"
msgstr "request.getRequestDispatcher(\"/\").forward(request,response)；"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:80
#, fuzzy
msgid "if it is something that should be handled by Angular."
msgstr "が、Angularで処理すべきものであれば、そのようにします。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:83
#, fuzzy
msgid "Set up the Angular proxy"
msgstr "Angularのプロキシをセットアップする"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:84
#, fuzzy
msgid "The proxy is configured in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/proxy.conf.json[proxy.conf.json]. All REST calls to anything under `/api` will be passed to the back-end running on port 8080. To run the Angular development server with this configuration, we have added a `proxy` configuration to the `scripts` section of https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package.json`]."
msgstr "プロキシは link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/proxy.conf.json[proxy.conf.jsonで] 設定されます。 `/api` 以下のものへのすべての REST 呼び出しは、ポート 8080 で動作するバックエンドに渡されます。この構成でAngular開発サーバーを実行するために、 `proxy` の構成を、 `scripts` のセクションに追加しています。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/package.json[`package.json`] ."

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:86
#, fuzzy
msgid "In our case, we have a servlet which needs to redirect back to the front-end (something I found I needed to implement OAuth in my main project). That has a check for the `-Dui.proxy` system property we saw earlier when handling the `/callback` path in https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleServlet.java[`SampleServlet`]. If this property is set, we prepend `https://localhost:4200` (the address of the Angular proxy) to the redirect URL if we find the proxy is running on port 4200."
msgstr "私たちの場合、フロントエンドにリダイレクトする必要があるサーブレットがあります（私のメインプロジェクトでOAuthを実装する必要があることがわかりました）。 `/callback` このサーブレットは、 `-Dui.proxy` システムプロパティをチェックするようになっています。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/src/main/java/org/kabir/quarkus/ui/SampleServlet.java[`SampleServlet`] .このプロパティが設定されている場合は、前置詞 `<a data-doc-l10n-kit-type=\"link\" data-doc-l10n-kit-target=\"https://localhost:4200\">https://localhost:4200</a>` (Angularプロキシのアドレス)を、プロキシがポート4200で動作していることがわかったら、リダイレクトURLに追加します。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:88
#, fuzzy
msgid "Finally, `DefaultComponent` in https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] has a direct link to our servlet running in the back-end. It has a check to see if the web application is running in the proxy (i.e. its port is 4200), and if this is the case it adjusts the url from `/servlet/make-external-call` to point to the Quarkus back-end running on port 8080."
msgstr "最後に、 `DefaultComponent` 。 link:https://github.com/kabir/blog-quarkus-ui-development/blob/master/webapp/src/app/app.component.ts[`app.component.ts`] には、バックエンドで動作しているサーブレットへの直接リンクがあります。ウェブアプリケーションがプロキシで実行されているかどうか（つまり、ポートが4200であるかどうか）を確認し、そうであれば、 `/servlet/make-external-call` からのURLを調整して、ポート8080で動作するQuarkusのバックエンドを指すようにします。"

#. type: Title ==
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:90
#, fuzzy
msgid "Last words"
msgstr "最後の言葉"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:92
#, fuzzy
msgid "We have seen how with a minimum amount of configuration we can have both the back-end and front-end of our application running in Quarkus's and Angular's respective development modes. During development this removes the need to rebuild the application when we change something. You can just code away, and see the changes when you refresh your browser. This is done by starting Quarkus with:"
msgstr "最小限の構成で、アプリケーションのバックエンドとフロントエンドの両方をQuarkusとAngularのそれぞれの開発モードで実行できることを見てきました。開発中は、何かを変更したときにアプリケーションを再構築する必要がなくなります。コードを書くだけで、ブラウザを更新したときに変更を確認することができます。これは、Quarkusを次のように起動することで実現できます："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:96
#, fuzzy
msgid "and starting the Angular application (from the `webapp/` folder) with"
msgstr "で、Angularアプリケーションを（ `webapp/` フォルダから）起動します。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:101
#, fuzzy
msgid "Packaging for development"
msgstr "開発用パッケージ"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:102
#, fuzzy
msgid "If you want to do a rebuild now and again to package the application and run it all in Quarkus run"
msgstr "アプリケーションをパッケージ化してQuarkusで実行するために、時々再構築を行いたい場合は、次のように実行します。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:103
#, fuzzy
msgid "$mvn package -Dui.dev quarkus:dev"
msgstr "mvn package -Dui.dev quarkus:dev"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:106
#, fuzzy
msgid "By not passing in -Dui.proxy we disable the checks for whether the front-end runs in a proxy. `-Dui.dev` builds the web application so it is part of the Quarkus application."
msgstr "Dui.proxyを渡さないことで、フロントエンドがプロキシで実行されているかどうかのチェックを無効にします。 `-Dui.dev` 、WebアプリケーションがQuarkusアプリケーションの一部として構築されます。"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:108
#, fuzzy
msgid "Packaging for production"
msgstr "生産用パッケージ"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:109
#, fuzzy
msgid "To package the application for production, use"
msgstr "アプリケーションを本番用にパッケージ化するには、次のようにします。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:110
#, fuzzy
msgid "$mvn package -Dui"
msgstr "mvnパッケージ -Dui"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:113
#, fuzzy
msgid "`-Dui` builds the web application just like `-Dui.dev`, but it does more optimisations for production. Those optimisations take some time."
msgstr "`-Dui` は、 と同じようにウェブアプリケーションを構築しますが、本番用にもっと最適化されます。これらの最適化には時間がかかります。 `-Dui.dev`"

#. type: Title ===
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:115
#, fuzzy
msgid "Packaging for cloud native"
msgstr "クラウドネイティブのためのパッケージング"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:116
#, fuzzy
msgid "Finally to build a native image, make sure you have set up GraalVM as outlined https://quarkus.io/guides/building-native-image[here]. Then build the application to generate the native executable."
msgstr "最後にネイティブイメージを構築するために、 link:https://quarkus.io/guides/building-native-image[ここで] 説明したようにGraalVMをセットアップしたことを確認します。次に、ネイティブ実行可能ファイルを生成するためにアプリケーションをビルドします。"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:117
#, fuzzy
msgid "$mvn package -Dui -Pnative"
msgstr "mvn package -Dui -Pnative"

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:120
#, fuzzy
msgid "Running this we see the super-fast startup time Quarkus gives us in native mode:"
msgstr "これを実行すると、Quarkusがネイティブモードで超高速の起動時間を実現していることがわかります："

#. type: Plain Text
#: upstream/_posts/2019-06-05-quarkus-and-web-ui-development-mode.adoc:121
#, fuzzy
msgid ""
"$./target/blog-quarkus-ui-development-0.1.0-runner\n"
"2019-06-06 10:57:02,254 INFO  [io.quarkus] (main) Quarkus 0.15.0 started in 0.005s. Listening on: http://[::]:8080\n"
"2019-06-06 10:57:02,464 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb]"
msgstr "./target/blog-quarkus-ui-development-0.1.0-runner 2019-06-06 10:57:02,254 INFO [io.quarkus] (main) Quarkus 0.15.0が0.005sで起動しました。Listening on: http://[::]:8080 2019-06-06 10:57:02,464 INFO [io.quarkus] (main) インストールされた機能：[cdi、resteasy、resteasy-jsonb]。"
