msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:3
#, fuzzy
msgid "2019-07-25 00:00 +0100"
msgstr "2019-07-25 00:00 +0100"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:4
msgid "mkouba"
msgstr "mkouba"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:5
#, fuzzy
msgid "extension arc development-tips"
msgstr "エクステンションアーク開発秘話"

#. type: YAML Front Matter
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:6
#, fuzzy
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "Quarkus ArCは、CDI 2.0をベースにしたビルドタイム指向の依存性注入法です。しかし、実際にはどのような意味があり、ビルドタイム処理のDIはどのような利点をもたらすのでしょうか。"

#. type: Title =
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:9
#, fuzzy
msgid "Quarkus Dependency Injection"
msgstr "Quarkus Dependency Injection（依存性注入）。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:11
#, fuzzy
msgid ""
"Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].\n"
"In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "Quarkus ArCは、 link:http://cdi-spec.org/[CDI 2.0を] ベースにしたビルドタイム指向の依存性注入です。このブログポストでは、仕様との関係を説明し、ビルドタイム処理設計のメリットとデメリットを説明します。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:14
msgid "Compatibility"
msgstr "互換性"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:16
#, fuzzy
msgid ""
"It does not make sense to reinvent the wheel, especially when it comes to dependency injection.\n"
"There are many frameworks that try to solve similar problems.\n"
"A year ago, we made a design decision to build Quarkus DI on top of CDI.\n"
"We had some very good reasons to choose CDI:"
msgstr "特に依存性注入に関しては、車輪を再発明することは意味がありません。似たような問題を解決しようとするフレームワークがたくさんあります。1年前、私たちはQuarkus DIをCDIの上に構築するという設計上の決定を下しました。CDIを選択するのには、いくつかの非常に良い理由がありました："

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:21
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "CDIは成熟し、実績のあるコンポーネントモデル"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:22
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "私たちRed Hatは、 link:http://weld.cdi-spec.org/[Weld - CDI Reference Implementationの] 開発で10年近い経験があります。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:23
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "CDI APIは、 `javax.inject` の上に構築されているので、以下のような互換性のあるDIフレームワークから簡単に移行できるはずです。 `@Inject`"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:25
#, fuzzy
msgid ""
"Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.\n"
"This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.\n"
"However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "私たちの主な目標は、CDIと互換性のある超音速ビルドタイム指向のDIソリューションを実装することでした。これにより、ユーザーは自分のアプリケーションでCDIを使い続けながら、Quarkusのビルドタイム最適化機能を活用することができます。しかし、ArCはTCKによって検証された完全なCDI実装ではありません。 link:https://quarkus.io/guides/cdi-reference#supported_features[サポートされる機能の] リストと link:https://quarkus.io/guides/cdi-reference#limitations[制限の] リストも参照してください。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:29
#, fuzzy
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "ビルドタイム処理の利点と欠点"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:31
#, fuzzy
msgid "Fail Fast"
msgstr "フェイルファスト"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:33
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "Beanと依存関係はビルド中に検証されるため、 `AmbiguousResolutionException` や `UnsatisfiedResolutionException` といった一般的な問題でアプリケーションが本番で失敗することはありません。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:35
#, fuzzy
msgid "Instant Startup"
msgstr "インスタント・スタートアップ"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:37
#, fuzzy
msgid ""
"When the app starts ArC just loads all the metadata and initializes some internal structures.\n"
"There is no need to analyze the application classes again.\n"
"This means negligible startup overhead."
msgstr "アプリが起動すると、ArC はすべてのメタデータをロードし、いくつかの内部構造を初期化するだけです。アプリケーションクラスを再度分析する必要はありません。つまり、スタートアップオーバーヘッドはごくわずかです。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:41
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "これは、GraalVMとOpenJDK HotSpotの両方のランタイムに適用されます。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:43
#, fuzzy
msgid "Minimized Runtime"
msgstr "ランタイムの最小化"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:45
#, fuzzy
msgid ""
"In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.\n"
"http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.\n"
"In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "Quarkus 0.19では、ArCと統合ランタイムは72クラスで構成され、140KBのjarを占有しています。 link:http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation)のコアは、およそ1200クラスで約2MBのjarです。言い換えれば、ArCランタイムは、クラス数とジャーのフットプリントという点で、Weldランタイムの約7％を占めています。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:49
#, fuzzy
msgid "Optimized Code Paths and Metadata Structures"
msgstr "最適化されたコードパスとメタデータ構造"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:51
#, fuzzy
msgid ""
"When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.\n"
"This is one of the areas where we would like to develop and improve ArC."
msgstr "メタデータクラスを生成する際、ArCはアプリケーション全体をすでに解析しているため、より無駄のないスマートなロジックを生成できることがあります。この点は、ArCを開発・改良していきたい分野の一つです。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:54
msgid "Extension Points"
msgstr "拡張ポイント"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:56
#, fuzzy
msgid ""
"Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.\n"
"In fact, all CDI extensions are ignored at the moment.\n"
"Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].\n"
"The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "残念ながら、CDIポータブルエクステンションは本質的にランタイムコンストラクトであるため、Quarkusで完全にサポートすることはできません。実際、現時点では、すべてのCDIエクステンションは無視されています。とはいえ、ほとんどの機能はQuarkus link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[の拡張] 機能を使用して実現することが可能です。CDIエクステンションは、コードを一般化し、可能であればQuarkusエクステンションを提供して、ビルドタイムメタデータ処理をフル活用することが推奨されます。"

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:61
msgid "Non-standard Features"
msgstr "標準外の機能"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:63
#, fuzzy
msgid ""
"ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.\n"
"Following are some examples of non-standard features provided by Quarkus DI."
msgstr "ArCは標準に縛られることなく、それを超え、可能性を広げる方法を常に模索しています。以下は、Quarkus DIが提供する非標準的な機能のいくつかの例です。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:66
msgid "Qualified Injected Fields"
msgstr "修飾された注入フィールド"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:68
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "通常、注入フィールドを宣言する場合、必ず `@Inject` とオプションで必須修飾子を使用する必要があります："

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:77
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "Quarkusでは、注入されたフィールドが少なくとも1つの修飾子を宣言している場合、 `@Inject` アノテーションを完全に省略することができます："

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:85
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr "`@Inject` は、コンストラクタやメソッドインジェクションのために依然として必要です。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:87
msgid "Simplified Constructor Injection"
msgstr "簡略化されたコンストラクター注入"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:89
#, fuzzy
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).\n"
"However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "CDIでは，通常のスコープ付きBeanは，常にno-argsコンストラクタを宣言しなければならない（このコンストラクタは，他のコンストラクタを宣言しない限り，コンパイラによって通常生成される）。しかし、この要件は、コンストラクタ注入を複雑にします - CDIで物事を動作させるために、ダミーのno-argsコンストラクタを提供する必要があります。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:109
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.\n"
"Also if there's only one constructor there is no need for `@Inject`."
msgstr "Quarkusでは、通常のスコープ付き Bean のためにダミーのコンストラクターを宣言する必要はありません。自動的に生成されます。また、コンストラクターが 1 つしかない場合は、`@Inject` の必要性はありません。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:125
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "Beanクラスがno-argsコンストラクタを宣言していない別のクラスを拡張した場合、no-argsコンストラクタを自動的に生成することはない。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:127
msgid "Default Beans"
msgstr "デフォルトの Bean"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:129
#, fuzzy
msgid ""
"CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].\n"
"Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "CDIには、 link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[代替と] 呼ばれる機能がある。簡単に言うと、 `@Alternative` と `@Priority` でアノテーションされた Bean は、型安全解決時に代替でない Bean より優先される。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:146
#, fuzzy
msgid ""
"So, what if a user wants to override a bean defined by a library/extension?\n"
"The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.\n"
"Is there a simpler approach?\n"
"Yes, there is.\n"
"You can use a non-standard feature called \"default beans\".\n"
"In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.\n"
"And that's it."
msgstr "では、ユーザーがライブラリ/エクステンションで定義されたBeanをオーバーライドしたい場合はどうすればいいのでしょうか？Bean は `@Priority` アノテーションを使用して有効化される CDI `@Alternative` としてマークされなければならないでしょう。もっと簡単な方法はないのでしょうか？はい、あります。デフォルトBean」と呼ばれる非標準的な機能を使用することができます。この場合、オーバーライド可能な Bean には `@io.quarkus.arc.DefaultBean` のアノテーションを付ける必要があります。そして、それだけです。"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:167
msgid "Removing Unused Beans"
msgstr "未使用の Bean の削除"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:169
#, fuzzy
msgid ""
"GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.\n"
"However, sometimes checking reachability is not enough.\n"
"Sometimes the framework itself must decide whether a component is needed or not.\n"
"In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "GraalVMネイティブイメージは、あなたのアプリケーションから到達不可能なすべてのクラスを削除するとき、かなり良い仕事をします。しかし、時には到達可能性をチェックするだけでは十分ではありません。時には、フレームワーク自身がコンポーネントが必要かどうかを判断しなければなりません。標準的なCDIでは、すべてのBeanは必要であろうとなかろうとコンテナによって保持される。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:174
#, fuzzy
msgid ""
"Let's suppose we have a bean class `org.acme.Foo`.\n"
"This bean class imports and uses a lot of various classes.\n"
"It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.\n"
"But what if nobody ever uses this bean?\n"
"We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.\n"
"In other words, all these classes would be reachable."
msgstr "Bean クラス `org.acme.Foo` があるとします。このBeanクラスは、さまざまなクラスを大量にインポートして使用しています。このクラスは `@ApplicationScoped` でアノテーションされているため、Quarkusはアプリケーションの起動時にBeanメタデータクラスとクライアントプロキシを生成し、このメタデータを登録する必要があります。しかし、誰もこのBeanを使わなかったとしたらどうでしょう。生成されたメタデータ、Beanクラス自体、およびその依存関係について、まだ参照を保持することになります。言い換えれば、これらのクラスはすべて到達可能である。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:181
#, fuzzy
msgid ""
"Quarkus attempts to remove all *unused beans* during build by default.\n"
"This helps to reduce the number of generated classes and also the amount of memory needed at runtime.\n"
"But how do we actually detect an unused bean?\n"
"The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.\n"
"Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.\n"
"Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr "Quarkusは、デフォルトでビルド時に *未使用のBean* をすべて削除しようとします。これにより、生成されるクラスの数を減らし、実行時に必要なメモリの量も減らすことができます。しかし、実際にどのようにして未使用のBeanを検出するのでしょうか？ルールは link:https://quarkus.io/guides/cdi-reference#remove_unused_beans[リファレンスガイドに] 記述されていますが、簡単に言うと、Beanがどこにも注入されず、他の標準的な方法（例えばオブザーバ通知）で到達できない場合、それは削除されます。さらに，利用者は，Beanクラスを `@io.quarkus.arc.Unremovable` でアノテーションすることによって，コンテナにBeanを削除しないように指示できる。最後に，この最適化は， `quarkus.arc.remove-unused-beans` プロパティを使用することによって，無効にし，微調整することができる。"

#. type: Plain Text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:188
#, fuzzy
msgid "This feature applies to the JVM mode as well."
msgstr "この機能は、JVMモードにも適用されます。"
