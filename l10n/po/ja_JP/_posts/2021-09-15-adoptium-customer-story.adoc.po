msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:2
msgid "post"
msgstr "post"

#. type: Title =
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:12
msgid "Eclipse Adoptium Uses Quarkus for high volume Java SE distribution API"
msgstr "Eclipse Adoptium、大量Java SE配布APIにQuarkusを採用"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:4
msgid "2021-09-15"
msgstr "2021-09-15"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:5
msgid "user-story"
msgstr "user-story"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:6
msgid "Java is used by millions of developers worldwide and is the second most popular language, and they all need a Java runtime. Adoptium, the most popular Java distribution, needed to offer a way for developers to programmatically discover and access pre-built Java binaries across many different variants, and produced an end-user API with Quarkus to improve performance and developer productivity."
msgstr "Javaは世界中で何百万人もの開発者によって使用され、2番目に人気のある言語であり、それらはすべてJavaランタイムを必要とします。最も人気のあるJavaディストリビューションであるAdoptiumは、多くの異なるバリアントにある構築済みのJavaバイナリを開発者がプログラムで発見、アクセスする方法を提供する必要があり、パフォーマンスと開発者の生産性を向上させるためにQuarkusでエンドユーザーAPIを作成しました。"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:7
msgid "jfalkner"
msgstr "jfalkner"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:16
msgid "Java is used by https://www.daxx.com/blog/development-trends/number-software-developers-world[millions^] of developers worldwide and according to Redmonk, https://redmonk.com/sogrady/2021/08/05/language-rankings-6-21/[recently moved^] back to the #2 most used programming language. There are many distributions of the Java runtime and development kit, but the Eclipse Temurin (formerly known as AdoptOpenJDK) distribution has proven to be the https://snyk.io/jvm-ecosystem-report-2021/[most popular^]. Recently, the AdoptOpenJDK project was moved into the Eclipse Foundation as https://adoptium.net/[Eclipse Adoptium^]. The goal of Adoptium is to promote and support high-quality, TCK certified runtimes and associated technology for use across the Java ecosystem. It does this by performing regular builds, tests, certifications, and of course serving binaries to those millions of developers that need to evaluate, prototype, and run production workloads with Java. Like other open source Eclipse projects, the team behind the distribution API are mostly volunteers, so they are constantly looking for optimizations of their time and resources and technology used to deliver on their mission."
msgstr "Javaは世界中で link:https://www.daxx.com/blog/development-trends/number-software-developers-world[何百万人もの^]開発者に使用されており、Redmonkによると、 link:https://redmonk.com/sogrady/2021/08/05/language-rankings-6-21/[最近^]最も使用されているプログラミング言語の第2位に link:https://redmonk.com/sogrady/2021/08/05/language-rankings-6-21/[返り咲い^]たとのことです。Javaのランタイムおよび開発キットには多くのディストリビューションがありますが、Eclipse Temurin（旧称AdoptOpenJDK）ディストリビューションが最も link:https://snyk.io/jvm-ecosystem-report-2021/[人気が^]あることがわかっています。最近、AdoptOpenJDKプロジェクトは、 link:https://adoptium.net/[Eclipse Adoptium^]としてEclipse Foundationに移されました。Adoptiumの目的は、Javaエコシステム全体で使用される高品質なTCK認証ランタイムと関連技術を促進しサポートすることです。Adoptiumは、定期的なビルド、テスト、認証、そしてもちろん、Javaを使った評価、プロトタイプ、本番ワークロードの実行を必要とする何百万人もの開発者にバイナリを提供することによってこれを行います。他のオープンソースのEclipseプロジェクトと同様に、配布APIを支えるチームはほとんどがボランティアであるため、彼らは自分たちの使命を果たすために使用する時間やリソース、技術の最適化を常に模索しています。"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:18
msgid "The Challenge"
msgstr "チャレンジ"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:20
msgid "While developers can download distributions directly from the https://adoptium.net/[Adoptium website^] with a single click, it becomes more of a challenge to automate this process, for example in a CI/CD pipeline. This is especially true due to the number of variants of Java versions, release types, operating systems, architectures, JVM implementations, etc. To that end, Adoptium needed to offer a way to programmatically discover and access pre-built binaries based on these variables, and produced https://api.adoptium.net/q/swagger-ui/[an end-user API^]."
msgstr "開発者は link:https://adoptium.net/[Adoptium のウェブサイト^]からワンクリックで直接ディストリビューションをダウンロードできますが、例えば CI/CD パイプラインでこのプロセスを自動化することはより困難になります。これは、Javaのバージョン、リリースタイプ、オペレーティングシステム、アーキテクチャ、JVMの実装などのバリエーションが多いために特に顕著です。そのため、Adoptiumは、これらの変数に基づいてプログラムで事前に構築されたバイナリを発見してアクセスする方法を提供する必要があり、 link:https://api.adoptium.net/q/swagger-ui/[エンドユーザAPI^]を作成しました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:22
msgid "The sheer volume of AdoptOpenJDK downloads, https://dash.adoptopenjdk.net/trends[about 500,000 per day^], meant that performance would become a key consideration for the API. In addition, Adoptium does not have a traditional datacenter, so all of this runs in the cloud on Microsoft Azure, where costs can increase when you have continuously running workloads that take up unnecessary space."
msgstr "AdoptOpenJDKのダウンロード数が link:https://dash.adoptopenjdk.net/trends[1日あたり約50万^]件と非常に多いため、APIのパフォーマンスが重要な検討事項となりました。さらに、Adoptium は従来のデータセンターを持たず、これらはすべてMicrosoft Azure上のクラウドで実行されます。不必要なスペースを占有するワークロードを継続的に実行すると、コストが増大する可能性があります。"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:24
msgid "Recent download statistics for Adoptium distributions, from https://dash.adoptopenjdk.net/trends[dash.adoptopenjdk.net]"
msgstr "link:https://dash.adoptopenjdk.net/trends[dash.adapttopenjdk.net]からの Adoptium ディストリビューションの最近のダウンロード統計です。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:26
msgid "In 2017, the technical team’s first attempt at exposing an API was using Node.js + Express. As the request volume and number of distribution variants rose, the team found that the response times were getting slower, not only due to the volume, but also due to architectural choices made early on. In particular, the application’s monolithic architecture, where the frontend and backend were in the same app, would cause apparent slowness in the frontend, while the backend processed concurrent requests. In addition, lack of pagination in the API meant that requests could return huge results, even when only the first few elements of the result were needed."
msgstr "2017年、技術チームがAPIを公開する最初の試みは、Node.js + Expressを使ったものでした。リクエスト量や配信バリエーションの数が増えるにつれ、チームはレスポンスタイムが遅くなっていることに気づきましたが、これは量の問題だけではなく、初期に行ったアーキテクチャの選択が原因でした。特に、フロントエンドとバックエンドが同じアプリ内にあるモノリシックアーキテクチャでは、バックエンドが同時リクエストを処理している間、フロントエンドが明らかに遅くなっていました。また、APIにページネーションがないため、結果の最初の数要素だけが必要な場合でも、リクエストが巨大な結果を返すことがありました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:28
msgid "The lead developer on the Technical Steering Committee responsible for the upkeep of the API explains:"
msgstr "APIの説明を維持するための技術運営委員会の主任開発者は次のように説明しています:"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:32
msgid "The existing API had design flaws that wouldn’t have been easy to fix, so we were considering replacing it with a new implementation. Our small team had more experience in JVM languages than JavaScript, and since this was an API serving Java data, we thought eating our own dogfood would be a good thing!"
msgstr "既存のAPIには設計上の欠陥があり、修正するのは容易ではありませんでしたので、新たな実装に置き換えることを検討していました。私たちの小さなチームは、JavaScriptよりもJVM言語の経験が豊富で、これはJavaデータを提供するAPIだったので、自分たちのドッグフードを食べるのは良いことだと考えました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:89
msgid "*-Lead Developer on the Adoptium Technical Steering Committee*"
msgstr "*-Adoptium Technical Steering Committeeのリードデベロッパー*"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:37
msgid "Enter Quarkus"
msgstr "Quarkusへ"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:39
msgid "In July 2019 the team discovered Quarkus through its related work with other frameworks in the Java ecosystem. They were especially interested in Quarkus’ promise of stellar performance and smaller footprint, which is comparable to Node.js and even Golang. Even better, Quarkus’ https://quarkus.io/guides/kotlin[first class support for Kotlin^] meant the team could re-use both their Java and Kotlin experience with Quarkus."
msgstr "2019年7月、チームは、Javaエコシステムの他のフレームワークとの関連作業を通じてQuarkusを発見しました。彼らは特に、Quarkusが約束する、Node.jsやGolangに匹敵する優れたパフォーマンスと小さなフットプリントに興味を持ちました。さらに、Quarkusは link:https://quarkus.io/guides/kotlin[Kotlinをファーストクラスでサポートしている^]ため、チームはJavaとKotlinの両方の経験をQuarkusで再利用することができました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:41
#, fuzzy
msgid "The team found Quarkus extremely easy to develop, especially the https://quarkus.io/developer-joy#live-coding[Live Coding capability^]. The familiar JAX-RS APIs in Quarkus made it easy to create the necessary endpoints. The lead engineer explains further:"
msgstr "チームはQuarkusが非常に開発しやすく、特に link:https://quarkus.io/developer-joy#live-coding[ライブコーディング] 機能が優れていることに気づきました。Quarkusの使い慣れたJAX-RS APIにより、必要なエンドポイントを簡単に作成できました。リードエンジニアはさらにこう説明する："

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:45
msgid "We really liked the fact that Quarkus uses JAX-RS, which we were already familiar with. Having out-of-the-box integration with https://quarkus.io/guides/resteasy-reactive[RESTEasy reactive^] was a nice performance bonus, and the https://quarkus.io/guides/openapi-swaggerui[OpenAPI extension^] available in Quarkus made it pretty simple to expose the API as a Swagger API browser with no additional work needed."
msgstr "QuarkusがJAX-RSを使用していることは非常に気に入っています。私たちがすでに慣れ親しんでいることだからです。また、Quarkusで利用できる link:https://quarkus.io/guides/openapi-swaggerui[OpenAPIエクステンション^]により、追加作業なしでAPIをSwagger APIブラウザとして公開することが非常に簡単になりました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:50
msgid "Live Coding with Quarkus also proved extremely useful when developing the application:"
msgstr "また、Quarkusを使ったライブコーディングは、アプリケーションの開発に非常に役立ちました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:54
msgid "The live coding fast feedback loop was very useful when developing with Quarkus. Although fast startup was nice, it wasn’t critical since our apps are long-running, but during development, as we tweaked our APIs, being able to immediately re-test saved us a ton of development time."
msgstr "Quarkusでの開発では、ライブコーディングによる高速なフィードバックループが非常に役立ちました。起動が速いのはいいことですが、私たちのアプリは長時間稼働しているので、それほど重要ではありませんでした。しかし、開発中にAPIを微調整する際に、すぐに再テストができることで、開発時間を大幅に短縮することができました。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:59
msgid "The out-of-the-box performance of Quarkus on JVM exceeded their expectations quite easily:"
msgstr "JVM上のQuarkusの初期設定でのパフォーマンスは、期待をいとも簡単に超えるものでした。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:63
#, fuzzy
msgid "We initially wanted sub-second response times for most of the API, and be able to handle around 10 thousand  requests per second. With zero optimizations, our app was responding within 1ms for most APIs, and easily surpassed our throughput requirements. This is way more than we will need for the foreseeable future. The Quarkus app also uses less than half the CPU time [compared to Node.js], despite handling more traffic and providing more functionality."
msgstr "私たちは当初、ほとんどのAPIで秒以下のレスポンスタイムを実現し、1秒あたり約1万件のリクエストを処理できるようにしたいと考えていました。最適化なしで、私たちのアプリはほとんどのAPIで1ms以内に応答し、私たちのスループット要件を簡単に超えました。これは、当面の必要量をはるかに超えています。また、Quarkusアプリは、より多くのトラフィックを処理し、より多くの機能を提供しているにもかかわらず、（Node.jsと比較して）半分以下のCPU時間しか使用していません。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:68
msgid "Overall, the move to Quarkus has been a very positive experience, with real benefits in terms of developer productivity and operational efficiency. The team has been using Quarkus in production for the Adoptium API since November 2019 and has proved to be extremely stable."
msgstr "全体的に見て、Quarkusへの移行は、開発者の生産性や運用効率の面で実際にメリットがあり、非常にポジティブな経験となりました。チームは2019年11月からAdoptium APIの本番でQuarkusを使用しており、非常に安定していることを示しました。"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:70
msgid "An Active Community"
msgstr "活発なコミュニティ"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:72
msgid "Communities are a critical aspect to any open source project’s success, including Quarkus. It is no surprise that the health of a community is a major consideration when an adoption decision must be made. For Adoptium, this is made clear by example:"
msgstr "コミュニティは、Quarkusを含め、あらゆるオープンソースプロジェクトの成功に欠かせない要素です。採用を決定する際にコミュニティの健全性が重要視されるのは当然のことです。Adoptiumでは、これは例を見れば明らかです。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:76
msgid "Earlier this year we discovered a memory leak in the RESTEasy Reactive component in Quarkus. Within a few days, working with the Quarkus community, we were able to identify and fix the issue. This gave us the confidence that longer term, we’ll be able to resolve issues quickly."
msgstr "今年の初めに、QuarkusのRESTEasy Reactiveコンポーネントにメモリリークがあることがわかりました。数日のうちに、Quarkusのコミュニティと協力して、問題を特定して修正することができました。これにより、長期的には問題を迅速に解決することができるという確信を得ることができました。"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:81
msgid "What’s Next for Adoptium"
msgstr "Adoptiumの次なる展開"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:83
msgid "Adoptium has been very happy with their decision to adopt Quarkus, and are looking forward to trying out new capabilities in Quarkus like continuous testing and dev services support for MongoDB (their database of choice)."
msgstr "AdoptiumはQuarkusを採用したことに非常に満足しており、継続的なテストやMongoDB（選択したデータベース）のDev servicesサポートなど、Quarkusの新しい機能を試すことを楽しみにしています。"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:87
msgid "Overall, we have been very impressed with the capabilities of Quarkus, and our experience with the Quarkus community has been fantastic. We look forward to seeing how it evolves, and improving how we serve the Java community’s Java distribution needs for years to come!"
msgstr "全体的に見て、Quarkusの機能には非常に感銘を受けましたし、Quarkusコミュニティでの経験も素晴らしいものでした。今後もQuarkusがどのように進化していくのか、また、JavaコミュニティのJavaディストリビューションのニーズに応える方法を改善していくことを楽しみにしています。"

#. type: Title ==
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:92
msgid "More Information"
msgstr "詳細"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:94
msgid "https://api.adoptium.net/q/swagger-ui/[Adoptium API]"
msgstr "https://api.adoptium.net/q/swagger-ui/[Adoptium API]"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:95
#, fuzzy
msgid "https://github.com/adoptium/api.adoptium.net[Adoptium API Source code]"
msgstr "link:https://github.com/adoptium/api.adoptium.net[Adoptium API ソースコード]"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:96
msgid "https://adoptium.net/faq.html[Adoptium FAQ]"
msgstr "https://adoptium.net/faq.html[Adoptium FAQ]"

#. type: Title ===
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:98
msgid "About Eclipse Adoptium"
msgstr "Eclipse Adoptiumについて"

#. type: Plain Text
#: upstream/_posts/2021-09-15-adoptium-customer-story.adoc:99
msgid "The mission of the Eclipse Adoptium Top-Level Project is to produce high-quality runtimes and associated technology for use within the Java ecosystem. Eclipse Adoptium also provides artifacts including open-source infrastructure as code, a comprehensive continuous integration build and test farm, and extensive quality assurance tests. These artifacts may be used by Eclipse Adoptium projects and other runtime technology builders to ensure the provision of secure, Java SE TCK-tested and compliant, production-ready runtimes."
msgstr "Eclipse Adoptium Top-Level Projectの使命は、Javaエコシステム内で使用される高品質のランタイムと関連技術を生産することです。Eclipse Adoptiumはまた、コードとしてのオープンソースのインフラストラクチャ、包括的な継続的統合ビルドとテストファーム、および広範な品質保証テストを含む成果物を提供します。これらの成果物は、Eclipse Adoptiumプロジェクトや他のランタイム技術構築者が、安全で、Java SE TCKでテストされ、準拠した、生産可能なランタイムを確実に提供するために使用することができます。"
