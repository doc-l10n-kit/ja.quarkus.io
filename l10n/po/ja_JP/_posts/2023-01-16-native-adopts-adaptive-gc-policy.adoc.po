msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:3
#, fuzzy
msgid "Quarkus Native adopts Adaptive GC policy"
msgstr "Quarkus NativeがAdaptive GCポリシーを採用。"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:4
#, fuzzy
msgid "2023-01-25"
msgstr "2023-01-25"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:5
#, fuzzy
msgid "native gc"
msgstr "ネイティブGC"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:6
#, fuzzy
msgid "Native runtime GC policy switches to adaptive to more consistency and predictability"
msgstr "ネイティブのランタイムGCポリシーがアダプティブに切り替わり、より一貫性と予測可能性が高まる"

#. type: YAML Front Matter
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:7
msgid "galderz"
msgstr "galderz"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:11
#, fuzzy
msgid ""
"Starting with Quarkus 2.13.6.Final, the native runtime garbage collection policy switched in order to provide more consistent and predictable runtime performance.\n"
"This blog post tells the story of this switch."
msgstr "Quarkus 2.13.6.Finalから、より一貫した予測可能なランタイムパフォーマンスを提供するために、ネイティブランタイムのガベージコレクションポリシーが変更されました。このブログ記事では、この切り替えについて説明します。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:14
#, fuzzy
msgid ""
"Sometime in 2022 while carrying out some native runtime performance benchmarking we observed that, in constant load plain text benchmarks,\n"
"memory consumption would grow continuously until it reached around 500MB and then it would drop.\n"
"The memory consumption graph would look something like this:"
msgstr "2022年のある時期、ネイティブランタイムのパフォーマンスベンチマークを実施した際、一定負荷のプレーンテキストベンチマークで、メモリ消費量が500MB程度になるまで増加し続け、その後減少することを確認しました。メモリ消費量のグラフは次のようなものでした："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:20
#, fuzzy
msgid ""
"The graph above was obtained with VisualVM.\n"
"This feature has only been available in the GraalVM Community Edition starting with version 22.3.0.\n"
"See\n"
"https://www.graalvm.org/latest/tools/visualvm[here]\n"
"for more details."
msgstr "上のグラフは、VisualVMで取得したものです。この機能は、バージョン22.3.0からGraalVM Community Editionでのみ利用できるようになりました。詳しくは link:https://www.graalvm.org/latest/tools/visualvm[こちらを] ご覧ください。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:26
#, fuzzy
msgid ""
"The graph looked suspicious.\n"
"At a first glance, small garbage collections were happening regularly but those collections were not able to fully collect all the garbage.\n"
"This uncollected garbage would continue to grow until around the 500MB mark, at which point a full garbage collection would happen and it would clear the growing leak."
msgstr "グラフが怪しく見えた。一見すると、小さなガベージコレクションが定期的に行われているが、それらのコレクションはすべてのガベージを完全に収集することができなかった。この未回収のゴミは、500MBを超えるあたりまで増え続け、その時点で完全なガベージコレクションが発生し、増え続けるリークをクリアすることになる。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:30
#, fuzzy
msgid ""
"The first thing we wondered was,\n"
"what this ~500MB limit was and where it was coming from.\n"
"To do that,\n"
"we enabled GC logging to see if we could get some clues:"
msgstr "まず疑問に思ったのは、この500MBという制限は何なのか、どこから来ているのか、ということでした。そのために、GCロギングを有効にして、何か手がかりが得られるかどうか確認しました："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:48
#, fuzzy
msgid ""
"We realized that this number is actually 512MB,\n"
"which is the default minimum heap size GraalVM configures when the maximum heap size is anything above ~3GB of physical memory."
msgstr "この数値は実際には512MBであり、これは最大ヒープサイズが物理メモリの~3GBを超える場合にgraalVMが設定するデフォルトの最小ヒープサイズであることに気づかされた。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:51
#, fuzzy
msgid ""
"The next question was,\n"
"why is there a relationship between the minimum heap size and the memory consumption at which a full GC appears to happen?\n"
"Looking at the output above,\n"
"on our system the default maximum heap size is 25.6GB.\n"
"GraalVM defaults the maximum heap size to 80% of the physical memory if no specific configuration is passed, and indeed 25.6GB is 80% of 32GB.\n"
"It would seem odd to do a full GC when 512MB have been consumed,\n"
"given that our system has given it a maximum heap size that is far bigger.\n"
"The answer was found in the GC policy Quarkus was explicitly configuring."
msgstr "次の質問は、なぜ最小ヒープサイズとフルGCが起こるように見えるメモリ消費量との間に関係があるのか、ということでした。上記の出力を見ると、私たちのシステムでは、デフォルトの最大ヒープサイズは25.6GBです。GraalVMは、特定の設定が渡されない場合、最大ヒープサイズを物理メモリの80%にデフォルト設定し、実際に25.6GBは32GBの80%です。512MBが消費されたときに完全なGCを行うのは奇妙に思えますが、私たちのシステムははるかに大きな最大ヒープサイズを与えていることを考えると、そのようなことはありません。その答えは、Quarkusが明示的に設定しているGCポリシーにありました。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:60
#, fuzzy
msgid ""
"By default GraalVM uses a GC policy called \"adaptive\",\n"
"but Quarkus was instead instructing GraalVM to use another GC policy called \"by space and time\".\n"
"The full story on why Quarkus was using a different GC policy can be found\n"
"https://github.com/quarkusio/quarkus/issues/28267[here],\n"
"but to summarize,\n"
"the decision was made in 2018, when \"by space and time\" appeared to generate less full GCs and offered considerably better throughput."
msgstr "デフォルトでGraalVMは「adaptive」と呼ばれるGCポリシーを使用しますが、Quarkusは代わりに「by space and time」と呼ばれる別のGCポリシーを使用するようGraalVMに指示を出していました。Quarkusが別のGCポリシーを使用していた理由の全容は link:https://github.com/quarkusio/quarkus/issues/28267[こちらに] ありますが、要約すると、「by space and time」がより少ないフルGCを生成し、かなり優れたスループットを提供すると思われた2018年に決定されたものである。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:67
#, fuzzy
msgid ""
"The \"by space and time\" GC policy implemented a `shouldCollectCompletely` method that decided whether to do a complete (full) or incremental (minimal) collection.\n"
"The relevant code of the \"by space and time\" GC policy is the following:"
msgstr "by space and time」GCポリシーは、完全収集（full）か増分収集（minimal）かを決定する `shouldCollectCompletely` 方式を実装していました。by space and time」GCポリシーの関連コードは以下の通りです："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:76
#, fuzzy
msgid ""
"One option `(1)` for doing a full GC would be when it estimates that the used heap will exceed maximum heap size,\n"
"but that wasn’t our case.\n"
"The other `(2)` would be if enough minimal collections had happened and the used heap was above the minimum heap size.\n"
"This latter option was what was happening here."
msgstr "フルGCを行うための1つのオプション `(1)` 、使用ヒープが最大ヒープサイズを超えると推定される場合ですが、これは私たちのケースとは異なりました。 `(2)` もう一つの選択肢は、十分な数の最小限の収集が行われ、使用ヒープが最小ヒープサイズを超えた場合であろう。この後者のオプションが、今回起きていたことでした。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:81
#, fuzzy
msgid ""
"At this point we thought,\n"
"do the assumptions made about the default GC policy still apply in 2022?\n"
"So, we removed the GC policy configuration tweak,\n"
"repeated the test and we observed the following memory consumption:"
msgstr "この時点で私たちは、デフォルトのGCポリシーに関する仮定が2022年でも適用されるのか、と考えました。そこで、GCポリシー設定の微調整を削除し、テストを繰り返したところ、次のようなメモリ消費量が確認されました："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:88
#, fuzzy
msgid ""
"For the same workload the default GC policy, called \"adaptive\",\n"
"consumed close to 50% less heap compared to the \"by space and time\" one.\n"
"Note, however, that these graphs alone are not enough to make the switch since we could have a situation where \"adaptive\" is using less memory because the overall throughput is less.\n"
"So, let’s look at the benchmark that generated the graphs above and see what throughput numbers we obtain.\n"
"Using https://github.com/Hyperfoil/Hyperfoil[Hyperfoil],\n"
"the \"by space and time\" policy reported these numbers on our environment:"
msgstr "同じワークロードに対して、「adaptive」と呼ばれるデフォルトのGCポリシーは、「by space and time」と比較して、ヒープ消費量が50%近く減少しています。しかし、これらのグラフだけでは、「adaptive」の方が全体のスループットが低いため、より少ないメモリを使用しているという状況があり得るため、切り替えを行うには十分ではないことに注意してください。そこで、上のグラフを生成したベンチマークで、どのようなスループット数値が得られるか見てみましょう。 link:https://github.com/Hyperfoil/Hyperfoil[Hyperfoilを使って] 、「by space and time」ポリシーで、私たちの環境ではこのような数値が報告されました："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:102
#, fuzzy
msgid "And here are the numbers for the \"adaptive\" policy:"
msgstr "そして、「適応型」ポリシーの数字です："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:111
#, fuzzy
msgid ""
"The results were obtained with `wrk`,\n"
"which is known to have issues with latency numbers\n"
"(see https://redhatperf.github.io/post/coordinated-omission[this blog post] for more details),\n"
"so we can ignore those in the context of this blog post and focus on throughput numbers."
msgstr "この結果は、 `wrk` 、レイテンシーの数値に問題があることが知られています（詳細は link:https://redhatperf.github.io/post/coordinated-omission[このブログ記事を] 参照）。このブログ記事の文脈ではそれを無視して、スループットの数値に注目することができます。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:116
#, fuzzy
msgid ""
"For the same workload,\n"
"the throughput obtained with the \"adaptive\" policy is within 1% of the one obtained with the \"by space and time\" policy.\n"
"So getting pretty much the same throughput with \"adaptive\" as with \"by space and time\" and close to 50% less memory consumption,\n"
"made it a pretty convincing argument to switch to the \"adaptive\" GC policy as the default for Quarkus,\n"
"as it was already the case for other GraalVM."
msgstr "同じワークロードに対して、「adaptive」ポリシーで得られたスループットは、「by space and time」ポリシーで得られたスループットの1%以内に収まっています。つまり、\"by space and time \"とほぼ同じスループットを \"adaptive \"で得て、メモリ消費量を50%近く減らすことができたので、他のGraalVMですでにそうだったように、QuarkusのデフォルトとしてGCポリシーを \"adaptive \"に切り替えることをかなり説得力のある議論にしました。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:122
#, fuzzy
msgid ""
"The memory consumption benefits do not apply evenly across all heap sizes.\n"
"Numbers like the ones published in this blog post would apply for maximum heap sizes that are equal or above 3GB,\n"
"at which stage the default minimum heap size is set to ~512MB unless configured otherwise.\n"
"For smaller maximum heap sizes, the memory consumption improvements might be smaller or non-existent."
msgstr "メモリ消費量の利点は、すべてのヒープサイズに均等に適用されるわけではありません。このブログ記事で公開されているような数値は、最大ヒープサイズが3GBと同等かそれ以上の場合に適用されます。この場合、特に設定されていない限り、デフォルトの最小ヒープサイズは〜512MBに設定されます。最大ヒープサイズが小さい場合、メモリ消費量の改善は小さいか、存在しないかもしれません。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:127
#, fuzzy
msgid ""
"We often see tests or benchmarks run with no `-Xmx` configured,\n"
"in which case as stated above,\n"
"the maximum heap size is set to 80% of the available physical memory and this heap size can easily exceed 3GB on modern hardware.\n"
"These users would see better out of the box experience with the \"adaptive\" GC policy."
msgstr "`-Xmx` が設定されていない状態でテストやベンチマークが実行されているのをよく見かけます。この場合、前述のように最大ヒープサイズは利用可能な物理メモリの80%に設定され、このヒープサイズは最新のハードウェアでは簡単に3GBを超えることがあります。このようなユーザーは、\"adaptive \"GCポリシーによって、より良いアウトオブザボックス体験を得ることができるだろう。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:132
#, fuzzy
msgid ""
"So, starting with Quarkus 2.13.6.Final, the GC policy for Quarkus native applications was aligned with GraalVM's default, called \"adaptive\".\n"
"It is still possible to set the GC policy back to \"by space and time\", should that work better in a specific case.\n"
"This can be useful to do if you observe a regression with this GC policy change in your own Quarkus application.\n"
"To do so, pass in:"
msgstr "そこで、Quarkus 2.13.6.Finalから、QuarkusネイティブアプリケーションのGCポリシーは、「適応型」と呼ばれるgraalVMのデフォルトと一致するようになりました。特定のケースでより良く機能するように、GCポリシーを「空間と時間による」に戻すことはまだ可能です。これは、自分のQuarkusアプリケーションでGCポリシーの変更に伴うリグレッションを観察した場合に有用です。これを行うには、次のように渡します："

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:142
#, fuzzy
msgid "It is necessary to escape `$` sign if passing in via command line."
msgstr "コマンドラインから渡す場合は、 `$` 記号をエスケープする必要があります。"

#. type: Plain Text
#: upstream/_posts/2023-01-16-native-adopts-adaptive-gc-policy.adoc:144
#, fuzzy
msgid ""
"More details on the investigation carried out can be found in\n"
"https://github.com/quarkusio/quarkus/issues/28267[the original GitHub issue].\n"
"As a result of this work,\n"
"we have also enhanced the Quarkus Native Reference Guide to add a\n"
"https://quarkus.io/guides/native-reference#native-memory-management[Native Memory Management section].\n"
"This new section should help Quarkus Native users understand how memory management works and how to get the most out of it."
msgstr "実施した調査の詳細は、 link:https://github.com/quarkusio/quarkus/issues/28267[元のGitHub issueに] 記載されています。この作業の結果、Quarkus Nativeリファレンスガイドも強化され、 link:https://quarkus.io/guides/native-reference#native-memory-management[Native Memory Managementのセクションが] 追加されました。この新しいセクションは、Quarkus Nativeユーザーがメモリ管理の仕組みとそれを最大限に活用する方法を理解するのに役立つはずです。"
