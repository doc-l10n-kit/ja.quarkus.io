msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:3
msgid "Monitoring Quarkus JVM Mode with Cryostat"
msgstr "CryostatでQuarkusのJVMモードを監視"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:4
msgid "2022-04-27"
msgstr "2022-04-27"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:5
msgid "monitoring metrics profiling cryostat jfr flightrecorder kubernetes openshift containers"
msgstr "monitoring metrics profiling cryostat jfr flightrecorder kubernetes openshift containers"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:6
msgid "Introduction to Cryostat for Quarkus developers and step-by-step guide on configuring Quarkus applications for Cryostat compatibility"
msgstr "Quarkus開発者向けのCryostatの紹介と、Cryostat互換のためのQuarkusアプリケーションの設定に関するステップバイステップガイド"

#. type: YAML Front Matter
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:7
msgid "aazores"
msgstr "aazores"

#. type: Title =
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:11
msgid "Monitoring Quarkus JVM Mode With Cryostat"
msgstr "CryostatでQuarkusのJVMモードを監視"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:13
msgid ""
"https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat^] is a profiling and monitoring tool that leverages the\n"
"https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder^] (JFR) framework already present in your Java applications\n"
"running on the HotSpot JVM. Cryostat provides an in-cluster collection hub for easy and secure access to your JDK Flight Recorder data from outside the cluster. Cryostat is\n"
"a cloud-native application primarily targeting deployment on OpenShift, so this guide will assume you are also deploying your Quarkus applications to OpenShift for simplicity."
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Cryostat, window=_blank]は、HotSpot JVM 上で動作する Java アプリケーションに既に存在する link:https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u[JDK Flight Recorder, window=_blank](JFR) フレームワークを活用したプロファイリングおよび監視ツールです。Cryostatは、クラスタ内の収集ハブを提供し、クラスタ外からJDK Flight Recorderデータに簡単かつ安全にアクセスすることができます。Cryostatは、主にOpenShiftへのデプロイをターゲットとするクラウドネイティブアプリケーションです。したがって、このガイドでは、わかりやすくするために、QuarkusアプリケーションもOpenShiftにデプロイしているものと仮定します。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:18
msgid ""
"In this article we will explore how to configure Quarkus applications to allow Cryostat to connect to them, allowing Cryostat to communicate with Quarkus and provide its\n"
"JDK Flight Recorder collection, storage, and analysis tooling."
msgstr "この記事では、CryostatがQuarkusと通信し、JDK Flight Recorderの収集、保存、および分析ツールを提供できるように、Quarkusアプリケーションを設定する方法について説明します。"

#. type: Title =
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:21
msgid "Cryostat Automated Analysis Report"
msgstr "クライオスタット自動分析レポート"

#. type: Title =
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:24
msgid "Cryostat Grafana Dashboard"
msgstr "Cryostat Grafana Dashboard"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:27
msgid "Caveats for Cryostat with Quarkus"
msgstr "Quarkusを使用したCryostatの注意点"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:29
msgid ""
"Quarkus famously has the ability to be built in standard JVM mode (the build produces .JAR files to be loaded and run by the JVM at runtime) or native mode (the build produces\n"
"a native binary to be directly executed). Cryostat relies upon both JDK Flight Recorder (JFR), which is only partially supported in Quarkus native mode, and JDK Management Extensions\n"
"(JMX), which is not supported in native mode at the time of writing. This means that, unfortunately, only JVM-mode Quarkus applications can be configured for use with Cryostat."
msgstr "Quarkusは、標準のJVMモード（ビルドにより.JARファイルを生成し、ランタイムにJVMでロードして実行）またはネイティブモード（ビルドにより、直接実行するネイティブバイナリを生成）でビルドできることは有名な話です。CryostatはJDK Flight Recorder（JFR）に依存していますが、これはQuarkusのネイティブモードでは部分的にしかサポートされておらず、JDK Management Extensions（JMX）は執筆時点ではネイティブモードではサポートされていません。つまり、残念ながら、JVMモードのQuarkusアプリケーションしかCryostatで使用するように設定することができません。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:33
msgid "Getting Started with Cryostat"
msgstr "Cryostat入門"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:35
msgid "Getting started with Cryostat on OpenShift is quick and easy - just install it from OperatorHub:"
msgstr "OpenShiftでCryostatを始めるには、OperatorHubからインストールするだけで、素早く簡単にできます。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:37
msgid "Cryostat Installation"
msgstr "Cryostatインストール"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:40
msgid ""
"Then create a Cryostat CR resource instance to let the Operator know you'd like to deploy a Cryostat instance. At this stage you can also choose some configuration options, but\n"
"we'll assume the defaults for now."
msgstr "次に、Cryostat CR リソースインスタンスを作成し、Operator に Cryostat インスタンスをデプロイすることを知らせます。この段階で、いくつかの設定オプションを選択することもできますが、ここではデフォルトを前提とします。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:43
msgid "Cryostat Creation"
msgstr "Cryostat作成"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:46
msgid "Cryostat Communication"
msgstr "Cryostat通信"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:48
msgid ""
"Cryostat uses JMX to talk to applications running on the HotSpot JVM, including but not limited to Java and Scala applications. JMX is a standard Java technology that allows\n"
"tools to connect to applications and perform actions or retrieve data across a variety of underlying transport protocols. If you build and deploy your Quarkus application in JVM\n"
"mode then JMX support is already built-in and ready out of the box. There are two ways to enable JMX on your application."
msgstr "CryostatはJMXを使用して、HotSpot JVM上で動作するアプリケーション（JavaおよびScalaアプリケーションを含むが、これに限定されない）と対話します。JMXは、ツールがアプリケーションに接続してアクションを実行したり、さまざまな基礎となるトランスポートプロトコルを介してデータを取得したりできるようにする標準のJavaテクノロジーです。QuarkusアプリケーションをJVMモードで構築してデプロイする場合、JMXサポートはすでに組み込まれており、すぐに使用できます。アプリケーションでJMXを有効にするには、2つの方法があります。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:52
msgid "Method 1: Enable it at runtime"
msgstr "方法1：実行時に有効化"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:54
msgid "JMX can be enabled by setting JVM system properties:"
msgstr "JMXは、JVMのシステムプロパティを設定することで有効にすることができます。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:56
#, fuzzy
msgid ""
"-Dcom.sun.management.jmxremote\n"
"-Dcom.sun.management.jmxremote.port=${RJMX_PORT}\n"
"-Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT}\n"
"-Djava.rmi.server.hostname=127.0.0.1\n"
"-Dcom.sun.management.jmxremote.authenticate=false\n"
"-Dcom.sun.management.jmxremote.ssl=false\n"
"-Dcom.sun.management.jmxremote.local.only=false"
msgstr "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:66
msgid ""
"Where `+${RJMX_PORT}+` is replaced with your chosen port number for the remote JMX network connection over RMI. In this example we disable JMX authentication and JMX SSL - in\n"
"practice these should both be enabled for security reasons, but configuring these particular options is out of scope for this guide. Please see\n"
"https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[this document^] for further information."
msgstr "ここで、 `${RJMX_PORT}` は、RMIを介したリモートJMXネットワーク接続のために選択したポート番号に置き換えられています。この例では、JMX認証とJMX SSLを無効にしています。実際には、セキュリティ上の理由からこれらは両方とも有効にすべきですが、これらの特定のオプションを構成することは、このガイドの範囲外です。詳細については、 link:https://docs.oracle.com/javadb/10.10.1.2/adminguide/radminjmxenablepwdssl.html[このドキュメントを, window=_blank]参照してください。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:70
msgid "Quarkus uses a feature-rich application startup script, which allows us to add JVM system properties at runtime by simply setting an environment variable:"
msgstr "Quarkusでは、機能豊富なアプリケーション起動スクリプトを使用しており、環境変数を設定するだけで、実行時にJVMシステムプロパティを追加することができます。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:72
#, fuzzy
msgid "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\""
msgstr "JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\" を参照してください。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:76
msgid ""
"If you are running your Quarkus application in OpenShift or Kubernetes then try setting this environment variable in your `+Deployment+` or `+DeploymentConfig+`, nested\n"
"within the `+Spec+` for the application's `+Container+`. This method of enabling JMX does not require the Quarkus application to be rebuilt, only to be redeployed."
msgstr "OpenShiftまたはKubernetesでQuarkusアプリケーションを実行している場合、この環境変数を、アプリケーション `Container` の `Spec` 内の `Deployment` もしくは `DeploymentConfig` で `+Spec+` にネストして設定してみてください 。この方法でJMXを有効にすると、Quarkusアプリケーションを再構築する必要はなく、再デプロイするだけです。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:79
msgid "Method 2: Enable it at build time"
msgstr "方法2：ビルド時に有効化"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:81
msgid ""
"The same JVM system properties as before can be added to containerized Quarkus applications by editing the `+Dockerfile.jvm+` under `+src/main/docker/+`. Below is a sample\n"
"`+Dockerfile.jvm+` from a basic Quarkus project - pay attention to the `+ENV JAVA_OPTS_APPEND+` line that has been added to append the JVM properties and expose the port number:"
msgstr "コンテナ化されたQuarkusアプリケーションに、以前と同じJVMシステムプロパティを追加するには、 `src/main/docker/` の下にある `Dockerfile.jvm` を編集します。 `Dockerfile.jvm` 以下は、基本的なQuarkusプロジェクトのサンプルです。JVMプロパティを追加し、ポート番号を公開するために追加された `ENV JAVA_OPTS_APPEND` の行に注目してください。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:84
#, fuzzy
msgid ""
"FROM registry.access.redhat.com/ubi8/openjdk-11:1.11\n"
"\n"
"ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n"
"\n"
"\n"
"# We make four distinct layers so if there are application changes the library layers can be re-used\n"
"COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/\n"
"COPY --chown=185 target/quarkus-app/*.jar /deployments/\n"
"COPY --chown=185 target/quarkus-app/app/ /deployments/app/\n"
"COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/\n"
"\n"
"EXPOSE 8080 ${RJMX_PORT}\n"
"USER 185\n"
"ENV JAVA_OPTS=\"-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\n"
"ENV JAVA_OPTS_APPEND=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${RJMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${RJMX_PORT} -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false\"\n"
"ENV JAVA_APP_JAR=\"/deployments/quarkus-run.jar\""
msgstr "FROM registry.access.redhat.com/ubi8/openjdk-11:1.11"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:103
msgid "Again, be sure to replace `+${RJMX_PORT}+` on all lines with a port number in this file."
msgstr "繰り返しますが、このファイルでは、すべての行の `${RJMX_PORT}` をポート番号に置き換えてください。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:105
msgid "This method is less flexible because it requires the remote JMX port number to be known at build time, and it requires the application to be rebuilt and redeployed."
msgstr "この方法は、ビルド時にリモートのJMXポート番号を知っている必要があり、アプリケーションを再構築して再デプロイする必要があるため、柔軟性に欠けます。"

#. type: Title ==
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:107
msgid "Cryostat Discovery"
msgstr "Cryostatディスカバリー"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:109
msgid ""
"Now that we have enabled JMX on our Quarkus application and redeployed it, it is ready to talk to Cryostat. Before this can happen, however, Cryostat needs to know how and where\n"
"to find the application. There are two ways to achieve this: automatic discovery and custom targets. Automatic discovery is the preferred method and is enabled by default. Custom\n"
"targets can be used to fill in gaps for deployed application targets that do not meet the criteria for automatic discovery, but which are known to be reachable over the network."
msgstr "QuarkusアプリケーションでJMXを有効にし、再デプロイしたので、Cryostatと通信する準備ができました。しかし、これが実現する前に、Cryostatはアプリケーションをどこでどのように見つけるかを知る必要があります。これを達成するために、自動検出とカスタムターゲットの2つの方法があります。自動検出は好ましい方法であり、デフォルトで有効になっています。カスタムターゲットは、自動検出の基準を満たさないが、ネットワーク上で到達可能であることが知られている展開されたアプリケーションターゲットのギャップを埋めるために使用することができます。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:113
msgid "Automatic Discovery"
msgstr "オートディスカバリー"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:115
msgid ""
"Cryostat can discover target applications automatically and use their discovered Remote JMX service URLs to connect. Automatic discovery depends on the deployment platform - at\n"
"the time of writing, Cryostat will use the OpenShift/Kubernetes API to discover `+Endpoints+` objects when deployed on OpenShift/Kubernetes. If no OpenShift/Kubernetes API server\n"
"is available then Cryostat falls back to using the Java Discovery Protocol (JDP). In any case the automatically discovered targets are merged with the custom targets. If\n"
"OpenShift/Kubernetes `+Endpoints+` discovery is used then the target application should have an associated `+Service+` object that exposes a port for cluster-internal JMX traffic.\n"
"This port must either use the port number 9091 or have the name `+jfr-jmx+` for Cryostat to pick it up as an intended target application."
msgstr "Cryostat はターゲットアプリケーションを自動的に検出し、検出されたリモート JMX サービス URL を使用して接続することができます。自動検出はデプロイメントプラットフォームに依存します。執筆時点では、OpenShift/Kubernetes にデプロイされた場合、Cryostat は `Endpoints` オブジェクトを検出するために OpenShift/Kubernetes API を使用します。OpenShift/Kubernetes APIサーバがない場合、CryostatはJava Discovery Protocol (JDP)を使用するようにフォールバックします。いずれの場合も、自動的に検出されたターゲットは、カスタムターゲットにマージされます。OpenShift/Kubernetes `Endpoints` ディスカバリーが使用される場合、ターゲットアプリケーションは、クラスタ内部のJMXトラフィック用のポートを公開する関連する `Service` オブジェクトを持つ必要があります。このポートは、Cryostat が意図したターゲットアプリケーションとしてピックアップするために、ポート番号 9091 を使用するか、 `jfr-jmx` という名前を持っている必要があります。"

#. type: Title ===
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:121
msgid "Custom Targets"
msgstr "カスタムターゲット"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:123
msgid ""
"This is a way for Cryostat clients (end users or other automated tooling) to tell Cryostat how and where to find a single target application instance. A Custom Target definition\n"
"is at its core simply a network-reachable remote connection JMX URL and a human-readable alias. These can be created in the Cryostat web client by clicking the `+++` (Plus) icon\n"
"on the target selection dropdown or by using your preferred HTTP client:"
msgstr "これは、Cryostat クライアント（エンドユーザまたは他の自動化ツール）が、単一のターゲットアプリケーションインスタンスを見つける方法と場所を Cryostat に指示するための方法です。カスタムターゲット定義は、その中核にある、ネットワークに到達可能なリモート接続JMX URLと人間が読めるエイリアスのみです。これらは、ターゲット選択のドロップダウンで `+` (プラス)アイコンをクリックするか、お好みのHTTPクライアントを使用して、Cryostatウェブクライアントで作成できます。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:127
#, fuzzy
msgid ""
"curl \\\n"
"  -X POST \\\n"
"  -F alias=myapp \\\n"
"  -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi \\\n"
"  https://cryostat.my-openshift-cluster.example.com/api/v2/targets"
msgstr "curl ˶ -X POST ˶ -F alias=myapp ˶ -F connectUrl=service:jmx:rmi:///jndi/rmi://myapp.my-openshift-cluster.example.com:1234/jmxrmi ˶ https://cryostat.my-openshift-cluster.example.com/api/v2/targets"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:135
msgid "Once a custom target definition is added the `+connectUrl+` can be used as a `+targetId+` URL parameter anywhere one is expected in the Cryostat HTTP API."
msgstr "`targetId` カスタムターゲット定義が追加されると、 `connectUrl` URLパラメータとして、Cryostat HTTP APIで期待される任意の場所で使用することができます。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:137
msgid "Please see the following links for further information on Cryostat:"
msgstr "Cryostatの詳細については、以下のリンクをご覧ください。"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:139
msgid "https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Introduction to Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/blog/2021/01/25/introduction-to-containerjfr-jdk-flight-recorder-for-containers[Red Hat DevelopersブログでのCryostatの紹介, window=_blank]"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:140
msgid "https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Setup guide for Java Application to use Cryostat on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/10/26/configuring-java-applications-use-cryostat[Red Hat DevelopersブログのCryostatを使用するためのJavaアプリケーションのセットアップガイド, window=_blank]"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:141
msgid "https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Guide for using Cryostat Custom Targets on the Red Hat Developers blog^]"
msgstr "link:https://developers.redhat.com/articles/2021/11/02/java-monitoring-custom-targets-cryostat[Red Hat DevelopersブログのCryostatカスタムターゲットの使用に関するガイド, window=_blank]"

#. type: Plain Text
#: upstream/_posts/2022-04-27-monitoring-quarkus-jvm-mode-with-cryostat.adoc:142
msgid "https://cryostat.io/[Cryostat's upstream website^]"
msgstr "https://cryostat.io/[Cryostat's upstream ウェブサイト^]"
