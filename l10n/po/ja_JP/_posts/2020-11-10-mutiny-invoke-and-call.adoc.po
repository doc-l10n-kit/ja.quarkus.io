msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:3
msgid "Peeking at the streams"
msgstr "ストリームを覗く"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:4
msgid "2020-11-10"
msgstr "2020-11-10"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:5
msgid "reactive mutiny"
msgstr "reactive mutiny"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:6
msgid "How to observe events without touching the streams."
msgstr "ストリームに触れずにイベントを観察する方法"

#. type: YAML Front Matter
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:10
msgid ""
"Mutiny is an event-driven Reactive Programming library.\n"
"Like other reactive programming libraries, it uses streams as the primary construct.\n"
"These streams convey events, and your code processes these events.\n"
"Most of the time, your code is only interested in item and failure events.\n"
"But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr "Mutiny はイベント駆動型のリアクティブプログラミングライブラリです。他のリアクティブ・プログラミング・ライブラリと同様に、主要な構成要素としてストリームを使用します。これらのストリームはイベントを伝え、あなたのコードはこれらのイベントを処理します。ほとんどの場合、あなたのコードはアイテムイベントと失敗イベントにしか興味がありません。しかし、キャンセル、リクエスト、完了などの他の種類のイベントもあります。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:16
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "何が起こっているのかをよりよく理解したり、特定の副作用を実装したりするために、これらの様々なイベントを見る必要があることは稀ではありません。例えば、完了イベントの後にリソースを閉じたり、失敗やキャンセル時にメッセージをログに記録したりする必要があるかもしれません。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:18
msgid ""
"For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.\n"
"These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.\n"
"It does not transform the received event; it notifies you that something happened and let you react."
msgstr "イベントの種類ごとに、その特定のイベントを処理するための方法を提供する関連 _グループ_ があります: `onItem()`, `onFailure()`, `onCompletion()` など。これらのグループは、配信に影響を与えずに様々なイベントを覗くための 2 つの方法を提供しています: `invoke` と `call` 。これらのグループは、受信したイベントを変換するのではなく、何かが起こったことを通知して反応させてくれます。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:22
msgid "The invoke method"
msgstr "invoke メソッド"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:24
msgid ""
"The `invoke` method is synchronous and does not return anything.\n"
"Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr "`invoke` メソッドは同期で、何も戻りません。Mutinyは、観測されたストリームがイベントをディスパッチするときに、設定されたコールバックを呼び出します。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:35
msgid ""
"As said above, `invoke` is synchronous.\n"
"Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr "上で述べたように、 `invoke` は同期です。Mutinyはコールバックを呼び出し、コールバックが戻ってきたらイベントを下流に伝播させます。ディスパッチをブロックします。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:38
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:40
msgid "Of course, we highly recommend you not to block."
msgstr "もちろん、ブロックしないことを強くお勧めします。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:42
msgid "The following snippets show how you can log the different types of events."
msgstr "次のスニペットは、さまざまな種類のイベントをログに記録する方法を示しています。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:55
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "前のコードスニペットの矢印は、イベントが上流(ソース)から来るのか、下流(コンシューマ)から来るのかを示しています。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:57
msgid ""
"The `invoke` method does not change the event, except in one case.\n"
"If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr "`invoke` メソッドは、1 つのケースを除いて、イベントを変更しません。 `invoke` コールバックが例外をスローした場合、ダウンストリームは実際のイベントを取得せず、代わりに失敗イベントを取得します。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:60
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "失敗イベントを観測しているときに、コールバックが例外を投げると、Mutinyは元の失敗とコールバックの失敗を集約した `CompositeException` を伝播します。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:62
msgid "The call method"
msgstr "呼び出し方法"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:64
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "`invoke` とは異なり、 `call` は非同期で、コールバックは `Uni<?>` オブジェクトを返します。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:66
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr "`call` リソースを閉じるなど、非同期の副作用を実装する必要がある場合によく使われます。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:68
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=\"call\"]"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:70
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "Mutinyは、コールバックによって返されたUniがアイテムを放出するまで、元のイベントを下流にディスパッチしません。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:81
#, fuzzy
msgid ""
"As shown in the previous snippet, you can use this approach to delay items.\n"
"But the primary use case is about completing asynchronous actions:"
msgstr "前のスニペットで示したように、アイテムを遅延させるためにこのアプローチを使うことができる。しかし、主なユースケースは非同期アクションを完了させることだ："

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:90
#, fuzzy
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it.\n"
"It observes the item or failure event from that `Uni`.\n"
"It discards the item value as only the emission matters in this case."
msgstr "その下で、Mutinyは（コールバックを呼び出すことによって） `Uni` を取得し、それをサブスクライブする。そして、 `Uni` からのアイテムまたは失敗イベントを監視する。この場合、重要なのは放出だけなので、アイテムの値は破棄する。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:94
#, fuzzy
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event."
msgstr "コールバックが例外をスローした場合、または生成された `Uni` が失敗を生成した場合、Mutiny はその失敗（または `CompositeException` ）を下流に伝播し、元のイベントを置き換えます。"

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:96
msgid "Summary"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:98
#, fuzzy
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr "`invoke` と `call` メソッドは、通過イベントを変更せずにストリームを観測する必要がある場合に便利である。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:100
#, fuzzy
msgid ""
"Use `invoke` for implementing synchronous side-effects or logging events.\n"
"The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr "同期的な副作用やイベントのロギングを実装するには、 `invoke` 。 `call` の非同期的な性質は、リソースのクローズ、データのフラッシュ、アイテムの遅延など、非同期的な副作用の実装に最適です。"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:103
#, fuzzy
msgid "The following table highlights the key differences:"
msgstr "以下の表は、主な相違点のハイライトである："

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
msgid "Method"
msgstr "メソッド"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
msgid "`call`"
msgstr "`call`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
msgid "Nature"
msgstr "種類"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
msgid "synchronous"
msgstr "同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
msgid "asynchronous"
msgstr "非同期"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
msgid "Return type"
msgstr "戻り値の型"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
msgid "`void`"
msgstr "`void`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
msgid "`Uni<?>`"
msgstr "`Uni<?>`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
msgid "Main Use cases"
msgstr "主なユースケース"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
msgid "logging"
msgstr "ロギング"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
msgid "closing resources, flushing data"
msgstr "リソースのクローズ、データのフラッシュ"

#. type: Plain Text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:117
msgid "These methods are available for every kind of event in the associated group."
msgstr "これらのメソッドは、関連するグループ内のあらゆる種類のイベントに対して利用可能です。"
