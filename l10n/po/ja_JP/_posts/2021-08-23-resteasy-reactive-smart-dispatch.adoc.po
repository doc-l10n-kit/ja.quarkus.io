msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:3
msgid "RESTEasy Reactive - To block or not to block"
msgstr "RESTEasy Reactive - ブロックするか、しないべきか、それが問題だ"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:4
msgid "2021-08-25"
msgstr "2021-08-25"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:5
msgid "reactive rest"
msgstr "reactive rest"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:6
msgid "Quarkus 2.2 includes a new dispatching strategy to make RESTEasy Reactive even better."
msgstr "Quarkus 2.2では、RESTEasy Reactive のディスパッチ戦略がよりスマートになり、開発者のエクスペリエンスが向上しました。"

#. type: YAML Front Matter
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:12
msgid ""
"In January 2021, the Quarkus team announced RESTEasy Reactive, a novel way to serve HTTP API in Quarkus.\n"
"Since its introduction, RESTEasy Reactive adoption has been quite good, and we plan to make it the default approach to implement HTTP API shortly."
msgstr "2021年1月、Quarkusチームは、QuarkusでHTTP APIを提供するための斬新な方法であるRESTEasy Reactiveを発表しました。この発表以来、RESTEasy Reactiveの採用は非常に好調で、まもなくHTTP APIを実装するデフォルトの方法にする予定です。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:15
msgid ""
"But, wait a minute, what does that mean for my imperative APIs? Do I need to learn reactive programming to use Quarkus now? Let's be clear: **no**.\n"
"This blog post will look at a few changes we made in RESTEasy reactive to make the transition smooth and transparent."
msgstr "しかし、ちょっと待ってください。私が使っている命令型APIはどうなるのでしょうか？今のQuarkusを使うにはリアクティブプログラミングを学ぶ必要があるのでしょうか？はっきりさせておきましょう： *いいえ*。このブログ記事では、スムーズで透明性の高い移行を実現するためにRESTEasy reactiveに加えたいくつかの変更点をご紹介します。"

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:18
msgid "A brief history of HTTP APIs in Quarkus"
msgstr "QuarkusにおけるHTTP APIの簡単な歴史"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:20
msgid ""
"Quarkus has, since its genesis, has been able to serve HTTP API. The inclusion of https://resteasy.github.io/[RESTEasy] has been a major milestone of the first Quarkus beta releases.\n"
"With RESTEasy _classic_, you develop HTTP APIs using the well-known JAX-RS annotations such as `@GET`, `@Path`, `@POST`...\n"
"The following snippet shows a short _hello world_ example:"
msgstr "Quarkusは、その誕生以来、HTTP APIを提供することができました。 link:https://resteasy.github.io/[RESTEasy]の搭載は、Quarkusの最初のベータリリースの主要なマイルストーンでした。RESTEasy _classic_ では、 `@GET`, `@Path`, `@POST`...のようなよく知られたJAX-RSアノテーションを使用してHTTP APIを開発します。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:41
msgid ""
"RESTEasy _classic_ invokes the HTTP endpoint (the `hello` method in the previous snippet) on a worker thread associated with the HTTP request.\n"
"It is a well-understood model, simple to understand.\n"
"However, relying on worker threads introduces a concurrency limit: the number of threads."
msgstr "RESTEasy _classic_ は、HTTP リクエストに関連付けられたワーカースレッド上で、HTTP エンドポイント（前のスニペットの `hello` メソッド）を呼び出します。これはよく理解されているモデルで、簡単に理解できます。しかし、ワーカースレッドに依存することで、同時実行の制限が発生します。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:45
msgid ""
"Even with the infusion of reactive at the core of Quarkus, RESTEasy _classic_ kept this dispatching strategy.\n"
"It was fragmenting the Quarkus ecosystem. On one side, we had the the imperative camp using RESTEasy _classic_, Hibernate ORM...\n"
"On the other side, we had the reactive camp using Reactive Routes, Vert.x APIs and other reactive extensions.\n"
"Both were using, under the hood, the reactive engine of Quarkus, but the reactive camp we using it in a more efficient way."
msgstr "Quarkusの中核にリアクティブを導入しても、RESTEasy _classic_はこのディスパッチ戦略を維持していました。このことが、Quarkusのエコシステムを分断していました。一方では、RESTEasy _classic_やHibernate ORMを使用する命令型の陣営があり、もう一方では、Reactive Routes、Vert.x API、その他のリアクティブなエクステンションを使用するリアクティブ型の陣営がありました。どちらもフードの下ではQuarkusのリアクティブエンジンを使用していましたが、リアクティブ派はより効率的な方法で使用していました。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:50
msgid ""
"Following the unification of imperative and reactive idea, in Quarkus 1.11, we introduced RESTEasy _reactive_, a novel implementation of the JAX-RS model on top of the Quarkus reactive architecture.\n"
"It offers a similar development model and much better throughput.\n"
"I won't detail the RESTEasy _reactive_ architecture and benefits.\n"
"Georgios covered them in two posts: https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive introduction] and https://quarkus.io/blog/resteasy-reactive-faq/[Massive performance without headaches]."
msgstr "命令型と反応型の考え方の統一を受けて、Quarkus 1.11では、RESTEasy _reactive_ を導入しました。これは、Quarkusのリアクティブアーキテクチャの上にJAX-RSモデルを実装した新しいものです。これは、同様の開発モデルとはるかに優れたスループットを提供します。RESTEasy _reactive_のアーキテクチャと利点については、ここでは詳しく説明しません。Georgiosは2つの投稿でそれらをカバーしています。 link:https://quarkus.io/blog/resteasy-reactive/[RESTEasy Reactive introduction]と link:https://quarkus.io/blog/resteasy-reactive-faq/[Massive performance without headaches]です。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:55
msgid "From the user point of view, the main difference between RESTEasy _classic_ and _reactive_ is how they call the HTTP endpoint methods:"
msgstr "ユーザーの視点から見ると、RESTEasyの _classic_と _reactive_ の主な違いは、HTTPエンドポイントのメソッドの呼び出し方です。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:57
msgid "_classic_ - always on a worker thread,"
msgstr "_classic_- 常にワーカースレッドで動作します。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:58
msgid "_reactive_ - on the I/O thread or on a worker thread (and you, as the developer, have the choice)"
msgstr "_reactive_ - I/Oスレッドまたはワーカースレッド（そして開発者であるあなたが選択可能）"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:60
msgid ""
"You may wonder why it's so important.\n"
"Threads are expensive, especially in containers or on the cloud where the resources are limited.\n"
"Using the I/O threads avoids creating additional threads (improving memory consumption) and avoids context switches (improving response time).\n"
"Emmanuel explained the benefits in the https://quarkus.io/blog/io-thread-benchmark/[A IO thread and a worker thread walk into a bar: a microbenchmark story] blog post."
msgstr "何故そんなに重要なのかと思われるかもしれません。スレッドは高価です。特にコンテナやクラウド上ではリソースが限られています。I/O スレッドを使用すると、追加のスレッドを作成せずに済み（メモリ消費量の改善）、コンテキストスイッチを回避できます（応答時間の改善）。Emmanuelは、 link:https://quarkus.io/blog/io-thread-benchmark/[A IO thread and a worker thread walk into a bar: a microbenchmark story]のブログ記事でそのメリットを説明しています。"

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:65
msgid "To block or not to block, that is the question."
msgstr "ブロックするかしないか、それが問題だ。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:67
msgid ""
"When we introduced RESTEasy _reactive_, we decided to use a non-blocking approach by default: if not stated otherwise, it calls the HTTP endpoint method on the I/O thread.\n"
"This model resulted in outstanding performance and was simple enough, thanks to the usage of the `@Blocking` annotation."
msgstr "RESTEasy _reactive_ を導入したとき、デフォルトでノンブロッキングのアプローチを使用することにしました。特に明記されていない場合は、I/OスレッドでHTTPエンドポイント・メソッドを呼び出します。このモデルは優れたパフォーマンスをもたらし、 `@Blocking` アノテーションの使用により十分にシンプルなものとなりました。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:70
msgid ""
"In the last few months, the adoption of RESTEasy _reactive_ has been incredible!\n"
"We have received many questions and, obviously, bug reports.\n"
"The central question is about the usage of Hibernate ORM."
msgstr "ここ数ヶ月、RESTEasy _reactive_の採用は信じられないほど進んでいます。多くの質問や、当然ながらバグレポートも寄せられています。中心となる質問は、Hibernate ORMの使い方についてです。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:74
msgid ""
"As Hibernate ORM _classic_ (we also have Hibernate _reactive_) is blocking, you can't use it with RESTEasy _reactive_ without using the `@Blocking` annotation.\n"
"This annotation changes the dispatching strategy to use a worker thread (instead of the I/O thread)."
msgstr "Hibernate ORM _classic_（Hibernate _reactive_ もあります）はブロッキングなので、 `@Blocking` アノテーションを使用せずにRESTEasy _reactive_で使用することはできません。このアノテーションは、（I/Oスレッドの代わりに）ワーカースレッドを使用するようにディスパッチ戦略を変更します。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:77
msgid "While the resulting model looked efficient and straightforward for us, non-aware users have seen a lot of:"
msgstr "結果として得られたモデルは、我々にとっては効率的でわかりやすいものに見えましたが、意識していないユーザーは多くのものを目にしています:"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:84
msgid ""
"The error message is explicit.\n"
"But, it rarely makes us happy when we have such a wall of text printed in our terminal."
msgstr "エラーメッセージは明示的です。しかし、このような壁のようなテキストがターミナルに印刷されていても、私たちが満足することはほとんどありません。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:87
msgid ""
"You may say... “well, let's do blocking by default.”\n"
"It's not that simple.\n"
"It's as dangerous to call reactive APIs expected to be called on an I/O thread on a worker thread than calling blocking APIs on the I/O thread."
msgstr "\"じゃあ、デフォルトでブロッキングをしよう\" と言われるかもしれませんが、そんな単純な話ではありません。I/Oスレッドで呼び出されることが期待されるリアクティブAPIをワーカースレッドで呼び出すことは、I/OスレッドでブロッキングAPIを呼び出すことと同じくらい危険です。"

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:91
msgid "New world, new rules!"
msgstr "新しい世界、新しいルール!"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:93
msgid ""
"In Quarkus 2.2.0, we introduced a new dispatching strategy based on the method signatures.\n"
"The Quarkus build-time approach lets us be wise and deduce if a method should be called on the I/O thread or a worker thread at build time, reducing the runtime overhead."
msgstr "Quarkus 2.2.0では、メソッドのシグネチャに基づいた新しいディスパッチ戦略を導入しました。Quarkusのビルドタイムアプローチでは、ビルド時にメソッドがI/Oスレッドとワーカースレッドのどちらで呼び出されるべきかを賢く推測し、ランタイムのオーバーヘッドを削減することができます。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:96
msgid "The following table summarizes the new set of rules:"
msgstr "以下の表は、新しいルールをまとめたものです。"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:100
msgid "Method signature"
msgstr "メソッドシグネチャ"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:100
msgid "Dispatching strategy"
msgstr "ディスパッチ戦略"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:102
msgid "`T method(...)`"
msgstr "`T method(...)`"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:107
msgid "Worker thread"
msgstr "ワーカースレッド"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:103
msgid "`Uni<T> method(...)`"
msgstr "`Uni<T> method(...)`"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:106
msgid "I/O thread"
msgstr "I/Oスレッド"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:104
msgid "`CompletionStage<T> method(...)`"
msgstr "`CompletionStage<T> method(...)`"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:105
msgid "`Multi<T> method(...)`"
msgstr "`Multi<T> method(...)`"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:106
msgid "`Publisher<T> method(...)`"
msgstr "`Publisher<T> method(...)`"

#. type: Table
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:107
msgid "`@Transactional CompletionStage<T>  method(...)`"
msgstr "`@Transactional CompletionStage<T>  method(...)`"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:110
msgid ""
"Basically: _synchronous methods default to worker threads, and asynchronous methods default to I/O threads, except if explicitly stated otherwise_.\n"
"Of course, you can override the behavior using the `@Blocking` and `@NonBlocking` annotations.\n"
"The `@Transactional` annotation is an exception to the default rules as it often means you are accessing blocking resources (such as an entity manager)."
msgstr "基本的に、 _同期メソッドはワーカースレッドがデフォルトとなり、非同期メソッドはI/Oスレッドがデフォルトとなります（ただし、明示的に別の方法が指定されている場合を除く）_。もちろん、 `@Blocking` や `@NonBlocking` のアノテーションを使って、この動作をオーバーライドすることができます。 `@Transactional` アノテーションは、デフォルトのルールの例外であり、しばしばブロッキングリソース（エンティティマネージャなど）にアクセスしていることを意味します。"

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:114
msgid "What does that change for you?"
msgstr "それによって何が変わるのでしょうか？"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:116
msgid "Let’s discuss a few examples explaining how this new strategy improves the user experience without limiting efficiency and flexibility."
msgstr "この新しい戦略が、効率性や柔軟性を損なうことなく、ユーザーエクスペリエンスを向上させることができるか、いくつかの例を挙げて説明します。"

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:119
msgid "Hello RESTEasy Reactive"
msgstr "Hello RESTEasy Reactive"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:121
msgid "Using RESTEasy _reactive_ does not change the _hello_ example from above:"
msgstr "RESTEasy _reactive_ を使用しても、上記の _hello_ の例は変わりません。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:140
msgid ""
"That method is invoked on a worker thread because it has a synchronous signature.\n"
"Previously (before Quarkus 2.2), with RESTEasy _reactive_, it would have been called on the I/O thread.\n"
"To switch back to that behavior, add `@NonBlocking`:"
msgstr "そのメソッドは、同期シグネチャを持っているため、ワーカースレッドで呼び出されます。以前（Quarkus 2.2以前）のRESTEasyの _reactive_では、I/Oスレッドで呼び出されていました。この動作に戻すには、 `@NonBlocking` を追加します。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:164
#, fuzzy
msgid "Alternatively, you can return a `Uni`:"
msgstr "あるいは、 `Uni` ："

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:185
msgid "Integrating with Hibernate ORM"
msgstr "Hibernate ORMとの連携"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:187
msgid "Following the feedback from users, let’s imagine you want to use Hibernate _classic_ with RESTEasy _reactive_:"
msgstr "ユーザーからのフィードバックを受けて、RESTEasy _reactive_ でHibernate _classic_ を使用する場合を考えてみましょう。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:208
msgid "You don't need to use `@Blocking` as the signature is synchronous. No more wall of text!"
msgstr "シグネチャが同期であるため、 `@Blocking` を使用する必要はありません。もう壁のようなテキストは必要ありません。"

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:210
msgid "Integrating with Hibernate Reactive"
msgstr "Hibernate Reactiveとの統合"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:212
msgid "If you use Hibernate _reactive_, you will use the Mutiny API, and so the resulting code will be:"
msgstr "Hibernate _reactive_ を使用する場合、Mutiny APIを使用することになるので、コードは次のようになります。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:234
msgid "This method runs on the I/O thread, which is what Hibernate _reactive_  expects."
msgstr "このメソッドはI/Oスレッドで実行されます。これはHibernate _reactive_ が期待していることです。"

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:236
msgid "Integrating with Kafka"
msgstr "Kafkaとの連携"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:238
msgid ""
"If you combine HTTP and Kafka (using reactive messaging), you will use an emitter.\n"
"Depending on the emitter type (`Emitter` or `MutinyEmitter`), the `send` method returns a `CompletionStage` or a `Uni`.\n"
"So, the following HTTP method runs on the I/O thread:"
msgstr "HTTPとKafkaを組み合わせる場合（リアクティブメッセージングを使用する場合）は、エミッターを使用します。エミッターのタイプ（ `Emitter` または `MutinyEmitter` ）に応じて、 `send` メソッドは `CompletionStage` または `Uni` を返します。そのため、以下のHTTPメソッドはI/Oスレッドで実行されます。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:266
msgid "If you change it to a synchronous signature, it runs on a worker thread:"
msgstr "これを同期シグネチャに変更すると、ワーカースレッドで実行されます。"

#. type: Title ===
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:293
msgid "Combining RESTEasy Reactive, Hibernate ORM and Kafka"
msgstr "RESTEasy Reactive、Hibernate ORM、Kafkaの組み合わせ"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:295
msgid "Let's now combine Resteasy _reactive_, Hibernate ORM _classic_ and Kafka to persist an entity and write it to a Kafka topic:"
msgstr "それでは、Resteasy _reactive_、Hibernate ORM _classic_、Kafkaを組み合わせて、エンティティを永続化し、それをKafkaトピックに書き込んでみましょう。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:325
msgid ""
"This method runs on a worker thread despite the signature.\n"
"The `@Transactional` annotation configures the dispatching strategy to use a worker thread."
msgstr "このメソッドは、シグネチャにもかかわらず、ワーカースレッドで実行されます。 `@Transactional` アノテーションにより、ワーカースレッドを使用するディスパッチ戦略が設定されています。"

#. type: Title ==
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:329
msgid "Summary"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:331
msgid "With Quarkus 2.2, the dispatching strategy of RESTEasy _reactive_ becomes smarter thus improving the developer experience."
msgstr "Quarkus 2.2では、RESTEasy _reactive_ のディスパッチ戦略がよりスマートになり、開発者のエクスペリエンスが向上しました。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:333
msgid "You don't need to learn the reactive way; you can keep using imperative code."
msgstr "リアクティブな方法を学ぶ必要はなく、命令型のコードを使い続けることができます。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:334
msgid "You don't need to think about your threads; Quarkus does that for you."
msgstr "スレッドについて考える必要はありません。Quarkusがあなたのためにそれを行います。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:335
msgid "You don't lose in flexibility; you can override the decision."
msgstr "柔軟性が失われるわけではなく、決定を覆すことができます。"

#. type: Plain Text
#: upstream/_posts/2021-08-23-resteasy-reactive-smart-dispatch.adoc:337
msgid ""
"Starting with Quarkus 2.3, the Quarkus team is thinking of making RESTEasy _reactive_  the default way to implement HTTP APIs.\n"
"It does not mean that the RESTEasy _classic_ extension will be retired, just that we reach the point where RESTEasy _reactive_ gives you more without burden."
msgstr "Quarkus 2.3から、QuarkusチームはRESTEasy _reactive_ をHTTP APIを実装するためのデフォルトの方法にすることを考えています。これは、RESTEasy _classic_ エクステンションが廃止されることを意味するものではなく、RESTEasy _reactive_ が負担なくより多くのことを提供できる段階に到達することを意味しています。"
