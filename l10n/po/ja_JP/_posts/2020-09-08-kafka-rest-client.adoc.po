msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:3
#, fuzzy
msgid "Combining Apache Kafka and the Rest client"
msgstr "Apache KafkaとRestクライアントを組み合わせる。"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:4
#, fuzzy
msgid "2020-09-08"
msgstr "2020-09-08"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:5
#, fuzzy
msgid "reactive kafka rest mutiny http"
msgstr "リアクティブ kafka レスト Mutiny http"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:6
#, fuzzy
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "リアクティブメッセージング、Kafka、Restクライアントの組み合わせ方"

#. type: YAML Front Matter
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:7
msgid "cescoffier"
msgstr "cescoffier"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:10
#, fuzzy
msgid ""
"Another week, another interesting question.\n"
"This week, someone asks me about combining Kafka and the Rest Client.\n"
"That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr "今週もまた、興味深い質問がありました。今週は、KafkaとRest Clientの組み合わせについて質問してくる人がいます。これは繰り返し出てくるテーマで、たいていの場合、次のようなプロセスを実現することが目的です："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:14
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=\"kafka rest architecture\"]"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:16
#, fuzzy
msgid ""
"In other words, we want to call a remote service for each Kafka message we receive.\n"
"Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".\n"
"Then, we have the central piece of the architecture: the processing component.\n"
"It consumes the incoming transactions, and for each of them, calls a remote service.\n"
"It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr "つまり、Kafkaメッセージを受信するたびにリモートサービスを呼び出したいのです。そのため、消費するデータ、例えば「トランザクション」を含む最初のトピック（「in」）を用意します。そして、アーキテクチャの中心的な部分である処理コンポーネントがあります。処理コンポーネントは、入力されたトランザクションを消費し、それぞれに対してリモートサービスを呼び出します。また、（リモートサービスが生成した）レスポンスを別のKafkaトピック「out」に書き込む。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:22
#, fuzzy
msgid ""
"Implementing this with Quarkus is straightforward, and that's what we will cover in this post.\n"
"Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr "Quarkusでこれを実装するのは簡単で、この投稿で取り上げるのはこれです。Reactive MessagingとRest Clientのおかげで、20行以上のコードは必要ないでしょう！"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:25
#, fuzzy
msgid "The Remote Service"
msgstr "リモートサービス"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:27
#, fuzzy
msgid ""
"Let's start with the remote service.\n"
"Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr "まず、リモートサービスから始めましょう。Quarkusには、リモートHTTPサービスを呼び出す複数の方法がありますが、ここでは、HTTPの低レベルの詳細を処理することなくHTTPサービスと対話する優れた方法を提供するRest Clientを使用するようにしましょう。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:30
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "どんなHTTP APIでも使えますが、単純化するために、わかりやすいリモートサービスを考えてみましょう、次のようなものです："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:50
#, fuzzy
msgid ""
"This service contains two methods calling the same HTTP endpoint.\n"
"The first one is synchronous, and so blocks the caller thread until the response is received.\n"
"The second is asynchronous, and the returned `Uni` gets the response when received.\n"
"In this case, the caller thread is not blocked and can do something else.\n"
"We are going to see how to use these methods later, but first, a bit of configuration.\n"
"In the `application.properties` add:"
msgstr "このサービスには、同じHTTPエンドポイントを呼び出す2つのメソッドがあります。最初のメソッドは同期式で、応答が受信されるまで呼び出し元のスレッドをブロックします。2つ目は非同期で、返された `Uni` 、レスポンスを受信したときに取得します。この場合、呼び出し側のスレッドはブロックされないので、他のことをすることができます。これらのメソッドの使い方は後で説明しますが、その前に少し設定をします。 `application.properties` に追加します："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:63
#, fuzzy
msgid ""
"Of course, update the URL.\n"
"The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr "もちろん、URLも更新します。Rest Clientの使い方や設定方法については、 link:https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client の] ガイドに詳しく書かれています。"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:66
#, fuzzy
msgid "Invoking the service for each incoming transaction"
msgstr "受信したトランザクションごとにサービスを起動する"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:68
#, fuzzy
msgid ""
"Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.\n"
"With Reactive Messaging, there is no need to handle Kafka right now.\n"
"We can focus on the logic.\n"
"Let's say we have a *channel* (a stream of data), in which to transit our transactions.\n"
"We call this first channel `in`."
msgstr "しかし、Kafkaトピックからのトランザクションを受信するたびに、サービスを呼び出すことを忘れないでください。Reactive Messagingを使えば、今すぐKafkaを処理する必要はない。ロジックに集中することができる。トランザクションを通過させる *チャネル* （データの流れ）があるとしよう。この最初のチャンネルを `in` と呼ぶことにする。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:74
#, fuzzy
msgid ""
"We also want to write the responses from the remote service into another Kafka topic.\n"
"Again, no need to handle Kafka right now.\n"
"Let's say we write the responses into a channel named `out`."
msgstr "また、リモートサービスからのレスポンスを別のKafkaトピックに書き込みたいと思います。ここでも、今すぐKafkaを扱う必要はない。ここでは、レスポンスを `out` という名前のチャンネルに書き込むとします。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:78
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "そこで、次のような（不完全な）コードを用意しました："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:94
#, fuzzy
msgid ""
"`@Incoming` configures the read channel.\n"
"`@Outgoing` configures the written channel.\n"
"But, something is missing... we need to call our remote service:"
msgstr "`@Incoming` `@Outgoing` は書き込みチャンネルを設定します。しかし、何かが足りない...リモートサービスを呼び出す必要があるのです："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:118
#, fuzzy
msgid ""
"First, we inject the Rest Client.\n"
"Then, we just invoke it in our method."
msgstr "まず、Rest Clientをインジェクトします。そして、メソッドの中でそれを呼び出すだけです。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:121
#, fuzzy
msgid ""
"You may wonder about `@Blocking`.\n"
"With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.\n"
"While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.\n"
"But, it keeps your logic synchronous."
msgstr "`@Blocking` について疑問に思うかもしれません。リアクティブ・メッセージングでは、デフォルトでイベント・ループ・アーキテクチャを使用しているため、ブロッキング・コードを使用する場合は、それを示す必要があります。 `@Blocking` はスレッドプールに依存しているため、同時実行が制限され、便利ではありますが、悪用するべきではありません。しかし、ロジックを同期的に保つことができます。"

#. type: Title ===
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:126
#, fuzzy
msgid "Using Asynchronous operations"
msgstr "非同期操作の使用"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:128
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "`TransactionService` が提供する2つ目の方法を使うことで、 `@Blocking` アノテーションを取り除くことができます： `postAsync:`"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:149
#, fuzzy
msgid ""
"Using the *async* variant of the `post` method allows us to remove `@Blocking`.\n"
"We return the `Uni` directly.\n"
"When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr "`post` メソッドの *非同期* バリアントを使用すると、 `@Blocking` を削除することができます。 `Uni` を直接返します。その `Uni` がリモートサービスの応答を受信すると、その値を `out` チャネルに書き込みます。"

#. type: Title ===
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:153
#, fuzzy
msgid "Mapping channel to Kafka"
msgstr "チャネルをKafkaにマッピングする"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:155
#, fuzzy
msgid ""
"So far, so good.\n"
"It's time to connect our code with Kafka.\n"
"With Reactive Messaging, we map channels to _connectors_, here Kafka.\n"
"So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.\n"
"Once again, edit the `application.properties` file, and add:"
msgstr "ここまでは順調です。いよいよコードをKafkaに接続するときが来た。Reactive Messagingでは、チャンネルを _コネクターに_ 対応させますが、ここではKafkaです。そこで、 `in` と `out` のチャンネルが Kafka のトピックであることを示すように、アプリケーションを設定する必要があります。もう一度、 `application.properties` ファイルを編集して、次のように追加します："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:173
#, fuzzy
msgid ""
"The first block is about the `in` channel.\n"
"It's connected to the `transactions` Kafka topic.\n"
"The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].\n"
"The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr "最初のブロックは、 `in` チャンネルについてです。 `transactions` Kafkaトピックに接続されています。データは link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[カスタムデシリアライザーで] デシリアライズされます。最後の他のプロパティは、自動コミットを無効にし（Reactive Messagingがコミットを処理します）、最後にコミットしたオフセット以降のデータを読みます。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:178
#, fuzzy
msgid ""
"The second block configures the `out` channel.\n"
"We connect it with the `output` Kafka topic and configure the value serializer.\n"
"For this simple example, we write the data as JSON."
msgstr "2番目のブロックは、 `out` チャネルを構成します。 `output` Kafkaトピックと接続し、値のシリアライザーを設定します。この単純な例では、データをJSONとして書き出します。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:182
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "つまり、Kafka `transaction` トピックにトランザクションが書き込まれると、それを処理コンポーネントが受け取り、リモートサービスに送信して、その結果が `output` Kafka トピックに書き込まれる："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:192
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "`output` のトピックの中を見ると、 `TransactionResult` が流れています："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:194
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=\"output\"]"

#. type: Title ===
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:196
#, fuzzy
msgid "We are done!"
msgstr "もう終わりだ！"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:198
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "数行のコードと少しの設定で、Kafkaトピックからデータを読み、リモートサービスを呼び出し、結果を別のKafkaトピックに書き込むことができます。単純な話です。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:200
#, fuzzy
msgid ""
"Want to try by yourself?\n"
"Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr "自分でやってみたい？この link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHubリポジトリに] あるコードをチェックし、readmeの指示に従ってください。"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:203
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "Reactive MessagingとRestクライアントには他にもgemが含まれているので、関連するガイドとドキュメントを確認してください："

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:205
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[レストクライアントの使用]"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:206
#, fuzzy
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr "link:https://quarkus.io/guides/kafka[Kafkaと対話する。]"

#. type: Plain Text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
#, fuzzy
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[Kafka Connectorのドキュメントです。]"
