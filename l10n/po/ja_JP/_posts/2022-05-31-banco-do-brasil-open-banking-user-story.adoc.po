# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-26 21:12+0000\n"
"PO-Revision-Date: 2022-09-08 23:06+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1.1\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#, no-wrap
msgid "felipewind"
msgstr "felipewind"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#, no-wrap
msgid "2022-05-31"
msgstr "2022-05-31"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#, no-wrap
msgid "Banco do Brasil extracts investment data from the Brazilian Open Banking environment using Quarkus and Kafka to scale horizontally the processing with multiple instances and simultaneous worker threads."
msgstr "Banco do Brasilは、QuarkusとKafkaを使ってブラジルのオープンバンキング環境から投資データを抽出し、複数のインスタンスと同時ワーカスレッドで処理を水平方向に拡張しています。"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#, no-wrap
msgid "user-story kafka"
msgstr "user-story kafka"

#. type: Title =
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:1
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:12
#, no-wrap
msgid "Banco do Brasil extracts Open Banking investment data with Quarkus and Kafka"
msgstr "Banco do BrasilがQuarkusとKafkaを使用してオープンバンキングの投資データを抽出"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:14
#, no-wrap
msgid "Banco"
msgstr "Banco"

#. type: Target for macro image
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:14
#, no-wrap
msgid "banco-do-brasil.png"
msgstr ""

#. type: delimited block _
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:19
msgid "Banco do Brasil S.A. is a Brazilian financial services company headquartered in Brasília, Brazil. The oldest bank in Brazil, and among the oldest banks in continuous operation in the world, it was founded by John VI, King of Portugal, in 1808. It is the second largest banking institution in Brazil, as well as the second largest in Latin America, and the seventy-seventh largest bank in the world. Banco do Brasil is controlled by the Brazilian government and is listed on the B3 stock exchange in São Paulo. footnote:[https://en.wikipedia.org/wiki/Banco_do_Brasil]"
msgstr "Banco do Brasil S.A.は、ブラジルのブラジリアに本社を置くブラジルの金融サービス会社です。1808年にポルトガル国王ジョン6世によって設立されたブラジル最古の銀行であり、現在も営業を続けている世界最古の銀行の一つです。ブラジル国内では第2位、ラテンアメリカでは第2位、世界では第77位の規模を誇る銀行です。ブラジル銀行はブラジル政府によって管理されており、サンパウロのB3証券取引所に上場しています。 footnote:[https://en.wikipedia.org/wiki/Banco_do_Brasil]"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:21
#, no-wrap
msgid "John"
msgstr "John"

#. type: Target for macro image
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:21
#, no-wrap
msgid "john-6-king-of-portugal.jpg"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:23
#, no-wrap
msgid "The Challenge"
msgstr "チャレンジ"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:26
msgid "There's an Investment Portfolio application in Banco do Brasil where all the client's investments are grouped together. This helps our financial specialists to give advice and also allows the customer to see all of their investments in one place. This information is stored on a daily basis, thus it is possible to create graphics showing the changes in the client's investments over time."
msgstr "Banco do Brasilには、投資ポートフォリオアプリケーションがあり、お客様のすべての投資がグループ化されています。これは、金融の専門家がアドバイスをするのに役立つだけでなく、お客様がすべての投資を一箇所で確認できるようにするものです。この情報は日次で保存されるため、顧客の投資の時間的な変化を示すグラフを作成することも可能です。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:28
msgid "With Brazilian Open Banking's creation, now it is possible to retrieve our customers investments' data from other financial institutions."
msgstr "ブラジルのオープンバンキングの誕生により、他の金融機関からお客様の投資データを取り込むことができるようになりました。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:30
msgid "According to Brazilian Central Bank:"
msgstr "ブラジル中央銀行によると:"

#. type: delimited block _
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:34
msgid "The Banco Central do Brasil (BCB - Central Bank of Brazil) and the National Monetary Council (CMN) define the Brazilian Open Banking environment as the sharing of data, products and services between regulated entities — financial institutions, payment institutions and other entities licensed by BCB — at the customers' discretion, as far as their own data is concerned (individuals or legal entities).footnote:[https://www.bcb.gov.br/en/financialstability/open_banking]"
msgstr "ブラジル中央銀行（BCB - Central Bank of Brasil）と国家通貨審議会（CMN）は、ブラジルのオープンバンキング環境を、規制対象である金融機関、決済機関、BCBが認可したその他の事業者間で、顧客自身（個人または法人）のデータに関する限り、データ、商品、サービスを共有することと定義しています。 footnote:[https://www.bcb.gov.br/en/financialstability/open_banking]"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:38
msgid "The business leaders envisioned the opportunity to improve customer experience by aggregating all investments, from others financial institutions, into our brand new and powerful Investment Portfolio solution."
msgstr "ビジネスリーダーは、他の金融機関のすべての投資を、当社のまったく新しい強力な投資ポートフォリオソリューションに集約することで、顧客体験を改善する機会を思い描いたのです。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:40
msgid "The task was to extract this data in two different ways:"
msgstr "このデータを2種類の方法で抽出することが課題でした。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:42
#, no-wrap
msgid "*Daily* - on every work day.\n"
msgstr "*日次* -毎営業日に。\n"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:43
#, no-wrap
msgid "*On demand* - when the data is requested by the financial specialists or directly by the customer.\n"
msgstr "*オンデマンド* - 金融専門家またはお客様から直接データを要求された場合。\n"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:45
#, no-wrap
msgid "Technical Challenges to extract data from Open Banking"
msgstr "オープンバンキングからデータを抽出するための技術的課題"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:47
msgid "There were some difficulties in accomplishing this task."
msgstr "この課題を達成するためには、いくつかの困難がありました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:48
#, no-wrap
msgid "Number of clients to extract and the API throttling"
msgstr "抽出するクライアント数とAPIのスロットリング"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:51
#, fuzzy
msgid "We have millions of customers, so the application must be able to scale up to handle all the processing. At first there were not so many clients using this feature, but this number is growing daily."
msgstr "何百万人もの顧客がいるので、アプリケーションはすべての処理を処理できるようにスケールアップする必要があります。当初、この機能を使う顧客はそれほど多くなかったのですが、この数は日々増えています。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:53
#, fuzzy
msgid "The challenge is that we have a throttling rule for using the APIs from the other financial institutions. So, we can scale up our application to cope with the demand, but we need to respect the maximum number of API calls we can do per minute."
msgstr "課題は、他の金融機関のAPIを利用する際のスロットルルールがあることです。そのため、アプリケーションをスケールアップして需要に対応することは可能ですが、1分間に行えるAPI呼び出しの最大数を尊重する必要があります。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:54
#, no-wrap
msgid "Concurrency between on demand requests and daily processing"
msgstr "オンデマンド要求と日常処理の並行性"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:57
msgid "The on demand requests cannot be put at the end of the processing queue concurrently with the daily process."
msgstr "オンデマンド要求は、日次処理と同時に処理待ち行列の末尾に置くことはできません。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:59
msgid "This would be a problem, because the daily process can take hours and our clients and financial specialists cannot wait all this time when they make a request."
msgstr "なぜなら、日々のプロセスには何時間もかかることがあり、私たちのお客様や金融の専門家は、リクエストをしたときにこの時間をずっと待つことはできないからです。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:60
#, no-wrap
msgid "APIs instability"
msgstr "APIの不安定さ"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:63
msgid "The daily processing must accurately store the data of every work day."
msgstr "日次処理では、一日一日のデータを正確に保存する必要があります。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:65
msgid "The difficulty is that sometimes some financial institutions have problems, so it is not possible to be sure that the Open Banking information will be available every day."
msgstr "難しいのは、金融機関によってはトラブルが発生することもあり、オープンバンキングの情報を毎日確実に入手できるわけではないことです。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:67
msgid "It is necessary to create some rules, where we can reprocess information from previous days."
msgstr "前日の情報を再処理するようなルールを作る必要があります。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:68
#, no-wrap
msgid "Observability"
msgstr "Observability"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:71
msgid "We need to have some metrics to be able to know if the system is working correctly or if there is a problem."
msgstr "システムが正しく動作しているか、あるいは問題があるかを知るための指標が必要です。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:73
#, fuzzy
msgid "For instance, \"why is the data extraction taking so long today?\" \"Is it some financial institution that is having a problem?\" \"Is it our system?\" \"Our database?\""
msgstr "例えば、\"今日はなぜデータ抽出に時間がかかっているのだろう？\"\"どこかの金融機関に問題があるのでしょうか？\"\"我々のシステムのせいなのか？\"\"我々のデータベースか？\""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:75
#, fuzzy
msgid "Other questions we must answer are \"Has the daily process already run today?\" \"How many API calls had a problem in the last processing?\""
msgstr "その他に答えなければならないのは、\"今日の日次処理は既に実行されたか？\"\"前回の処理で問題があったAPIコールは何件か？\""

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:77
#, no-wrap
msgid "Legacy Application Architecture"
msgstr "レガシーアプリケーションアーキテクチャ"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:80
#, fuzzy
msgid "The legacy Investment Portfolio backend runs in a mainframe environment, with COBOL programs, JCL procedures and DB2 database."
msgstr "レガシー投資ポートフォリオのバックエンドは、COBOLプログラム、JCLプロシージャ、DB2データベースを備えたメインフレーム環境で稼働しています。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:82
#, fuzzy
msgid "Daily, this application receives huge files with investment data from other internal systems of our bank, like Investment Funds, Accounts and Shares."
msgstr "このアプリケーションには、投資信託、口座、株式など、当行の他の内部システムから投資データが入った巨大なファイルが毎日送られてきます。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:84
#, fuzzy
msgid "It is important to recognize that the mainframe environment thrives with this kind of massive processing, reading large amounts of data files and storing data on the database using specialized processes that don't execute individual SQLs. This means that we can generate a file with millions of records and execute one DB2 procedure that stores all this data very quickly."
msgstr "メインフレーム環境では、大量のデータファイルを読み込んで、個別のSQLを実行しない専用のプロセスを使ってデータベースにデータを格納するという、このような大量処理が盛んであることを認識することが重要です。つまり、数百万レコードのファイルを生成し、このデータをすべて格納する1つのDB2プロシージャを非常に高速に実行することができるのです。"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:86
#, no-wrap
msgid "Architecture to solve the problem"
msgstr "問題を解決するためのアーキテクチャ"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:88
#, no-wrap
msgid "New Options"
msgstr "新しいオプション"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:91
msgid "Banco do Brasil technology now has a private cloud orchestrated with Kubernetes, where we are able to run everything that can be built in a container. The most common languages used are Java, TypeScript, Python and Go."
msgstr "Banco do Brasilのテクノロジーは現在、Kubernetesでオーケストレーションされたプライベートクラウドを持っており、コンテナで構築できるものはすべてそこで実行することが可能です。最もよく使われる言語は、Java、TypeScript、Python、Goです。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:93
msgid "Quarkus was chosen by our Development Supporting Team as the official Java framework to be used. The main reasons were:"
msgstr "Quarkusは、開発支援チームによって、公式に使用されるJavaフレームワークとして選ばれました。主な理由は以下の通りです:"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:95
msgid "Very good development experience with fast startup time and live reload."
msgstr "起動時間が早く、ライブリロードが可能なことによる、非常に良い開発体験"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:96
#, fuzzy
msgid "Quarkus implements the Eclipse MicroProfile specification meaning that we are not locked in one specific solution, so theoretically we can change to another MicroProfile implementation if needed."
msgstr "QuarkusはEclipse MicroProfile仕様を実装しているため、1つの特定のソリューションに縛られることはありません。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:97
#, fuzzy
msgid "The Quarkus community is very active, bugs are solved quickly and new features are released frequently."
msgstr "Quarkusのコミュニティは非常に活発で、バグはすぐに解決され、新機能も頻繁にリリースされます。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:98
msgid "Quarkus is cloud-native."
msgstr "Quarkusがクラウドネイティブであること。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:100
msgid "Therefore, Quarkus is being massively used by us to create microservices. We have all sorts of applications that use it, the most common are simple API CRUDs, but we also have batch processes, integration with other institutions using REST APIs, integration with B3, the Brazilian stock exchange, using the FIX (Financial Information eXchange) protocol, low latency applications, and much more."
msgstr "そのため、Quarkusはマイクロサービスを作成するために大量に利用されています。最も一般的なのはシンプルなAPIのCRUDですが、バッチ処理、REST APIを使った他機関との統合、FIX（Financial Information eXchange）プロトコルを使ったブラジル証券取引所B3との統合、低遅延アプリケーションなど、あらゆる種類のアプリケーションがQuarkusを利用しています。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:102
msgid "To integrate with the FIX protocol, we use https://www.quickfixj.org/[QuickFIX/J], a Java open-source solution. We created this https://github.com/felipewind/fix-trading-simulator[Fix Trading Simulator] project showing how you can use QuickFIX/J with Quarkus."
msgstr "FIXプロトコルと統合するために、Javaのオープンソースソリューションである link:https://www.quickfixj.org/[QuickFIX/J] を使用しています。QuarkusでQuickFIX/Jを使用する方法を示すために、この link:https://github.com/felipewind/fix-trading-simulator[Fix Trading Simulator] プロジェクトを作成しました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:103
#, no-wrap
msgid "Our decision"
msgstr "私たちの決断"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:106
msgid "A new system was created in our company to provide integration with the other financial institutions that participate in the Brazilian Open Banking environment. It's our *Open Banking Integrator* and it was built with Quarkus."
msgstr "ブラジルのオープンバンキング環境に参加している他の金融機関との統合を実現するために、当社で新しいシステムを作成しました。それが *Open Banking Integrator* で、Quarkusで構築されています。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:108
#, fuzzy
msgid "At this point, we needed to decide how we would overcome all the project challenges. Would we stick with the mainframe, where it would be possible to communicate with our *Open Banking Integrator*, or should we try something new?"
msgstr "この時点で、私たちはプロジェクトのあらゆる課題をどのように克服するかを決定する必要がありました。 *Open Banking Integratorとの* 通信が可能なメインフレームにこだわるのか、それとも新しいことにチャレンジするのか。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:110
#, fuzzy
msgid "As with all decisions in software architecture, we always have pros and cons. In the end, we decided to solve this problem running microservices written in Quarkus in our private cloud. The main reasons were:"
msgstr "ソフトウェアアーキテクチャにおけるすべての決定と同様に、私たちは常に賛否両論を持っています。最終的に、私たちはQuarkusで書かれたマイクロサービスを私たちのプライベートクラウドで実行することで、この問題を解決することを決定しました。主な理由は以下の通りです。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:112
#, fuzzy
msgid "It is easier to scale the process horizontally."
msgstr "プロセスを水平方向に拡張することが容易になります。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:113
#, fuzzy
msgid "Increase possibilites to expose metrics that allow a good observability."
msgstr "観測可能な指標を公開する可能性を高める。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:114
#, fuzzy
msgid "Fault tolerance control, specially Timeout, Circuit Breaker, Bulkhead, and Retry."
msgstr "フォールトトレランス制御、特にタイムアウト、サーキットブレーカー、バルクヘッド、リトライ。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:115
msgid "Good integration with Kafka."
msgstr "Kafkaとの優れた統合"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:116
#, no-wrap
msgid "The new architecture"
msgstr "新アーキテクチャ"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:119
#, fuzzy
msgid "We decided to create four microservices to handle the problems:"
msgstr "その問題を処理するために4つのマイクロサービスを作ることにしました。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:121
#, fuzzy, no-wrap
msgid "*Investment-api* - Responsible for creating a layer of asynchronous communication between the frontend applications and the open banking investment data. When the information is already fresh and available, it responds imediately with a 200 (ok) from the REST APIs, but when it is not, it responds with a 202 (accepted) and then sends a message to the *on-demand* topic, that will be processed by the *extractor* microservice. \n"
msgstr " *Investment-api* - フロントエンドアプリケーションとオープンバンキングの投資データの間の非同期通信のレイヤーを作成する役割を担っています。情報がすでに新鮮で利用可能な場合は、REST APIから200（ok）で即座に応答しますが、そうでない場合は202（accept）で応答し、その後、 *抽出器* マイクロサービスによって処理される *オンデマンドトピックに* メッセージを送信します。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:122
#, fuzzy, no-wrap
msgid "*Scheduler* - Responsible for controlling the daily process. Accesses the *Open Banking Integrator* database to retrieve all the clients that shared investment data on the open banking and send one message per client to the *extractor* microservice using the *daily* topic.\n"
msgstr " *Scheduler* - 日次処理の制御を担当します。 *Open Banking Integrator* データベースにアクセスし、オープンバンキング上で投資データを共有したすべてのクライアントを取得し、 *毎日の* トピックを使用して *抽出器* マイクロサービスにクライアントごとに1つのメッセージを送信します。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:123
#, fuzzy, no-wrap
msgid "*Extractor* - The heart of this system. It receives messages from the *on-demand* and the *daily* topics. Accesses the *Open Banking Integrator* system and stores data.\n"
msgstr " *Extractor* - このシステムの心臓部。 *オンデマンドと* *デイリー* トピックからメッセージを受信します。 *Open Banking Integrator* システムにアクセスし、データを保存します。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:124
#, fuzzy, no-wrap
msgid "*Monitoring* - Collects metrics from the above microservices with Prometheus, gives observability with Grafana's dashboards and send alerts when problems occur.\n"
msgstr " *モニタリング* - Prometheusで上記のマイクロサービスからメトリクスを収集し、Grafanaのダッシュボードで観測性を与え、問題発生時にアラートを送信します。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:126
#, no-wrap
msgid "Daily process"
msgstr "日次プロセス"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:128
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:132
#, no-wrap
msgid "Daily extraction"
msgstr "日次抽出"

#. type: Target for macro image
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:128
#, no-wrap
msgid "extraction/daily-extraction.png"
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:130
#, no-wrap
msgid "On demand process"
msgstr "オンデマンド処理"

#. type: Target for macro image
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:132
#, no-wrap
msgid "extraction/on-demand-extraction.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:135
#, fuzzy, no-wrap
msgid "Quarkus helping us in the project"
msgstr "プロジェクトに協力するQuarkus"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:137
#, fuzzy, no-wrap
msgid "Processing Kafka messages simultaneously inside one instance"
msgstr "1つのインスタンス内でKafkaメッセージを同時に処理する"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:140
#, fuzzy
msgid "The *extractor* microservice is deployed with two different configurations. One for the *on-demand* process and the other for the *daily* process. Each one receives a specific Kafka Topic, the quantity of pods needed and the number of simultaneous worker threads that must process the topic."
msgstr " *extractor* マイクロサービスは、2つの異なる構成でデプロイされる。1つは *オンデマンドプロセス* 用、もう1つは *デイリー* プロセス用です。それぞれ、特定のKafkaトピック、必要なポッドの数、トピックを処理する必要のある同時ワーカスレッドの数を受け取ります。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:142
#, fuzzy
msgid "We can scale the *extractor* processing by creating new instances of the application to read specific Kafka partitions. For instance, if our Kafka topic has three partitions, we can create three instances of our application, each one processing one different partition."
msgstr "特定のKafkaパーティションを読み込むために、アプリケーションの新しいインスタンスを作成することで、 *抽出器* 処理をスケールすることができます。例えば、Kafkaトピックに3つのパーティションがある場合、アプリケーションのインスタンスを3つ作成し、それぞれが異なるパーティションを処理することができる。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:144
#, fuzzy
msgid "But, to use one entire instance of the application to process one message at a time seems like a waste of resources. In the past our requirement was that each running pod should be able to process more than one message from the Kafka topic simultaneously. This challenge was the most exciting part of the project."
msgstr "しかし、一度に1つのメッセージを処理するために、アプリケーションの1つのインスタンス全体を使用するのは、リソースの無駄遣いのように思えます。これまでの私たちの要件は、稼働中の各ポッドがKafkaトピックから複数のメッセージを同時に処理できるようにすることでした。このチャレンジは、このプロジェクトで最もエキサイティングな部分でした。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:146
#, fuzzy
msgid "The team thought that we would need to do this programatically, receiving the messages from the Kafka consumer and creating threads manually. Then, we read the https://quarkus.io/guides/kafka#blocking-processing[Quarkus Kafka guide] and discovered that it was possible to do some tuning in the worker thread pool that consumes messages. The guide says that there is more information on the SmallRye Reactive Messaging documentation."
msgstr "チームは、Kafkaコンシューマーからメッセージを受け取り、手動でスレッドを作成して、プログラム的にこれを行う必要があると考えていました。その後、 link:https://quarkus.io/guides/kafka#blocking-processing[Quarkus Kafkaガイドを] 読んで、メッセージを消費するワーカースレッドプールで何らかのチューニングが可能であることを発見しました。ガイドによると、SmallRye Reactive Messagingのドキュメントに詳しい情報があるそうです。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:148
#, fuzzy
msgid "In the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[SmallRye Reactive Messaging – Handling blocking execution guide], we found that if we don't need to process our messages in order, we actually can define the worker pool size that will consume Kafka messages. This was like magic for us! All we needed to do was to put these annotations in our Kafka Consumer:"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[SmallRye Reactive Messaging - Handling blocking executionガイドでは] 、メッセージを順番に処理する必要がない場合、Kafkaメッセージを消費するワーカープールサイズを実際に定義できることを発見しました。これは魔法のようです。必要なのは、Kafka Consumer にこれらのアノテーションを置くことだけです。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:156
#, no-wrap
msgid ""
"@Incoming(\"extraction\")\n"
"@Blocking(ordered = false, value = \"extraction-pool\")\n"
"public void process(Extraction extraction) {\n"
"  // process the extraction\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:159
#, fuzzy
msgid "Now, we can configure the worker pool size, that means how many threads are going to process our Kafka messages simultaneously, passing this parameter:"
msgstr "ここで、ワーカープールのサイズ、つまりKafkaメッセージを同時に処理するスレッドの数をこのパラメータで設定することができます。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:163
#, no-wrap
msgid "smallrye.messaging.worker.extraction-pool.max-concurrency=7\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:168
#, fuzzy
msgid "Each extraction demands calls to APIs that are provided by other financial institutions, sometimes this takes more time than the default amount of time defined by the Vert.x worker pool, that is 60 seconds. After 60 seconds, the application receives warnings informing us that our worker thread is blocked. It's possible to configure this with this parameter:"
msgstr "各抽出は、他の金融機関が提供するAPIへの呼び出しを要求し、時にはVert.xワーカープールで定義されたデフォルト時間（60秒）よりも長い時間がかかることがあります。60秒経過すると、ワーカスレッドがブロックされたことを知らせる警告がアプリケーションに表示されます。このパラメータで設定することができます。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:174
#, no-wrap
msgid ""
"# The maximum amount of time the worker thread can be blocked. Default 60S\n"
"quarkus.vertx.max-worker-execute-time=300S\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:177
#, fuzzy
msgid "We created the project https://github.com/felipewind/poc-kafka-quarkus[POC Kakfa Quarkus], where you can simulate this feature of running simultaneous threads to process messages from a Kafka topic."
msgstr "Kafkaトピックからのメッセージを処理するために同時にスレッドを実行するこの機能をシミュレートできるプロジェクト link:https://github.com/felipewind/poc-kafka-quarkus[POCカクファクアクスを] 作成しました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:179
#, no-wrap
msgid "Multiple persistence units with Hibernate ORM"
msgstr "Hibernate ORMによる複数の永続化ユニット"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:182
msgid "This feature was very important to our project. The *Open Banking Integrator* has some business data stored in an Oracle database. To improve the speed of processing, there is some information that we need to obtain directly from this database. As our application has a DB2 database, the Hibernate ORM Multiple Persistence units feature was very helpful. More information is available on the https://quarkus.io/guides/hibernate-orm#multiple-persistence-units[Hibernate Quarkus Guide]."
msgstr "この機能は、私たちのプロジェクトにとって非常に重要なものでした。 *Open Banking Integrator* には、Oracle データベースに格納されているビジネスデータがあります。処理速度を向上させるために、このデータベースから直接取得する必要がある情報があります。我々のアプリケーションはDB2データベースを使用しているため、Hibernate ORM Multiple Persistence unitsの機能は非常に役に立ちました。詳細は、 link:https://quarkus.io/guides/hibernate-orm#multiple-persistence-units[Hibernate Quarkus Guide] に掲載されています。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:184
#, no-wrap
msgid "Fault tolerance Retry "
msgstr "フォールトトレランス リトライ"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:187
msgid "The APIs we execute can return errors saying that the system is temporarily unavailable. In this situation, we need to wait some time and try again."
msgstr "私たちが実行するAPIは、「システムが一時的に利用できない」というエラーを返すことがあります。この場合、しばらく時間をおいてから再試行する必要があります。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:189
msgid "This is very simple when using the `@Retry` annotation:"
msgstr "これは、 `@Retry` アノテーションを使用する場合、非常に簡単です。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:196
#, no-wrap
msgid ""
"@Retry(retryOn = { ExceptionOfTheApiThatWeMustTryAgain.class }, maxRetries = 3, delay = 1000)\n"
"public void callExternalEndpoint() {\n"
"  // \n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:199
msgid "We can configure the `maxRetries` and the `delay` between the retries with these properties:"
msgstr "これらのプロパティで、 `maxRetries` と再試行の間の `delay` を設定することができます。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:203
#, no-wrap
msgid ""
"Retry/maxRetries=${APP_MAX_RETRY:3}\n"
"Retry/delay=${APP_DELAY_MS_RETRY:1000}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:206
#, fuzzy
msgid "The https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#configuration[MicroProfile Fault Tolerance specification guide] explains that we can configure these values individually (class or method) or globally."
msgstr "link:https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#configuration[MicroProfile Fault Tolerance仕様ガイドでは] 、これらの値を個別に（クラスまたはメソッド）またはグローバルに設定することができると説明されています。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:208
#, fuzzy
msgid "This configuration is very useful because we don't want the retries to take too much time in our tests, so it is possible to set values specifically for the tests:"
msgstr "テストではリトライにあまり時間をかけたくないので、この設定は非常に便利で、テストに特化した値を設定することが可能です。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:213
#, no-wrap
msgid ""
"%test.Retry/maxRetries=${APP_MAX_RETRY:3}\n"
"%test.Retry/delay=${APP_DELAY_MS_RETRY:1}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:216
#, fuzzy, no-wrap
msgid "Synchronizing access with fault tolerance Bulkhead"
msgstr "フォールトトレランスでアクセスを同期化する バルクヘッド"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:219
#, fuzzy
msgid "Our *scheduler* microservice can't run the schedule in parallel."
msgstr "私たちの *スケジューラーマイクロサービスは* 、スケジュールを並列に実行することができません。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:221
#, fuzzy
msgid "We deploy it on Kubernetes with the strategy type *Recreate*, meaning that all pods are terminated before a new one is created. This guarantees that only one pod at a time will be executed. So how do we avoid multiple threads from the same instance executing the same method at the same time?"
msgstr "Kubernetes上で、ストラテジーの種類を *Recreateにして* デプロイします。つまり、すべてのPodを終了させてから新しいPodを作成します。これにより、一度に1つのポッドのみが実行されることが保証されます。では、同じインスタンスから複数のスレッドが同時に同じメソッドを実行するのを避けるにはどうすればよいでしょうか。"

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:223
#, fuzzy
msgid "The answer is to use the `Bulkhead` fault tolerance annotation:"
msgstr "答えは、 `Bulkhead` のフォールトトレランスアノテーションを使用することです。"

#. type: delimited block -
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:231
#, no-wrap
msgid ""
"// maximum 1 concurrent requests allowed, maximum 1 requests allowed in the waiting queue\n"
"@Bulkhead(value = 1, waitingTaskQueue = 1)\n"
"public void processSchedule() {\n"
"  // \n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:234
msgid "When a request cannot be added to the waiting queue, a `BulkheadException` will be thrown."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:237
#, no-wrap
msgid "Final words about Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:240
msgid "Our organization has hundreds of Java programmers, but one problem that we see is the difficulty to hire people who already have experience with Quarkus. We though believe that a person who has experience with other Java frameworks can easily learn Quarkus - especially since Quarkus relies on existing and proven technologies (JAX-RS, CDI, Hibernate ORM, Eclipse MicroProfile...) - and, with time, we will have more professionals mastering it."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:242
msgid "In the team experience, Quarkus helps us to build reliable applications with all the resources needed to run a modern application on a cloud environment."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:243
msgid "The development experience is awesome and very often new versions are published creating new features making Quarkus even better."
msgstr ""
