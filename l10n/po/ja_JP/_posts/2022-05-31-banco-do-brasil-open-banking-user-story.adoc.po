msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:2
msgid "post"
msgstr "post"

#. type: Title =
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:12
#, fuzzy
msgid "Banco do Brasil extracts Open Banking investment data with Quarkus and Kafka"
msgstr "Banco do Brasil、QuarkusとKafkaでオープンバンキングの投資データを抽出"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:4
#, fuzzy
msgid "2022-05-31"
msgstr "2022-05-31"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:5
#, fuzzy
msgid "user-story kafka"
msgstr "ユーザーストーリーカフカ"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:6
#, fuzzy
msgid "Banco do Brasil extracts investment data from the Brazilian Open Banking environment using Quarkus and Kafka to scale horizontally the processing with multiple instances and simultaneous worker threads."
msgstr "ブラジル銀行では、QuarkusとKafkaを使用して、ブラジルのオープンバンキング環境から投資データを抽出し、複数のインスタンスと同時ワーカースレッドで処理を水平方向に拡張しています。"

#. type: YAML Front Matter
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:7
#, fuzzy
msgid "felipewind"
msgstr "なまはげ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:18
#, fuzzy
msgid "Banco do Brasil S.A. is a Brazilian financial services company headquartered in Brasília, Brazil. The oldest bank in Brazil, and among the oldest banks in continuous operation in the world, it was founded by John VI, King of Portugal, in 1808. It is the second largest banking institution in Brazil, as well as the second largest in Latin America, and the seventy-seventh largest bank in the world. Banco do Brasil is controlled by the Brazilian government and is listed on the B3 stock exchange in São Paulo. footnote:[https://en.wikipedia.org/wiki/Banco_do_Brasil]"
msgstr "バンコ・ド・ブラジルS.A.は、ブラジルのブラジリアに本社を置く金融サービス企業である。ブラジルで最も古い銀行であり、世界で最も古くから継続的に運営されている銀行の一つである。1808年にポルトガル王ジョン6世によって設立された。ブラジル国内では第2位、ラテンアメリカでは第2位、世界では第77位の規模を誇る銀行です。ブラジル銀行はブラジル政府によって管理されており、サンパウロのB3証券取引所に上場しています。[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ]"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:23
msgid "The Challenge"
msgstr "チャレンジ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:25
#, fuzzy
msgid "There's an Investment Portfolio application in Banco do Brasil where all the client's investments are grouped together. This helps our financial specialists to give advice and also allows the customer to see all of their investments in one place. This information is stored on a daily basis, thus it is possible to create graphics showing the changes in the client's investments over time."
msgstr "バンコ・ド・ブラジルの投資ポートフォリオ・アプリケーションでは、お客様のすべての投資案件がグループ化されています。これは、金融専門家がアドバイスをするのに役立つだけでなく、お客さまがすべての投資案件を一度に確認できるようにするためです。この情報は日次で保存されるため、顧客の投資額の経年変化を示すグラフを作成することも可能です。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:27
#, fuzzy
msgid "With Brazilian Open Banking's creation, now it is possible to retrieve our customers investments' data from other financial institutions."
msgstr "ブラジルのオープンバンキングができたことで、他の金融機関からお客様の投資データを取り込むことができるようになりました。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:29
#, fuzzy
msgid "According to Brazilian Central Bank:"
msgstr "ブラジル中央銀行調べ："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:33
#, fuzzy
msgid "The Banco Central do Brasil (BCB - Central Bank of Brazil) and the National Monetary Council (CMN) define the Brazilian Open Banking environment as the sharing of data, products and services between regulated entities — financial institutions, payment institutions and other entities licensed by BCB — at the customers' discretion, as far as their own data is concerned (individuals or legal entities).footnote:[https://www.bcb.gov.br/en/financialstability/open_banking]"
msgstr "Banco Central do Brasil（BCB：ブラジル中央銀行）と国家通貨評議会（CMN）は、ブラジルのオープンバンキング環境を、規制対象である金融機関、決済機関、BCBが認可したその他の事業体の間で、自らのデータに関する限り、顧客の裁量でデータ、商品、サービスを共有すること（個人または法人）と定義しています［ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ］。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:37
#, fuzzy
msgid "The business leaders envisioned the opportunity to improve customer experience by aggregating all investments, from others financial institutions, into our brand new and powerful Investment Portfolio solution."
msgstr "ビジネスリーダーは、他の金融機関のすべての投資案件を、当社のまったく新しい強力な投資ポートフォリオソリューションに集約することで、顧客体験を向上させる機会を得ることができると考えました。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:39
#, fuzzy
msgid "The task was to extract this data in two different ways:"
msgstr "このデータを2種類の方法で抽出することが課題でした："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:41
#, fuzzy
msgid "*Daily* - on every work day."
msgstr "*毎日* - 毎営業日に。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:42
#, fuzzy
msgid "*On demand* - when the data is requested by the financial specialists or directly by the customer."
msgstr "*オンデマンド* - 金融専門家または顧客が直接データを要求した場合。"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:45
#, fuzzy
msgid "Technical Challenges to extract data from Open Banking"
msgstr "オープンバンキングからデータを抽出するための技術的課題"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:46
#, fuzzy
msgid "There were some difficulties in accomplishing this task."
msgstr "この課題を達成するためには、いくつかの困難がありました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:48
#, fuzzy
msgid "Number of clients to extract and the API throttling"
msgstr "抽出するクライアント数とAPIスロットリングについて"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:50
#, fuzzy
msgid "We have millions of customers, so the application must be able to scale up to handle all the processing. At first there were not so many clients using this feature, but this number is growing daily."
msgstr "数百万人の顧客がいるので、アプリケーションはすべての処理を処理するためにスケールアップできる必要があります。当初はこの機能を使う顧客はそれほど多くなかったのですが、この数は日々増えています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:52
#, fuzzy
msgid "The challenge is that we have a throttling rule for using the APIs from the other financial institutions. So, we can scale up our application to cope with the demand, but we need to respect the maximum number of API calls we can do per minute."
msgstr "課題は、他の金融機関のAPIを利用する際のスロットリング・ルールがあることです。そのため、需要に対応するためにアプリケーションを拡張することはできますが、1分間に行えるAPI呼び出しの最大数を尊重する必要があります。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:54
#, fuzzy
msgid "Concurrency between on demand requests and daily processing"
msgstr "オンデマンド要求と日常処理の並行性"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:56
#, fuzzy
msgid "The on demand requests cannot be put at the end of the processing queue concurrently with the daily process."
msgstr "オンデマンドリクエストは、日次処理と同時に処理待ち行列の最後尾に入れることはできません。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:58
#, fuzzy
msgid "This would be a problem, because the daily process can take hours and our clients and financial specialists cannot wait all this time when they make a request."
msgstr "なぜなら、日々のプロセスには何時間もかかることがあり、お客様や金融専門家がリクエストをする際に、この時間をずっと待つことはできないからです。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:60
#, fuzzy
msgid "APIs instability"
msgstr "APIの不安定さ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:62
#, fuzzy
msgid "The daily processing must accurately store the data of every work day."
msgstr "日次処理では、すべての作業日のデータを正確に保存する必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:64
#, fuzzy
msgid "The difficulty is that sometimes some financial institutions have problems, so it is not possible to be sure that the Open Banking information will be available every day."
msgstr "難しいのは、時々、一部の金融機関が問題を起こすことで、オープンバンキングの情報が毎日確実に得られるとは言い切れないことです。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:66
#, fuzzy
msgid "It is necessary to create some rules, where we can reprocess information from previous days."
msgstr "前日までの情報を再処理できるようなルールを作る必要があります。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:68
msgid "Observability"
msgstr "Observability"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:70
#, fuzzy
msgid "We need to have some metrics to be able to know if the system is working correctly or if there is a problem."
msgstr "システムが正しく動いているのか、問題があるのかを知ることができるような指標が必要です。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:72
#, fuzzy
msgid "For instance, \"why is the data extraction taking so long today?\" \"Is it some financial institution that is having a problem?\" \"Is it our system?\" \"Our database?\""
msgstr "例えば、\"今日はなぜデータ抽出に時間がかかっているのだろう？\"\"どこかの金融機関に問題があるのでしょうか？\"\"我々のシステムなのか？\"\"我々のデータベースか？\""

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:74
#, fuzzy
msgid "Other questions we must answer are \"Has the daily process already run today?\" \"How many API calls had a problem in the last processing?\""
msgstr "その他にも、\"今日の日次処理はすでに実行されたのか？\" という質問にも答えなければなりません。\"前回の処理で問題が発生したAPIコールは何件か？\""

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:77
#, fuzzy
msgid "Legacy Application Architecture"
msgstr "レガシーアプリケーションアーキテクチャ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:79
#, fuzzy
msgid "The legacy Investment Portfolio backend runs in a mainframe environment, with COBOL programs, JCL procedures and DB2 database."
msgstr "レガシーな投資ポートフォリオのバックエンドは、COBOLプログラム、JCLプロシージャ、DB2データベースを備えたメインフレーム環境で稼働しています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:81
#, fuzzy
msgid "Daily, this application receives huge files with investment data from other internal systems of our bank, like Investment Funds, Accounts and Shares."
msgstr "このアプリケーションは毎日、投資信託、口座、株式など、当行の他の内部システムから投資データを含む巨大なファイルを受信します。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:83
#, fuzzy
msgid "It is important to recognize that the mainframe environment thrives with this kind of massive processing, reading large amounts of data files and storing data on the database using specialized processes that don't execute individual SQLs. This means that we can generate a file with millions of records and execute one DB2 procedure that stores all this data very quickly."
msgstr "メインフレーム環境はこのような大量処理で繁栄しており、大量のデータファイルを読み込んで、個々のSQLを実行しない専用のプロセスを使ってデータベースにデータを保存していることを認識することが重要です。つまり、数百万レコードのファイルを生成し、このデータをすべて格納する1つのDB2プロシージャを非常に高速に実行できるのです。"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:86
#, fuzzy
msgid "Architecture to solve the problem"
msgstr "問題を解決するためのアーキテクチャ"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:88
#, fuzzy
msgid "New Options"
msgstr "新オプション"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:90
#, fuzzy
msgid "Banco do Brasil technology now has a private cloud orchestrated with Kubernetes, where we are able to run everything that can be built in a container. The most common languages used are Java, TypeScript, Python and Go."
msgstr "Banco do Brasilのテクノロジーは現在、Kubernetesでオーケストレーションされたプライベートクラウドを持っており、コンテナで構築できるものすべてを実行できるようになっています。最もよく使われる言語は、Java、TypeScript、Python、Goです。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:92
#, fuzzy
msgid "Quarkus was chosen by our Development Supporting Team as the official Java framework to be used. The main reasons were:"
msgstr "Quarkusは、開発支援チームによって、公式に使用するJavaフレームワークとして選ばれました。主な理由は以下の通りです："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:94
#, fuzzy
msgid "Very good development experience with fast startup time and live reload."
msgstr "起動時間が早く、ライブリロードが可能なため、非常に優れた開発体験ができます。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:95
#, fuzzy
msgid "Quarkus implements the Eclipse MicroProfile specification meaning that we are not locked in one specific solution, so theoretically we can change to another MicroProfile implementation if needed."
msgstr "QuarkusはEclipse MicroProfile仕様を実装しているので、特定のソリューションに縛られることはなく、理論的には必要に応じて他のMicroProfileの実装に変更することができます。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:96
#, fuzzy
msgid "The Quarkus community is very active, bugs are solved quickly and new features are released frequently."
msgstr "Quarkusのコミュニティは非常に活発で、バグはすぐに解決され、新機能は頻繁にリリースされます。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:97
#, fuzzy
msgid "Quarkus is cloud-native."
msgstr "Quarkusはクラウドネイティブです。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:99
#, fuzzy
msgid "Therefore, Quarkus is being massively used by us to create microservices. We have all sorts of applications that use it, the most common are simple API CRUDs, but we also have batch processes, integration with other institutions using REST APIs, integration with B3, the Brazilian stock exchange, using the FIX (Financial Information eXchange) protocol, low latency applications, and much more."
msgstr "そのため、Quarkusは私たちがマイクロサービスを作るために大量に使っているのです。最も一般的なのはシンプルなAPIのCRUDですが、バッチ処理、REST APIを使った他機関との連携、FIX（Financial Information eXchange）プロトコルを使ったブラジル証券取引所B3との連携、低遅延アプリケーションなど、さまざまなアプリケーションで使っています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:101
#, fuzzy
msgid "To integrate with the FIX protocol, we use https://www.quickfixj.org/[QuickFIX/J], a Java open-source solution. We created this https://github.com/felipewind/fix-trading-simulator[Fix Trading Simulator] project showing how you can use QuickFIX/J with Quarkus."
msgstr "FIXプロトコルと統合するために、私たちはJavaのオープンソースソリューションである link:https://www.quickfixj.org/[QuickFIX/Jを] 使用しています。QuarkusでQuickFIX/Jを使用する方法を示す、この link:https://github.com/felipewind/fix-trading-simulator[Fix Trading Simulator] プロジェクトが作成されました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:103
#, fuzzy
msgid "Our decision"
msgstr "私たちの決断"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:105
#, fuzzy
msgid "A new system was created in our company to provide integration with the other financial institutions that participate in the Brazilian Open Banking environment. It's our *Open Banking Integrator* and it was built with Quarkus."
msgstr "ブラジルのオープンバンキング環境に参加している他の金融機関との統合を実現するために、当社で新しいシステムが作られました。それが「 *Open Banking Integrator* 」で、Quarkusで構築されています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:107
#, fuzzy
msgid "At this point, we needed to decide how we would overcome all the project challenges. Would we stick with the mainframe, where it would be possible to communicate with our *Open Banking Integrator*, or should we try something new?"
msgstr "この時点で、私たちはプロジェクトのすべての課題を克服する方法を決定する必要がありました。 *オープンバンキングとの* 通信が可能なメインフレームにこだわるのか、それとも新しいことにチャレンジするのか。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:109
#, fuzzy
msgid "As with all decisions in software architecture, we always have pros and cons. In the end, we decided to solve this problem running microservices written in Quarkus in our private cloud. The main reasons were:"
msgstr "ソフトウェア・アーキテクチャにおけるすべての決定と同様に、私たちは常に賛否両論を唱えています。結局、私たちはQuarkusで書かれたマイクロサービスをプライベートクラウドで運用することで、この問題を解決することにしました。その主な理由は以下の通りです："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:111
#, fuzzy
msgid "It is easier to scale the process horizontally."
msgstr "プロセスの水平方向への拡張が容易になります。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:112
#, fuzzy
msgid "Increase possibilites to expose metrics that allow a good observability."
msgstr "観測可能なメトリクスを公開する可能性を高める。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:113
#, fuzzy
msgid "Fault tolerance control, specially Timeout, Circuit Breaker, Bulkhead, and Retry."
msgstr "フォールトトレランス制御、特にタイムアウト、サーキットブレーカー、バルクヘッド、リトライ。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:114
#, fuzzy
msgid "Good integration with Kafka."
msgstr "Kafkaとの連携が良い。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:116
#, fuzzy
msgid "The new architecture"
msgstr "新アーキテクチャ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:118
#, fuzzy
msgid "We decided to create four microservices to handle the problems:"
msgstr "そのため、4つのマイクロサービスを作って問題に対処することにしました："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:120
#, fuzzy
msgid "*Investment-api* - Responsible for creating a layer of asynchronous communication between the frontend applications and the open banking investment data. When the information is already fresh and available, it responds imediately with a 200 (ok) from the REST APIs, but when it is not, it responds with a 202 (accepted) and then sends a message to the *on-demand* topic, that will be processed by the *extractor* microservice."
msgstr "*Investment-api* - フロントエンド・アプリケーションとオープン・バンキングの投資データ間の非同期通信のレイヤーを作成する。情報がすでに新鮮で利用可能な場合は、REST APIから200（ok）で即座に応答しますが、そうでない場合は202（accepted）で応答し、その後、 *抽出* マイクロサービスによって処理される *オンデマンドトピックに* メッセージを送信します。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:121
#, fuzzy
msgid "*Scheduler* - Responsible for controlling the daily process. Accesses the *Open Banking Integrator* database to retrieve all the clients that shared investment data on the open banking and send one message per client to the *extractor* microservice using the *daily* topic."
msgstr "*スケジューラ* - 日次プロセスの制御を担当します。 *Open Banking Integrator* データベースにアクセスし、オープンバンキングで投資データを共有するすべてのクライアントを取得し、 *日次* トピックを使用して *抽出* マイクロサービスにクライアントごとに1つのメッセージを送信します。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:122
#, fuzzy
msgid "*Extractor* - The heart of this system. It receives messages from the *on-demand* and the *daily* topics. Accesses the *Open Banking Integrator* system and stores data."
msgstr "*エクストラクター* - このシステムの心臓部。 *オンデマンド* および *デイリー・* トピックからのメッセージを受信する。 *Open Banking Integrator* システムにアクセスし、データを保存します。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:123
#, fuzzy
msgid "*Monitoring* - Collects metrics from the above microservices with Prometheus, gives observability with Grafana's dashboards and send alerts when problems occur."
msgstr "*モニタリング* - Prometheusで上記のマイクロサービスからメトリクスを収集し、Grafanaのダッシュボードで観測可能性を与え、問題が発生したらアラートを送信する。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:126
#, fuzzy
msgid "Daily process"
msgstr "日次処理"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:130
#, fuzzy
msgid "On demand process"
msgstr "オンデマンドプロセス"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:135
#, fuzzy
msgid "Quarkus helping us in the project"
msgstr "プロジェクトに協力してくれるQuarkusさん"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:137
#, fuzzy
msgid "Processing Kafka messages simultaneously inside one instance"
msgstr "1つのインスタンス内でKafkaメッセージを同時に処理する。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:139
#, fuzzy
msgid "The *extractor* microservice is deployed with two different configurations. One for the *on-demand* process and the other for the *daily* process. Each one receives a specific Kafka Topic, the quantity of pods needed and the number of simultaneous worker threads that must process the topic."
msgstr "*エクストラクターマイクロサービスは* 、2つの異なる構成でデプロイされます。1つは *オンデマンドプロセス* 用で、もう1つは *デイリー* プロセス用です。それぞれ、特定のKafkaトピック、必要なポッドの数、トピックを処理する必要がある同時ワーカスレッドの数を受け取ります。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:141
#, fuzzy
msgid "We can scale the *extractor* processing by creating new instances of the application to read specific Kafka partitions. For instance, if our Kafka topic has three partitions, we can create three instances of our application, each one processing one different partition."
msgstr "特定のKafkaパーティションを読み込むためにアプリケーションの新しいインスタンスを作成することで、 *エクストラクタ* 処理を拡張することができます。例えば、Kafkaトピックに3つのパーティションがある場合、アプリケーションのインスタンスを3つ作成し、それぞれが異なるパーティションを処理することができます。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:143
#, fuzzy
msgid "But, to use one entire instance of the application to process one message at a time seems like a waste of resources. In the past our requirement was that each running pod should be able to process more than one message from the Kafka topic simultaneously. This challenge was the most exciting part of the project."
msgstr "しかし、一度に1つのメッセージを処理するために、アプリケーションのインスタンス全体を使用することは、リソースの無駄遣いのように思えます。過去に私たちが要求したのは、実行中の各PodがKafkaトピックからの複数のメッセージを同時に処理できるようにすることでした。このチャレンジは、このプロジェクトで最もエキサイティングな部分でした。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:145
#, fuzzy
msgid "The team thought that we would need to do this programatically, receiving the messages from the Kafka consumer and creating threads manually. Then, we read the https://quarkus.io/guides/kafka#blocking-processing[Quarkus Kafka guide] and discovered that it was possible to do some tuning in the worker thread pool that consumes messages. The guide says that there is more information on the SmallRye Reactive Messaging documentation."
msgstr "チームは、Kafkaコンシューマーからメッセージを受け取り、スレッドを手動で作成するという、プログラムによる作業が必要だと考えていました。その後、Quarkus link:https://quarkus.io/guides/kafka#blocking-processing[Kafkaガイドを] 読み、メッセージを消費するワーカースレッドプールでいくつかのチューニングを行うことが可能であることを発見しました。ガイドには、SmallRye Reactive Messagingのドキュメントに詳細な情報があると書かれています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:147
#, fuzzy
msgid "In the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[SmallRye Reactive Messaging – Handling blocking execution guide], we found that if we don't need to process our messages in order, we actually can define the worker pool size that will consume Kafka messages. This was like magic for us! All we needed to do was to put these annotations in our Kafka Consumer:"
msgstr "SmallRye link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.1/advanced/blocking.html[Reactive Messaging - Handling blocking execution ガイドで] 、メッセージを順番に処理する必要がない場合、Kafkaメッセージを消費するワーカープールサイズを定義できることがわかりました。これは私たちにとって魔法のようなものでした！必要なのは、Kafka Consumerにアノテーションを付けるだけです："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:158
#, fuzzy
msgid "Now, we can configure the worker pool size, that means how many threads are going to process our Kafka messages simultaneously, passing this parameter:"
msgstr "ここで、ワーカープールのサイズ、つまりKafkaメッセージを同時に処理するスレッド数をこのパラメータで設定することができます："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:167
#, fuzzy
msgid "Each extraction demands calls to APIs that are provided by other financial institutions, sometimes this takes more time than the default amount of time defined by the Vert.x worker pool, that is 60 seconds. After 60 seconds, the application receives warnings informing us that our worker thread is blocked. It's possible to configure this with this parameter:"
msgstr "各抽出では、他の金融機関が提供するAPIを呼び出す必要があり、Vert.xワーカープールで定義されたデフォルトの時間（60秒）よりも長い時間がかかることがあります。60秒経過すると、ワーカースレッドがブロックされたことを知らせる警告がアプリケーションに表示されます。このパラメータで設定することが可能です："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:176
#, fuzzy
msgid "We created the project https://github.com/felipewind/poc-kafka-quarkus[POC Kakfa Quarkus], where you can simulate this feature of running simultaneous threads to process messages from a Kafka topic."
msgstr "Kafkaトピックからのメッセージを処理するために同時にスレッドを実行するこの機能をシミュレートできるプロジェクト link:https://github.com/felipewind/poc-kafka-quarkus[POC Kafka] Quarkusを作成しました。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:179
#, fuzzy
msgid "Multiple persistence units with Hibernate ORM"
msgstr "Hibernate ORMによる複数の永続化ユニット"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:181
#, fuzzy
msgid "This feature was very important to our project. The *Open Banking Integrator* has some business data stored in an Oracle database. To improve the speed of processing, there is some information that we need to obtain directly from this database. As our application has a DB2 database, the Hibernate ORM Multiple Persistence units feature was very helpful. More information is available on the https://quarkus.io/guides/hibernate-orm#multiple-persistence-units[Hibernate Quarkus Guide]."
msgstr "この機能は、私たちのプロジェクトにとって非常に重要でした。 *Open Banking Integratorは* 、いくつかのビジネスデータをOracleデータベースに保存しています。処理速度を向上させるために、このデータベースから直接取得する必要がある情報があります。私たちのアプリケーションはDB2データベースを使用しているため、Hibernate ORM Multiple Persistence unitsの機能が非常に役に立ちました。詳細については、Hibernate Quarkus link:https://quarkus.io/guides/hibernate-orm#multiple-persistence-units[Guideに] 記載されています。"

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:184
#, fuzzy
msgid "Fault tolerance Retry"
msgstr "フォールト・トレランス・リトライ"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:186
#, fuzzy
msgid "The APIs we execute can return errors saying that the system is temporarily unavailable. In this situation, we need to wait some time and try again."
msgstr "私たちが実行するAPIは、「システムが一時的に利用できない」というエラーを返すことがあります。このような場合、しばらく時間をおいてから、もう一度試してみる必要があります。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:188
#, fuzzy
msgid "This is very simple when using the `@Retry` annotation:"
msgstr "これは、 `@Retry` アノテーションを使用する場合、非常に簡単です："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:198
#, fuzzy
msgid "We can configure the `maxRetries` and the `delay` between the retries with these properties:"
msgstr "これらのプロパティでリトライ間の `maxRetries` と `delay` を設定することができます："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:205
#, fuzzy
msgid "The https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#configuration[MicroProfile Fault Tolerance specification guide] explains that we can configure these values individually (class or method) or globally."
msgstr "link:https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#configuration[MicroProfile Fault Tolerance仕様ガイドでは] 、これらの値を個別に（クラスまたはメソッド）またはグローバルに設定することができると説明されています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:207
#, fuzzy
msgid "This configuration is very useful because we don't want the retries to take too much time in our tests, so it is possible to set values specifically for the tests:"
msgstr "この設定は、テストではリトライに時間がかかると困るので、テストに特化した値を設定することができ、非常に便利です："

#. type: Title ===
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:216
#, fuzzy
msgid "Synchronizing access with fault tolerance Bulkhead"
msgstr "フォールトトレランスとアクセスを同期させる Bulkhead"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:218
#, fuzzy
msgid "Our *scheduler* microservice can't run the schedule in parallel."
msgstr "私たちの *スケジューラーマイクロサービスは* 、スケジュールを並行して実行することができません。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:220
#, fuzzy
msgid "We deploy it on Kubernetes with the strategy type *Recreate*, meaning that all pods are terminated before a new one is created. This guarantees that only one pod at a time will be executed. So how do we avoid multiple threads from the same instance executing the same method at the same time?"
msgstr "Kubernetesでは、ストラテジータイプを *Recreate* 、つまりすべてのPodを終了させてから新しいPodを作成するようにデプロイしています。これにより、一度に1つのポッドしか実行されないことが保証されます。では、同じインスタンスから複数のスレッドが同じメソッドを同時に実行するのを避けるにはどうすればいいのでしょうか？"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:222
#, fuzzy
msgid "The answer is to use the `Bulkhead` fault tolerance annotation:"
msgstr "その答えは、 `Bulkhead` のフォールトトレランスアノテーションを使うことです："

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:233
#, fuzzy
msgid "When a request cannot be added to the waiting queue, a `BulkheadException` will be thrown."
msgstr "リクエストを待ち行列に追加できない場合、 `BulkheadException` がスローされます。"

#. type: Title ==
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:237
#, fuzzy
msgid "Final words about Quarkus"
msgstr "Quarkusについて、最後に一言。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:239
#, fuzzy
msgid "Our organization has hundreds of Java programmers, but one problem that we see is the difficulty to hire people who already have experience with Quarkus. We though believe that a person who has experience with other Java frameworks can easily learn Quarkus - especially since Quarkus relies on existing and proven technologies (JAX-RS, CDI, Hibernate ORM, Eclipse MicroProfile...) - and, with time, we will have more professionals mastering it."
msgstr "私たちの組織には何百人ものJavaプログラマーがいますが、Quarkusの経験がある人を採用するのは難しいという問題があります。Quarkusは、既存の実績ある技術（JAX-RS、CDI、Hibernate ORM、Eclipse MicroProfileなど）に依存しているので、他のJavaフレームワークの経験がある人であれば、Quarkusを簡単に習得できると考えていますし、時間の経過とともに、より多くの専門家が習得するようになるでしょう。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:241
#, fuzzy
msgid "In the team experience, Quarkus helps us to build reliable applications with all the resources needed to run a modern application on a cloud environment."
msgstr "チームの経験では、Quarkusは、クラウド環境上で最新のアプリケーションを実行するために必要なすべてのリソースを備えた信頼性の高いアプリケーションを構築するのに役立っています。"

#. type: Plain Text
#: upstream/_posts/2022-05-31-banco-do-brasil-open-banking-user-story.adoc:243
#, fuzzy
msgid "The development experience is awesome and very often new versions are published creating new features making Quarkus even better."
msgstr "開発体験は素晴らしく、非常に頻繁に新しいバージョンが発行され、新しい機能が追加され、Quarkusはさらに良くなっています。"
