msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:2
msgid "post"
msgstr "post"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:3
msgid "An Extension for Long Running Activities"
msgstr "長時間実行アクティビティのためのエクステンション"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:4
msgid "2021-09-01"
msgstr "2021-09-01"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:5
msgid "extensions"
msgstr "extensions"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:6
msgid "How to use the narayana LRA extension to create reliable long running activities."
msgstr "信頼性の高いロングラン活動を実現するためのnarayana LRAエクステンションの使用方法。"

#. type: YAML Front Matter
#: upstream/_posts/2021-09-01-using-lra.adoc:7
msgid "mmusgrov"
msgstr "mmusgrov"

#. type: Title ==
#: upstream/_posts/2021-09-01-using-lra.adoc:10
msgid "Introduction"
msgstr "はじめに"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:12
msgid ""
"The Quarkus LRA extension is useful for building JAX-RS services that wish to definitively agree when an interaction has finished, with either a successful outcome or an unsuccessful one.\n"
"In the successful case, all participants can clean up in the knowledge that all other services will do so as well. Conversely, in the unsuccessful case, participants know that each other will compensate for any actions performed during the interaction. This feature means that participating services can reach a consensus and achieve an atomic outcome."
msgstr "QuarkusのLRAエクステンションは、インタラクションが終了したときに、成功した場合と失敗した場合のいずれかで確定的に合意したいと考えているJAX-RSサービスを構築する際に便利です。成功した場合は、すべての参加者は、他のすべてのサービスも同様に行うことを認識して、クリーンアップできます。逆に、失敗した場合は、参加者はインタラクション中に行われた行為をお互いに補償することを知っています。この機能は、参加したサービスがコンセンサスを得て、アトミックな結果を得ることができることを意味します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:15
msgid "We call the service interaction an LRA, short for Long Running Action. An LRA has specific properties and guarantees that aid in the construction of reliable service interactions. Each action is assigned a unique identifier (referred to as the LRA context) so that it can be distinguished from other LRAs."
msgstr "このサービスインタラクションをLRA（Long Running Actionの略）と呼んでいます。LRAは、信頼性の高いサービスインタラクションを構築するための特定の特性と保証を持っています。各アクションには一意の識別子（LRAコンテキスト）が割り当てられ、他のLRAと区別できるようになっています。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:17
msgid "Services start an LRA (or join an existing one) by marking a JAX-RS method with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html[@LRA annotation]. When such a method is invoked the system will start the action and make its identifier available as a JAX-RS header called \"Long-Running-Action\". If the body of the method performs any JAX-RS invocations the header is automatically added to outgoing requests. In this way the target services can join in with the interaction (if they are also annotated with the `@LRA` annotation)."
msgstr "サービスは、JAX-RSメソッドを https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html[@LRA annotation] でマークすることで、LRAを開始（または既存のものに参加）します。このようなメソッドが呼び出されると、システムはアクションを開始し、その識別子を \"Long-Running-Action\" というJAX-RSヘッダーとして利用可能にします。メソッドのボディが何らかのJAX-RSの呼び出しを実行すると、このヘッダーは自動的に送信リクエストに追加されます。このようにして、対象となるサービスは、（ `@LRA` ）アノテーションが付与されていれば、対話に参加することができます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:19
msgid "Any work performed by a method annotated in this way should be \"compensatable\" in the sense that if some service \"cancels\" the LRA then the service will be reliably notified that it should compensate for any work that it did. Each service is responsible for interpreting the notion of what it means to compensate, the only requirement is that it responds https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ParticipantStatus.html[appropriately] when it is notified that it should compensate. The service indicates how it should be notified by annotating one of its method with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/Compensate.html[@Compensate] annotation. Refer to the javadoc for the `@LRA` annotation for the details of how to control the outcome of an LRA."
msgstr "このようにアノテーションされたメソッドが行った作業は、あるサービスがLRAを「キャンセル」した場合に、そのサービスが行った作業を補償すべきであると確実に通知されるという意味で、「補償可能」でなければなりません。各サービスは、「補償する」という概念を解釈する責任があります。唯一の要件は、補償すべきだと通知されたときに https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ParticipantStatus.html[適切に] 対応することです。サービスは、メソッドの1つに https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/Compensate.html[@Compensate] アノテーションを付けることで、どのように通知されるべきかを示します。LRAの結果を制御する方法の詳細については、 `@LRA` アノテーションのjavadocを参照してください。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:21
#, fuzzy
msgid ""
"The extension provides an implementation of the https://download.eclipse.org/microprofile/microprofile-lra-1.0-M1/microprofile-lra-spec.html[MicroProfile LRA specification] and its associated\n"
" https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/index.html?org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html[annotations]."
msgstr "この拡張機能は、 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0-M1/microprofile-lra-spec.html[MicroProfile LRA 仕様と] それに関連する link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/index.html?org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html[アノテーションの] 実装を提供します。"

#. type: Title ==
#: upstream/_posts/2021-09-01-using-lra.adoc:24
msgid "LRA coordinators"
msgstr "LRAコーディネーター"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:26
#, fuzzy
msgid ""
"The `narayana-lra` extension requires the presence of a running coordinator in the environment. Coordinators can be obtained from `https://quay.io/repository/jbosstm/lra-coordinator`\n"
"or you can build your own coordinator using a maven pom that includes the appropriate dependencies. For the purpose of this blog we'll show how to create one from scratch using the `quarkus-maven-plugin`.\n"
"There is some extra information about configuring the coordinator in one of the https://jbossts.blogspot.com/2021/07/narayana-lra-update.html[narayana blogs]."
msgstr "`narayana-lra` エクステンションは、実行中のコーディネーターが環境に存在することを必要とする。コーディネーターは `https://quay.io/repository/jbosstm/lra-coordinator` から入手することもできますし、適切な依存関係を含む maven pom を使用して独自のコーディネータをビルドすることもできます。このブログでは、 `quarkus-maven-plugin` を使ってゼロからコーディネーターを作成する方法を紹介します。コーディネーターの設定については、 link:https://jbossts.blogspot.com/2021/07/narayana-lra-update.html[narayana ブログに] 追加情報があります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:30
msgid "Since the coordinator is just a JAX-RS resource we can build one using quarkus, adding the `resteasy-jackson` and `rest-client` extensions:"
msgstr "コーディネーターは単なるJAX-RSリソースなので、Quarkusを使って、 `resteasy-jackson` と `rest-client` のエクステンションを追加して構築することができます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:42
msgid "Note that we removed the generated src directory because we just need the quarkus framework for running the coordinator."
msgstr "生成されたsrcディレクトリを削除したのは、コーディネーターを動かすためにquarkusフレームワークが必要なだけだからです。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:44
msgid "Update the pom.xml file to add a dependency on the narayana coordinator implementation:"
msgstr "pom.xmlファイルを更新して、narayanaコーディネーターの実装への依存関係を追加します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:55
msgid "Now build it and run it in the background:"
msgstr "次にそれをビルドして、バックグラウンドで実行します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:63
msgid ""
"Here we are running the coordinator on the default port used by the `narayana-lra` quarkus extension, namely `50000`.\n"
"You can verify that the coordinator is running okay by listing the current LRAs:"
msgstr "ここでは、 `narayana-lra` quarkus extensionが使用するデフォルトのポート、すなわち `50000` でコーディネーターを実行しています。コーディネーターが正常に動作していることは、現在のLRAをリストアップすることで確認できます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:72
msgid "This snippet shows the request returning an empty json array."
msgstr "このスニペットは、リクエストが空のjson配列を返すことを示しています。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:74
msgid ""
"We shall leave the coordinator running (on the default port) while we develop and test services that use LRAs.\n"
"Towards the end of article we will show how to embed coordinators with services\n"
"(NOTE: you cannot use this approach to run coordinators in native mode, a future extension will be provided to support this requirement)."
msgstr "ここでは、LRAを使用するサービスを開発・テストする間、コーディネーターを（デフォルトのポートで）稼働させておきます。記事の最後では、コーディネーターをサービスに組み込む方法を紹介します（注意：この方法では、コーディネーターをネイティブ・モードで実行することはできませんが、将来的にはこの要件をサポートするエクステンションが提供される予定です）。"

#. type: Title ==
#: upstream/_posts/2021-09-01-using-lra.adoc:78
msgid "JVM mode"
msgstr "JVMモード"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:80
msgid "To build a JAX-RS application with LRA support add the dependency `io.quarkus:quarkus-narayana-lra` to your application's pom. This will add JAX-RS support and will also make the LRA annotations available when developing your services, it also registers a JAX-RS filter that automatically manages the participation of your services in LRAs."
msgstr "LRAをサポートするJAX-RSアプリケーションをビルドするには、アプリケーションのpomに依存関係 `io.quarkus:quarkus-narayana-lra` を追加します。これにより、JAX-RSサポートが追加され、サービスを開発する際にLRAアノテーションを利用できるようになります。また、LRAへのサービスの参加を自動的に管理するJAX-RSフィルタも登録されます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:82
msgid "As noted above, the guarantees (of eventual consistency) required by the https://download.eclipse.org/microprofile/microprofile-lra-1.0-M1/microprofile-lra-spec.html[LRA specification] rely on the presence of a JAX-RS application that coordinates the services participating in the LRA. This component must be present when starting the interaction, when joining the interaction and when ending the interaction. If the coordinator becomes unavailable it should be restarted. Similarly, services participating in the LRA must be available during the end phase; the system will continue retrying a service until it indicates that it is finished with the LRA, and once a service has indicated successful compensation (or completion) it no longer takes part in the interaction (although it can register for a reliable notification that all services have finished compensating or completing). Although there can be many coordinators, at the time of writing, only one can manage a particular LRA."
msgstr "上述のように、 link:https://download.eclipse.org/microprofile/microprofile-lra-1.0-M1/microprofile-lra-spec.html[LRA仕様]が要求する（最終的な一貫性の）保証は、LRAに参加するサービスを調整するJAX-RSアプリケーションの存在に依存しています。このコンポーネントは、インタラクションの開始時、インタラクションへの参加時、およびインタラクションの終了時に存在しなければなりません。コーディネーターが利用できなくなった場合は、再起動する必要があります。同様に、LRAに参加しているサービスは、終了段階でも利用可能でなければなりません。システムは、サービスがLRAを終了したことを示すまで再試行を続け、サービスが補償（または完了）に成功したことを示すと、そのサービスはもはや相互作用に参加しません（ただし、すべてのサービスの補償または完了が終了したことを示す信頼性の高い通知に登録することは可能です）。コーディネーターは多数存在しますが、本稿執筆時点では、特定のLRAを管理できるのは1人だけです。"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:84
msgid "Step 1: Create the application:"
msgstr "ステップ1：アプリケーションの作成"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:95
msgid "Note that if the coordinator is running on a port different from the default, i.e. `50000`, then you will need to update the application config file (`src/main/resources/application.properties`) and specify the host and port:"
msgstr "なお、コーディネーターがデフォルトとは異なるポート（例： `50000` ）で動作している場合は、アプリケーションの設定ファイル（ `src/main/resources/application.properties` ）を更新し、ホストとポートを指定する必要があります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:102
msgid "Verify that the generated application still works after these changes:"
msgstr "これらの変更後に、生成されたアプリケーションが動作することを確認します。"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:109
msgid "Step 2: Add LRA support"
msgstr "ステップ2：LRAサポートの追加"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:111
msgid "Now update the generated application so that the hello method will execute in the context of a Long Running Action:"
msgstr "ここで、生成されたアプリケーションを更新し、HelloメソッドがLong Running Actionのコンテキストで実行されるようにします。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:113
msgid "Open the file `src/main/java/org/acme/GreetingResource.java` in an editor and annotate the `hello` method with an @LRA annotation (also inject the LRA context into the method using the JAX-RS `javax.ws.rs.HeaderParam` annotation). In addition, add two callback methods which will be called when the LRA is closed or cancelled."
msgstr "ファイル `src/main/java/org/acme/GreetingResource.java` をエディタで開き、 `hello` メソッドに @LRA アノテーションを付けます（また、JAX-RS `javax.ws.rs.HeaderParam` アノテーションを使用して、LRA コンテキストをメソッドに注入します）。さらに、LRAが閉じられたときやキャンセルされたときに呼び出される2つのコールバックメソッドを追加します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:115
msgid "The end result, including the imports, should look like the following:"
msgstr "インポートも含めて最終的には以下のようになるはずです。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:167
msgid "With these changes, if you build the application and then invoke the `hello` method then an LRA will be started before the method is entered and ended after it finishes:"
msgstr "これらの変更により、アプリケーションをビルドしてから `hello` メソッドを呼び出すと、LRAはメソッドに入る前に開始され、メソッドが終了した後に終了します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:180
msgid "Make sure that the coordinator is still running otherwise you will see an error message similar to the following:"
msgstr "コーディネーターが動作していることを確認してください。そうでない場合は、以下のようなエラーメッセージが表示されます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:187
msgid ""
"Notice the `System.out` messages indicating that the `@Complete` callback was invoked.\n"
"Now kill the java process in preparation for the next step (the process id was printed on the console, in my example the pid is 2389948, so I typed `kill 2389948`)."
msgstr "`@Complete` のコールバックが呼び出されたことを示す `System.out` のメッセージに注目してください。ここで、次のステップに備えてjavaプロセスをkillします（プロセスIDがコンソールに表示され、私の例ではpidが2389948なので、 `kill 2389948` と入力しました）。"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:190
msgid "Step 3: Extending the LRA across two service methods"
msgstr "ステップ3：LRAを2つのサービス方式に拡張"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:192
msgid "In this step we will start an LRA but not end it when the method finishes by using https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html#end--[the end element of the LRA annotation]."
msgstr "このステップでは https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.html#end--[LRAアノテーションのエンド要素] を使用することで、LRAを開始しますが、メソッドが終了してもLRAを終了しません。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:194
msgid "Define a second business method to do this:"
msgstr "そのために、二番目のビジネスメソッドを次のように定義します:"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:208
msgid ""
"The only difference from the hello method is the `@Path` and `@LRA` annotations and that it returns the LRA id\n"
"back to the caller. We will need this to set the header when we send a request to the hello method to finish\n"
"the LRA (note that this header is also available in one of the JAX-RS response headers)."
msgstr "helloメソッドとの唯一の違いは、 `@Path` と `@LRA` のアノテーションがあることと、LRA IDを呼び出し元に返すことです。これは、LRAを終了させるためにhelloメソッドにリクエストを送信する際に、ヘッダーを設定するために必要となります（このヘッダーは、JAX-RSのレスポンスヘッダーの1つでも利用可能であることに注意してください）。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:212
msgid "Kill the existing instance (`kill 2389948`) and rebuild the application (`./mvnw package -DskipTests`) and start it running in the background:"
msgstr "既存のインスタンスをkillし( `kill 2389948`)、アプリケーションを再ビルドし( `./mvnw package -DskipTests`)、バックグラウンドで実行を開始します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:220
msgid "Start an LRA using `curl` to send a request the new method we have just added:"
msgstr "`curl` を使ってLRAを開始し、今回追加した新しいメソッドにリクエストを送信します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:228
msgid ""
"The start method was coded to return the LRA id and I have used `bash` to save it into an environment variable called `LRA_URL`.\n"
"The original hello method used the default value of the `end` element of the `@LRA` annotation so if we call that method with an LRA context then the LRA will automatically close when the method finishes:"
msgstr "startメソッドはLRAのIDを返すようにコード化されており、 `bash` を使ってそれを `LRA_URL` という環境変数に保存しています。オリジナルのhelloメソッドは、 `@LRA` アノテーションの `end` 要素のデフォルト値を使用しているため、LRAのコンテキストでこのメソッドを呼び出すと、メソッドの終了時にLRAが自動的にクローズされます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:239
msgid "Notice that the `completeWork` method was invoked."
msgstr "`completeWork` メソッドが呼び出されたことに注目してください。"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:241
msgid "Step 4: Start an LRA in one microservice and end it in a different microservice"
msgstr "ステップ4：あるマイクロサービスでLRAを開始し、別のマイクロサービスで終了する"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:243
msgid ""
"This step shows how two different microservices can coordinate their activities even though they have no coupling.\n"
"Start a second instance of the hello application on a different port:"
msgstr "このステップでは、2つの異なるマイクロサービスが結合していないにもかかわらず、それぞれのアクティビティを調整する方法を紹介します。helloアプリケーションの2つ目のインスタンスを別のポートで起動します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:252
msgid "Since we are still using the same application resource file and external coordinator there is no need to update the config."
msgstr "同じアプリケーションリソースファイルと外部コーディネーターを使用しているので、設定を更新する必要はありません。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:254
msgid "Again, start an LRA using `curl` to send a request to the start method of the first service:"
msgstr "再度、 `curl` を使用して LRA を起動し、最初のサービスの start メソッドにリクエストを送信します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:262
msgid "and now end it in the second service (the one running on port 8081):"
msgstr "これを、2つ目のサービス（ポート8081で動作しているもの）で終了させます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:273
msgid "Notice that both microservices indicated that they received the completion callback."
msgstr "両方のマイクロサービスが、完了コールバックを受け取ったことを示していることに注目してください。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:275
msgid "Terminate both java processes (`kill 2495275 2495369`)."
msgstr "両方のJavaプロセスを終了してください( `kill 2495275 2495369`)。"

#. type: Title ====
#: upstream/_posts/2021-09-01-using-lra.adoc:277
msgid "Optional Step: using the MANDATORY element"
msgstr "オプショナルステップ：MANDATORY要素の使用"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:279
msgid ""
"Instead of using an existing method to close the LRA you might prefer to write one which expects there to be a context.\n"
"In this case you would want to set the `LRA.Type` element:"
msgstr "LRAを閉じるために既存のメソッドを使うのではなく、コンテキストがあることを前提としたメソッドを書きたいと思うかもしれません。この場合、 `LRA.Type` 要素を設定することになります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:293
msgid "Because the end method is annotated with `@LRA(value = LRA.Type.MANDATORY)`, the context header must be present otherwise the method will return an error response code:"
msgstr "end メソッドは `@LRA(value = LRA.Type.MANDATORY)` でアノテーションされているため，コンテクストヘッダが存在していなければならず，そうでなければメソッドはエラー応答コードを返すことになります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:307
msgid "whereas providing the LRA context header will work:"
msgstr "一方、LRAのコンテキストヘッダを提供するとうまくいきます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:318
msgid "Other https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.Type.html[LRA.Type element values] may be useful, depending upon what your application is trying to achieve. For those readers familiar with JTA it is worth remarking that it was loosely modelled on the https://docs.oracle.com/javaee/7/api/javax/transaction/Transactional.TxType.html[Java Transactional TxType annotation]."
msgstr "アプリケーションの目的に応じて、他の https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/org/eclipse/microprofile/lra/annotation/ws/rs/LRA.Type.html[LRA.Type の値]も有効です。JTAに慣れた読者は、LRA.Typeは https://docs.oracle.com/javaee/7/api/javax/transaction/Transactional.TxType.html[Java Transactional TxType アノテーション]をおおまかにモデルにして開発されたことを知っておくと良いでしょう。"

#. type: Title ==
#: upstream/_posts/2021-09-01-using-lra.adoc:320
msgid "Native mode"
msgstr "ネイティブモード"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:322
msgid "in native mode only external coordinators (i.e. not embedded with the application) are supported (we will provide a coordinator extension in a later release to address this deficiency)."
msgstr "ネイティブモードでは、外部のコーディネーター（アプリケーションに組み込まれていないもの）しかサポートされていません（この欠点を解決するために、後のリリースでコーディネーターのエクステンションを提供する予定です）。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:324
msgid "First build a native executable:"
msgstr "まず、ネイティブ実行可能ファイルをビルドします。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:331
msgid ""
"Check that the external coordinator started in <<_lra-coordinators,the section on coordinators>> is still running on\n"
"port 50000 and then start the service as a native executable in the background. Note that if the coordinator is not\n"
"running on the default port you would need to either pass in the location of a running coordinator as a Java system property\n"
"(`-Dquarkus.lra.coordinator-url=http://localhost:50000/lra-coordinator`) or you can update the application config and\n"
"rebuild the native executable."
msgstr "<<_lra-coordinators,コーディネーターのセクション>> で起動した外部コーディネーターがポート50000で動作していることを確認し、バックグラウンドでネイティブ実行可能ファイルとしてサービスを開始します。コーディネーターがデフォルト・ポートで実行されていない場合は、実行中のコーディネーターの場所をJavaシステム・プロパティ( `-Dquarkus.lra.coordinator-url=http://localhost:50000/lra-coordinator`)として渡すか、アプリケーション・コンフィグを更新してネイティブ実行可能ファイルを再ビルドする必要があることに注意してください。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:337
msgid "Start an instance of the native service:"
msgstr "ネイティブサービスのインスタンスを起動します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:345
msgid "Take a note of the process id (i.e. 2434426) since we will need to kill the process later."
msgstr "後でプロセスをkillする必要があるので、プロセスID（例：2434426）をメモしておきます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:347
msgid "Start a new LRA:"
msgstr "新しいLRAを開始します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:354
msgid "and end it in a different method:"
msgstr "そして別の方法で終わらせます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:364
msgid "Kill the service in preparation for the next step (`kill 2434426`) or just leave it running."
msgstr "次のステップに備えてサービスを停止するか（ `kill 2434426` ）、そのまま稼働させておきます。"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:366
msgid "Failure handling"
msgstr "エラーハンドリング"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:368
msgid ""
"In this step we will start an LRA running in one service and then kill the service before the LRA has finished.\n"
"Then we'll use a second service to end the LRA and note that second service completes but that the LRA will\n"
"still be in the `Closing` state because the participant in the first, failed, service still needs to complete.\n"
"If the LRA is to reach the `Closed` state then the failed service must be restarted so that it can can respond\n"
"to the `Complete` request."
msgstr "このステップでは、あるサービスでLRAの実行を開始し、LRAが終了する前にサービスを終了させます。次に、2つ目のサービスを使用してLRAを終了させます。2つ目のサービスは完了しますが、最初に失敗したサービスの参加者がまだ完了する必要があるため、LRAはまだ `Closing` の状態にあります。LRAが `Closed` の状態になるには、失敗したサービスを再起動して、 `Complete` の要求に応答できるようにする必要があります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:374
msgid "Restart the fist service on the default port 8080 (and note its process id):"
msgstr "fistサービスをデフォルトのポート8080で再起動します（そしてプロセスIDもメモしておきます）。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:382
msgid "and start a second service instance (on port 8082):"
msgstr "そして2つ目のサービスインスタンス（ポート8082）を起動します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:390
msgid "Start an LRA at the first service:"
msgstr "最初のサービスでLRAを開始します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:398
msgid "Kill the first service"
msgstr "最初のサービスをkill"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:406
msgid "Now, with only the second service running, try ending the LRA:"
msgstr "ここで、2つ目のサービスだけが稼働している状態で、LRAを終了させてみます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:416
msgid "The LRA will still be running, as you may verify by querying the coordinator (`curl http://localhost:50000/lra-coordinator`)."
msgstr "コーディネーターに問い合わせれば、LRAはまだ動いていることが確認できます (`curl http://localhost:50000/lra-coordinator`)。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:418
msgid "To finish the LRA restart the failed service (which was listening on port 8080):"
msgstr "LRAを終了するために、失敗したサービス（ポート8080で待ち受けていた）を再起動します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:426
msgid ""
"Recovery processing is periodic (the default period between recovery passes is 2 minutes).\n"
"If you cannot wait 2 minutes then you may manually trigger a recovery cycle via the coordinators\n"
"recovery endpoint as follows:"
msgstr "リカバリー処理は定期的に行われます（リカバリーパスのデフォルトの期間は2分です）。2分も待てない場合は、コーディネーターのリカバリーエンドポイントを使って、以下のように手動でリカバリーサイクルを開始することができます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:437
msgid ""
"The item to note here is that the restarted service received the completion notification (`completing ...`).\n"
"The result of the request to run a recovery cycle is a json array of recovering LRAs (in this example the list is\n"
"empty because the last LRA has now finished as indicated by the empty json array `[]`)."
msgstr "ここで注意すべき点は、再起動したサービスが完了通知を受け取ったことです( `completing …​`)。復旧サイクルの実行要求の結果は、復旧したLRAのjson配列です（この例では、最後のLRAが終了したため、リストは空のjson配列 `[]` ）。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:441
msgid "Clean up by stopping the two services (`kill 2434984 2435130`)."
msgstr "2つのサービスを停止してクリーンアップします( `kill 2434984 2435130`)。"

#. type: Title ==
#: upstream/_posts/2021-09-01-using-lra.adoc:443
msgid "Appendix 1"
msgstr "付録1"

#. type: Title ===
#: upstream/_posts/2021-09-01-using-lra.adoc:445
msgid "Embedded Coordinators"
msgstr "埋め込みコーディネーター"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:447
msgid ""
"Since coordinators are just JAX-RS applications they can be embedded with JAX-RS services quite easily\n"
"by adding the LRA coordinator dependency the applications pom.xml file:"
msgstr "コーディネーターは単なるJAX-RSアプリケーションなので、アプリケーションのpom.xmlファイルにLRAコーディネーターの依存関係を追加することで、JAX-RSサービスに簡単に組み込むことができます。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:459
msgid ""
"and since, by default, quarkus only allows one application per deployment you will need to add the the following\n"
"property to the application config file (`src/main/resources/application.properties`):"
msgstr "また、デフォルトでは、Quarkusは1つのデプロイメントにつき1つのアプリケーションしか許可しないため、アプリケーション設定ファイル( `src/main/resources/application.properties`)に以下のプロパティを追加する必要があります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:467
msgid "The same caveats as described in the <<_lra-coordinators,the section on coordinators>> still apply:"
msgstr "<<_lra-coordinators,コーディネーターのセクション>>で説明した注意点と同じです。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:469
msgid "no support for native executables."
msgstr "ネイティブ実行可能ファイルには対応していません。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:470
msgid "each instance requires dedicated storage for the coordinators' transaction logs (since sharing transaction stores is not currently supported)."
msgstr "各インスタンスには、コーディネーターのトランザクションログ用の専用ストレージが必要です（現在、トランザクションストアの共有はサポートされていないため）。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:472
msgid ""
"The embedded coordinator will be available on the same port as the application (with path `lra-coordinator`),\n"
"but note that the default coordinator port is `50000` so you will need to configure its location in the application\n"
"config to tell the application to use it:"
msgstr "埋め込まれたコーディネーターは、アプリケーションと同じポート（パス `lra-coordinator` ）で利用できますが、デフォルトのコーディネーターのポートは `50000` なので、アプリケーションのコンフィグでその場所を設定して、アプリケーションに使用させる必要があることに注意してください。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:482
msgid ""
"The location of the transaction logs cannot be configured in this way and must be configured via a system property\n"
"(`ObjectStoreEnvironmentBean.objectStoreDir`):"
msgstr "トランザクションログの場所はこの方法では設定できないため、システムプロパティ( `ObjectStoreEnvironmentBean.objectStoreDir`)で設定する必要があります。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:496
msgid "Now end the LRA in a different method:"
msgstr "今度は別の方法でLRAを終了します。"

#. type: Plain Text
#: upstream/_posts/2021-09-01-using-lra.adoc:506
msgid "A later extension will provide better support for embedded coordinators (including configuring them using standard quarkus mechanisms)."
msgstr "今後、エクステンションでは、埋め込み式のコーディネーターのサポートが強化される予定です（標準的なQuarkusのメカニズムを使った設定を含む）。"
