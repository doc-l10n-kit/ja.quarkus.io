msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Why you should always update to the latest micro versions!"
msgstr "常に最新のマイクロバージョンにアップデートすべき理由！"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "How does quarkus use branches and the implication on releases and Quarkus versions"
msgstr "Quarkusのブランチの使用方法と、リリースとQuarkusのバージョンへの影響"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "We often get questions about how the Quarkus maintainers handle multiple branches and how this impacts releases. This short post attempts to provide the necessary information for answering such questions."
msgstr "Quarkusのメンテナが複数のブランチをどのように扱っているのか、またそれがリリースにどのような影響を与えるのかについて、よく質問を受けます。この短い投稿は、そのような質問に答えるために必要な情報を提供しようとするものです。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Development branch"
msgstr "開発ブランチ"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"When a maintainer or contributor wants to make a change to Quarkus source code, a Pull Request is opened against the `main` branch.\n"
"This means that all changes once merged are part of the `main` branch and there are no feature branches (a practice that is sometimes referred to as trunk based development)."
msgstr "メンテナやコントリビュータがQuarkusのソースコードに変更を加えたい場合、 `main` ブランチに対してPull Requestが開かれます。つまり、一度マージされたすべての変更は `main` ブランチの一部となり、フィーチャーブランチは存在しません（トランクベースの開発と呼ばれることもあります）。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "The Maven version used on the `main` branch is always `999-SNAPSHOT`"
msgstr "`main` ブランチで使用される Maven のバージョンは常に次のとおりです。 `999-SNAPSHOT`"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "For folks who want to contribute to Quarkus but are uncertain which branch their new change should target, the answer is unequivocally the `main` branch."
msgstr "Quarkusに貢献したくても、新しい変更をどのブランチをターゲットにすべきなのかわからないという人の答えは、ずばり `main` ブランチです。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New major or minor version"
msgstr "新しいメジャーまたはマイナーバージョン"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"As a short reminder, Quarkus always provides at least one Candidate Release version of a new minor or major version (in the latter case, there are almost always multiple such releases).\n"
"These releases use the `CR*` suffix, so for example the first candidate release for the `3.11` release was `3.11.CR1`."
msgstr "簡単な注意事項として、Quarkusは常に、新しいマイナーバージョンまたはメジャーバージョンの少なくとも1つのリリース候補版を提供しています（後者の場合、そのようなリリースが複数存在することがほとんどです）。これらのリリースでは、 `CR*` という接尾辞が使用されますので、例えば、 `3.11` リリースの最初の候補リリースは `3.11.CR1` となります。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"When time comes to do the new Candidate Release version of a new minor version a new branch using the major and minor is created at the head of the `main` branch.\n"
"For example for the `3.11` release, the branch was made of the following HEAD:"
msgstr "新しいマイナーバージョンのリリース候補版を作成するときには、 `main` ブランチの先頭にメジャーとマイナーを使った新しいブランチが作成されます。たとえば、 `3.11` リリースでは、ブランチは以下のような HEAD で作られています："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "After the release process is completed, the branch looks like this:"
msgstr "リリースプロセスが完了すると、ブランチはこのようになります："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New micro version"
msgstr "新マイクロバージョン"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "After creating the release branch, all subsequent changes to `main` will target a future release unless they are backported to the release branch."
msgstr "リリースブランチを作成した後、 `main` に対するそれ以降のすべての変更は、リリースブランチにバックポートされない限り、将来のリリースを対象とします。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"As we absolutely want a release branch to include the latest bug fixes from `main`, a manual triage needs to occur in order to decide\n"
"which changes in `main` should be backported to the release branch. The maintainers of the Quarkus use the `triage/backport*` labels\n"
"on candidate changes."
msgstr "リリースブランチには、 `main` からの最新のバグ修正が絶対に含まれるようにしたいので、 `main` のどの変更をリリースブランチにバックポートすべきかを決定するために、手作業によるトリアージが必要です。Quarkusのメンテナは、変更候補に `triage/backport*` 。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "When time comes to release a new micro version (or the final `.0` version), the selected changes are manually backported to the branch"
msgstr "新しいマイクロバージョン (または最終的な `.0` バージョン) をリリースするときが来たら、選択した変更を手動でブランチにバックポートします。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "New features from `main` are **not** backported to the release branch (with very few exceptions) as we want release branches to be as stable as possible."
msgstr "私たちはリリースブランチを可能な限り安定したものにしたいと考えているため、 `main` からの新機能は (ごく少数の例外を除いて) リリースブランチにバックポートさ *れません* 。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "For example, for the `3.11.0` release the branch looked like this:"
msgstr "例えば、 `3.11.0` リリースでは、ブランチはこのようになっていました："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Compare this with the image for `3.11.0.CR1` and you'll see that only safe changes are included."
msgstr "これを `3.11.0.CR1` の画像と比較すると、安全な変更だけが含まれていることがわかります。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Same for `3.11.1`:"
msgstr "`3.11.1` も同じ："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "This backport process happens independently for each supported release branch. It's also the reason why the GitHub project has multiple backport labels."
msgstr "このバックポートプロセスは、サポートされているリリースブランチごとに独立して行われます。GitHubプロジェクトに複数のバックポートラベルがあるのもこのためです。"

#: _posts/2024-06-12-branching-and-versioning.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "If Quarkus users should take away one thing from this post it's this:"
msgstr "もしクオークスのユーザーがこの記事から何かひとつでも得るべきものがあるとすれば、それはこれです："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"Regardless of the minor version of Quarkus being used, it is important to always use the latest micro version of a release. The reason for doing so should be evident from\n"
"this blog post, but it is worth reemphasizing: The latest micro release - let's call it `.z` - is almost always going to be more stable than `.0` (or anything before `.z`)\n"
"since it only contains bug fixes and does not contain new features, as those have a higher chance of introducing new bugs."
msgstr "Quarkusのマイナーバージョンに関係なく、常にリリースの最新のマイクロバージョンを使用することが重要です。その理由は、このブログ記事を読めば明らかでしょうが、再度強調する価値があります：最新のマイクロリリース（仮に `.z` とします）は、 `.0` （または `.z` より前のもの）よりも安定していることがほとんどです。なぜなら、バグ修正のみが含まれており、新しい機能が含まれていないからです。"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "As to which version of Quarkus to use, it comes down to the following question:"
msgstr "Quarkusのどのバージョンを使うかについては、以下の質問に行き着きます："

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid "Does my project value bleeding edge features or stability?"
msgstr "私のプロジェクトは最先端の機能を重視しますか、それとも安定性を重視しますか？"

#: _posts/2024-06-12-branching-and-versioning.adoc
#, fuzzy
msgid ""
"If the answer is the former, then the absolute latest Quarkus version on Maven Central should be used.\n"
"If the answer is the latter, then the latest https://quarkus.io/blog/lts-releases/[LTS] version of Quarkus should be used."
msgstr "答えが前者の場合、Maven CentralのQuarkusの絶対最新バージョンを使用する必要があります。答えが後者の場合、Quarkusの最新の link:https://quarkus.io/blog/lts-releases/[LTS] バージョンを使用する必要があります。"
