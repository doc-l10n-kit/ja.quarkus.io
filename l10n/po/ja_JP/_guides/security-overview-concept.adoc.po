msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_guides/security-overview-concept.adoc:2
#, no-wrap
msgid "Quarkus Security overview"
msgstr "Quarkus Securityの概要"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:7
msgid "Quarkus Security is a framework that provides the architecture, multiple authentication and authorization mechanisms, and other tools for you to build secure and production-quality Java applications."
msgstr "Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティーを構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツールを提供しているフレームワークです。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:9
msgid "Before you start building security into your Quarkus applications, learn about the xref:security-architecture-concept.adoc[Quarkus Security architecture] and the different authentication mechanisms and features that you can use."
msgstr "Quarkusアプリケーションにセキュリティを組み込む前に、 xref:security-architecture-concept.adoc[Quarkus Securityのアーキテクチャ] と、使用できるさまざまな認証メカニズムや機能について学んでください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:10
#, no-wrap
msgid "Key features of Quarkus Security"
msgstr "Quarkus Securityの主な機能"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:14
msgid "The Quarkus Security framework provides built-in security authentication mechanisms for Basic, Form-based, and mutual TLS (mTLS) authentication.  You can also use other well-known xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[authentication mechanisms], such as OpenId Connect (OIDC) and WebAuthn."
msgstr "Quarkus Securityフレームワークには、Basic認証、フォームベース認証、相互TLS（mTLS）認証のための組込のセキュリティ認証メカニズムがあります。また、OpenId Connect（OIDC）やWebAuthnなど、その他のよく知られた xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[認証メカニズム] を使用することもできます。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:16
msgid "Authentication mechanisms depend on xref:security-identity-providers-concept.adoc[Identity providers] to verify the authentication credentials and map them to a `SecurityIdentity` instance, which has the username, roles, original authentication credentials, and other attributes."
msgstr "認証メカニズムは、xref:security-identity-providers-concept.adoc[アイデンティティプロバイダ] に依存して認証クレデンシャルを検証し、ユーザー名、ロール、元の認証クレデンシャル、およびその他の属性を持つ `SecurityIdentity` インスタンスにマッピングします。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:19
msgid "{project-name} also includes built-in security to allow for role-based access control (RBAC) based on the common security annotations @RolesAllowed, @DenyAll, @PermitAll on REST endpoints, and CDI beans.  For more information, see xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]."
msgstr "また、{project-name}には、RESTエンドポイントやCDI Beanに共通のセキュリティアノテーション@RolesAllowed、@DenyAll、@PermitAllに基づくロールベースのアクセス制御（RBAC）を可能にするセキュリティが組み込まれています。詳細については、 xref:security-authorize-web-endpoints-reference.adoc[Webエンドポイントの認可] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:21
msgid "Quarkus Security also supports the following features:"
msgstr "Quarkus Securityは、以下の機能もサポートしています:"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:23
msgid "xref:security-proactive-authentication-concept.adoc[Proactive authentication]"
msgstr "xref:security-proactive-authentication-concept.adoc[プロアクティブ認証]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:24
msgid "xref:http-reference.adoc#ssl[Secure connections with SSL/TLS]"
msgstr "xref:http-reference.adoc#ssl[SSL/TLSによるセキュアな接続]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:25
msgid "xref:cross-origin-resource-sharing[Cross-origin resource sharing]"
msgstr "xref:cross-origin-resource-sharing[クロスオリジンリソース共有]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:26
msgid "xref:csrf-prevention[Cross-site Request Forgery (CSRF) prevention]"
msgstr "xref:csrf-prevention[クロスサイトリクエストフォージェリ（CSRF）対策]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:27
msgid "xref:samesite-cookies[SameSite cookies]"
msgstr "xref:samesite-cookies[SameSiteクッキー]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:28
msgid "xref:secrets-engines[Secrets engines]"
msgstr "xref:secrets-engines[シークレットエンジン]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:29
msgid "xref:secure-serialization[Secure serialization]"
msgstr "xref:secure-serialization[セキュアなシリアル化]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:30
msgid "xref:rest-data-panache[Secure auto-generated resources by REST Data with Panache]"
msgstr "xref:rest-data-panache[REST Data with Panacheで自動生成されたリソースを保護]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:31
msgid "xref:security-vulnerability-detection-concept.adoc[Security vulnerability detection and National Vulnerability Database (NVD) registration]"
msgstr "xref:security-vulnerability-detection-concept.adoc[セキュリティ脆弱性検出とNational Vulnerability Database (NVD) 登録]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:33
msgid "Quarkus Security is also highly customizable. For more information, see xref:security-customization.adoc[Security customization]."
msgstr "Quarkus Securityは、高度なカスタマイズも可能です。詳細については、 xref:security-customization.adoc[セキュリティのカスタマイズ] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:34
#, no-wrap
msgid "Getting started with Quarkus Security"
msgstr "Quarkus セキュリティー入門"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:38
msgid "To get started with security in Quarkus, we recommend you combine the Quarkus built-in xref:security-basic-authentication-concept.adoc[Basic authentication] with the Jakarta Persistence identity provider to enable role-based access control (RBAC).  Complete the steps in the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication] tutorial."
msgstr "Quarkusでセキュリティを始めるには、Quarkusに組み込まれている xref:security-basic-authentication-concept.adoc[Basic 認証] とJakarta Persistence IDプロバイダーを組み合わせて、役割ベースのアクセス制御（RBAC）を有効にすることをお勧めします。 xref:security-basic-authentication-tutorial.adoc[Basic認証でQuarkusアプリケーションを保護] するチュートリアルのステップを完了してください。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:40
msgid "After you have successfully secured your Quarkus application with Basic authentication, you can increase the security further by adding more advanced authentication mechanisms, for example, OpenID Connect (OIDC) authentication."
msgstr "Basic認証でQuarkusアプリケーションのセキュリティを確保した後、OpenID Connect（OIDC）認証など、より高度な認証メカニズムを追加して、セキュリティをさらに強化することができます。"

#. Add a link to the recomposed OIDC intro concept here.
#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:43
#, no-wrap
msgid "Quarkus Security testing"
msgstr "Quarkus Securityテスト"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:46
msgid "Guidance for testing Quarkus Security features and ensuring that your Quarkus applications are securely protected is provided in xref:security-testing.adoc[Security Testing]."
msgstr "Quarkusのセキュリティ機能をテストし、Quarkusアプリケーションを保護するためのガイダンスは、 xref:security-testing.adoc[セキュリティのテスト] に記載されています。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:47
#, no-wrap
msgid "More about security features in Quarkus"
msgstr "Quarkusのセキュリティ機能についての詳細"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:50
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:54
msgid "To make your Quarkus application accessible to another application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information about the CORS filter that is provided by Quarkus, see the xref:http-reference.adoc#cors-filter[HTTP reference] information."
msgstr "Quarkusアプリケーションを、別のドメインで動作する別のアプリケーションからアクセスできるようにするには、CORS（crossorigin resource sharing）を設定する必要があります。Quarkusで提供されているCORSフィルターの詳細については、 xref:http-reference.adoc#cors-filter[HTTPリファレンス] 情報を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:56
#, no-wrap
msgid "Cross-site Request Forgery (CSRF) prevention"
msgstr "Cross-site Request Forgery (CSRF) 対策"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:60
msgid "Quarkus Security provides a RESTEasy Reactive filter that can protect your applications against a https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] attack.  For more information, see xref:security-csrf-prevention.adoc[Cross-Site Request Forgery Prevention]."
msgstr "Quarkus Securityは、 link:https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] 攻撃からアプリケーションを保護できるRESTEasy Reactiveフィルターを提供しています。詳細については、 link:security-csrf-prevention.html[Cross-Site Request Forgeryの防止] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:62
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSiteクッキー"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:66
msgid "You can add a link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint.  For more information, see xref:http-reference.adoc#same-site-cookie[SameSite cookies]."
msgstr "Quarkusのエンドポイントが設定するCookieのいずれに対しても、 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] Cookieプロパティを追加することができます。詳細については、 xref:http-reference.adoc#same-site-cookie[SameSite Cookie] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:68
#, no-wrap
msgid "Secrets engines"
msgstr "シークレットエンジン"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:70
msgid "Secrets engines are components that store, generate, or encrypt data."
msgstr "シークレットエンジンは、データを保存、生成、暗号化するコンポーネントです。"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:73
msgid "Quarkus provides comprehensive HashiCorp Vault support.  For more information, see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation."
msgstr "Quarkusは、HashiCorp Vaultを包括的にサポートしています。詳細については、 link:{vault-guide}[QuarkusとHashiCorp Vault] のドキュメントを参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:75
#, no-wrap
msgid "Secure serialization"
msgstr "セキュア・シリアライゼーション"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:79
msgid "If your Quarkus Security architecture includes RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security.  For more information, see xref:resteasy-reactive.adoc#secure-serialization[Writing REST services with RESTEasy Reactive]."
msgstr "Quarkus SecurityアーキテクチャにRESTEasy ReactiveとJacksonが含まれている場合、Quarkusでは、設定されたセキュリティに基づいて、JSONシリアライズに含まれるフィールドを制限できます。詳細は、 xref:resteasy-reactive.adoc#secure-serialization[RESTEasy Reactiveを使用したRESTサービスの作成] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-overview-concept.adoc:81
#, no-wrap
msgid "Secure auto-generated resources by REST Data with Panache"
msgstr "自動生成されたリソースをREST Data with Panacheで保護"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:85
msgid "If you are using the REST Data with Panache extension to auto-generate your resources, you can still use the Security annotations within the package `jakarta.annotation.security`.  For more information, see xref:rest-data-panache.adoc#securing-endpoints[Securing auto-generated resources]."
msgstr "REST Data with Panacheエクステンションを使用してリソースを自動生成している場合でも、 `jakarta.annotation.security` パッケージ内のSecurityアノテーションを使用することができます。詳しくは、 xref:rest-data-panache.adoc#securing-endpoints[自動生成されたリソースの保護] をご覧ください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:86
#, no-wrap
msgid "Security vulnerability detection "
msgstr "セキュリティ脆弱性検出"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:90
msgid "Most of the Quarkus tags are reported in the US link:https://nvd.nist.gov[National Vulnerability Database (NVD)].  For information about security vulnerabilities, see xref:security-vulnerability-detection-concept.adoc[Security vulnerability detection and reporting in Quarkus]."
msgstr "Quarkusのタグのほとんどは、米国の link:https://nvd.nist.gov[National Vulnerability Database（NVD] ）に報告されています。セキュリティの脆弱性については、 xref:security-vulnerability-detection-concept.adoc[Quarkusにおけるセキュリティの脆弱性の検出と報告] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-overview-concept.adoc:92
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:95
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr "xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta PersistenceによるQuarkusアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:96
msgid "xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr "xref:security-oidc-code-flow-authentication-tutorial.adoc[OIDC認可コードフローを使用したWebアプリケーション保護]"

#. type: Plain text
#: upstream/_guides/security-overview-concept.adoc:96
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC bearer authentication]"
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDCベアラー認証でサービスアプリケーションを保護]"

#~ msgid "Before you start building security into your Quarkus applications, review the overview information to learn about the Quarkus Security architecture and the different authentication and authorization mechanisms that Quarkus supports."
#~ msgstr "Quarkusアプリケーションにセキュリティを組み込む前に、概要情報を確認し、Quarkusのセキュリティアーキテクチャと、Quarkusがサポートするさまざまな認証および認可メカニズムについて学んでください。"

#~ msgid "To get started with security in Quarkus, we recommend that you first combine the Quarkus built-in xref:security-basic-authentication-concept.adoc[Basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  Complete the steps in the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication] tutorial.  After you have successfully secured your Quarkus application with basic HTTP authentication, you can increase the security further by adding more advanced authentication mechanisms, for example, OpenID Connect (OIDC) authentication."
#~ msgstr "Quarkusでセキュリティを始めるには、まず、Quarkusに組み込まれている xref:security-basic-authentication-concept.adoc[Basic HTTP認証] とJPA アイデンティティプロバイダーを組み合わせて、ロールベースのアクセス制御（RBAC）を有効にすることをお勧めします。チュートリアルの link:security-basic-authentication-tutorial.html[QuarkusアプリケーションのBasic認証による保護] のステップを完了してください。QuarkusアプリケーションのBasic HTTP認証による保護が出来たら、OpenID Connect（OIDC）認証など、より高度な認証メカニズムを追加して、セキュリティをさらに高めることができます。"

#~ msgid "Security architecture"
#~ msgstr "セキュリティ・アーキテクチャ"

#~ msgid "The `HttpAuthenticationMechanism` interface is the main entry mechanism for securing HTTP applications in Quarkus."
#~ msgstr "`HttpAuthenticationMechanism` インターフェースは、QuarkusでHTTPアプリケーションを保護するための主要なエントリメカニズムです。"

#~ msgid "Quarkus Security uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates them to `IdentityProvider` to convert the credentials to `SecurityIdentity`.  For example, the credentials can come from the `Authorization` header, client HTTPS certificates, or cookies."
#~ msgstr "Quarkus Securityは、 `HttpAuthenticationMechanism` を使用してHTTPリクエストから認証クレデンシャルを抽出し、 `IdentityProvider` に委任して、認証クレデンシャルを `SecurityIdentity` に変換します。たとえば、クレデンシャルは、 `Authorization` ヘッダー、クライアントの HTTPS 証明書、または Cookie から取得することができます。"

#~ msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity`, which has the username, roles, original authentication credentials, and other attributes."
#~ msgstr "`IdentityProvider` は、認証クレデンシャルを検証し、ユーザー名、ロール、元の認証クレデンシャル、およびその他の属性を持つ `SecurityIdentity` にマップします。"

#~ msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
#~ msgstr "認証済みリソースごとに、 `SecurityIdentity`  インスタンスを注入して、認証済みの ID 情報を取得することができます。"

#~ msgid "In other contexts, it is possible to have other parallel representations of the same information or parts of it, for example, `SecurityContext` for JAX-RS or `JsonWebToken` for JSON Web Tokens (JWT)."
#~ msgstr "他の文脈では、例えばJAX-RSの `SecurityContext` 、JSON Web Tokens（JWT）の `JsonWebToken` など、同じ情報またはその一部を他の並列表現にすることが可能です。"

#~ msgid "Authentication mechanisms"
#~ msgstr "認証メカニズム"

#~ msgid "Quarkus supports multiple authentication mechanisms"
#~ msgstr "Quarkusは複数の認証メカニズムをサポートしています。"

#~ msgid "Basic and Form HTTP authentication"
#~ msgstr "HTTPのBasic認証とフォームHTTP認証"

#~ msgid "xref:security-basic-authentication-concept.adoc[Basic HTTP Authentication] and xref:security-built-in-authentication-support-concept.adoc#form-auth[Form HTTP authentication] are the core authentication mechanisms supported in Quarkus."
#~ msgstr "xref:security-basic-authentication-concept.adoc[Basic HTTP認証] と xref:security-built-in-authentication-support-concept.adoc#form-auth[Form HTTP認証] は、Quarkusでサポートされているコアな認証メカニズムです。"

#~ msgid "WebAuthn authentication"
#~ msgstr "WebAuthn認証"

#~ msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
#~ msgstr "https://webauthn.guide/[WebAuthn] は、パスワードに代わる認証メカニズムです。新しいユーザーを登録したり、ログインしたりするサービスを書くときに、パスワードを要求する代わりに、パスワードを置き換えるWebAuthnを使用することができます。詳しくは、 xref:security-webauthn.adoc[WebAuthn認証メカニズムを使用したQuarkusアプリケーションの保護] を参照してください。"

#~ msgid "Mutual TLS (mTLS) authentication"
#~ msgstr "Mutual TLS（mTLS）認証"

#~ msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.  For more information, see xref:security-built-in-authentication-support-concept.adoc#mutual-tls[mutual TLS authentication]."
#~ msgstr "Quarkusは相互TLS（mTLS）認証を提供するので、X.509証明書に基づいてユーザーを認証することができます。詳細については、 link:security-built-in-authentication-support-concept.html#mutual-tls[相互TLS認証] を参照してください。"

#~ msgid "OpenID Connect authentication"
#~ msgstr "OpenID Connect認証"

#~ msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
#~ msgstr "OpenID Connect（OIDC）は、OAuth 2.0プロトコルの上で動作するIDレイヤーです。OIDCは、クライアントアプリケーションが、OIDCプロバイダーによって実行された認証に基づいてユーザーの身元を確認し、そのユーザーに関する基本的な情報を取得することを可能にします。"

#~ msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
#~ msgstr "Quarkus `quarkus-oidc` エクステンションは、ベアラートークンおよび認可コードフロー認証メカニズムをサポートする、リアクティブ、相互運用可能な、マルチテナント対応のOIDCアダプターを提供します。ベアラートークンメカニズムは、HTTP Authorizationヘッダーからトークンを抽出します。認可コードフローメカニズムは、ユーザーをOIDCプロバイダーにリダイレクトし、ユーザーのIDを認証します。ユーザーがQuarkusにリダイレクトされた後、このメカニズムは、ID、アクセス、およびリフレッシュトークンに対して付与されたコードを交換することで認証プロセスを完了させます。"

#~ msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
#~ msgstr "リフレッシュ可能なJSON Web Key（JWK）セットを使用してIDおよびアクセスJWTトークンを検証するか、リモートでイントロスペクトすることができます。ただし、不透明な（バイナリ）トークンは、リモートでイントロスペクトすることしかできません。"

#~ msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
#~ msgstr "Quarkus OIDCエクステンションを使用することで、ベアラートークンと認可コードフローの両方のメカニズムで link:#smallrye-jwt[SmallRye JWT] を使用して、JWTトークンをMicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現できます。"

#~ msgid "Additional Quarkus resources for OIDC authentication"
#~ msgstr "OIDC認証のための追加のQuarkusリソース"

#~ msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
#~ msgstr "Quarkusアプリケーションの保護のために使用できるOIDC認証および認可方法の詳細については、以下の詳細なリソースを参照してください:"

#~ msgid "OIDC topic"
#~ msgstr "OIDCトピック"

#~ msgid "Quarkus information resource"
#~ msgstr "Quarkusの情報リソース"

#~ msgid "Bearer Token authentication mechanis"
#~ msgstr "ベアラートークン認証の仕組"

#~ msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to protect service applications using Bearer Token authorization]"
#~ msgstr "xref:security-openid-connect.adoc[OpenID Connect (OIDC) とベアラートークン認可を使用したサービスアプリケーションの保護]"

#~ msgid "Authorization Code Flow authentication mechanis"
#~ msgstr "認可コードフロー認証の仕組"

#~ msgid "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
#~ msgstr "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC)認可コードフローメカニズム]"

#~ msgid "Multiple tenants that can support Bearer Token or Authorization Code Flow mechanism"
#~ msgstr "ベアラートークンや認可コードフローメカニズムに対応できるマルチテナント"

#~ msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
#~ msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC)マルチテナントの使用]"

#~ msgid "Using Keycloak to centralize authorization"
#~ msgstr "Keycloakを使用した認可の一元化"

#~ msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
#~ msgstr "xref:security-keycloak-authorization.adoc[OpenID Connect (OIDC)とKeycloakを使用して認可を一元化]"

#~ msgid "Configuring Keycloak programmatically"
#~ msgstr "Keycloakのプログラムによる設定"

#~ msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
#~ msgstr "xref:security-keycloak-admin-client.adoc[Keycloak admin クライアントの使用]"

#~ msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
#~ msgstr "Quarkus OIDCエクステンションを実行時に有効にする必要がある場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` 、システムプロパティを使用して実行時に再有効化します。マルチテナントOIDC展開における個々のテナント構成の管理に関する詳細は、『 link:security-openid-connect-multitenancy.html#disable-tenant[Using OpenID Connect（OIDC）』マルチテナンシーガイドの] 「 _テナント構成の無効 _化」のセクションを参照してください。"

#~ msgid "OpenID Connect client and filters"
#~ msgstr "OpenID Connectクライアントとフィルター"

#~ msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
#~ msgstr "`quarkus-oidc-client` エクステンションは、以下のトークングラントをサポートする OpenID Connect および OAuth2 プロバイダからアクセストークンを取得し、リフレッシュするための `OidcClient` を提供します:"

#~ msgid "`client-credentials`"
#~ msgstr "`client-credentials`"

#~ msgid "`password`"
#~ msgstr "`password`"

#~ msgid "`refresh_token`"
#~ msgstr "`refresh_token`"

#~ msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは、 `quarkus-oidc-client` エクステンションを必要とし、JAX-RS `OidcClientRequestFilter` を提供します。これは、 `OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダの `Bearer` スキーム値として設定するものです。このフィルタは、現在のQuarkusエンドポイントに注入されるMP RestClient実装に登録できますが、このサービスエンドポイントの認証要件には関係しません。たとえば、公開エンドポイントにすることも、mTLSで保護することもできます。"

#~ msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
#~ msgstr "このシナリオでは、Quarkus OpenID Connectアダプターを使用してQuarkusエンドポイントを保護する必要はありません。"

#~ msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
#~ msgstr "`quarkus-oidc-client-filter` エクステンションは、 `quarkus-oidc-client` エクステンションを必要とし、JAX-RS `OidcClientRequestFilter` を提供します。これは、OpenID Connect ベアラーまたは 認可コードフローアクセス トークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定します。このフィルターは、現在の Quarkus エンドポイントに挿入された MP RestClient 実装に登録できます。これは、Quarkus OpenID Connect アダプターを使用して保護する必要があります。 このフィルターを使用して、アクセス トークンを下流のサービスに伝搬できます。"

#~ msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
#~ msgstr "詳しくは、 xref:security-openid-connect-client.adoc[OpenID Connectクライアントとトークン伝搬クイックスタート] 、 xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) とOAuth2クライアントとフィルターのリファレンス] ガイドをご覧ください。"

#~ msgid "SmallRye JWT authentication"
#~ msgstr "SmallRye JWT 認証"

#~ msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
#~ msgstr "`quarkus-smallrye-jwt` エクステンションは、MicroProfile JSON Web Token (JWT) 1.2.1 の実装と、署名および暗号化された `JWT` トークンを検証する複数のオプションを提供し、それらを `org.eclipse.microprofile.jwt.JsonWebToken` として表します。"

#~ msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either PEM keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
#~ msgstr "`quarkus-smallrye-jwt` は、 `quarkus-oidc` ベアラートークン認証メカニズムの代替となるもので、PEMキーまたはリフレッシュ可能な `JWK` キーセットを使用して、 `JWT` トークンだけを検証します。 `quarkus-smallrye-jwt` は、JWT生成APIも提供しており、これを使用して、 `signed` あるいは `inner-signed` 、 `encrypted` `JWT` トークンを簡単に作成できます。"

#~ msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
#~ msgstr "詳細については、xref:security-jwt.adoc[SmallRye JWTロールベースアクセスコントロールの使用] を参照してください。"

#~ msgid "OAuth2 authentication"
#~ msgstr "OAuth2 認証"

#~ msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
#~ msgstr "`quarkus-elytron-security-oauth2` は、 `quarkus-oidc` Bearer Token認証メカニズムの代替手段を提供します。 `quarkus-elytron-security-oauth2` は `Elytron` をベースにしており、主にリモートで不透明なトークンをイントロスペクトすることを目的としています。詳細については、link:security-oauth2.html[OAuth2の使用] を参照してください。"

#~ msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
#~ msgstr "OpenID Connect、SmallRye JWT、OAuth2認証メカニズムからの選択"

#~ msgid "Use the following information to help you to decide which authentication mechanism to use to secure your Quarkus applications:"
#~ msgstr "Quarkusアプリケーションを保護するためにどの認証メカニズムを使用するかを決定する際に、次の情報を使用してください:"

#~ msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
#~ msgstr "`quarkus-oidc` には、KeycloakなどのOpenID Connectプロバイダが必要で、Bearerトークンの検証や認可コードフローによるエンドユーザーの認証に使用することができます。どちらの場合も、 `quarkus-oidc` は、指定されたOpenID Connectプロバイダへの接続が必要です。"

#~ msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
#~ msgstr "ユーザー認証に認可コードフローが必要な場合や、複数のテナントに対応する必要がある場合は、 `quarkus-oidc` を使用してください。 `quarkus-oidc` では、認可コードフローとベアラーアクセストークンの両方を使用して、ユーザー情報を要求することもできます。"

#~ msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
#~ msgstr "ベアラートークンを検証する必要がある場合は、 `quarkus-oidc` , `quarkus-smallrye-jwt` , または `quarkus-elytron-security-oauth2` を使用してください。"

#~ msgid "If your Bearer tokens are in a JWT format, you can use either of the three extensions. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
#~ msgstr "ベアラートークンがJWT形式の場合、3つのエクステンションのいずれかを使用することができます。 `quarkus-oidc` と `quarkus-smallrye-jwt` は、OpenID Connect プロバイダがキーをローテーションする際に JsonWebKey (JWK) セットを更新することをサポートしています。したがって、リモートトークンイントロスペクションを避ける必要がある場合やプロバイダがサポートしていない場合は、JWTトークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用します。"

#~ msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
#~ msgstr "JWTトークンをリモートでイントロスペクションする必要がある場合、 `quarkus-oidc` または `quarkus-elytron-security-oauth2` のいずれかを使用することができます。これらは、リモートイントロスペクションを使用して不透明またはバイナリートークンの検証をサポートしているからです。 `quarkus-smallrye-jwt` は、不透明または JWT トークンの両方のリモートイントロスペクションをサポートしていませんが、代わりに、通常は OpenID Connect プロバイダから取得されるローカルに利用可能な鍵を使用します。"

#~ msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the injecting of JWT and opaque tokens into the endpoint code.  Injected JWT tokens provide more information about the user. All extensions can have the tokens injected as `Principal`."
#~ msgstr "`quarkus-oidc` と `quarkus-smallrye-jwt` は、エンドポイントのコードに JWT と opaque トークンを注入することをサポートしています。注入されたJWTトークンは、ユーザーに関するより多くの情報を提供します。すべてのエクステンションは、`Principal` として注入されたトークンを持つことができます。"

#~ msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
#~ msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くの鍵フォーマットをサポートしています。 `quarkus-oidc` は JWK セットの一部である JWK 形式の鍵のみを使用するのに対し、 `quarkus-smallrye-jwt` は PEM 鍵をサポートしています。"

#~ msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
#~ msgstr "`quarkus-smallrye-jwt` は、ローカルで署名付きトークン、内部署名付き暗号化トークン、および暗号化トークンを扱います。`quarkus-oidc` や `quarkus-elytron-security-oauth2` もこのようなトークンも検証できますが、不透明なトークンとして扱い、リモート・イントロスペクションによって検証します。"

#~ msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
#~ msgstr "不透明トークンやJWTトークンのリモートイントロスペクションのための軽量なライブラリが必要な場合は、 `quarkus-elytron-security-oauth2` を使用してください。"

#~ msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
#~ msgstr "不透明トークンかJWTトークンのどちらを使うかは、アーキテクチャ上の考慮事項によって決定されます。不透明トークンは、JWTトークンよりもはるかに短い傾向がありますが、トークンに関連する状態の大部分をプロバイダ・データベースに保持することが必要です。不透明トークンは、事実上データベース・ポインタです。JWTトークンは不透明トークンよりもかなり長いですが、プロバイダはトークン関連状態のほとんどをトークンクレームとして保存し、署名または暗号化することにより、クライアントに保存を事実上委任しています。"

#~ msgid "The following table provides a summary of the options for each authentication mechanism:"
#~ msgstr "各認証メカニズムのオプションの概要は、次の表のとおりです:"

#~ msgid "quarkus-oidc"
#~ msgstr "quarkus-oidc"

#~ msgid "quarkus-smallrye-jwt"
#~ msgstr "quarkus-smallrye-jwt"

#~ msgid "quarkus-elytron-security-oauth2"
#~ msgstr "quarkus-elytron-security-oauth2"

#~ msgid "Requires Bearer JWT verification"
#~ msgstr "ベアラーJWTの検証が必要"

#~ msgid "Local verification or introspection"
#~ msgstr "ローカル検証もしくはイントロスペクション"

#~ msgid "Local verification"
#~ msgstr "ローカル検証"

#~ msgid "Introspection"
#~ msgstr "イントロスペクション"

#~ msgid "Requires Bearer opaque token verification"
#~ msgstr "ベアラー不透明Tokenの検証が必要"

#~ msgid "No"
#~ msgstr "No"

#~ msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
#~ msgstr "JWTトークンを検証するための `JsonWebKey` セットのリフレッシュ"

#~ msgid "Yes"
#~ msgstr "Yes"

#~ msgid "Represent token as `Principal`"
#~ msgstr "トークンを `Principal` として表現"

#~ msgid "Inject JWT as MP JSON Web Token (JWT)"
#~ msgstr "MP JSON Web Token（JWT）としてJWTを注入"

#~ msgid "Authorization Code Flow"
#~ msgstr "認可コードフロー"

#~ msgid "Multi-tenancy"
#~ msgstr "マルチテナンシー"

#~ msgid "User info support"
#~ msgstr "User info サポート"

#~ msgid "PEM key format support"
#~ msgstr "PEMキーフォーマットサポート"

#~ msgid "SecretKey support"
#~ msgstr "SecretKeyサポート"

#~ msgid "In JSON Web Key (JWK) format"
#~ msgstr "JSON Web Key（JWK）フォーマットで"

#~ msgid "Inner-signed and encrypted or encrypted tokens"
#~ msgstr "内部署名付き暗号化トークン、または暗号化トークン"

#~ msgid "Custom token verification"
#~ msgstr "カスタムトークン検証"

#~ msgid "With injected JWT parser"
#~ msgstr "注入されたJWTパーサーで"

#~ msgid "Accept JWT as a cookie"
#~ msgstr "JWTをCookieとして受入"

#~ msgid "Identity providers"
#~ msgstr "アイデンティティ・プロバイダー"

#~ msgid "The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
#~ msgstr "JPA `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求の確認と認可を行い、Quarkus アプリケーションを保護します。"

#~ msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to a `SecurityIdentity` instance."
#~ msgstr "`IdentityProvider` は、 `HttpAuthenticationMechanism` から提供された認証クレデンシャルを、 `SecurityIdentity` インスタンスに変換します。"

#~ msgid "Some extensions, for example, `OIDC`, `OAuth2`, and `SmallRye JWT` have inline `IdentityProvider` implementations specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to a `SecurityIdentity` instance."
#~ msgstr "一部のエクステンション、たとえば、 `OIDC` 、 `OAuth2` 、 `SmallRye JWT` は、サポートされる認証フローに固有のインライン `IdentityProvider` 実装を持ちます。たとえば、 `quarkus-oidc` は、トークンを `SecurityIdentity` インスタンスに変換するために、独自の `IdentityProvider` を使用します。"

#~ msgid "If you use `Basic` or `Form` HTTP-based authentication then you must add an `IdentityProvider` instance that can convert a username and password to a `SecurityIdentity` instance."
#~ msgstr "`Basic` または `Form` HTTPベース認証を使用する場合、ユーザー名とパスワードを `SecurityIdentity` インスタンスに変換できる `IdentityProvider` インスタンスを追加する必要があります。"

#~ msgid "For more information about `Basic` or `Form` HTTP-based authentication, see the following resources:"
#~ msgstr "`Basic` または `Form` HTTPベース認証の詳細については、次のリソースを参照してください:"

#~ msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication]"
#~ msgstr "xref:security-basic-authentication-tutorial.adoc[QuarkusアプリケーションをBasic認証で保護]"

#~ msgid "xref:security-jdbc.adoc[Using security with JDBC]"
#~ msgstr "xref:security-jdbc.adoc[セキュリティをJDBCと一緒に使用]"

#~ msgid "xref:security-ldap.adoc[Using security with an LDAP realm]"
#~ msgstr "xref:security-ldap.adoc[セキュリティをLDAPレルムと一緒に使用]"

#~ msgid "Authorization"
#~ msgstr "認可"

#~ msgid "Quarkus also supports role-based access control (RBAC).  For more information about RBAC and other authorization options in Quarkus, see xref:security-authorize-web-endpoints-reference.adoc[Security authorization]."
#~ msgstr "Quarkusは、ロールベースのアクセスコントロール（RBAC）もサポートしています。RBACとQuarkusのその他の認可オプションの詳細については、 xref:security-authorize-web-endpoints-reference.adoc[セキュリティ認可] を参照してください。"

#~ msgid "Quarkus Security customization"
#~ msgstr "Quarkus Securityのカスタマイズ"

#~ msgid "Quarkus Security is highly customizable. You can customize the following core security components of Quarkus:"
#~ msgstr "Quarkus Securityは、高度にカスタマイズ可能です。Quarkusの以下のコアセキュリティコンポーネントをカスタマイズすることができます:"

#~ msgid "`HttpAuthenticationMechanism`"
#~ msgstr "`HttpAuthenticationMechanism`"

#~ msgid "`IdentityProvider`"
#~ msgstr "`IdentityProvider`"

#~ msgid "`SecurityidentityAugmentor`"
#~ msgstr "`SecurityidentityAugmentor`"

#~ msgid "For more information about customizing Quarkus Security including reactive security, and how to register a security provider, see xref:security-customization.adoc[Security customization]."
#~ msgstr "リアクティブセキュリティを含むQuarkus Securityのカスタマイズ、およびセキュリティプロバイダーの登録方法の詳細については、 xref:security-customization.adoc[セキュリティのカスタマイズ] を参照してください。"

#~ msgid "Combining authentication mechanisms"
#~ msgstr "認証メカニズムの組み合わせ"

#~ msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
#~ msgstr "ユーザークレデンシャルが異なるソースから提供される場合、認証メカニズムを組み合わせることができます。たとえば、組込の `Basic` と `quarkus-oidc` `Bearer` の認証メカニズムを組み合わせることができます。"

#~ msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
#~ msgstr "`quarkus-oidc` `Bearer` と `smallrye-jwt` の認証メカニズムは、どちらも HTTP `Authorization Bearer` スキームから抽出されたトークンを検証しようとするため、組み合わせることはできません。"

#~ msgid "Path-specific authentication mechanisms"
#~ msgstr "パス固有認証メカニズム"

#~ msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
#~ msgstr "次の設定例は、あるリクエストパスに対して、選択可能な単一の認証メカニズムを強制する方法を示しています:"

#~ msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
#~ msgstr "`auth-mechanism` プロパティの値が、 `HttpAuthenticationMechanism` がサポートする認証スキーム（例えば、 `basic` 、 `bearer` 、 `form` ）と一致しているようにして下さい。"

#~ msgid "Proactive authentication"
#~ msgstr "プロアクティブ認証"

#~ msgid "By default, Quarkus does proactive authentication, which means that all incoming requests with credentials are authenticated regardless of whether the target page requires authentication.  For more information, see xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[Proactive authentication]."
#~ msgstr "デフォルトでは、Quarkusはプロアクティブ認証を行います。つまり、ターゲットページが認証を必要としているかどうかにかかわらず、クレデンシャルを持つすべての着信リクエストが認証されます。詳細については、 xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[プロアクティブ認証] を参照してください。"

#~ msgid "Secure connections with SSL/TLS"
#~ msgstr "SSL/TLSによるセキュアな接続"

#~ msgid "For more information about how Quarkus supports secure connections with SSL/TLS, see the xref:http-reference.adoc#ssl[HTTP reference] information."
#~ msgstr "QuarkusがSSL/TLSによる安全な接続をサポートする方法の詳細については、 xref:http-reference.adoc#ssl[HTTPリファレンス] 情報を参照してください。"

#~ msgid "You can add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint.  For more information, see xref:http-reference.adoc#same-site-cookie[SameSite cookies]."
#~ msgstr "Quarkusのエンドポイントが設定するCookieのいずれにも、 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] Cookieプロパティを追加することができます。詳細については、 xref:http-reference.adoc#same-site-cookie[SameSite cookies] を参照してください。"

#~ msgid "Secret engines"
#~ msgstr "シークレットエンジン"

#~ msgid "If you're using the REST Data with Panache extension to auto-generate your resources, you can still use the Security annotations within the package `javax.annotation.security`.  For more information, see xref:rest-data-panache.adoc#securing-endpoints[Securing auto-generated resources]."
#~ msgstr "REST Data with Panache エクステンションを使用してリソースを自動生成している場合でも、パッケージ `javax.annotation.security` 内の Security アノテーションを使用することができます。詳しくは、 link:rest-data-panache.html#securing-endpoints[自動生成されたリソースの保護] を参照してください。"

#~ msgid "National Vulnerability Database"
#~ msgstr "National Vulnerability Database"

#~ msgid "Most of the Quarkus tags are registered in the US link:https://nvd.nist.gov[National Vulnerability Database] (NVD) in Common Platform Enumeration (CPE) name format.  To view the registered Quarkus CPE names, use link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query]."
#~ msgstr "Quarkusのタグのほとんどは、米国の link:https://nvd.nist.gov[National Vulnerability Database] （NVD）にCommon Platform Enumeration（CPE）名フォーマットで登録されています。登録されたQuarkusのCPE名を表示するには、 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[この検索クエリ] を使用します。"

#~ msgid "If the NVE database flags a CVE against a Quarkus tag, a link that provides more details about the CVE is added to the given CPE name entry."
#~ msgstr "NVEデータベースがQuarkusタグに対してCVEフラグを立てた場合、CVEの詳細を提供するリンクが所定のCPE名エントリに追加されます。"

#~ msgid "The NVD CPE team updates the list regularly, but if you encounter a false positive, report the details by creating an issue in the link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] repository."
#~ msgstr "NVD CPEチームは定期的にリストを更新していますが、誤検出が発生した場合は、 link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] リポジトリにissueを作成して詳細を報告してください。"

#~ msgid "You can detect the vulnerabilities at the application build time with an NVD feed by using the Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency check plugin]."
#~ msgstr "Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency checkプラグイン] を使用することで、NVDフィードを使用してアプリケーションビルド時に脆弱性を検出することができます。"

#~ msgid "To add the OWASP Dependency check plugin to your Quarkus Maven project, add the following XML configuration to the `pom.xml` file:"
#~ msgstr "Quarkus MavenプロジェクトにOWASP Dependency checkプラグインを追加するには、 `pom.xml` ファイルに次のXML設定を追加します:"

#~ msgid "Set the `owasp-dependency-check-plugin.version` value to `7.4.4` or later."
#~ msgstr "`owasp-dependency-check-plugin.version` の値を `7.4.4` 以降に設定してください。"

#~ msgid "Next, configure the plugin as follows:"
#~ msgstr "次に、以下のようにプラグインを設定します:"

#~ msgid "To detect less severe issues, adjust the value of `failBuildOnCVSS` to suppress the false positives, as demonstrated in the following code sample:"
#~ msgstr "比較的深刻でない問題を検出するには、次のコードサンプルで示すように、 `failBuildOnCVSS` の値を調整して誤検出を抑制してください:"

#~ msgid "Ensure that you review and update the suppression list regularly to ensure that the results are up to date.  You can optionally apply a time limit to individual suppressions by adding an expiry attribute, as outlined in the following example:"
#~ msgstr "抑制リストを定期的に見直し、更新して、結果が最新であるようにして下さい。次の例に示すように、expiry属性を追加することで、個々の抑制に時間制限を適用することも可能です:"

#~ msgid "`<suppress until=\"2022-01-01Z\">...</suppress>` You can adjust the expiry date if you need to."
#~ msgstr "`<suppress until=\"2022-01-01Z\">…​</suppress>` 必要であれば有効期限を調整することもできます。"

#~ msgid "When testing Quarkus security, ensure that your `IdentityProvider` is already set with usernames, passwords, and roles in `application.properties`.  For more information about testing Quarkus Security, see xref:security-testing.adoc#configuring-user-information[Configuring user information]."
#~ msgstr "Quarkusのセキュリティをテストする場合、`application.properties` で `IdentityProvider` にユーザー名、パスワード、ロールがすでに設定されていることを確認してください。Quarkus Securityのテストの詳細については、 link:security-testing.html#configuring-user-information[ユーザー情報の設定] を参照してください。"
