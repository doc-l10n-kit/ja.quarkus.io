msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _guides/security-openid-connect-client.adoc
msgid "OpenID Connect client and token propagation quickstart"
msgstr "OpenID Connectクライアントとトークン伝搬クイックスタート"

#: _guides/security-openid-connect-client.adoc
msgid "Learn how to use OpenID Connect (OIDC) and OAuth2 clients with filters to get, refresh, and propagate access tokens in your applications."
msgstr "OpenID Connect (OIDC) と OAuth2 クライアントにフィルタを使用して、アプリケーションでアクセストークンを取得、更新、伝播する方法を学びます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "For more information about `OIDC Client` and `Token Propagation` support in Quarkus, see the xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference guide]."
msgstr "Quarkusの `OIDC Client` 、 `Token Propagation` サポートの詳細については、 xref:security-openid-connect-client-reference.adoc[OpenID Connect（OIDC）およびOAuth2クライアントとフィルターのリファレンスガイドを] 参照してください。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To protect your applications by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "ベアラートークン認証を使用してアプリケーションを保護するには、 xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) ベアラートークン認証] ガイドを参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In this example, an application is built with two Jakarta REST resources, `FrontendResource` and `ProtectedResource`.\n"
"Here, `FrontendResource` uses one of three methods to propagate access tokens to `ProtectedResource`:"
msgstr "この例では、 `FrontendResource` と `ProtectedResource` という 2 つの Jakarta REST リソースを使用してアプリケーションを構築しています。 `FrontendResource` は、3 つのメソッドのいずれかを使用して、 `ProtectedResource` にアクセストークンを伝搬します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using an OIDC client filter before propagating it."
msgstr "トークンを伝搬する前にOIDCクライアントフィルタを使用してトークンを取得することができます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using a programmatically created OIDC client and propagate it by passing it to a REST client method as an HTTP `Authorization` header value."
msgstr "プログラムで作成した OIDC クライアントを使用してトークンを取得し、HTTP `Authorization` ヘッダー値として REST クライアントメソッドに渡すことで、トークンを伝播することができます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can use an OIDC token propagation filter to propagate the incoming access token."
msgstr "OIDC トークン伝搬フィルタを使用して、受信アクセストークンを伝搬することができます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` has eight endpoints:"
msgstr "`FrontendResource` には8つのエンドポイントがあります："

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token-header-param`"
msgstr "`/frontend/user-name-with-oidc-client-token-header-param`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token-header-param`"
msgstr "`/frontend/admin-name-with-oidc-client-token-header-param`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/user-name-with-oidc-client-token-header-param-blocking`"
msgstr "`/frontend/user-name-with-oidc-client-token-header-param-blocking`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`/frontend/admin-name-with-oidc-client-token-header-param-blocking`"
msgstr "`/frontend/admin-name-with-oidc-client-token-header-param-blocking`"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"When either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` endpoint is called, `FrontendResource` uses a REST client with an OIDC client filter to get and propagate an access token to `ProtectedResource` .\n"
"When either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` endpoint is called, `FrontendResource` uses a programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it to a REST client method as an HTTP `Authorization` header value.\n"
"When either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` endpoint is called, `FrontendResource` uses a REST client with `OIDC Token Propagation Filter` to propagate the current incoming access token to `ProtectedResource`."
msgstr "`/frontend/user-name-with-oidc-client-token` または `/frontend/admin-name-with-oidc-client-token` のいずれかのエンドポイントが呼び出されると、 `FrontendResource` は OIDC クライアントフィルタを持つ REST クライアントを使用してアクセストークンを取得し、 `ProtectedResource` に伝搬します。 `/frontend/user-name-with-oidc-client-token-header-param` または `/frontend/admin-name-with-oidc-client-token-header-param` のいずれかのエンドポイントが呼び出されると、 `FrontendResource` はプログラムで作成された OIDC クライアントを使用し、HTTP `Authorization` ヘッダー値として REST クライアントメソッドに渡すことで、アクセストークンを取得して `ProtectedResource` に伝達します。 `/frontend/user-name-with-propagated-token` または `/frontend/admin-name-with-propagated-token` のいずれかのエンドポイントが呼び出されると、 `FrontendResource` は `OIDC Token Propagation Filter` で REST クライアントを使用し、現在受信しているアクセストークンを `ProtectedResource` に伝播します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`ProtectedResource` has two endpoints:"
msgstr "`ProtectedResource` には2つのエンドポイントがあります："

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Both endpoints return the username extracted from the incoming access token, which was propagated to `ProtectedResource` from `FrontendResource`.\n"
"The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role, and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "どちらのエンドポイントも、入力されたアクセストークンから抽出されたユーザー名を返します。これは、 `FrontendResource` から `ProtectedResource` に伝搬されたものです。これらのエンドポイントの唯一の違いは、 `/protected/user-name` を呼び出すことは、現在のアクセストークンが `user` の役割を持っている場合にのみ許可され、 `/protected/admin-name` を呼び出すことは、現在のアクセストークンが `admin` の役割を持っている場合にのみ許可されるということです。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする: `git clone {quickstarts-clone-url}` または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The solution is in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解決策は `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリ] にあります。"

#: _guides/security-openid-connect-client.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"First, you need a new project.\n"
"Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新しいプロジェクトを作成してください："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It generates a Maven project, importing the `oidc`, `rest-client-oidc-filter`, `rest-client-oidc-token-propagation`, and `rest` extensions."
msgstr "Maven プロジェクトを生成し、 `oidc` 、 `rest-client-oidc-filter` 、 `rest-client-oidc-token-propagation` 、 `rest` 拡張機能をインポートします。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It adds the following extensions to your build file:"
msgstr "ビルドファイルに以下の拡張子を追加します："

#. type: Block title
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Start by implementing `ProtectedResource`:"
msgstr "`ProtectedResource` を導入することから始めましょう："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`ProtectedResource` returns a name from both `userName()` and `adminName()` methods.\n"
"The name is extracted from the current `JsonWebToken`."
msgstr "`ProtectedResource` は、 と の両方のメソッドから名前を返します。名前は現在の から抽出されます。 `userName()` `adminName()` `JsonWebToken`"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, add the following REST clients:"
msgstr "次に、以下のRESTクライアントを追加します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithOidcClientFilter`, which uses an OIDC client filter provided by the `quarkus-rest-client-oidc-filter` extension to get and propagate an access token."
msgstr "`RestClientWithOidcClientFilter` これは、 `quarkus-rest-client-oidc-filter` 拡張機能によって提供される OIDC クライアントフィルターを使用して、アクセストークンを取得し、伝播します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenHeaderParam`, which accepts a token already acquired by the programmatically created OidcClient as an HTTP `Authorization` header value."
msgstr "`RestClientWithTokenHeaderParam` これは、プログラムで作成された OidcClient によって既に取得されたトークンを HTTP `Authorization` ヘッダ値として受け取ります。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenPropagationFilter`, which uses an OIDC token propagation filter provided by the `quarkus-rest-client-oidc-token-propagation` extension to get and propagate an access token."
msgstr "`RestClientWithTokenPropagationFilter` これは、 `quarkus-rest-client-oidc-token-propagation` 拡張が提供する OIDC トークン伝搬フィルタを使用して、アクセストークンを取得し伝搬します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithOidcClientFilter` REST client:"
msgstr "`RestClientWithOidcClientFilter` RESTクライアントを追加します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Register an OIDC client filter with the REST client to get and propagate the tokens."
msgstr "REST クライアントに OIDC クライアント・フィルタを登録し、トークンを取得して伝播します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithTokenHeaderParam` REST client:"
msgstr "`RestClientWithTokenHeaderParam` RESTクライアントを追加します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`RestClientWithTokenHeaderParam` REST client expects that the tokens will be passed to it as HTTP `Authorization` header values."
msgstr "`RestClientWithTokenHeaderParam` REST クライアントは、トークンが HTTP ヘッダ値として渡されることを期待しています。 `Authorization` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `RestClientWithTokenPropagationFilter` REST client:"
msgstr "`RestClientWithTokenPropagationFilter` RESTクライアントを追加します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Register an OIDC token propagation filter with the REST client to propagate the incoming already-existing tokens."
msgstr "OIDC トークン伝搬フィルタを REST クライアントに登録し、受信した既存のトークンを伝搬します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Do not use the `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces in the same REST client because they can conflict, leading to issues.\n"
"For example, the OIDC client filter can override the token from the OIDC token propagation filter, or the propagation filter might not work correctly if it attempts to propagate a token when none is available, expecting the OIDC client filter to obtain a new token instead."
msgstr "同じ REST クライアントで `RestClientWithOidcClientFilter` と `RestClientWithTokenPropagationFilter` インタフェースを使用しないでください。例えば、OIDC クライアントフィルタが OIDC トークン伝搬フィルタからのトークンを上書きしたり、伝搬フィルタが利用可能なトークンがないときにトークンを伝搬しようとした場合、OIDC クライアントフィルタが代わりに新しいトークンを取得することを期待して伝搬フィルタが正しく動作しない可能性があります。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Also, add `OidcClientCreator` to create an OIDC client programmatically at startup. `OidcClientCreator` supports `RestClientWithTokenHeaderParam` REST client calls:"
msgstr "また、 `OidcClientCreator` を追加すると、起動時にプログラムで OIDC クライアントを作成できます。 `OidcClientCreator` は、 `RestClientWithTokenHeaderParam` REST クライアント呼び出しをサポートしています："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`OidcClients` can be used to retrieve the already initialized, named OIDC clients and create new OIDC clients on demand."
msgstr "`OidcClients` は、初期化済みの名前付きOIDCクライアントを取得し、必要に応じて新しいOIDCクライアントを作成するために使用できます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, finish creating the application by adding `FrontendResource`:"
msgstr "`FrontendResource` を追加してアプリケーションの作成を終了します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` uses the injected `RestClientWithOidcClientFilter` REST client with the OIDC client filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called."
msgstr "`FrontendResource` は、注入された REST クライアントを OIDC クライアントフィルタとともに使用して、 または のいずれかが呼び出されたときにアクセストークンを取得し、 に伝搬します。 `RestClientWithOidcClientFilter` `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` uses the injected `RestClientWithTokenPropagationFilter` REST client with the OIDC token propagation filter to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、注入された REST クライアントと OIDC トークン伝搬フィルタを使用して、 または のいずれかが呼び出されたときに、現在の着信アクセストークンを に伝搬します。 `RestClientWithTokenPropagationFilter` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `ProtectedResource` "

#: _guides/security-openid-connect-client.adoc
msgid "`FrontendResource` uses the programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it directly to the injected `RestClientWithTokenHeaderParam` REST client's method as an HTTP `Authorization` header value, when either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` is called."
msgstr ""

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Sometimes, one may have to acquire tokens in a blocking manner before propagating them with the REST client. This example shows how to acquire the tokens in such cases."
msgstr "REST クライアントでトークンを伝搬する前に、ブロック方式でトークンを取得しなければならないことがあります。この例では、このような場合にトークンを取得する方法を示します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.runtime.TokensHelper` is a useful tool when OIDC client is used directly, without the OIDC client filter. To use `TokensHelper`, pass OIDC Client to it to get the tokens and `TokensHelper` acquires the tokens and refreshes them if necessary in a thread-safe way."
msgstr "`io.quarkus.oidc.client.runtime.TokensHelper` は、OIDC クライアント・フィルタを使わずに OIDC クライアントを直接使用する場合に便利なツールです。 を使用するには、トークンを取得するために OIDC クライアントを渡します。 はスレッドセーフな方法でトークンを取得し、必要に応じてリフレッシュします。 `TokensHelper` `TokensHelper` "

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Finally, add a Jakarta REST `ExceptionMapper`:"
msgstr "最後に、Jakarta REST `ExceptionMapper` を追加します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role.\n"
"Without this mapper, `Quarkus REST (formerly RESTEasy Reactive)` would correctly convert the exceptions that escape from REST client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource`.\n"
"However, in the tests, it would not be possible to assert that `500` is caused by an authorization exception instead of some internal error."
msgstr "この例外マッパーは、トークンが期待される役割を持たないときに `ProtectedResource` が `403` を返すことをテスト中に検証するためだけに追加されています。このマッパーがなければ、 `Quarkus REST (formerly RESTEasy Reactive)` は REST クライアントの呼び出しからエスケープされた例外を `500` に正しく変換し、 `ProtectedResource` のような下流のリソースから情報が漏れるのを防ぎます。 しかし、テストでは、 `500` が内部エラーではなく認可例外によって引き起こされたものであることを主張することはできません。"

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Having prepared the code, you configure the application:"
msgstr "コードを準備したら、アプリケーションを設定します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"The preceding configuration references Keycloak, which is used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` by using a `password` grant.\n"
"Both REST clients point to `ProtectedResource`'s HTTP address."
msgstr "この設定はKeycloakを参照しています。このKeycloakは、 `ProtectedResource` が受信したアクセストークンを検証するために使用し、 `OidcClient` が `password` グラントを使用してユーザー `alice` のトークンを取得するために使用します。どちらのRESTクライアントも`ProtectedResource'のHTTPアドレスを指しています。"

#: _guides/security-openid-connect-client.adoc
msgid ""
"Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` launches a container for you when the application is run in dev or test modes.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Starting and configuring the Keycloak server"
msgstr "Keycloakサーバーの起動と設定"

#: _guides/security-openid-connect-client.adoc
msgid ""
"Do not start the Keycloak server when you run the application in dev or test modes; `Dev Services for Keycloak` launches a container.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section.\n"
"Ensure you put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath, in the `target/classes` directory.\n"
"This placement ensures that the file is automatically imported in dev mode.\n"
"However, if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], you do not need to add the realm file to the classpath because the build process has already done so."
msgstr ""

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
msgstr "Keycloakサーバーを起動するには、Dockerを使って以下のコマンドを実行するだけです："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Set `{keycloak.version}` to `25.0.0` or later."
msgstr "`{keycloak.version}` を `25.0.0` 以降に設定してください。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには link:http://localhost:8180[localhost:8180] でアクセスできます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"The password is `admin`."
msgstr "Keycloak管理コンソールにアクセスするには、 `admin` ユーザーでログインします。パスワードは `admin` です。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定] ファイルをインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいrealmを作成] する方法についてKeycloakのドキュメントを参照してください。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This `quarkus` realm file adds a `frontend` client, and `alice` and `admin` users.\n"
"`alice` has a `user` role.\n"
"`admin` has both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルには、 `frontend` クライアント、 `alice` および `admin` ユーザが追加されています。 `alice` には `user` ロールがあります。 `admin` には `user` および `admin` ロールがあります。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in dev mode"
msgstr "devモードでアプリケーションを実行"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] launches a Keycloak container and imports `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloakは] Keycloakコンテナを起動し、 `quarkus-realm.json` をインポートします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click a `Provider: Keycloak` link in the *OpenID Connect Dev UI* card."
msgstr "link:http://localhost:8080/q/dev-ui[q/dev-ui] で利用可能な xref:dev-ui.adoc[Dev UI] を開き、 *OpenID Connect Dev UI* カードの `Provider: Keycloak` リンクをクリックします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "When asked, log in to a `Single Page Application` provided by the OpenID Connect Dev UI:"
msgstr "と聞かれたら、OpenID Connect Dev UI が提供する `Single Page Application` にログインします："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as `alice`, with the password, `alice`.\n"
"This user has a `user` role."
msgstr "`alice` `alice` このユーザは `user` のロールを持ちます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/user-name-with-propagated-token`, which returns `200`."
msgstr "`200` を返す `/frontend/user-name-with-propagated-token` にアクセスします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `403`."
msgstr "`403` を返す `/frontend/admin-name-with-propagated-token` にアクセスします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log out and back in as `admin` with the password, `admin`.\n"
"This user has both `admin` and `user` roles."
msgstr "ログアウトし、パスワード「 `admin` 」で「 `admin` 」としてログインし直します。このユーザは「 `admin` 」と「 `user` 」の両方のロールを持ちます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `200`."
msgstr "`200` を返す `/frontend/admin-name-with-propagated-token` にアクセスします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You have tested that `FrontendResource` can propagate the access tokens from the OpenID Connect Dev UI."
msgstr "`FrontendResource` が OpenID Connect Dev UI からアクセストークンを伝搬できることをテストしました。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in JVM mode"
msgstr "JVMモードでのアプリケーションの実行"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "開発モードでアプリケーションを探索した後、標準のJavaアプリケーションとして実行することができます。"

#: _guides/security-openid-connect-client.adoc
msgid "First, compile it:"
msgstr "まず、コンパイルします:"

#: _guides/security-openid-connect-client.adoc
msgid "Then, run it:"
msgstr "そして、実行してみてください:"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in native mode"
msgstr "ネイティブ・モードでのアプリケーションの実行"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can compile this demo into native code; no modifications are required."
msgstr "このデモをネイティブ・コードにコンパイルすることができます。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary and optimized to run with minimal resources."
msgstr "これは、ランタイム・テクノロジーが生成されたバイナリに含まれており、最小限のリソースで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Compilation takes longer, so this step is turned off by default.\n"
"To build again, enable the `native` profile:"
msgstr "コンパイルには時間がかかるので、このステップはデフォルトではオフになっています。再度ビルドするには、 `native` プロファイルを有効にします："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After a little while, when the build finishes, you can run the native binary directly:"
msgstr "しばらくしてビルドが終了すると、ネイティブ・バイナリを直接実行できます："

#: _guides/security-openid-connect-client.adoc
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#: _guides/security-openid-connect-client.adoc
msgid "For more information about testing your application in dev mode, see the preceding <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns the `200` status code and the name `alice`:"
msgstr "このトークンを使って `/frontend/user-name-with-propagated-token` を呼び出します。このコマンドは `200` のステータスコードと `alice` という名前を返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. In contrast to the preceding command, this command returns `403` because `alice` has only a `user` role:"
msgstr "同じトークンを使用して、 `/frontend/admin-name-with-propagated-token` を呼び出します。前のコマンドとは対照的に、 `alice` は `user` の役割しか持っていないため、このコマンドは `403` を返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, obtain an access token for `admin`:"
msgstr "次に、 `admin` のアクセストークンを取得します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns a `200` status code and the name `admin`:"
msgstr "このトークンを使って `/frontend/user-name-with-propagated-token` を呼び出します。このコマンドは `200` のステータスコードと `admin` という名前を返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. This command also returns the `200` status code and the name `admin` because `admin` has both `user` and `admin` roles:"
msgstr "同じトークンを使用して `/frontend/admin-name-with-propagated-token` を呼び出します。 `admin` は `user` と `admin` の両方の役割を持っているため、このコマンドは `200` ステータス・コードと `admin` という名前も返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Next, check the `FrontendResource` methods, which do not propagate the existing tokens but use `OidcClient` to get and propagate the tokens.\n"
"As already shown, `OidcClient` is configured to get the tokens for the `alice` user."
msgstr "次に、 `FrontendResource` メソッドをチェックします。これらのメソッドは既存のトークンを伝搬しませんが、 `OidcClient` を使用してトークンを取得し、伝搬します。すでに示したように、 `OidcClient` は、 `alice` ユーザのトークンを取得するように構成されています。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns the `200` status code and the name `alice`."
msgstr "このコマンドは、 `200` ステータスコードと名前 `alice` を返します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In contrast with the preceding command, this command returns a `403` status code."
msgstr "先のコマンドとは対照的に、このコマンドは `403` ステータス・コードを返します。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, test that the programmatically created OIDC client correctly acquires and propagates the token with `RestClientWithTokenHeaderParam` both in reactive and imperative (blocking) modes."
msgstr "次に、プログラムで作成したOIDCクライアントが、リアクティブモードでも命令型（ブロッキング）モードでも、 `RestClientWithTokenHeaderParam` 、トークンを正しく取得し、伝搬することをテストします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/user-name-with-oidc-client-token-header-param`. This command returns the `200` status code and the name `alice`:"
msgstr "`/user-name-with-oidc-client-token-header-param` を呼び出します。このコマンドは `200` のステータスコードと `alice` という名前を返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/admin-name-with-oidc-client-token-header-param`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr "`/admin-name-with-oidc-client-token-header-param` を呼び出します。前のコマンドとは対照的に、このコマンドは `403` ステータス・コードを返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, test the endpoints which use OIDC client in in the blocking mode."
msgstr "次に、OIDCクライアントをブロックモードで使用するエンドポイントをテストします。"

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/user-name-with-oidc-client-token-header-param-blocking`. This command returns the `200` status code and the name `alice`:"
msgstr "`/user-name-with-oidc-client-token-header-param-blocking` を呼び出します。このコマンドは `200` のステータスコードと `alice` という名前を返します："

#: _guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Call the `/admin-name-with-oidc-client-token-header-param-blocking`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr "`/admin-name-with-oidc-client-token-header-param-blocking` を呼び出します。前のコマンドとは対照的に、このコマンドは `403` ステータス・コードを返します："

#. type: Title ==
#: _guides/security-openid-connect-client.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド]"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#. type: Plain text
#: _guides/security-openid-connect-client.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
