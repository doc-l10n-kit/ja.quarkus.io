msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Testing components"
msgstr "テスト部品"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr "Quarkusのコンポーネントモデルは、 xref:cdi-reference.adoc[CDIの] 上に構築されています。そのため、Quarkusには `QuarkusComponentTestExtension` - JUnit拡張機能が用意されており、コンポーネント/CDI Beanのテストや依存関係のモックを簡単に行うことができます。 `@QuarkusTest` とは異なり、この拡張機能はQuarkusアプリケーション全体を起動するのではなく、CDIコンテナと設定サービスを起動するだけです。詳細は <<lifecycle>> のセクションを参照してください。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "This extension is available in the `quarkus-junit5-component` dependency."
msgstr "この拡張機能は `quarkus-junit5-component` 依存で利用可能です。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Basic example"
msgstr "基本例"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "`Foo` 2つの注入ポイントを持つCDIビーンです。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` component"
msgstr "`Foo` コンポーネント"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` は CDI Bean です。 `@ApplicationScoped` "

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` メソッド を宣言している に依存しています。 `ping()` `Charlie` "

#: _guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` `bar` これはQuarkus固有の機能です。CDI修飾子も宣言しているため、 はこの注入ポイントには必要ありません。 `@Inject` "

#: _guides/testing-components.adoc
#, fuzzy
msgid "Then a component test could look like:"
msgstr "そうすると、コンポーネントテストは次のようになります："

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test"
msgstr "簡易コンポーネント試験"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "`QuarkusComponentTest` アノテーションは、JUnit エクステンションを登録します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "テストの設定プロパティを設定します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "テストは、テスト対象のコンポーネントを注入します。 `@Inject` でアノテーションされたすべてのフィールドの型が、テスト対象のコンポーネントの型とみなされます。また、 `@QuarkusComponentTest#value()` を使って追加のコンポーネントクラスを指定することもできます。さらに、テストクラス上で宣言された静的なネストされたクラスもコンポーネントになります。"

#: _guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#: _guides/testing-components.adoc
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "テスト・メソッドでMockito APIを活用し、動作を設定することができます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr "`QuarkusComponentTestExtension` また、テストメソッドのパラメータを解決し、マッチするBeanを注入します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "So the code snippet above can be rewritten as:"
msgstr "ですから、上のコード・スニペットは次のように書き換えることができます："

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with test method parameters"
msgstr "試験法パラメータを用いた簡易コンポーネント試験"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr "`@io.quarkus.test.component.SkipInject` でアノテーションされたパラメータは、このエクステンションでは決して解決されません。"

#: _guides/testing-components.adoc
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr ""

#: _guides/testing-components.adoc
#, fuzzy
msgid "The original test could be rewritten like:"
msgstr "元のテストは次のように書き換えることができます："

#: _guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with programmatic configuration"
msgstr "プログラム設定によるシンプルなコンポーネントテスト"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "`QuarkusComponentTestExtension` は、テスト・クラスの静的フィールドで設定します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Lifecycle"
msgstr "ライフサイクル（Lifecycle"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr "では、 `QuarkusComponentTest` は具体的に何をするのでしょうか？CDIコンテナを起動し、専用の xref:config-reference.adoc[設定オブジェクトを] 登録します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr "テスト・インスタンスのライフサイクルが `Lifecycle#PER_METHOD` の場合（デフォルト）、コンテナは `before each` テスト・フェーズの間に開始され、 `after each` テスト・フェーズの間に停止されます。ただし、テスト インスタンスのライフサイクルが `Lifecycle#PER_CLASS` の場合、コンテナは `before all` テスト フェーズ中に開始され、 `after all` テスト フェーズ中に停止されます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "`@Inject` と `@InjectMock` でアノテーションされたフィールドは、テストインスタンスが生成された後に注入されます。マッチするビーンが存在するテストメソッドのパラメータは、テストメソッドが実行されるときに解決されます ( `@io.quarkus.test.component.SkipInject` または `@org.mockito.Mock` でアノテーションされている場合を除く)。最後に、CDI リクエストコンテキストは、各テストメソッドごとに活性化され終了します。"

#: _guides/testing-components.adoc
msgid "Injection"
msgstr "注入"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr "`@jakarta.inject.Inject` や `@io.quarkus.test.InjectMock` でアノテーションされたテストクラスのフィールドは、テストインスタンスが生成された後に注入されます。さらに、 `@io.quarkus.test.component.SkipInject` や `@org.mockito.Mock` でアノテーションされていない限り、マッチする Bean が存在するテストメソッドのパラメータは解決されます。また、 `RepetitionInfo` や `TestInfo` などの JUnit 組み込みパラメータもありますが、これらは自動的にスキップされます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr "`@Inject` 注入ポイントは、CDI Bean のコンテキスト・インスタンス（テスト対象の実際のコンポーネント）を受け取ります。 `@InjectMock` 注入ポイントは、 xref:auto_mocking[満たされていない依存] 関係のために xref:auto_mocking[自動的に] 作成された「未構成の」Mockitoモックを受け取ります。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr "フィールドとテストメソッドの引数に注入された依存Beanは、それぞれテストインスタンスが破棄される前とテストメソッドが完了した後に正しく破棄されます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr "`ArgumentsProvider` によって提供される `@ParameterizedTest` メソッドの引数、例えば `@org.junit.jupiter.params.provider.ValueArgumentsProvider` は、 `@SkipInject` でアノテーションされなければなりません。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Tested components"
msgstr "テスト済みコンポーネント"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The initial set of tested components is derived from the test class:"
msgstr "テストされたコンポーネントの初期セットは、テストクラスから派生したものです："

#: _guides/testing-components.adoc
#, fuzzy
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr "`@jakarta.inject.Inject` でアノテーションされたすべてのフィールドの型は、コンポーネント型とみなされます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr "`@InjectMock` 、 `@SkipInject` 、 `@org.mockito.Mock` のアノテーションが付されていない試験方法パラメータのタイプも、コンポーネントタイプとみなされます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr "`@QuarkusComponentTest#addNestedClassesAsComponents()` が `true` に設定されている場合 (デフォルト)、テスト・クラス上で宣言されたすべての静的ネスト・クラスもコンポーネントになります。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr "`@Inject Instance<T>` と 注入点は特別に扱われます。実際の型引数はコンポーネントとして登録されます。しかし、型引数がインターフェースの場合、実装は自動的に `@Inject @All List<T>` _登録されません_ 。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr "追加のコンポーネントクラスは、 `@QuarkusComponentTest#value()` または `QuarkusComponentTestExtensionBuilder#addComponentClasses()` を使用して設定できます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "不満足な依存関係の自動モッキング"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr "通常の CDI 環境とは異なり、コンポーネントが満足しない依存関係を注入してもテストは失敗しません。代わりに、満足しない依存関係に解決する注入ポイントの必須型と修飾子の組み合わせごとに、合成 Bean が自動的に登録されます。Bean は `@Singleton` スコープを持つので、同じ要求型と修飾子を持つすべての注入ポイントにわたって共有されます。注入された参照は _未構成の_ Mockito モックです。 `io.quarkus.test.InjectMock` アノテーションを使用してテストにモックを注入し、Mockito API を活用して動作を設定することができます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr "`@InjectMock` は、Mockito JUnit 拡張機能によって提供される機能の普遍的な置き換えを意図したものではありません。CDIビーンズの満足しない依存関係の設定に使用することを意図しています。 と を並行して使用することができます。 `QuarkusComponentTest` `MockitoExtension`"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "不満足な依存関係のためのカスタムモック"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr "時には Bean の属性を完全に制御したり、デフォルトのモックの振る舞いを設定したりする必要があるかもしれません。 `QuarkusComponentTestExtensionBuilder#mock()` メソッドでモック設定 API を使うことができます。"

#: _guides/testing-components.adoc
msgid "Configuration"
msgstr "設定"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr "テストの設定プロパティは、 `@io.quarkus.test.component.TestConfigProperty` アノテーションまたは `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` メソッドで設定できます。設定プロパティにデフォルト値がない場合は、 `@QuarkusComponentTest#useDefaultConfigProperties()` あるいは `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` を使用すると便利です。"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr "`@io.quarkus.test.component.TestConfigProperty` アノテーションを使用して、テストメソッドの設定プロパティを設定することもできます。しかし、テストインスタンスのライフサイクルが `Lifecycle#_PER_CLASS` の場合、このアノテーションはテストクラスに対してのみ使用でき、 テストメソッドに対しては無視されます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr "CDI Bean は、注入されたすべての link:https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings] にも自動的に登録されます。マッピングにはテスト設定プロパティが入力されます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Mocking CDI Interceptors"
msgstr "CDIインターセプターのモック"

#: _guides/testing-components.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr "テスト対象のコンポーネント・クラスがインターセプター・バインディングを宣言している場合、そのインターセプターもモックする必要があるかもしれません。この作業を行うには、2 つの方法があります。まず、インターセプタクラスをテストクラスの静的な入れ子クラスとして定義します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` はインターセプター・バインディングである。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "インターセプター・クラスは自動的にテストされたコンポーネントとみなされます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "`@QuarkusComponentTest` のアノテーションが付けられたテストクラスで宣言された静的な入れ子クラスは、 `@QuarkusTest` を実行するときに、意図しない CDI の衝突を防ぐために、Bean の発見から除外されます。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr "もうひとつの方法は、インターセプタメソッドをテストクラス内で直接宣言することです。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "結果として得られるインターセプターのバインディングは、 インターセプター・バインディングの型をメソッドにアノテーションすることで指定します。"

#: _guides/testing-components.adoc
#, fuzzy
msgid "Defines the interception type."
msgstr "インターセプトのタイプを定義します。"
