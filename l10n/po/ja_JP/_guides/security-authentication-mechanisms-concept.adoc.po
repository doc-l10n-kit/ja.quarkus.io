msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:2
#, no-wrap
msgid "Authentication mechanisms in Quarkus"
msgstr "Quarkusの認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:8
msgid "The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.  You can also combine authentication mechanisms."
msgstr "Quarkus Securityフレームワークは、複数の認証メカニズムをサポートしており、これらを使用してアプリケーションを保護することができます。また、認証メカニズムを組み合わせることも可能です。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:12
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr "Quarkusアプリケーションを保護するための認証メカニズムを選択する前に、提供される情報を確認してください。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:14
#, no-wrap
msgid "Overview of supported authentication mechanisms"
msgstr "サポートされる認証メカニズムの概要"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:17
msgid "Some supported authentication mechanisms are built into Quarkus, and some require you to add an extension, all of which are detailed in the following sections on this page:"
msgstr "認証メカニズムには、Quarkusに組み込まれているものと、エクステンションを追加する必要があるものがありますが、いずれもこのページの次のセクションで詳しく説明しています:"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:19
msgid "xref:built-in-authentication-mechanisms[Built-in authentication mechanisms]"
msgstr "xref:built-in-authentication-mechanisms[組込認証メカニズム]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:20
msgid "xref:other-supported-authentication-mechanisms[Other supported authentication mechanisms]"
msgstr "xref:other-supported-authentication-mechanisms[その他のサポートされる認証メカニズム]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:22
msgid "The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr "次の表は、特定の認証要件と、Quarkusで使用できるサポートされる認証メカニズムを対応付けたものです:"

#. type: Block title
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:23
#, no-wrap
msgid "Authentication requirements and mechanisms"
msgstr "認証要件とメカニズム"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:26
#, no-wrap
msgid "Authentication requirement"
msgstr "認証要件"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:28
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:298
#, no-wrap
msgid "Authentication mechanism"
msgstr "認証メカニズム"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:28
#, no-wrap
msgid "Username and password"
msgstr "ユーザー名とパスワード"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:30
#, no-wrap
msgid "xref:security-basic-authentication-concept.adoc[Basic], xref:security-authentication-mechanisms-concept.adoc#form-auth[Form]"
msgstr "xref:security-basic-authentication-concept.adoc[Basic], xref:security-authentication-mechanisms-concept.adoc#form-auth[Form]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:30
#, no-wrap
msgid "Bearer access token"
msgstr "ベアラーアクセストークン"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:32
#, no-wrap
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:32
#, no-wrap
msgid "Single sign-on (SSO)"
msgstr "シングルサインオン（SSO）"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:34
#, no-wrap
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC Code Flow], xref:security-authentication-mechanisms-concept.adoc#form-auth[Form]"
msgstr "xref:security-oidc-code-flow-authentication-concept.adoc[OIDC Code Flow], xref:security-authentication-mechanisms-concept.adoc#form-auth[Form]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:34
#, no-wrap
msgid "Client certificate"
msgstr "クライアント証明書"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:36
#, no-wrap
msgid "xref:security-authentication-mechanisms-concept.adoc#mutual-tls[Mutual TLS (MTLS)]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#mutual-tls[Mutual TLS (MTLS)]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:36
#, no-wrap
msgid "WebAuthn"
msgstr "WebAuthn"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:38
#, no-wrap
msgid "xref:security-webauthn-concept.adoc[WebAuthn]"
msgstr "xref:security-webauthn-concept.adoc[WebAuthn]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:38
#, no-wrap
msgid "Kerberos ticket"
msgstr "ケルベロスチケット"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:39
#, no-wrap
msgid "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-kerberos/dev/index.html[Kerberos]"
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-kerberos/dev/index.html[Kerberos]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:42
msgid "See also the xref:table[Token authentication mechanism comparison] table featured later in this section."
msgstr "後述の xref:table[トークン認証メカニズム比較] 表もご参照ください。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:44
#, no-wrap
msgid "Built-in authentication mechanisms"
msgstr "組込認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:47
msgid "Quarkus Security provides the following built-in authentication support:"
msgstr "Quarkus Securityには、次のような組込の認証サポートがあります:"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:49
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:58
msgid "xref:security-basic-authentication-concept.adoc[Basic authentication]"
msgstr "xref:security-basic-authentication-concept.adoc[Basic認証]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:50
msgid "xref:form-auth[Form-based authentication]"
msgstr "xref:form-auth[フォームベース認証]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:51
msgid "xref:mutual-tls[Mutual TLS authentication]"
msgstr "xref:mutual-tls[相互TLS認証]"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:52
#, no-wrap
msgid "Basic authentication"
msgstr "Basic認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:56
msgid "You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism.  For more information, see the following documentation:"
msgstr "内蔵のHTTP Basic認証メカニズムを使用して、Quarkusアプリケーションエンドポイントを保護することができます。詳細については、次のドキュメントを参照してください:"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:59
msgid "xref:security-basic-authentication-howto.adoc[Enable Basic authentication]"
msgstr "xref:security-basic-authentication-howto.adoc[Basic認証の有効化]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:60
msgid "xref:security-jpa-concept.adoc[Quarkus Security with Jakarta Persistence]"
msgstr "xref:security-jpa-concept.adoc[Quarkus Securityとjakarta Persistence]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:61
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr "xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta PersistenceによるQuarkusアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:62
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:360
msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
msgstr "xref:security-identity-providers-concept.adoc[アイデンティティ・プロバイダー]"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:64
#, no-wrap
msgid "Form-based authentication"
msgstr "フォームベース認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:69
msgid "Quarkus provides form-based authentication that works in a similar manner to traditional Servlet form-based auth.  Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support.  Instead, the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr "Quarkusには、従来のServletのフォームベース認証と同様に動作するフォームベース認証があります。従来のフォーム認証とは異なり、認証されたユーザーはHTTPセッションに保存されません。これは、Quarkusがクラスタ化されたHTTPセッションをサポートしていないためです。代わりに、認証情報は暗号化されたCookieに保存されます。このCookieは、クラスタのすべてのメンバーが読むことができます（同じ暗号化キーを共有している場合）。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:75
msgid "To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure that the value you set is at least 16 characters long.  This key is hashed using SHA-256.  The resulting digest is used as a key for AES-256 encryption of the cookie value.  The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized.  At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr "暗号化を適用するには、 `quarkus.http.auth.session.encryption-key` プロパティを追加し、設定する値が少なくとも16文字の長さであることを確認します。このキーは、SHA-256を使用してハッシュ化されます。結果のダイジェストがクッキー値のAES-256暗号化のためのキーとして使用されます。Cookieには、暗号化された値の一部として有効期限が含まれているため、クラスタ内のすべてのノードでクロックが同期されている必要があります。1分間隔で、セッションが使用中であれば、有効期限が更新された新しいクッキーが生成されます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:77
msgid "Single-page application (SPA) typically wants to avoid redirects, which can be done by removing default page paths, as outlined in the following example:"
msgstr "シングルページアプリケーション（SPA）では、通常、リダイレクトを避けたいものですが、次の例に示すように、デフォルトのページパスを削除することでこれを実現できます:"

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:82
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 200 OK\n"
"quarkus.http.auth.form.landing-page=\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:86
#, no-wrap
msgid ""
"# do not redirect, respond with HTTP 401 Unauthorized\n"
"quarkus.http.auth.form.login-page=\n"
"quarkus.http.auth.form.error-page=\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:89
msgid "The following properties can be used to configure form-based authentication:"
msgstr "フォームベース認証の設定には、以下のプロパティを使用できます:"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:93
#, no-wrap
msgid "Mutual TLS authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:96
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr "Quarkusには相互TLS（mTLS）認証があり、X.509証明書に基づいてユーザーを認証することができます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:98
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide."
msgstr "この認証方法を使用するには、まずアプリケーションでSSLを有効にする必要があります。詳しくは、 link:http-reference.html#ssl[「Supporting secure connections with SSL]」をご覧ください。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:102
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr "アプリケーションが安全な接続を受け入れたら、次のステップは、アプリケーションが信頼すべきすべての証明書を保持する `quarkus.http.ssl.certificate.trust-store-file` を設定し、クライアント(例: ブラウザや他のサービス)が保護されたリソースにアクセスしようとしたときに、アプリケーションがどのように証明書を要求するかを設定します。"

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:110
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:113
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:115
msgid "Configures a key store where the server's private key is located."
msgstr "サーバーの秘密鍵が置かれている鍵ストアを設定します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:116
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr "信頼された証明書がロードされるトラストストアを構成します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:119
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr "サーバーが *常に*クライアントからの証明書を要求することを定義します。 `REQUEST` を使用することで、この動作を緩和することができます。mTLS 以外の認証方法もサポートしている場合に便利です。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:120
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr "認証されたユーザーのみがアプリケーションからリソースにアクセスできるようにするポリシーを定義します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:123
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr "受信したリクエストがトラストストアの有効な証明書と一致したら、アプリケーションは以下のように `SecurityIdentity` を注入するだけでサブジェクトを取得できるようになるはずです。"

#. type: Block title
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:125
#, no-wrap
msgid "Obtaining the subject"
msgstr "subjectの取得"

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:130
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:136
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:139
msgid "You should also be able to get the certificate as follows:"
msgstr "また、以下のように証明書を取得できるようにしておきましょう:"

#. type: Block title
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:141
#, no-wrap
msgid "Obtaining the certificate"
msgstr "証明書の取得"

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:146
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:149
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:151
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:155
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, you can add new roles after checking a client certificate subject name, and so on.  For more information about customizing Quarkus `SecurityIdentity`, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization] in the \"Security customization\" topic."
msgstr "クライアント証明書からの情報は、Quarkus `SecurityIdentity` を強化するために使用できます。たとえば、クライアント証明書のサブジェクト名を確認した上で新しいロールを追加するといったことが可能です。Quarkus `SecurityIdentity` のカスタマイズの詳細については、「セキュリティのカスタマイズ」トピックの xref:security-customization.adoc#security-identity-customization[SecurityIdentityのカスタマイズを] 参照してください。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:157
#, no-wrap
msgid "Other supported authentication mechanisms"
msgstr "その他のサポートされる認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:160
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr "Quarkus Securityは、エクステンションによって、以下の認証メカニズムもサポートしています:"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:162
msgid "xref:webauthn-authentication[WebAuthn authentication]"
msgstr "xref:webauthn-authentication[WebAuthn 認証]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:163
msgid "xref:openid-connect-authentication[OpenID Connect authentication]"
msgstr "xref:openid-connect-authentication[OpenID Connect認証]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:164
msgid "xref:smallrye-jwt-authentication[SmallRye JWT authentication]"
msgstr "xref:smallrye-jwt-authentication[SmallRye JWT認証]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:165
msgid "xref:oauth2-authentication[OAuth2 authentication]"
msgstr "xref:oauth2-authentication[OAuth2認証]"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:167
#, no-wrap
msgid "WebAuthn authentication"
msgstr "WebAuthn認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:172
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn-concept.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
msgstr "link:https://webauthn.guide/[WebAuthn] は、パスワードの代わりになる認証メカニズムです。新しいユーザーを登録したり、ログインしたりするサービスを書くときに、パスワードを要求する代わりに、パスワードに代わるWebAuthnを使用することができます。詳細については、Quarkus xref:security-webauthn-concept.adoc[WebAuthn認証メカニズムを使用したアプリケーションの保護] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:174
#, no-wrap
msgid "OpenID Connect authentication"
msgstr "OpenID Connect認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:177
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
msgstr "OpenID Connect（OIDC）は、OAuth 2.0プロトコルの上で動作するIDレイヤーです。OIDCは、クライアントアプリケーションが、OIDCプロバイダーによって実行された認証に基づいてユーザーの身元を確認し、そのユーザーに関する基本的な情報を取得することを可能にします。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:182
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr "Quarkus `quarkus-oidc` エクステンションは、ベアラートークンおよび認可コードフロー認証メカニズムをサポートする、リアクティブ、相互運用可能な、マルチテナント対応のOIDCアダプターを提供します。ベアラートークンメカニズムは、HTTP Authorizationヘッダーからトークンを抽出します。認可コードフローメカニズムは、ユーザーをOIDCプロバイダーにリダイレクトし、ユーザーのIDを認証します。ユーザーがQuarkusにリダイレクトされた後、このメカニズムは、ID、アクセス、およびリフレッシュトークンに対して付与されたコードを交換することで認証プロセスを完了させます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:185
msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
msgstr "リフレッシュ可能なJSON Web Key（JWK）セットを使用してIDおよびアクセスJWTトークンを検証するか、リモートでイントロスペクトすることができます。ただし、不透明な（バイナリ）トークンは、リモートでイントロスペクトすることしかできません。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:189
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use xref:smallrye-jwt-authentication[SmallRye JWT] to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "Quarkus OIDCエクステンションを使用すると、ベアラートークンと認可コードフローの両方のメカニズムで xref:smallrye-jwt-authentication[SmallRye JWT] を使用して、JWTトークンをMicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現できます。"

#. type: Title ====
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:191
#, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "OIDC認証のための追加のQuarkusリソース"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:194
msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
msgstr "Quarkusアプリケーションの保護のために使用できるOIDC認証および認可方法の詳細については、以下の詳細なリソースを参照してください:"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:197
#, no-wrap
msgid "OIDC topic"
msgstr "OIDCトピック"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:198
#, no-wrap
msgid "Quarkus information resource"
msgstr "Quarkusの情報リソース"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:198
#, no-wrap
msgid "Bearer token authentication mechanism"
msgstr "ベアラートークン認証メカニズム"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:199
#, no-wrap
msgid "xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication]"
msgstr "xref:security-oidc-bearer-authentication-concept.adoc[OIDC ベアラー認証]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:199
#, no-wrap
msgid "Authorization code flow authentication mechanism"
msgstr "認可コードフロー認証メカニズム"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:200
#, no-wrap
msgid "xref:security-oidc-code-flow-authentication-concept.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
msgstr "xref:security-oidc-code-flow-authentication-concept.adoc[OpenID Connect (OIDC)認可コードフローメカニズム]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:200
#, no-wrap
msgid "Multiple tenants that can support bearer token or authorization code flow mechanisms"
msgstr "ベアラートークンまたは認可コードフローメカニズムをサポートできる複数のテナント"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:201
#, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC)マルチテナントの使用]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:201
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr "Keycloakを使用した認可の一元化"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:202
#, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "xref:security-keycloak-authorization.adoc[OpenID Connect (OIDC)とKeycloakを使用して認可を一元化]"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:202
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr "Keycloakのプログラムによる設定"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:203
#, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr "xref:security-keycloak-admin-client.adoc[Keycloak admin クライアントの使用]"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:208
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property."
msgstr "Quarkus OIDCエクステンションを実行時に有効にする必要がある場合は、ビルド時に `quarkus.oidc.tenant-enabled=false` を指定し、実行時にシステムプロパティを使用して再有効化します。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:210
msgid "For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
msgstr "マルチテナントOIDCデプロイメントにおける個々のテナント構成の管理の詳細については、 xref:security-openid-connect-multitenancy.adoc#disable-tenant[OpenID Connect (OIDC) マルチテナントの使用] ガイドの _テナント設定の無効化_ の項を参照してください。"

#. type: Title ====
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:212
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr "OpenID Connectクライアントとフィルター"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:215
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` エクステンションは、以下のトークングラントをサポートする OpenID Connect および OAuth2 プロバイダからアクセストークンを取得し、リフレッシュするための `OidcClient` を提供します:"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:217
msgid "`client-credentials`"
msgstr "`client-credentials`"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:218
msgid "`password`"
msgstr "`password`"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:219
msgid "`refresh_token`"
msgstr "`refresh_token`"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:223
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides Jakarta REST `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
msgstr "`quarkus-oidc-client-filter` エクステンションは、 `quarkus-oidc-client` エクステンションを必要とし、Jakarta REST `OidcClientRequestFilter` を提供し、 `OidcClient` で取得したアクセストークンを HTTP `Authorization` ヘッダの `Bearer` scheme 値として設定します。このフィルタは、現在のQuarkusエンドポイントに注入されたMP RestClient実装に登録することができますが、このサービスエンドポイントの認証要件には関係しません。たとえば、パブリックエンドポイントにすることも、mTLSで保護することも可能です。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:227
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "このシナリオでは、Quarkus OpenID Connectアダプターを使用してQuarkusエンドポイントを保護する必要はありません。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:232
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides Jakarta REST `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、 `quarkus-oidc` エクステンションを必要とし、Jakarta REST `TokenCredentialRequestFilter` を提供します。HTTP `Authorization` ヘッダーの `Bearer` スキーム値として、OpenID Connect Bearer または認可コードフロー アクセストークンを設定します。このフィルターは、現在のQuarkusエンドポイントに注入されたMP RestClient実装に登録することができ、Quarkus OpenID Connectアダプターを使用することで保護する必要があります。このフィルターは、アクセストークンを下流のサービスに伝搬させるために使用することができます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:234
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "詳しくは、 xref:security-openid-connect-client.adoc[OpenID Connectクライアントとトークン伝搬クイックスタート] 、 xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) とOAuth2クライアントとフィルターのリファレンス] ガイドをご覧ください。"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:236
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT 認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:239
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` エクステンションは、MicroProfile JSON Web Token (JWT) 1.2.1 の実装と、署名および暗号化された `JWT` トークンを検証する複数のオプションを提供し、それらを `org.eclipse.microprofile.jwt.JsonWebToken` として表します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:242
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either Privacy Enhanced Mail (PEM) keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr "`quarkus-smallrye-jwt` は、 `quarkus-oidc` ベアラートークン認証メカニズムの代替で、Privacy Enhanced Mail (PEM) キーまたはリフレッシュ可能な `JWK` キーセットを使用して `JWT` トークンだけを検証します。 `quarkus-smallrye-jwt` は、JWT 生成 API も提供し、これを使用して `signed` 、あるいは `inner-signed` 、 `encrypted` `JWT` トークンを簡単に作成することができます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:244
msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
msgstr "詳細については、xref:security-jwt.adoc[SmallRye JWTロールベースアクセスコントロールの使用] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:246
#, no-wrap
msgid "OAuth2 authentication"
msgstr "OAuth2 認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:250
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
msgstr "`quarkus-elytron-security-oauth2` は、 `quarkus-oidc` Bearer Token認証メカニズムの代替手段を提供します。 `quarkus-elytron-security-oauth2` は `Elytron` をベースにしており、主にリモートで不透明なトークンをイントロスペクトすることを目的としています。詳細については、link:security-oauth2.html[OAuth2の使用] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:252
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "OpenID Connect、SmallRye JWT、OAuth2認証メカニズムからの選択"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:255
msgid "Use the following information to select the appropriate token authentication mechanism to secure your Quarkus applications."
msgstr "次の情報を使用して、Quarkusアプリケーションを保護するために適切なトークン認証メカニズムを選択して下さい。"

#. type: Block title
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:256
#, no-wrap
msgid "List of authentication mechanism use-cases"
msgstr "認証メカニズムのユースケース一覧"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:260
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr "`quarkus-oidc` には、KeycloakなどのOpenID Connectプロバイダが必要で、Bearerトークンの検証や認可コードフローによるエンドユーザーの認証に使用することができます。どちらの場合も、 `quarkus-oidc` は、指定されたOpenID Connectプロバイダへの接続が必要です。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:263
msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr "ユーザー認証に認可コードフローが必要な場合や、複数のテナントに対応する必要がある場合は、 `quarkus-oidc` を使用してください。 `quarkus-oidc` では、認可コードフローとベアラーアクセストークンの両方を使用して、ユーザー情報を要求することもできます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:265
msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr "ベアラートークンを検証する必要がある場合は、 `quarkus-oidc` , `quarkus-smallrye-jwt` , または `quarkus-elytron-security-oauth2` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:269
msgid "If your Bearer tokens are in a JSON web token (JWT) format, you can use any of the extensions listed above.  Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr "ベアラートークンがJSONウェブトークン（JWT）形式である場合、上記のエクステンションのいずれかを使用することができます。 `quarkus-oidc` と `quarkus-smallrye-jwt` の両方が、OpenID Connect プロバイダがキーをローテーションする際に JsonWebKey (JWK) セットを更新することをサポートしています。したがって、リモート・トークン・イントロスペクションを避ける必要がある場合やプロバイダがサポートしていない場合は、JWTトークンの検証に `quarkus-oidc` または `quarkus-smallrye-jwt` を使用します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:272
msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr "JWTトークンをリモートでイントロスペクションする必要がある場合、 `quarkus-oidc` または `quarkus-elytron-security-oauth2` のいずれかを使用することができます。これらは、リモートイントロスペクションを使用して不透明またはバイナリートークンの検証をサポートしているからです。 `quarkus-smallrye-jwt` は、不透明または JWT トークンの両方のリモートイントロスペクションをサポートしていませんが、代わりに、通常は OpenID Connect プロバイダから取得されるローカルに利用可能な鍵を使用します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:276
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the JWT and opaque tokens injection into the endpoint code.  Injected JWT tokens provide more information about the user.  All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` と `quarkus-smallrye-jwt` は、エンドポイントコードへの JWT と不透明なトークンの注入をサポートしています。注入されたJWTトークンは、ユーザーに関するより多くの情報を提供します。すべてのエクステンションは、トークンを `Principal` として注入することができます。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:278
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くの鍵フォーマットをサポートしています。 `quarkus-oidc` は JWK セットの一部である JWK 形式の鍵のみを使用するのに対し、 `quarkus-smallrye-jwt` は PEM 鍵をサポートしています。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:281
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
msgstr "`quarkus-smallrye-jwt` は、ローカルで署名付きトークン、内部署名付き暗号化トークン、および暗号化トークンを扱います。`quarkus-oidc` や `quarkus-elytron-security-oauth2` もこのようなトークンも検証できますが、不透明なトークンとして扱い、リモート・イントロスペクションによって検証します。"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:283
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "不透明トークンやJWTトークンのリモートイントロスペクションのための軽量なライブラリが必要な場合は、 `quarkus-elytron-security-oauth2` を使用してください。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:289
msgid "Architectural considerations drive your decision to use opaque or JSON web token (JWT) token format.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers."
msgstr "トークン形式として、不透明トークンかJSONウェブトークン（JWT）のどちらを使用するかは、アーキテクチャの検討によって決定されます。不透明トークンはJWTトークンよりもはるかに短い傾向がありますが、トークンに関連する状態のほとんどをプロバイダーのデータベースで維持する必要があります。不透明トークンは、事実上データベース・ポインタです。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:291
msgid "JWT tokens are significantly longer than opaque tokens. Still, the providers effectively delegate most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr "JWTトークンは、不透明なトークンよりもかなり長いです。それでもプロバイダは、トークンに関連する状態のほとんどを、トークン・クレームとして保存し、署名または暗号化することによって、クライアントに効果的に委譲しています。"

#. type: Block title
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:294
#, no-wrap
msgid "Token authentication mechanism comparison"
msgstr "トークン認証メカニズムの比較"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:296
#, no-wrap
msgid "Feature required"
msgstr "必要な機能"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:298
#, no-wrap
msgid "`quarkus-oidc`"
msgstr "`quarkus-oidc`"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:298
#, no-wrap
msgid "`quarkus-smallrye-jwt`"
msgstr "`quarkus-smallrye-jwt`"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:300
#, no-wrap
msgid "`quarkus-elytron-security-oauth2`"
msgstr "`quarkus-elytron-security-oauth2`"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:300
#, no-wrap
msgid "Bearer JWT verification"
msgstr "ベアラーJWTの検証"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:300
#, no-wrap
msgid "Local verification or introspection"
msgstr "ローカル検証もしくはイントロスペクション"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:300
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:313
#, no-wrap
msgid "Local verification"
msgstr "ローカル検証"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:302
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:303
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:313
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:314
#, no-wrap
msgid "Introspection"
msgstr "イントロスペクション"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:302
#, no-wrap
msgid "Bearer opaque token verification"
msgstr "ベアラー不透明Tokenの検証"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:302
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:304
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:307
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:308
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:309
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:310
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:312
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:313
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:314
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:315
#, no-wrap
msgid "No"
msgstr "No"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:303
#, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr "JWTトークンを検証するための `JsonWebKey` セットのリフレッシュ"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:303
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:304
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:305
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:307
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:308
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:309
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:310
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:315
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:316
#, no-wrap
msgid "Yes"
msgstr "Yes"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:304
#, no-wrap
msgid "Represent token as `Principal`"
msgstr "トークンを `Principal` として表現"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:305
#, no-wrap
msgid "Inject JWT as MP JWT"
msgstr "MP JWTとしてJWTをインジェクト"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:307
#, no-wrap
msgid "Authorization code flow"
msgstr "認可コードフロー"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:308
#, no-wrap
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:309
#, no-wrap
msgid "User information support"
msgstr "ユーザー情報のサポート"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:310
#, no-wrap
msgid "PEM key format support"
msgstr "PEMキーフォーマットサポート"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:312
#, no-wrap
msgid "SecretKey support"
msgstr "SecretKeyサポート"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:312
#, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr "JSON Web Key（JWK）フォーマットで"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:313
#, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "内部署名付き暗号化トークン、または暗号化トークン"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:314
#, no-wrap
msgid "Custom token verification"
msgstr "カスタムトークン検証"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:314
#, no-wrap
msgid "With injected JWT parser"
msgstr "注入されたJWTパーサーで"

#. type: Table
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:315
#, no-wrap
msgid "JWT as a cookie support"
msgstr "クッキーとしてのJWTのサポート"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:319
#, no-wrap
msgid "Combining authentication mechanisms"
msgstr "認証メカニズムの組み合わせ"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:323
msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
msgstr "ユーザークレデンシャルが異なるソースから提供される場合、認証メカニズムを組み合わせることができます。たとえば、組込の `Basic` と `quarkus-oidc` `Bearer` の認証メカニズムを組み合わせることができます。"

#. type: delimited block =
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:327
msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "`quarkus-oidc` `Bearer` と `smallrye-jwt` の認証メカニズムは、どちらも HTTP `Authorization Bearer` スキームから抽出されたトークンを検証しようとするため、組み合わせることはできません。"

#. type: Title ===
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:329
#, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr "パス固有認証メカニズム"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:332
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "次の設定例は、あるリクエストパスに対して、選択可能な単一の認証メカニズムを強制する方法を示しています:"

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:337
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:341
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:345
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:348
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr "`auth-mechanism` プロパティの値が、 `HttpAuthenticationMechanism` がサポートする認証スキーム（例えば、 `basic` 、 `bearer` 、 `form` ）と一致しているようにして下さい。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:349
#, no-wrap
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:353
msgid "Proactive authentication is enabled in Quarkus by default. This means that if an incoming request has a credential then that request will always be authenticated, even if the target page does not require authentication.  For more information, see xref:security-proactive-authentication-concept.adoc[Proactive authentication]."
msgstr "Quarkusでは、プロアクティブ認証がデフォルトで有効になっています。つまり、受信リクエストにクレデンシャルがある場合、ターゲットページで認証が必要ない場合でも、そのリクエストは常に認証されることになります。詳細については、 xref:security-proactive-authentication-concept.adoc[プロアクティブ認証] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:354
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:357
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:358
msgid "xref:security-architecture-concept.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture-concept.adoc[Quarkus Security アーキテクチャー]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:359
msgid "xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#other-supported-authentication-mechanisms[Quarkusの認証メカニズム]"

#. type: Plain text
#: upstream/_guides/security-authentication-mechanisms-concept.adoc:360
msgid "xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]"
msgstr "xref:security-authorize-web-endpoints-reference.adoc[ウェブエンドポイントの認可]"
