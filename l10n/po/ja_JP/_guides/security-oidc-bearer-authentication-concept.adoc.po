msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:7
#, no-wrap
msgid "OpenID Connect (OIDC) Bearer authentication"
msgstr "OpenID Connect (OIDC) ベアラー認証"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:12
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkus OpenID Connect（OIDC）エクステンションを使用して、Bearer認証でアプリケーションのJakarta REST（旧称：JAX-RS）エンドポイントへのHTTPアクセスを保護してください。"

#. type: Title ==
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:13
#, no-wrap
msgid "Overview of the Bearer authentication mechanism in Quarkus"
msgstr "Quarkusのベアラー認証メカニズムの概要"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:16
msgid "Quarkus supports the Bearer authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkusは、Quarkus OpenID Connect（OIDC）エクステンションを通じて、ベアラー認証メカニズムをサポートしています。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:18
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "ベアラートークンは、 link:https://www.keycloak.org[Keycloak] などのOIDCやOAuth2.0に準拠した認可サーバーで発行されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:21
msgid "Bearer authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.  The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr "ベアラー認証は、ベアラートークンの存在と有効性に基づいてHTTPリクエストを認可するプロセスです。ベアラートークンは、HTTPリソースにアクセスできるかどうかを判断するために使用される、呼び出しの対象に関する情報を提供します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:23
msgid "The following diagrams outline the Bearer authentication mechanism in Quarkus:"
msgstr "次の図は、Quarkusのベアラー認証メカニズムの概要を示しています:"

#. type: Block title
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:24
#, no-wrap
msgid "Bearer authentication mechanism in Quarkus with Single-page application"
msgstr "Quarkusとシングルページアプリケーションでのベアラー認証メカニズム"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:25
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:35
#, no-wrap
msgid "Bearer"
msgstr "Bearer"

#. type: Target for macro image
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:25
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:28
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:38
msgid "The Quarkus service retrieves verification keys from the OpenID Connect provider. The verification keys are used to verify the bearer access token signatures."
msgstr "Quarkusサービスでは、OpenID Connectプロバイダーから検証キーを取得します。検証キーは、Bearerアクセストークンの署名を検証するために使用されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:29
msgid "The Quarkus user accesses the Single-page application."
msgstr "Quarkusユーザーは、シングルページアプリケーションにアクセスします。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:30
msgid "The Single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OpenID Connect provider."
msgstr "シングルページアプリケーションでは、Authorization Code Flowを使用してユーザーを認証し、OpenID Connectプロバイダーからトークンを取得します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:31
msgid "The Single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr "シングルページアプリケーションでは、アクセストークンを使用して、Quarkusサービスからサービスデータを取得します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:32
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Single-page application."
msgstr "Quarkusサービスは、検証キーを使用してBearerアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックし、トークンが有効であればリクエストを続行させ、サービス応答をシングルページアプリケーションに返します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:33
msgid "The Single-page application returns the same data to the Quarkus user."
msgstr "シングルページアプリケーションは、同じデータをQuarkusユーザーに返します。"

#. type: Block title
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:34
#, no-wrap
msgid "Bearer authentication mechanism in Quarkus with Java or command line client"
msgstr "Quarkusと、Javaまたはコマンドラインクライアントを使用したベアラー認証メカニズム"

#. type: Target for macro image
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:35
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:39
msgid "The Client uses `client_credentials` that requires client ID and secret or password grant, which also requires client ID, secret, user name, and password to retrieve the access token from the OpenID Connect provider."
msgstr "クライアントは、OpenID Connectプロバイダからアクセストークンを取得するために、クライアントIDとシークレットを必要とする `client_credentials` 、またはクライアントID、シークレット、ユーザー名、パスワードも必要とするpassword grantを使用します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:40
msgid "The Client uses the access token to retrieve the service data from the Quarkus service."
msgstr "クライアントはアクセストークンを使用して、Quarkusサービスからサービスデータを取得します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:41
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Client."
msgstr "Quarkusサービスは、検証キーを使用してBearerアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックし、トークンが有効であればリクエストの実行を許可し、サービスレスポンスをクライアントに返します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:44
#, fuzzy
msgid "If you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow, see xref:security-oidc-code-flow-authentication-concept.adoc[OIDC code flow mechanism for protecting web applications].  Also, if you use Keycloak and bearer tokens, see xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization]."
msgstr "OpenID Connect認可コードフローを使用してユーザーの認証と認可を行う必要がある場合は、 xref:security-oidc-code-flow-authentication-concept.adoc[Webアプリケーションを保護するためのOIDCコードフロー] メカニズムを参照してください。また、Keycloakとベアラートークンを使用する場合は、 xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:46
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "マルチテナントへの対応方法については、 xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC) マルチテナンシーの使用] ガイドをお読みください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:48
#, no-wrap
msgid "Accessing JWT claims"
msgstr "JWT クレームへのアクセス"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:51
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr "JWT トークンクレームにアクセスする必要がある場合は、`JsonWebToken` を注入できます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:55
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:517
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:551
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:63
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:66
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:69
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:77
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:80
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr "`JsonWebToken` の注入は、`@ApplicationScoped`、`@Singleton`、および `@RequestScoped` スコープでサポートされていますが、個々のクレームがシンプル型として注入される場合は、`@RequestScoped` の使用が必要です。 xref:security-jwt を参照してください。詳細については、 xref:security-jwt.adoc#supported-injection-scopes[JsonWebToken およびクレームの注入スコープのサポート] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:82
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:87
#, fuzzy
msgid "Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenID Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "OIDC userinfoエンドポイントからUserInfo JSONオブジェクトを要求する必要がある場合、 `quarkus.oidc.authentication.user-info-required=true` を設定します。OpenID Provider UserInfoエンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` （シンプルな `jakarta.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入またはアクセスすることができます。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:89
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:92
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが検出した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、`SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスが可能です。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:94
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:95
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームとセキュリティーアイデンティティロール"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:98
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr "SecurityIdentity ロールは、検証済みの JWT アクセストークンから以下のようにマッピングすることができます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:101
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr "`quarkus.oidc.roles.role-claim-path` プロパティーが設定されており、一致する配列または文字列のクレームが見つかった場合、このクレームからロールが抽出されます。例えば、`customroles`、`customroles/array`、`scope`、`\"http://namespace-qualified-custom-claim\"/roles`、`\"http://namespace-qualified-roles\"` などです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:102
msgid "If `groups` claim is available then its value is used"
msgstr "`groups` クレームが利用可能な場合は、その値が使用されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:104
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr "`realm_access/roles` または `resource_access/client_id/roles` (ここで `client_id` は `quarkus.oidc.client-id` プロパティーの値)クレームが利用可能な場合は、その値が使用されます。このチェックは、Keycloakが発行するトークンをサポートします。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:106
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr "トークンが不透明(バイナリー)の場合は、リモートトークンイントロスペクションレスポンスの `scope` プロパティーが使用されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:108
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:110
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented in xref:security-customization.adoc#security-identity-customization[Security Identity Customization]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` をロールの追加に使用することもできます。詳しくは、 xref:security-customization.adoc#security-identity-customization[Security Identityのカスタマイズ] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:112
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:117
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "トークンが JWT トークンの場合、デフォルトでは、OpenID Connect プロバイダーの JWK エンドポイントから取得したローカルの `JsonWebKeySet` からの `JsonWebKey` (JWK) キーで検証されます。トークンのキー識別子 `kid` ヘッダー値は、一致する JWK キーを見つけるために使用されます。一致する `JWK` がローカルで利用できない場合、`JsonWebKeySet` は、JWK エンドポイントから現在のキーセットを取得することによって更新されます。`JsonWebKeySet` の更新は、`quarkus.oidc.token.forced-jwk-refresh-interval` (デフォルトは 10 分) の期限が切れた後にのみ繰り返すことができます。更新後に一致する `JWK` が利用できない場合、JWT トークンは OpenID Connectプロバイダーのトークンイントロスペクションエンドポイントに送信されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:119
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr "トークンが不透明な場合 (バイナリートークンまたは暗号化された JWT トークンの場合があります)、常に OpenID Connectプロバイダーのトークンイントロスペクションエンドポイントに送信されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:121
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr "JWT トークンのみを使用していて、一致する `JsonWebKey` が常に使用可能になると予想される場合 (おそらくキーセットの更新後)、トークンのイントロスペクションを無効にする必要があります。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:126
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:129
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr "ただし、JWT トークンをイントロスペクションのみで検証する必要がある場合があります。イントロスペクションエンドポイントアドレスのみを設定することで強制できます。たとえば、Keycloak の場合は、次のように設定できます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:136
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:139
msgid "An advantage of this indirect enforcement of JWT tokens being only introspected remotely is that two remote call are avoided: a remote OIDC metadata discovery call followed by another remote call fetching the verification keys which will not be used, while its disavantage is that the users need to know the introspection endpoint address and configure it manually."
msgstr "JWTトークンがリモートでイントロスペクションされるだけのこの間接的な実施方法の利点は、2つのリモートコールが避けられることです。リモートOIDCメタデータディスカバリー呼出と、続く使用されない検証キーを取得する別のリモートコールを避けることが出来ます。一方欠点として、ユーザーがイントロスペクションエンドポイントアドレスを知って、それを手動で構成する必要があることです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:141
msgid "The alternative approach is to allow discovering the OIDC metadata (which is a default option) but require that only the remote JWT introspection is performed:"
msgstr "別のアプローチは、OIDCメタデータのディスカバリーは許可するが（これはデフォルトのオプション）、リモートJWTイントロスペクションのみが実行されることを要求することです:"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:146
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.token.require-jwt-introspection-only=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:149
msgid "An advantage of this approach is that the configuration is simple and easy to understand, while its disavantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address (though the verification keys will also not be fetched)."
msgstr "この方法の利点は、設定がシンプルでわかりやすいことですが、欠点は、イントロスペクションのエンドポイントアドレスを発見するために、リモートOIDCメタデータディスカバリー呼び出しが必要なことです（検証キーもフェッチされない）。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:151
#, fuzzy
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `jakarta.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr "なお、 `io.quarkus.oidc.TokenIntrospection` （単純な `jakarta.json.JsonObject` ラッパー）オブジェクトが作成され、JWTまたは不透明トークンが正常にイントロスペクトされた場合、SecurityIdentity `introspection` 属性として注入またはアクセスすることができる。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:153
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンイントロスペクションと UserInfo キャッシュ"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:156
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr "すべての不透明な、場合によっては JWT Bearer アクセストークンは、リモートで検査する必要があります。`UserInfo` も必要な場合は、同じアクセストークンを使用して OpenID Connectプロバイダーへのリモート呼び出しを再度実行します。したがって、`UserInfo` が必要で、現在のアクセストークンが不透明な場合、そのようなトークンごとに 2 つのリモート呼び出しが行われます。1 つはそれを検査し、もう 1 つは UserInfo を取得します。トークンが JWT の場合、通常は UserInfo を取得するには、1 回のリモート呼び出しだけが必要になります。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:158
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr "着信ベアラーまたはコードフローアクセストークンごとに最大 2 つのリモート呼び出しを行うコストが、問題になる場合があります。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:160
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr "本番環境でこれに当てはまる場合は、トークンのイントロスペクションと `UserInfo` データを短時間、たとえば 3 - 5 分間キャッシュすることをお勧めします。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:162
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr "`quarkus-oidc` は `quarkus.oidc.TokenIntrospectionCache` と `quarkus.oidc.UserInfoCache` インターフェイスを提供します。これらは `@ApplicationScoped` キャッシュ実装を実装するために使用できます。これらは `quarkus.oidc.TokenIntrospection` や `quarkus.oidc.UserInfo` オブジェクトを取得および保存するのに使用できます。以下に例を示します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:174
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "各 OIDC テナントは、ブール値 `quarkus.oidc.\"tenant\".allow-token-introspection-cache` および `quarkus.oidc.\"tenant\".allow-user-info-cache` プロパティーを使用して、その `quarkus.oidc.TokenIntrospection` や `quarkus.oidc.UserInfo` データを保存することを許可または拒否できます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:176
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "さらに、`quarkus-oidc` は、`quarkus.oidc.TokenIntrospectionCache` および `quarkus.oidc.UserInfoCache` インターフェイスの両方を実装するシンプルなデフォルトのメモリーベースのトークンキャッシュを提供します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:178
msgid "It can be activated and configured as follows:"
msgstr "これは、次のようにアクティブ化および設定できます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:187
#, no-wrap
msgid ""
"# 'max-size' is 0 by default so the cache can be activated by setting 'max-size' to a positive value.\n"
"quarkus.oidc.token-cache.max-size=1000\n"
"# 'time-to-live' specifies how long a cache entry can be valid for and will be used by a cleanup timer.\n"
"quarkus.oidc.token-cache.time-to-live=3M\n"
"# 'clean-up-timer-interval' is not set by default so the cleanup timer can be activated by setting 'clean-up-timer-interval'.\n"
"quarkus.oidc.token-cache.clean-up-timer-interval=1M\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:190
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the cleanup timer, if activated, will periodically check for the expired entries and remove them."
msgstr "デフォルトのキャッシュはトークンをキーとして使用し、各エントリーは `TokenIntrospection` や `UserInfo` を持つことができます。`max-size` のエントリー数までしか保持しません。新しいエントリーを追加するときにキャッシュがいっぱいな場合、期限切れのエントリーを 1 つ削除して、スペースを見つけようとします。さらに、クリーンアップタイマーがアクティブになっている場合は、期限切れのエントリーを定期的にチェックして削除します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:192
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr "デフォルトのキャッシュ実装を試すか、カスタム実装を登録してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:194
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON Web トークンのクレーム検証"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:197
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "ベアラのJWTトークンの署名が検証され、 `expires at` ( `exp`) のクレームが確認されると、次に `iss` ( `issuer`) クレーム値が検証されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:200
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr "デフォルトでは、 `iss` クレーム値は、well-knownプロバイダの設定で発見された `issuer` プロパティと比較されます。しかし、 `quarkus.oidc.token.issuer` プロパティが設定されている場合は、代わりに `iss` クレーム値がそれと比較されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:202
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr "場合によっては、この `iss` クレームの検証がうまくいかないことがあります。例えば、発見された `issuer` プロパティに内部の HTTP/IP アドレスが含まれている一方で、トークン `iss` クレーム値に外部の HTTP/IP アドレスが含まれている場合です。あるいは、発見された `issuer` プロパティにテンプレートのテナント変数が含まれているが、トークン `iss` クレーム値には完全なテナント固有の発行者の値が含まれている場合です。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:204
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr "このような場合には、 `quarkus.oidc.token.issuer=any` を設定して、issuer検証を省略することを検討してください。なお、この設定は推奨されておらず、他に選択肢がない場合を除き、避けるべきです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:206
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "Keycloakを使用していて、ホストアドレスが異なるために発行者検証エラーが発生する場合は、Keycloakに `KEYCLOAK_FRONTEND_URL` プロパティを設定して、同じホストアドレスが使用されるようにしてください。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:207
#, fuzzy
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom Jakarta REST filter, for example:"
msgstr "マルチテナント展開で `iss` プロパティがテナント固有である場合、 `SecurityIdentity` `tenant-id` 属性を使用して、エンドポイント自体やカスタム Jakarta REST フィルタなどで発行者が正しいかどうかを確認することができます:"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:214
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.container.ContainerRequestContext;\n"
"import jakarta.ws.rs.container.ContainerRequestFilter;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:218
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:223
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:226
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:234
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:237
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "なお、トークン `aud` ( `audience`) のクレーム値を検証するために `quarkus.oidc.token.audience` プロパティを使用することも推奨します。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:239
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:243
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OpenID Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr "シングルページアプリケーション (SPA) は通常、 `XMLHttpRequest` (XHR) と OpenID Connect プロバイダーが提供する JavaScript ユーティリティーコードを使用してBearer Tokenを取得し、それを使用してQuarkus `service` アプリケーションにアクセスします。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:245
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr "例えば、 `keycloak.js` を使用してユーザーを認証し、SPA から期限切れのトークンをリフレッシュする方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:284
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:286
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:289
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "別のドメインで動作する Single Page Application から OpenID Connect `service` アプリケーションを利用する場合は、CORS (Cross-Origin Resource Sharing) を設定する必要があります。詳細については、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:290
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:293
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` アプリケーションは、OpenID Connect プロバイダのトークン、 `JsonWebKey` (JWK) セット、そして時には `UserInfo` とイントロスペクションのエンドポイントアドレスを知る必要があります。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:295
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:297
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:310
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:312
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:315
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr "下流サービスへのベアラアクセストークンの伝播については、xref:security-openid-connect-client-reference.adoc#token-propagation[トークン伝播] の項を参照してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:317
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "Oidc プロバイダークライアント認証"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:320
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-oidc-code-flow-authentication-concept.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect Providerへのリモートリクエストが必要な場合に使用されます。ベアラートークンをイントロスペクトする必要がある場合 、`OidcProviderClient` はOpenID Connect Providerで認証する必要があります。サポートされているすべての認証オプションの詳細については、 xref:security-oidc-code-flow-authentication-concept.adoc#oidc-provider-client-authentication[OidcProviderClient 認証] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:322
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:325
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: Block title
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:327
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:354
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:478
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:570
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:681
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:339
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:342
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:364
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:488
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:580
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:691
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:346
#, no-wrap
msgid ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:349
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:352
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:361
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:367
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:370
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:609
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、例えば以下のように `application.properties` を設定します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:377
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:380
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:620
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:384
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:386
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:388
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:440
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:394
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:398
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:408
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", Set.of(\"user\")))\n"
"            .when().get(\"/api/users/me\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:417
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:420
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr "`quarkus-test-oidc-server` エクステンションには、`JSON Web Key` (`JWK`) 形式の署名 RSA 秘密鍵ファイルが含まれており、`smallrye.jwt.sign.key.location` 設定プロパティーでそれをポイントすることに注意してください。引数なしの `sign ()` 操作を使用してトークンに署名できます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:423
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex bearer token test scenarios."
msgstr "`quarkus-oidc` `service` アプリケーションを `OidcWiremockTestResource` でテストすると、通信チャネルまで Wiremock HTTP スタブに対してテストされるため、最高のカバレッジが得られます。 `OidcWiremockTestResource` は今後、より複雑なベアラートークンのテストシナリオをサポートするために拡張される予定です。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:426
msgid "If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource` one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr "現在 `OidcWiremockTestResource` でサポートされていない Wiremock スタブを定義するテストがすぐに必要な場合は、テストクラスに注入された `WireMockServer` インスタンスを介して行うことができます。次に例を示します。"

#. type: delimited block =
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:430
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers, because the Wiremock server is running in the JVM running the test, which cannot be accessed from the Docker container running the Quarkus application."
msgstr "Wiremock サーバーはテストを実行している JVM で実行されており、Quarkus アプリケーションを実行している Docker コンテナーからはアクセスできないため、`OidcWiremockTestResource` は Docker コンテナーに対して `@QuarkusIntegrationTest` では機能しません。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:435
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:438
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:443
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:447
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:450
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CustomOidcWireMockStubTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:453
#, no-wrap
msgid ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:459
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/auth/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:467
#, no-wrap
msgid ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:470
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:474
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloak に対する統合テストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用することをお勧めします。`Dev Services for Keycloak` は、テストコンテナーを起動して初期化します。これにより、`quarkus` レルム、`quarkus-app` クライアント (`secret` シークレット) が作成され、`alice` (`admin` および `user` ロール) および `bob` (`user` ロール) ユーザーが追加されます。これらのプロパティーはすべてカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:476
msgid "First you need to add the following dependency:"
msgstr "まず、次の依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:485
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:577
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:491
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:583
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:494
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr "これは、アクセストークンを取得するためのテストで使用できるユーティリティークラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:496
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "次に、`application.properties` を準備します。完全に空の `application.properties` から始めることができます。これは、`Dev Services for Keycloak` が実行中のテストコンテナーをポイントする `quarkus.oidc.auth-server-url` ならびに `quarkus.oidc.client-id=quarkus-app` および `quarkus.oidc.credentials.secret=secret` を登録するためです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:498
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "ただし、必要なすべての `quarkus-oidc` プロパティーがすでに設定されている場合は、`quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` の `prod` プロファイルに関連付けるだけでコンテナーを起動できます。以下に例を示します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:502
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:505
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定できます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:510
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:513
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "最後に、JVM モードで実行されるテストを作成します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:522
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:525
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:527
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:539
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:544
#, no-wrap
msgid ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:547
msgid "and in native mode:"
msgstr "および、ネイティブモードで以下を実行します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:553
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:557
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:560
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "初期化および設定方法の詳細については、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#. type: Title ====
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:562
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:566
msgid "If you need to do some integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev Services For Keycloak].  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloakとの統合テストが必要な場合は、 xref:integration-testing-keycloak-devservices[Dev Services For Keycloak] で行うことが推奨されます。 `Dev Services for Keycloak` を使用しない正当な理由がある場合にのみ、テストに `KeycloakTestResourceLifecycleManager` を使用してください。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:568
msgid "Start with adding the following dependency:"
msgstr "以下の依存関係を追加することから始めます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:586
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを開始する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:588
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefire プラグインを次のように設定します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:604
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:607
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr "(同様に、ネイティブイメージでテストする場合は `maven.failsafe.plugin`)。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:617
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:625
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:628
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:633
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:637
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:647
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:649
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:738
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:810
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:652
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`keycloak.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:655
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr "デフォルトでは、`KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化しますが、`keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` で、クライアント ID `quarkus-service-app` は、必要に応じて値をカスタマイズするために `keycloak.realm` および `keycloak.service.client` システムプロパティーを設定します。"

#. type: Title ====
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:657
#, no-wrap
msgid "Local Public Key"
msgstr "ローカル公開鍵"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:660
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr "また、 `quarkus-oidc` `service` アプリケーションのテストに、ローカルのインライン公開鍵を使用することもできます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:665
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:667
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:670
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr "`integration-tests/oidc-tenancy` から `main` のQuarkusリポジトリに `privateKey.pem` をコピーし、上記 `Wiremock` のセクションと同様のテストコードを使用してJWTトークンを生成します。必要であれば、独自のテストキーを使用することもできます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:672
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr "このアプローチは、Wiremockのアプローチと比較して、より限定された範囲をカバーします。例えば、リモート通信コードはカバーされません。"

#. type: Title ====
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:674
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:677
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "`@TestSecurity` および `@OidcSecurity` アノテーションを使用して、注入された `JsonWebToken` ならびに `UserInfo` および `OidcConfigurationMetadata` に依存する `service` アプリケーションエンドポイントコードをテストできます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:679
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:688
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:694
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:697
msgid "and write a test code like this one:"
msgstr "次のようなテストコードを作成します。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:711
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:715
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:796
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:722
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:736
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:741
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:813
msgid "where `ProtectedResource` class may look like this:"
msgstr "ここで、`ProtectedResource` クラスは次のようになります。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:747
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:751
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:822
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:758
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:764
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:774
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:779
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr "`@TestSecurity` アノテーションは常に使用する必要があり、その `user` プロパティーは `JsonWebToken.getName()` として返され、`roles` プロパティーは `JsonWebToken.getGroups()` として返されることに注意してください。`@OidcSecurity` アノテーションはオプションであり、追加のトークンクレームおよび `UserInfo` プロパティーと `OidcConfigurationMetadata` プロパティーを設定するために使用できます。さらに、`quarkus.oidc.token.issuer` プロパティーが設定されている場合、`OidcConfigurationMetadata` `issuer` プロパティー値として使用されます。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:781
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr "不透明なトークンを使用する場合は、次のようにテストできます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:792
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:808
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:818
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:827
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:837
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:840
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr "`@TestSecurity` `user` および `roles` 属性は `TokenIntrospection` `username` および `scope` プロパティーとして使用可能で、`io.quarkus.test.security.oidc.TokenIntrospection` を使用してさらに `email` などのイントロスペクション応答プロパティーを追加できることに注意してください。"

#. type: delimited block =
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:844
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, for example like so:"
msgstr "`@TestSecurity` と `@OidcSecurity` は、例えばこのようにメタアノテーションで組み合わせることができます:"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:856
#, no-wrap
msgid ""
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @Target({ ElementType.METHOD })\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public @interface TestSecurityMetaAnnotation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:858
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:861
msgid "This is particularly useful if the same set of security settings needs to be used in multiple test methods."
msgstr "これは、同じセキュリティ設定のセットを複数のテストメソッドで使用する必要がある場合に特に便利です。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:863
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: delimited block =
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:866
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、`io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:871
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:874
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "OidcProvider クライアント初期化エラーの詳細を確認するには、`io.quarkus.oidc.runtime.OidcRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:879
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:881
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "OpenID Connect プロバイダーへの外部および内部アクセス"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:884
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token then an issuer verification failure may be reported by the endpoint."
msgstr "OpenID Connect Providerの外部からアクセス可能なトークンやその他のエンドポイントは、自動検出されたURLや `quarkus.oidc.auth-server-url` 内部URLに対して設定されたURLとは異なるHTTP（S）URLを持つ場合があることに注意してください。例えば、SPAが外部のトークンエンドポイントアドレスからトークンを取得し、ベアラートークンとしてQuarkusに送信した場合、エンドポイントから発行者検証の失敗が報告されることがあります。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:887
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloak を使用する場合は、外部からアクセス可能なベース URL に設定された `KEYCLOAK_FRONTEND_URL` システムプロパティーで起動してください。他の Openid Connect プロバイダーと連携している場合は、プロバイダーのドキュメントを確認してください。"

#. type: Title ===
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:888
#, no-wrap
msgid "How to use 'client-id' property"
msgstr "'client-id' プロパティーの使用方法"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:891
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr "`quarkus.oidc.client-id` プロパティーは、現在のBearer Tokenを要求した OpenIDConnect クライアントを識別します。これは、ブラウザーで実行されている SPA アプリケーション、またはアクセストークンを Quarkus `service` アプリケーションに伝播する Quarkus `web-app` 機密クライアントアプリケーションの場合があります。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:894
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr "このプロパティーは、`service` アプリケーションがトークンをリモートで検査することが期待される場合に必要です。これは不透明なトークンの場合は常に当てはまります。ローカルの Json Web Key トークン検証のみが使用される場合、このプロパティーはオプションです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:896
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr "それでも、エンドポイントがリモートイントロスペクションエンドポイントへのアクセスを必要としない場合でも、このプロパティーを設定することをお勧めします。その背後にある理由は、`client-id` が設定されている場合、トークンオーディエンスを検証するために使用でき、トークンの検証が失敗したときにログに含まれるため、長い期間分析対象となる特定のクライアントに発行されたトークンのトレーサビリティが向上するためです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:898
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr "たとえば、OpenID Connect プロバイダーがトークンオーディエンスを設定する場合、次の設定パターンが推奨されます。"

#. type: delimited block -
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:905
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:908
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc.) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr "`quarkus.oidc.client-id` を設定したが、エンドポイントが OpenID Connect プロバイダーエンドポイントの 1 つへのリモートアクセスを必要としない場合は (イントロスペクション、トークン取得など)、`quarkus.oidc.credentials` または同様のプロパティーでクライアントシークレットを設定しないでください。使用されないためです。"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:910
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr "Quarkus の `web-app` アプリケーションには、常に `quarkus.oidc.client-id` プロパティーが必要である点に注意してください。"

#. type: Title ==
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:911
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:914
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティリファレンス]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:915
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer authentication]"
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDCベアラー認証によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:916
msgid "xref:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.adoc[Protect service applications by using OIDC Bearer authentication]"
msgstr "xref:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.adoc[OIDCベアラー認証でサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:917
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:918
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:919
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:920
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:921
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:922
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[JSONウェブトークン (JWT) のビルド、署名、暗号化]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:923
msgid "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2の認証メカニズムの選択]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:924
msgid "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:925
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#. type: Plain text
#: upstream/_guides/security-oidc-bearer-authentication-concept.adoc:925
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Adminクライアント]"
