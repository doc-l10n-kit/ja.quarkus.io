msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_guides/kafka-streams.adoc:6
msgid "Using Apache Kafka Streams"
msgstr "Apache Kafka ストリームの使用"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:11
msgid "This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka."
msgstr "このガイドでは、QuarkusアプリケーションでApache Kafka Streams APIを利用して、Apache Kafkaをベースにしたストリーム処理アプリケーションを実装する方法を説明します。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:13
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:19
#, fuzzy
msgid "It is recommended, that you have read the link:{quickstarts-tree-url}/kafka-quickstart[Kafka quickstart] before."
msgstr "link:{quickstarts-tree-url}/kafka-quickstart[Kafkaのクイック] スタートを読んでおくことをお勧めします。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:23
msgid ""
"The Quarkus extension for Kafka Streams allows for very fast turnaround times during development by supporting the Quarkus Dev Mode (e.g. via `./mvnw compile quarkus:dev`).\n"
"After changing the code of your Kafka Streams topology, the application will automatically be reloaded when the next input message arrives."
msgstr "Kafka Streams用のQuarkusエクステンションでは、Quarkus Dev モード（例：`./mvnw compile quarkus:dev`経由）をサポートすることによって、開発期間を非常に短縮することができます。 Kafka Streamsトポロジーのコードを変更した後、次の入力メッセージが到着すると、アプリケーションは自動的に再読み込みされます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:26
msgid ""
"A recommended development set-up is to have some producer which creates test messages on the processed topic(s) in fixed intervals, e.g. every second and observe the streaming application's output topic(s) using a tool such as `kafkacat`.\n"
"Using the dev mode, you'll instantly see messages on the output topic(s) as produced by the latest version of your streaming application when saving."
msgstr "推奨される開発セットアップは、処理されたトピックに対して一定の間隔 (たとえば毎秒) でテストメッセージを作成するプロデューサを用意し、 `kafkacat` のようなツールを使用してストリーミング アプリケーションの出力トピックを観察することです。Devモードを使用すると、保存時にストリーミングアプリケーションの最新バージョンによって生成された出力トピック上のメッセージを即座に見ることができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:29
msgid "For the best development experience, we recommend applying the following configuration settings to your Kafka broker:"
msgstr "最高の開発環境を実現するために、Kafkaブローカーに以下の構成設定を適用することをお勧めします:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:36
msgid "Also specify the following settings in your Quarkus `application.properties`:"
msgstr "また、以下の設定をQuarkusの `application.properties` で指定します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:44
msgid "Together, these settings will ensure that the application can very quickly reconnect to the broker after being restarted in dev mode."
msgstr "これらの設定を併用することで、アプリケーションをDevモードで再起動した後に、非常に迅速にブローカに再接続できるようになります。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:47
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:49
msgid ""
"In this guide, we are going to generate (random) temperature values in one component (named `generator`).\n"
"These values are associated to given weather stations and are written in a Kafka topic (`temperature-values`).\n"
"Another topic (`weather-stations`) contains just the main data about the weather stations themselves (id and name)."
msgstr "このガイドでは、(ランダムな)温度値を 1 つのコンポーネント ( `generator` ) で生成します。これらの値は、与えられた気象観測所に関連付けられ、Kafka トピック ( `temperature-values` ) に書き込まれます。別のトピック ( `weather-stations` ) には、気象観測所自体に関するマスターデータ (id とname) だけが格納されています。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:53
msgid "A second component (`aggregator`) reads from the two Kafka topics and processes them in a streaming pipeline:"
msgstr "2 つ目のコンポーネント ( `aggregator` ) は、2 つの Kafka トピックから読み込み、ストリーミングパイプラインで処理します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:55
msgid "the two topics are joined on weather station id"
msgstr "weather station id では、この2つのトピックが結合されています"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:56
msgid "per weather station the min, max and average temperature is determined"
msgstr "各気象観測所ごとに最低、最高、平均気温が決定されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:57
msgid "this aggregated data is written out to a third topic (`temperatures-aggregated`)"
msgstr "この集約されたデータは、第三のトピック ( `temperatures-aggregated` ) に書き出されます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:59
msgid ""
"The data can be examined by inspecting the output topic.\n"
"By exposing a Kafka Streams https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[interactive query],\n"
"the latest result for each weather station can alternatively be obtained via a simple REST query."
msgstr "出力トピックを検査することで、データを調べることができます。Kafka Streams の link:https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html[インタラクティブクエリ] を公開することで、各気象観測所の最新の結果を単純な REST クエリで取得することができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:63
msgid "The overall architecture looks like so:"
msgstr "全体のアーキテクチャはこのような感じです:"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:67
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:69
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:72
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:74
msgid "The solution is located in the `kafka-streams-quickstart` link:{quickstarts-tree-url}/kafka-streams-quickstart[directory]."
msgstr "ソリューションは `kafka-streams-quickstart` link:{quickstarts-tree-url}/kafka-streams-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:76
msgid "Creating the Producer Maven Project"
msgstr "Producer Maven プロジェクトの作成"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:78
msgid ""
"First, we need a new project with the temperature value producer.\n"
"Create a new project with the following command:"
msgstr "まず、温度値プロデューサを持つ新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:86
msgid "This command generates a Maven project, importing the Reactive Messaging and Kafka connector extensions."
msgstr "このコマンドは、Reactive Messaging と Kafka connector エクステンションをインポートして Maven プロジェクトを生成します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:88
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-kafka` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-reactive-messaging-kafka` エクステンションを追加することができます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:94
msgid "This will add the following to your build file:"
msgstr "これにより、ビルドファイルに以下の内容が追加されます:"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:249
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:258
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:111
msgid "The Temperature Value Producer"
msgstr "温度値プロデューサー"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:113
msgid ""
"Create the `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` file,\n"
"with the following content:"
msgstr "以下の内容の `producer/src/main/java/org/acme/kafka/streams/producer/generator/ValuesGenerator.java` ファイルを作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:199
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` to `temperature-values`."
msgstr "返却された `Multi` から `temperature-values` にアイテムを発送するように Reactive Messaging に指示します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:200
msgid "The method returns a Mutiny _stream_ (`Multi`) emitting a random temperature value every 0.5 seconds."
msgstr "このメソッドは、0.5 秒ごとにランダムな温度値を放出する Mutiny _ストリーム_ ( `Multi` ) を返します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:201
msgid "Instruct Reactive Messaging to dispatch the items from the returned `Multi` (static list of weather stations) to `weather-stations`."
msgstr "返された `Multi` (気象観測所の静的リスト) から `weather-stations` にアイテムを発送するように、Reactive Messaging に指示します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:203
msgid "The two methods each return a _reactive stream_ whose items are sent to the streams named `temperature-values` and `weather-stations`, respectively."
msgstr "この2つのメソッドは _reactive stream_ を返し、そのアイテムはそれぞれ `temperature-values` と `weather-stations` という名前のストリームに送られます。"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:205
msgid "Topic Configuration"
msgstr "トピック構成"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:207
msgid ""
"The two channels are mapped to Kafka topics using the Quarkus configuration file `application.properties`.\n"
"For that, add the following to the file `producer/src/main/resources/application.properties`:"
msgstr "2つのチャンネルは、Quarkus設定ファイル `application.properties` を使用してKafkaトピックにマッピングされます。そのためには、ファイル `producer/src/main/resources/application.properties` に以下を追加してください:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:224
msgid ""
"This configures the Kafka bootstrap server, the two topics and the corresponding (de-)serializers.\n"
"More details about the different configuration options are available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation."
msgstr "これは、Kafka bootstrap server、2 つのトピック、および対応する (デ)シリアライザを設定します。さまざまな設定オプションの詳細については、Kafka ドキュメントの link:https://kafka.apache.org/documentation/#producerconfigs[Producer 設定] と link:https://kafka.apache.org/documentation/#consumerconfigs[Consumer 設定] のセクションを参照してください。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:227
msgid "Creating the Aggregator Maven Project"
msgstr "アグリゲータMavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:229
msgid ""
"With the producer application in place, it's time to implement the actual aggregator application,\n"
"which will run the Kafka Streams pipeline.\n"
"Create another project like so:"
msgstr "プロデューサアプリケーションを用意したら、Kafka Streams パイプラインを実行するアグリゲータアプリケーションを実装しましょう。このように別のプロジェクトを作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:238
msgid "This creates the `aggregator` project with the Quarkus extension for Kafka Streams and with the Jackson support for RESTEasy Reactive."
msgstr "これにより、Kafka Streams用のQuarkusエクステンションとJackson用のRESTEasyリアクティブを備えた `aggregator` プロジェクトが作成されます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:240
msgid ""
"If you already have your Quarkus project configured, you can add the `kafka-streams` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `kafka-streams` エクステンションを追加することができます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:246
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:263
msgid "The Pipeline Implementation"
msgstr "パイプラインの実装"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:265
msgid ""
"Let's begin the implementation of the stream processing application by creating\n"
"a few value objects for representing temperature measurements, weather stations and for keeping track of aggregated values."
msgstr "ストリーム処理アプリケーションの実装を開始しましょう。温度測定、気象観測所を表現し、集計値を追跡するためのいくつかの値オブジェクトを作成することから始めましょう。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:268
msgid ""
"First, create the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java`,\n"
"representing a weather station, with the following content:"
msgstr "まず、気象観測所を表すファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStation.java` を次の内容で作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:284
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:286
msgid ""
"Then the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java`,\n"
"representing temperature measurements for a given station:"
msgstr "次に、与えられたステーションの温度測定値を表すファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/TemperatureMeasurement.java` を作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:312
msgid ""
"And finally `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java`,\n"
"which will be used to keep track of the aggregated values while the events are processed in the streaming pipeline:"
msgstr "そして最後に `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/Aggregation.java` 、イベントがストリーミング・パイプラインで処理されている間、集約された値を追跡するために使用されます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:352
msgid ""
"Next, let's create the actual streaming query implementation itself in the `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` file.\n"
"All we need to do for that is to declare a CDI producer method which returns the Kafka Streams `Topology`;\n"
"the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine."
msgstr "次に、実際のストリーミングクエリの実装自体を `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/TopologyProducer.java` ファイルで作成してみましょう。そのために必要なのは、Kafka Streams `Topology` を返す CDI プロデューサメソッドを宣言することだけです。実際の Kafka Streams エンジンの設定、起動、停止は Quarkus エクステンションが担当します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:435
msgid "The `weather-stations` table is read into a `GlobalKTable`, representing the current state of each weather station"
msgstr "`weather-stations` テーブルは `GlobalKTable` に読み込まれ、各気象観測所の現在の状態を表す"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:436
msgid "The `temperature-values` topic is read into a `KStream`; whenever a new message arrives to this topic, the pipeline will be processed for this measurement"
msgstr "`temperature-values` トピックは `KStream` に読み込まれます。このトピックに新しいメッセージが到着するたびに、パイプラインはこの測定のために処理されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:437
msgid "The message from the `temperature-values` topic is joined with the corresponding weather station, using the topic's key (weather station id); the join result contains the data from the measurement and associated weather station message"
msgstr "`temperature-values` トピックからのメッセージは、トピックのキー (weather station id) を使用して、対応する気象観測所と結合されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:438
msgid "The values are grouped by message key (the weather station id)"
msgstr "値はメッセージキー(weather station id)によってグループ化されます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:439
msgid "Within each group, all the measurements of that station are aggregated, by keeping track of minimum and maximum values and calculating the average value of all measurements of that station (see the `Aggregation` type)"
msgstr "各グループ内では、最小値と最大値を記録し、その局のすべての測定値の平均値を計算することによって、その局のすべての測定値が集約されます ( `Aggregation` タイプを参照)。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:440
msgid "The results of the pipeline are written out to the `temperatures-aggregated` topic"
msgstr "パイプラインの結果は `temperatures-aggregated` トピックに書き出しています"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:442
msgid ""
"The Kafka Streams extension is configured via the Quarkus configuration file `application.properties`.\n"
"Create the file `aggregator/src/main/resources/application.properties` with the following contents:"
msgstr "Kafka Streams エクステンションは、Quarkusの設定ファイル `application.properties` で設定します。ファイル `aggregator/src/main/resources/application.properties` を以下の内容で作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:459
msgid ""
"The options with the `quarkus.kafka-streams` prefix can be changed dynamically at application startup,\n"
"e.g. via environment variables or system properties.\n"
"`bootstrap-servers` and `application-server` are mapped to the Kafka Streams properties `bootstrap.servers` and `application.server`, respectively.\n"
"`topics` is specific to Quarkus: the application will wait for all the given topics to exist before launching the Kafka Streams engine.\n"
"This is to done to gracefully await the creation of topics that don't yet exist at application startup time."
msgstr "`quarkus.kafka-streams` というプレフィックスを持つオプションは、アプリケーションの起動時に環境変数やシステムプロパティなどで動的に変更することが可能です。 `bootstrap-servers` と `application-server` は、それぞれ Kafka Streams のプロパティ `bootstrap.servers` と `application.server` にマップされます。`topics` は Quarkus 固有のもので、アプリケーションは与えられたトピックがすべて存在するのを待ってから、Kafka Streams エンジンを起動します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:465
msgid "Alternatively, you can use `kafka.bootstrap.servers` instead of `quarkus.kafka-streams.bootstrap-servers` as you did in the _generator_ project above."
msgstr "あるいは、上記の _generator_ プロジェクトで行ったように、 `quarkus.kafka-streams.bootstrap-servers` の代わりに `kafka.bootstrap.servers` を使用することができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:469
msgid "Once you are ready to promote your application into production, consider changing the above configuration values. While `cache.max.bytes.buffering=10240` will move your records faster through the topology, the default value of `10485760` is more throughput-friendly. Also condider increasing `metadata.max.age.ms` from `500`, which will update cluster metadata quickly, but will generate a lot of redundant requests, to a value closer to the default of `300000`. A `commit.interval.ms` of `1000` is good for exactly-once processing, but might generate excessive load for  the default at-least-once processing with the default value of `30000`."
msgstr "アプリケーションを本番環境に移行する準備ができたら、上記の設定値を変更することを検討してください。 `cache.max.bytes.buffering=10240` はトポロジーの中でレコードをより速く移動させますが、デフォルト値の `10485760` はよりスループットに優れています。また、 `metadata.max.age.ms` を `500` のように増やすと、クラスタのメタデータをすばやく更新できますが、冗長なリクエストが大量に発生するため、デフォルトの `300000` に近い値にすることを検討してください。 `commit.interval.ms` を `1000` にすると、完全一致の処理には適していますが、デフォルト値の `30000` では、最低一回の処理で過剰な負荷となる可能性があります。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:472
msgid ""
"All the properties within the `kafka-streams` namespace are passed through as-is to the Kafka Streams engine.\n"
"Changing their values requires a rebuild of the application."
msgstr "`kafka-streams` namespace内のすべてのプロパティーは、そのまま Kafka Streams エンジンに渡されます。プロパティーの値を変更するには、アプリケーションの再構築が必要です。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:475
msgid "Building and Running the Applications"
msgstr "アプリケーションのビルドと実行"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:477
msgid "We now can build the `producer` and `aggregator` applications:"
msgstr "これで、`producer` と `aggregator` のアプリケーションをビルドすることができます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:485
msgid ""
"Instead of running them directly on the host machine using the Quarkus dev mode,\n"
"we're going to package them into container images and launch them via Docker Compose.\n"
"This is done in order to demonstrate scaling the `aggregator` aggregation to multiple nodes later on."
msgstr "QuarkusのDevモードを使ってホストマシン上で直接実行するのではなく、コンテナーイメージにパッケージ化してDocker Compose経由で起動します。これは、後で `aggregator` のアグリゲーションを複数のノードにスケーリングすることを実証するために行います。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:489
msgid ""
"The `Dockerfile` created by Quarkus by default needs one adjustment for the `aggregator` application in order to run the Kafka Streams pipeline.\n"
"To do so, edit the file `aggregator/src/main/docker/Dockerfile.jvm` and replace the line `FROM fabric8/java-alpine-openjdk8-jre` with `FROM fabric8/java-centos-openjdk8-jdk`."
msgstr "Quarkus がデフォルトで作成する `Dockerfile` は、Kafka Streams パイプラインを実行するために、`aggregator` アプリケーションを 1 つ調整する必要があります。 これを行うには、ファイル `aggregator/src/main/docker/Dockerfile.jvm` を編集して、行 `FROM fabric8/java-alpine-openjdk8-jre` を `FROM fabric8/java-centos-openjdk8-jdk` に置き換えます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:492
msgid "Next create a Docker Compose file (`docker-compose.yaml`) for spinning up the two applications as well as Apache Kafka and ZooKeeper like so:"
msgstr "次に、2 つのアプリケーションを起動するための Docker Compose ファイル ( `docker-compose.yaml` ) を作成し、Apache Kafka と ZooKeeper と同様に以下のようにします:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:555
msgid ""
"To launch all the containers, building the `producer` and `aggregator` container images,\n"
"run `docker-compose up --build`."
msgstr "`producer` と `aggregator` のコンテナーイメージをビルドして、すべてのコンテナーを起動するには、 `docker-compose up --build` を実行します。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:558
msgid "Instead of `QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS`, you can use `KAFKA_BOOTSTRAP_SERVERS`."
msgstr "`QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS` の代わりに、 `KAFKA_BOOTSTRAP_SERVERS` を使うこともできます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:560
msgid "You should see log statements from the `producer` application about messages being sent to the \"temperature-values\" topic."
msgstr "`producer` アプリケーションから、\"temperature-values\" トピックに送信されたメッセージに関するログステートメントが表示されるはずです。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:562
msgid ""
"Now run an instance of the _debezium/tooling_ image, attaching to the same network all the other containers run in.\n"
"This image provides several useful tools such as _kafkacat_ and _httpie_:"
msgstr "ここで _debezium/tooling_ イメージのインスタンスを実行し、他のすべてのコンテナーが実行しているのと同じネットワークにアタッチします。このイメージは、 _kafkacat_ や _httpie_ などの便利なツールを提供しています:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:570
msgid "Within the tooling container, run _kafkacat_ to examine the results of the streaming pipeline:"
msgstr "ツールコンテナー内で、 _kafkacatを_ 実行して、ストリーミングパイプラインの結果を調べます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:582
msgid ""
"You should see new values arrive as the producer continues to emit temperature measurements,\n"
"each value on the outbound topic showing the minimum, maximum and average temperature values of the represented weather station."
msgstr "プロデューサが温度測定値を出力し続けると、新しい値が表示され、送信トピックの各値は、表現された気象観測所の最小、最大、および平均温度値を表示します。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:585
msgid "Interactive Queries"
msgstr "インタラクティブクエリ"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:587
msgid ""
"Subscribing to the `temperatures-aggregated` topic is a great way to react to any new temperature values.\n"
"It's a bit wasteful though if you're just interested in the latest aggregated value for a given weather station.\n"
"This is where Kafka Streams interactive queries shine:\n"
"they let you directly query the underlying state store of the pipeline for the value associated to a given key.\n"
"By exposing a simple REST endpoint which queries the state store,\n"
"the latest aggregation result can be retrieved without having to subscribe to any Kafka topic."
msgstr "`temperatures-aggregated` のトピックを参照することは、新しい気温の値に反応するための素晴らしい方法です。しかし、特定の気象観測所の最新の集計値だけに興味があるのであれば、少しもったいないです。そこで、Kafka Streams のインタラクティブクエリが威力を発揮します。ステートストアをクエリするシンプルな REST エンドポイントを公開することで、Kafka トピックを参照しなくても最新の集計結果を取得することができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:594
msgid "Let's begin by creating a new class `InteractiveQueries` in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java`:"
msgstr "まず、ファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/InteractiveQueries.java` 内に `InteractiveQueries` を作成することから始めましょう:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:596
msgid "one more method to the `KafkaStreamsPipeline` class which obtains the current state for a given key:"
msgstr "`KafkaStreamsPipeline` クラスに、与えられたキーの現在の状態を取得するメソッドをもう一つ追加しました:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:640
msgid "A value for the given station id was found, so that value will be returned"
msgstr "指定された station id の値が見つかったので、その値が返されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:641
msgid "No value was found, either because a non-existing station was queried or no measurement exists yet for the given station"
msgstr "存在しないステーションが照会されたか、指定されたステーションの測定値がまだ存在しないかのどちらかで、値が見つかりませんでした"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:643
msgid "Also create the method's return type in the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java`:"
msgstr "また、メソッドの戻り値の型もファイル `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java` に作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:679
msgid ""
"Also create `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java`,\n"
"which represents the actual aggregation result for a weather station:"
msgstr "また、気象観測所の実際の集計結果を表す `aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java` を作成します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:720
msgid ""
"We now can add a simple REST endpoint (`aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java`),\n"
"which invokes `getWeatherStationData()` and returns the data to the client:"
msgstr "これで、 `getWeatherStationData()` を呼び出してクライアントにデータを返すシンプルな REST エンドポイント ( `aggregator/src/main/java/org/acme/kafka/streams/aggregator/rest/WeatherStationEndpoint.java` ) を追加することができます:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:764
msgid "Depending on whether a value was obtained, either return that value or a 404 response"
msgstr "値が取得されたかどうかに応じて、その値を返すか、404 レスポンスを返すかのどちらかを選択します"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:766
msgid "With this code in place, it's time to rebuild the application and the `aggregator` service in Docker Compose:"
msgstr "このコードで、Docker Composeでアプリケーションと `aggregator` サービスを再構築します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:775
msgid ""
"This will rebuild the `aggregator` container and restart its service.\n"
"Once that's done, you can invoke the service's REST API to obtain the temperature data for one of the existing stations.\n"
"To do so, you can use `httpie` in the tooling container launched before:"
msgstr "これにより、 `aggregator` コンテナーが再構築され、サービスが再起動されます。これが完了したら、サービスの REST API を呼び出して、既存のステーションの 1 つの温度データを取得することができます。そのためには、前に起動したツーリングコンテナで `httpie` を使用します:"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:799
msgid "Scaling Out"
msgstr "スケールアウト"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:801
msgid ""
"A very interesting trait of Kafka Streams applications is that they can be scaled out,\n"
"i.e. the load and state can be distributed amongst multiple application instances running the same pipeline.\n"
"Each node will then contain a subset of the aggregation results,\n"
"but Kafka Streams provides you with https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[an API] to obtain the information which node is hosting a given key.\n"
"The application can then either fetch the data directly from the other instance, or simply point the client to the location of that other node."
msgstr "Kafka Streams の非常に興味深い特性は、それらがスケールアウト可能であるということです。つまり、同じパイプラインを実行している複数のアプリケーションインスタンス間で負荷や状態を分散させることができます。各ノードには集約結果のサブセットが含まれますが、Kafka Streams は与えられたキーをホストしているノードの情報を取得するための link:https://kafka.apache.org/22/documentation/streams/developer-guide/interactive-queries.html#querying-remote-state-stores-for-the-entire-app[API] を提供しています。アプリケーションは、他のインスタンスから直接データを取得するか、クライアントにその他のノードの場所を指定するだけです。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:807
msgid "Launching multiple instances of the `aggregator` application will make look the overall architecture like so:"
msgstr "`aggregator` アプリケーションの複数のインスタンスを起動すると、全体のアーキテクチャがこのようになります:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:811
msgid "The `InteractiveQueries` class must be adjusted slightly for this distributed architecture:"
msgstr "`InteractiveQueries` クラスは、この分散型アーキテクチャ用に少し調整する必要があります:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:861
msgid "The streams metadata for the given weather station id is obtained"
msgstr "与えられた station id のストリームメタデータが取得されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:862
msgid "The given key (weather station id) is maintained by the local application node, i.e. it can answer the query itself"
msgstr "与えられたキー(weather station id)はローカルのアプリケーションノードによって管理されています。つまり、それ自身がクエリに答えることができます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:863
msgid "The given key is maintained by another application node; in this case the information about that node (host and port) will be returned"
msgstr "与えられたキーが他のアプリケーションノードによって管理されている。この場合、そのノードに関する情報(ホストとポート)が返されます"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:864
msgid "The `getMetaData()` method is added to provide callers with a list of all the nodes in the application cluster."
msgstr "アプリケーションクラスタ内の全ノードのリストを呼び出し元に提供するために `getMetaData()` メソッドが追加されました。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:866
msgid "The `GetWeatherStationDataResult` type must be adjusted accordingly:"
msgstr "`GetWeatherStationDataResult` のタイプは、それに合わせて調整する必要があります:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:919
msgid ""
"Also, the return type for `getMetaData()` must be defined\n"
"(`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java`):"
msgstr "また、`getMetaData()` の戻り値の型を定義する必要があります  ( `aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java` ):"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:940
msgid "Lastly, the REST endpoint class must be updated:"
msgstr "最後に、RESTエンドポイントクラスを更新する必要があります:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1009
msgid "The data was found locally, so return it"
msgstr "ローカルにデータが見つかったので、それを返す"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1010
msgid "The data is maintained by another node, so reply with a redirect (HTTP status code 303) if the data for the given key is stored on one of the other nodes."
msgstr "指定されたキーのデータが他のノードで管理されている場合は、リダイレクト（HTTPステータスコード303）で応答してください。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1011
msgid "No data was found for the given weather station id"
msgstr "指定された weather station id に対するデータが見つからなかった"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1012
msgid "Exposes information about all the hosts forming the application cluster"
msgstr "アプリケーションクラスタを形成するすべてのホストに関する情報を公開する"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1014
msgid ""
"Now stop the `aggregator` service again and rebuild it.\n"
"Then let's spin up three instances of it:"
msgstr "ここで再び `aggregator` サービスを停止してリビルドします。そして、3つのインスタンスを起動してみましょう:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1024
msgid ""
"When invoking the REST API on any of the three instances, it might either be\n"
"that the aggregation for the requested weather station id is stored locally on the node receiving the query,\n"
"or it could be stored on one of the other two nodes."
msgstr "3つのインスタンスのいずれかでREST APIを呼び出す場合、要求された weather station id の集約は、クエリを受信したノードにローカルに格納されるか、他の2つのノードのいずれかに格納されるかのどちらかであるかもしれません。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1028
msgid ""
"As the load balancer of Docker Compose will distribute requests to the `aggregator` service in a round-robin fashion,\n"
"we'll invoke the actual nodes directly.\n"
"The application exposes information about all the host names via REST:"
msgstr "Docker Composeのロードバランサーはラウンドロビン方式でリクエストを `aggregator` サービスに振り分けるので、実際のノードを直接呼び出すことになります。 このアプリケーションでは、すべてのホスト名に関する情報をRESTで公開しています:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1064
msgid ""
"Retrieve the data from one of the three hosts shown in the response\n"
"(your actual host names will differ):"
msgstr "レスポンスに表示された3つのホストのいずれかからデータを取得する (実際のホスト名は異なります):"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1072
msgid "If that node holds the data for key \"1\", you'll get a response like this:"
msgstr "そのノードがキー “1 “のデータを保持していれば、次のような応答が得られる:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1092
msgid "Otherwise, the service will send a redirect:"
msgstr "そうでない場合は、サービスはリダイレクトを送信します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1103
msgid "You can also have _httpie_ automatically follow the redirect by passing the `--follow option`:"
msgstr "また、 `--follow option` を渡すことで _httpie_ が自動的にリダイレクトに従うようにすることもできます:"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1110
msgid "Running Natively"
msgstr "ネイティブ実行"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1112
msgid ""
"The Quarkus extension for Kafka Streams enables the execution of stream processing applications\n"
"natively via GraalVM without further configuration."
msgstr "Kafka Streams用のQuarkusエクステンションを使用すると、GraalVMを介してストリーム処理アプリケーションをネイティブ実行することができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1115
msgid ""
"To run both the `producer` and `aggregator` applications in native mode,\n"
"the Maven builds can be executed using `-Dnative`:"
msgstr "`producer` と `aggregator` の両方のアプリケーションをネイティブモードで実行するには、 `-Dnative` を使って Maven ビルドを実行します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1124
msgid "Now create an environment variable named `QUARKUS_MODE` and with value set to \"native\":"
msgstr "ここで、 `QUARKUS_MODE` という名前の環境変数を作成し、値を\"native\"に設定します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1131
msgid ""
"This is used by the Docker Compose file to use the correct `Dockerfile` when building the `producer` and `aggregator` images.\n"
"The Kafka Streams application can work with less than 50 MB RSS in native mode.\n"
"To do so, add the `Xmx` option to the program invocation in `aggregator/src/main/docker/Dockerfile.native`:"
msgstr "これは Docker Compose ファイルで、`producer` と `aggregator` のイメージをビルドする際に、正しい `Dockerfile` を使用するために使用されます。 Kafka Streams アプリケーションは、ネイティブモードで 50MB 未満の RSS で動作させることができます。これを行うには、`aggregator/src/main/docker/Dockerfile.native` のプログラム呼び出しに `Xmx` オプションを追加してください:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1140
msgid ""
"Now start Docker Compose as described above\n"
"(don't forget to rebuild the container images)."
msgstr "ここで、上記のようにDocker Composeを起動します(コンテナーイメージのリビルドを忘れずに)。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1143
msgid "Kafka Streams Health Checks"
msgstr "Kafka Streams のヘルスチェック"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1145
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka-streams` will automatically add:"
msgstr "`quarkus-smallrye-health` のエクステンションを使用している場合は、 `quarkus-kafka-streams` が自動的に以下を追加します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1147
msgid "a readiness health check to validate that all topics declared in the `quarkus.kafka-streams.topics` property are created,"
msgstr "`quarkus.kafka-streams.topics` プロパティで宣言されたすべてのトピックが作成されているかどうかを確認するための Readiness ヘルスチェック"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1148
msgid "a liveness health check based on the Kafka Streams state."
msgstr "Kafka Streams の状態に基づく Liveness ヘルスチェック"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1150
msgid "So when you access the `/q/health` endpoint of your application you will have information about the state of the Kafka Streams and the available and/or missing topics."
msgstr "そのため、アプリケーションの `/q/health` エンドポイントにアクセスすると、Kafka Streams の状態や、利用可能なトピックや不足しているトピックについての情報を得ることができます。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1152
msgid "This is an example of when the status is `DOWN`:"
msgstr "これは、ステータスが `DOWN` になった場合の例です:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1182
msgid "Liveness health check. Also available at `/q/health/live` endpoint."
msgstr "Liveness ヘルスチェック。 `/q/health/live` エンドポイントでも利用可能。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1183
msgid "Readiness health check. Also available at `/q/health/ready` endpoint."
msgstr "Rediness ヘルスチェック。 `/q/health/ready` エンドポイントでも利用可能。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1185
msgid "So as you can see, the status is `DOWN` as soon as one of the `quarkus.kafka-streams.topics` is missing or the Kafka Streams `state` is not `RUNNING`."
msgstr "つまり、`quarkus.kafka-streams.topics`のいずれかが欠落しているか、Kafka Streamsの`state`が`RUNNING`でなければ、すぐにステータスが `DOWN` になります。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1187
msgid ""
"If no topics are available, the `available_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`.\n"
"As well as if no topics are missing, the `missing_topics` key will not be present in the `data` field of the `Kafka Streams topics health check`."
msgstr "トピックがない場合、 `Kafka Streams topics health check` の `data` フィールドに `available_topics` キーは表示されません。また、トピックがない場合は、 `Kafka Streams topics health check` の `data` フィールドに `missing_topics` キーは表示されません。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1190
msgid "You can of course disable the health check of the `quarkus-kafka-streams` extension by setting the `quarkus.kafka-streams.health.enabled` property to `false` in your `application.properties`."
msgstr "もちろん、 `quarkus-kafka-streams` エクステンションのヘルスチェックを無効にすることもできます。`application.properties` の中で `quarkus.kafka-streams.health.enabled` を `false` にしてください。"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1192
msgid "Obviously you can create your liveness and readiness probes based on the respective endpoints `/q/health/live` and `/q/health/ready`."
msgstr "言うまでもなく、それぞれのエンドポイント `/q/health/live` と `/q/health/ready` に対して自前の Liveness および Rediness プローブを作成することもできます。"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:1194
msgid "Liveness health check"
msgstr "Liveness ヘルスチェック"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1196
msgid "Here is an example of the liveness check:"
msgstr "Liveness チェックの一例をご紹介します:"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1219
msgid "The `state` is coming from the `KafkaStreams.State` enum."
msgstr "`state` は `KafkaStreams.State` Enum から来ています。"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:1221
msgid "Readiness health check"
msgstr "Rediness ヘルスチェック"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1223
msgid "Here is an example of the readiness check:"
msgstr "ここでは、Rediness チェックの一例をご紹介します:"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1247
msgid "Going Further"
msgstr "さらに詳しく"

#. type: Plain Text
#: upstream/_guides/kafka-streams.adoc:1249
msgid ""
"This guide has shown how you can build stream processing applications using Quarkus and the Kafka Streams APIs,\n"
"both in JVM and native modes.\n"
"For running your KStreams application in production, you could also add health checks and metrics for the data pipeline.\n"
"Refer to the Quarkus guides on xref:telemetry-micrometer.adoc[Micrometer], xref:smallrye-metrics.adoc[SmallRye Metrics], and xref:smallrye-health.adoc[SmallRye Health] to learn more."
msgstr "このガイドでは、QuarkusとKafka Streams APIを使用して、JVMモードとネイティブモードの両方でストリーム処理アプリケーションを構築する方法を紹介しました。KStreamsアプリケーションを本番環境で実行するために、データパイプラインのヘルスチェックとメトリクスを追加することもできます。詳細は、Quarkusの xref:telemetry-micrometer.adoc[Micrometer] 、xref:smallrye-metrics.adoc[SmallRye Metrics] 、 xref:smallrye-health.adoc[SmallRye Health] のガイドを参照してください。"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1254
msgid "Configuration Reference"
msgstr "設定リファレンス"
