msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_guides/funqy-knative-events.adoc:6
msgid "Funqy Knative Events Binding"
msgstr "Funqy Knative Events バインディング"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:12
msgid ""
"Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] builds off of the xref:funqy-http.adoc[Funqy HTTP] extension to allow you to\n"
"route and process Knative Events within a Funqy function."
msgstr "Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events]は、 link:funqy-http.html[Funqy HTTP]エクステンションをベースに構築されており、Funqy関数内でKnativeイベントをルーティングして処理することができます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:15
msgid ""
"The guide walks through quickstart code to show you how you can deploy and invoke on Funqy functions\n"
"with Knative Events."
msgstr "このガイドでは、クイックスタートコードを使って、Knative Events を使って Funqy 関数をデプロイして呼び出す方法を説明します。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:18
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:23
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:24
msgid "Have gone through the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative Tutorial], specifically link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:26
msgid "Setting up Knative"
msgstr "Knative の設定"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:28
msgid ""
"Setting up Knative locally in a Minikube environment is beyond the scope of this guide.  It is advised\n"
"to follow  https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[this] Knative Tutorial\n"
"put together by Red Hat.  It walks through how to set up Knative on Minikube or OpenShift in a local environment."
msgstr "Minikube 環境で Knative をローカルに設定することは、このガイドの範囲を超えています。link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Red HatがまとめたKnativeチュートリアル] に従うことをお勧めします。このチュートリアルでは、ローカル環境でMinikubeやOpenShift上でKnativeをセットアップする方法を説明しています。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:32
msgid ""
"Specifically you should run the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]\n"
"tutorial as this guide requires that you can invoke on a Broker to trigger the quickstart code."
msgstr "このガイドでは、クイックスタートコードをトリガーするためにブローカーを呼び出す必要があるため、特に link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[ブローカーとトリガー] のチュートリアルを実行する必要があります。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:35
msgid "Read about Cloud Events"
msgstr "Cloud Events についての記事を読む"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:37
msgid "The Cloud Event link:https://cloudevents.io/[specification] is a good read to give you an even greater understanding of Knative Events."
msgstr "Knative Events をより深く理解するために、Cloud Events の link:https://cloudevents.io/[仕様] を読んでおくと良いでしょう。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:39
msgid "The Quickstart"
msgstr "クイックスタート"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:43
#, fuzzy
msgid "The solution is located in the `funqy-knative-events-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[directory]."
msgstr "ソリューションは `funqy-knative-events-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:45
msgid "The Quickstart Flow"
msgstr "クイックスタートの流れ"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:47
msgid ""
"The quickstart works by manually sending an HTTP request containing a Cloud Event to the Knative Broker using `curl`.\n"
"The Knative Broker receives the request and triggers the startup of the Funqy container built by the quickstart.\n"
"The event triggers the invocation of a chain of Funqy functions.  The output of one function triggers the\n"
"invocation of another Funqy function."
msgstr "クイックスタートは、Cloud Eventを含む HTTP リクエストを `curl` を使用して Knative Broker に手動で送信することで動作します。Knative Broker はリクエストを受信し、クイックスタートによって構築された Funqy コンテナの起動をトリガーします。イベントは、一連の Funqy 関数の呼び出しをトリガーします。1 つの関数の出力は、別の Funqy 関数の呼び出しをトリガーします。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:52
msgid "Funqy and Cloud Events"
msgstr "Funqy と Cloud Events"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:54
msgid ""
"When living within a Knative Events environment, Funqy functions are triggered by a specific\n"
"Cloud Event type.  You can have multiple Funqy functions within a single application/deployment,\n"
"but they must be triggered by a specific Cloud Event Type.  The exception to this rule is if there is\n"
"only one Funqy function in the application.  In that case, the event is pushed to that function irregardless\n"
"of the Cloud Event type."
msgstr "Knative Events環境内で稼働する場合、Funqy関数は特定のタイプの Cloud Event によってトリガーされます。1つのアプリケーション/デプロイメント内に複数のFunqy関数を持つことができますが、それらは特定のタイプの Cloud Event によってトリガーされなければなりません。このルールの例外は、アプリケーション内にFunqy関数が1つしかない場合です。この場合、イベントは Cloud Event タイプに関係なく、その関数にプッシュされます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:60
msgid ""
"Currently, Funqy can only consume JSON-based data.  It supports both Binary and Structured mode of execution,\n"
"but the data component of the Cloud Event message must be JSON.  This JSON must also be marshallable to and from the\n"
"Java parameters and return types of your functions."
msgstr "現在、FunqyはJSONベースのデータしか消費できません。それ自体はバイナリモードと構造化モードの両方をサポートしていますが、Cloud EventメッセージのデータコンポーネントはJSONでなければなりません。このJSONは、関数のJavaパラメータやリターンタイプとの間でマーシャル可能でなければなりません。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:64
msgid "The Code"
msgstr "コード"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:66
#, fuzzy
msgid ""
"Let's start looking at our quickstart code so that you can understand how Knative Events map to Funqy.\n"
"Open up link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"
msgstr "KnativeイベントがFunqyにどのようにマッピングされるかを理解するために、クイックスタートコードを見てみましょう。 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.javaを開いて] ください。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:69
msgid "The first function we'll look at is `defaultChain`."
msgstr "最初に見る関数は `defaultChain` です。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:83
msgid ""
"As is, a Funqy function has a default Cloud Event mapping.  By default, the Cloud Event type must match\n"
"the function name for the function to trigger.  If the function returns output,\n"
"the response is converted into a Cloud Event and returned to the Broker to be routed to other triggers.\n"
"The default Cloud Event type for this response is the function name + `.output`.  The default Cloud Event source is the function name."
msgstr "この状態で、Funqy関数はデフォルトの Cloud Event マッピングを持っています。デフォルトでは、 Cloud Event のタイプは、トリガする関数の関数名と一致していなければなりません。関数が出力を返す場合、レスポンスは Cloud Event に変換され、ブローカに返されて他のトリガーにルーティングされます。このレスポンスのデフォルトの Cloud Event  タイプは、関数名 + `.output` です。デフォルトの Cloud Event のソースは、関数名です。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:88
msgid ""
"So, for the `defaultChain` function, the Cloud Event type that triggers the function is `defaultChain`.  It generates\n"
"a response that triggers a new Cloud Event whose type is `defaultChain.output` and the event source is `defaultChain`."
msgstr "したがって、 `defaultChain` 関数の場合、この関数をトリガーする Cloud Event のタイプは `defaultChain` です。これは、タイプが `defaultChain.output` でイベントソースが `defaultChain` である新しい Cloud Event をトリガーするレスポンスを生成します。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:91
msgid ""
"While the default mapping is simple, it might not always be feasible.  You can change this default mapping\n"
"through configuration.  Let's look at the next function:"
msgstr "デフォルトのマッピングはシンプルですが、必ずしもうまくいくとは限りません。このデフォルトのマッピングは設定で変更することができます。次の関数を見てみましょう。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:106
#, fuzzy
msgid "The `configChain` function has its Cloud Event mapping changed by configuration within link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties]."
msgstr "`configChain` 関数は、 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties] 内のコンフィギュレーションによってクラウド・イベント・マッピングが変更されます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:116
msgid ""
"In this case, the configuration maps the incoming Cloud Event type `defaultChain.output` to the `configChain` function.\n"
"The `configChain` function maps its response to the `annotated` Cloud Event type, and the Cloud Event source `configChain`."
msgstr "この場合、この構成では、受信するCloud Eventのタイプ `defaultChain.output` を `configChain` 関数にマッピングします。 `configChain` 関数は、そのレスポンスを `annotated` Cloud Event タイプに、Cloud Event ソース `configChain` にマッピングします。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:119
msgid "`quarkus.funqy.knative-events.mapping.{function name}.trigger` sets the Cloud Event type that triggers a specific function. It is possible to use the special value `*` as a catch-all value. The function will in this case be used for all event types."
msgstr "`quarkus.funqy.knative-events.mapping.{function name}.trigger` は、特定の関数をトリガーする Cloud Event タイプを設定します。特別な値 `*` をキャッチオール値として使用することができます。 この場合、この関数はすべてのイベントタイプに使用されます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:120
msgid "`quarkus.funqy.knative-events.mapping.{function name}.response-type` sets the Cloud Event type of the response"
msgstr "`quarkus.funqy.knative-events.mapping.{function name}.response-type` は、レスポンスの Cloud Event タイプを設定します。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:121
msgid "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` sets the Cloud Event source of the response"
msgstr "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` は、レスポンスの Cloud Event のソースを設定します。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:123
msgid ""
"The Funqy Knative Events extension also has annotations to do this Cloud Event mapping to your functions.  Take a look at the\n"
"`annotatedChain` method"
msgstr "Funqy Knative Events エクステンションには、この Cloud Event の関数へのマッピングを行うためのアノテーションも用意されています。 `annotatedChain` メソッドを見てみましょう。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:140
msgid ""
"If you use the `@CloudEventMapping` annotation on your function you can map the Cloud Event type trigger\n"
"and the Cloud Event response.  In this example the `annotatedChain` function will be triggered\n"
"by the `annotated` Cloud Event type and the response will be mapped to a `lastChainLink` type\n"
"and `annotated` Cloud Event source."
msgstr "関数に `@CloudEventMapping` アノテーションを使用すると、Cloud Event タイプのトリガーとCloud Event レスポンスをマッピングできます。この例では、 `annotatedChain` 関数は `annotated` Cloud Event タイプによってトリガされ、レスポンスは `lastChainLink` タイプと `annotated` Cloud Eventソースにマッピングされます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:145
msgid ""
"So, if you look at all the functions defined within `SimpleFunctionChain` you'll notice that one function triggers the next.\n"
"The last function that is triggered is `lastChainLink`."
msgstr "つまり、 `SimpleFunctionChain` 内で定義されているすべての関数を見てみると、ある関数が次の関数を引き金にしていることに気づくでしょう。最後にトリガーされる関数は `lastChainLink` です。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:162
msgid ""
"There are two things to notice about this function.  One, it has no output.  Your functions are not\n"
"required to return output.  Second, there is an additional `event` parameter to the function."
msgstr "この関数には2つの注意点があります。一つは、この関数には出力がありません。あなたの関数は出力を返す必要はありません。第二に、この関数には追加の `event` パラメータがあります。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:165
msgid ""
"If you want to know additional information about the incoming Cloud Event, you can inject the\n"
"`io.quarkus.funqy.knative.events.CloudEvent` interface using the Funqy `@Context` annotation.  The `CloudEvent` interface exposes information\n"
"about the triggering event."
msgstr "受信したcloud eventに関する追加情報を知りたい場合は、Funqy `@Context` アノテーションを使用して `io.quarkus.funqy.knative.events.CloudEvent` インターフェースを注入することができます。 `CloudEvent` インターフェースは、トリガーとなるイベントに関する情報を公開します。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:180
msgid "Maven"
msgstr "Maven"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:182
#, fuzzy
msgid ""
"If you look at the link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM],\n"
"you'll see that it is a typical Quarkus POM that pulls in one Funqy dependency:"
msgstr "link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POMを] 見ると、典型的なQuarkusのPOMで、Funqyの依存関係を1つ取り込んでいることがわかる："

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:193
msgid "Dev mode and Testing"
msgstr "開発モードとテスト"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:195
msgid ""
"Funqy Knative Events support dev mode and unit testing using RestAssured.  You can invoke on Funqy Knative Events functions\n"
"using the same invocation model as\n"
"xref:funqy-http.adoc[Funqy HTTP] using normal HTTP requests, or Cloud Event Binary mode, or Structured Mode.  All\n"
"invocation modes are supported at the same time."
msgstr "Funqy Knative Eventsは、RestAssuredを使った開発モードとユニットテストをサポートしています。Funqy Knative Eventsの関数は、通常のHTTPリクエストを使った link:funqy-http.html[Funqy HTTP]と同じ呼び出しモデル、またはCloud Event Binaryモード、Structuredモードを使って呼び出すことができます。すべての呼び出しモードが同時にサポートされています。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:200
#, fuzzy
msgid ""
"So, if you open up the unit test code in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]\n"
"you'll see that its simply using RestAssured to make HTTP invocations to test the functions."
msgstr "link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.javaの] ユニットテストコードを開いてみると、単純にRestAssuredを使ってHTTP呼び出しをして関数をテストしていることがわかる。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:203
msgid "Funqy also works with Quarkus Dev mode!"
msgstr "FunqyはQuarkus 開発モードにも対応しています!"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:205
msgid "Build the Project"
msgstr "プロジェクトのビルド"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:207
msgid "First build the Java artifacts:"
msgstr "まず、Javaアーティファクトをビルドします。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:211
msgid "Next, a docker image is required by Knative, so you'll need to build that next:"
msgstr "次に、Knativeではdockerイメージが必要なので、続いてそれをビルドする必要があります。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:218
msgid ""
"Make sure to replace `yourAccountName` with your docker or quay account name when you run `docker build`.  The\n"
"Dockerfile is a standard Quarkus dockerfile.  No special Knative magic."
msgstr "`docker build` を実行する際には、必ず `yourAccountName` を docker または quay のアカウント名に置き換えてください。Dockerfileは標準のQuarkusのdockerfileです。特別なKnativeマジックはありません。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:221
msgid "Push your image to docker hub or quay"
msgstr "イメージをDocker HubやQuayにプッシュする"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:228
msgid "Again, make sure to replace `yourAccountName` with your docker or quay account name when you run `docker push`."
msgstr "繰り返しになりますが、 `docker push` を実行する際には、 `yourAccountName` を docker または quay のアカウント名に置き換えてください。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:230
msgid "Deploy to Kubernetes/OpenShift"
msgstr "Kubernetes/OpenShiftへのデプロイ"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:232
msgid ""
"The first step is to set up the broker in our namespace.\n"
"Following is an example command from the Knative cli."
msgstr "最初のステップは、私たちの名前空間にブローカーを設定することです。以下は、Knative cliのコマンド例です。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:241
msgid ""
"The broker we have created is called `default`, this broker will receive the cloud events.\n"
"The broker is also referenced in the function YAML files."
msgstr "作成したブローカーは `default` といい、このブローカーはクラウドのイベントを受け取ります。このブローカは関数のYAMLファイルでも参照されています。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:244
#, fuzzy
msgid ""
"The second step is to define a Kubernetes/OpenShift service to point to the Docker image you created and pushed\n"
"during build. Take a look at link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml]"
msgstr "2つ目のステップは、ビルド中に作成しプッシュしたDockerイメージを指すKubernetes/OpenShiftサービスを定義することだ。 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yamlを見て] みよう。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:264
msgid "This is a standard Kubernetes service definition YAML file."
msgstr "これはKubernetesの標準的なサービス定義YAMLファイルです。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:266
msgid "Make sure you change the image URL to point to the image you built and pushed earlier!"
msgstr "イメージのURLを、先に作成してプッシュしたイメージを指すように変更してください。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:268
msgid ""
"For our quickstart, one Kubernetes service will contain all functions. There's no reason you couldn't break up this\n"
"quickstart into multiple different projects and deploy a service for each function.  For simplicity, and to show that you\n"
"don't have to have a deployment per function, the quickstart combines everything into one project, image, and service."
msgstr "今回のクイックスタートでは、1つのKubernetesサービスにすべての関数を格納します。このクイックスタートを複数の異なるプロジェクトに分割し、各関数にサービスをデプロイできない理由はありません。簡単にするために、また関数ごとにデプロイメントを行う必要がないことを示すために、クイックスタートはすべてを1つのプロジェクト、イメージ、サービスにまとめます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:272
msgid "Deploy the service:"
msgstr "サービスyamlをデプロイします。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:279
msgid ""
"The next step is to deploy Knative Event triggers for each of the event types. As noted in the code section, each\n"
"Funqy function is mapped to a specific Cloud Event type.  You must create Knative Event triggers that map a Cloud Event\n"
"and route it to a specific Kubernetes service.  We have 4 different triggers."
msgstr "次のステップは、それぞれのイベントタイプにKnative Eventトリガーを展開することです。コードセクションで述べたように、Funqyの各関数は特定のCloud Eventタイプにマッピングされています。Cloud Eventをマッピングし、特定のKubernetesサービスにルーティングするKnative Event Triggersを作成する必要があります。トリガーは4種類あります。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:284
msgid "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"
msgstr "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:303
msgid ""
"The `spec:filter:attributes:type` maps a Cloud Event type to the Kubernetes service defined in `spec:subscriber:ref`.\n"
"When a Cloud Event is pushed to the Broker, it will trigger the spin up of the service mapped to that event."
msgstr "`spec:filter:attributes:type` は、 `spec:subscriber:ref` で定義されている Kubernetes サービスにCloud Eventのタイプをマッピングします。Cloud EventがBrokerにプッシュされると、そのイベントにマッピングされたサービスのスピンアップがトリガーされます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:306
msgid "There's a trigger YAML file for each of our 4 Funqy functions.  Deploy them all:"
msgstr "4つのFunqy関数ごとにTrigger YAMLファイルが用意されています。これらをすべてデプロイします:"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:316
msgid "Run the demo"
msgstr "デモの実行"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:318
msgid ""
"You'll need two different terminal windows.  One to do a curl request to the Broker, the other to watch the pod log\n"
"files, so you can see the messages flowing through the Funqy function event chain."
msgstr "2つの異なるターミナルウィンドウが必要です。一つは Broker への curl リクエストを行うためのもので、もう一つはポッドのログファイルを見るためのもので、Funqy 関数のイベントチェーンを流れるメッセージを見ることができます。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:321
msgid ""
"Make sure you have the `stern` tool installed.  See the Knative Tutorial setup for information on that.  Run stern\n"
"to look for logs outputted by our Funqy deployment"
msgstr "`stern` ツールがインストールされていることを確認してください。それについての情報は Knative チュートリアルのセットアップを参照してください。Funqy デプロイメントが出力したログを探すために stern を実行します。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:329
msgid "Open a separate terminal.  You'll first need to learn the URL of the broker.  Execute this command to find it."
msgstr "別の端末を開きます。まずブローカーのURLを知る必要があります。このコマンドを実行して探します。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:336
msgid "This will provide you a URL similar to e.g.: `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default`. Remember this URL."
msgstr "これにより、例えば以下のようなURLが表示されます:  `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default` 。このURLを覚えておいてください。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:338
msgid ""
"Next thing we need to do is ssh into our Kubernetes cluster so that we can send a curl request to our broker.\n"
"The following command will create a simple OS pod so we can curl into our functions."
msgstr "次にやるべきことは、Kubernetesクラスタにsshして、ブローカーにcurlリクエストを送ることです。以下のコマンドでシンプルなOSポッドを作成し、関数にcurlできるようにします。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:346
msgid "You might need to wait a couple of seconds until the curler pod comes up. Run the following to get bash access to the curler pod:"
msgstr "curler ポッドが立ち上がるまで、数秒待つ必要があるかもしれません。以下を実行して、curler pod への bash アクセスを取得します:"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:354
msgid "You will now be in a shell within the Kubernetes cluster.  Within the shell, execute this curl command , the broker address is an example and might differ based on your project or broker name."
msgstr "これで、Kubernetesクラスタ内のシェルに入ります。シェル内で次のcurlコマンドを実行します。ブローカーのアドレスは一例であり、プロジェクトやブローカー名によって異なる場合があります。"

#. type: Plain Text
#: upstream/_guides/funqy-knative-events.adoc:368
msgid ""
"This posts a Knative Event to the broker, which will trigger the `defaultChain` function.  As discussed earlier, the output\n"
"of `defaultChain` triggers an event that is posted to `configChain` which triggers an event posted to `annotatedChain` then\n"
"finally to the `lastChainLink` function.  You can see this flow in your `stern` window.  Something like this should\n"
"be outputted."
msgstr "これは、ブローカーに Knative イベントをポストし、 `defaultChain` 関数をトリガーします。前述したように、 `defaultChain` の出力は、 `configChain` に投稿されたイベントをトリガーにして、 `annotatedChain` に投稿されたイベントをトリガーにして、最後に `lastChainLink` 関数をトリガーにします。この流れは `stern` ウィンドウで見ることができます。以下のようなものが出力されるはずです。"
