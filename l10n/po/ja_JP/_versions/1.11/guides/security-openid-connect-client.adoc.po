msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:12
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:13
msgid "`quarkus-oidc-client` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenId Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]"
msgstr "`quarkus-oidc-client` および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および link:https://www.keycloak.org/about.html[Keycloak] などの OAuth 2.0 準拠の認可サーバーからアクセストークンを取得し、更新することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:16
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:17
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:22
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using `client_credentials` or `password` token grants and refresh the tokens using `refresh_token` grant."
msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:24
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:30
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:32
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:42
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client.grant-options.password.username=alice quarkus.oidc-client.grant-options.password.password=alice ``` In both cases `OidcClient` will auto-discover the token endpoint URL and use it to acquire the tokens."

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:43
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:46
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:51
msgid "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"
msgstr "``` import javax.inject.PostConstruct; import javax.inject.Inject; import javax.ws.rs.GET;"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:54
msgid "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"
msgstr "import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client.Tokens;"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:57
msgid "@Path(\"/service\")  public class OidcClientResource {"
msgstr "@Path(\"/service\")  public class OidcClientResource {"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:60
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""
"    @Inject\n"
"    OidcClient client;\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:62
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr "    volatile Tokens currentTokens;\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:67
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:70
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""
"    @GET\n"
"    public String getResponse() {\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:80
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:84
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、`OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:88
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:104
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:323
msgid "or"
msgstr "or"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:121
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:122
#, no-wrap
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:125
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:131
msgid "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"
msgstr "``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public class OidcClientRequestCustomFilter implements ClientRequestFilter {"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:134
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""
"    @Inject\n"
"    Tokens tokens;\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:141
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:143
msgid "The `Tokens` producer will acquire and refresh the tokens and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得して更新し、カスタムフィルターがいつどのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:145
msgid "See also the previous section about delaying the token acquisition in some cases."
msgstr "トークンの取得を遅らせる場合があることについては、前のセクションも参照してください。"

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:146
#, no-wrap
msgid "OidcClients"
msgstr "OidcClients"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:149
msgid "`io.quarkus.oidc.client.OidcClients` is a container of `OidcClient`s - it includes a default `OidcClient` (which can also be injected directly as described above) and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 `OidcClient` のコンテナです。デフォルトの `OidcClient` (上記のように直接注入することも可能です) と名前付きクライアントを含み、このように設定することができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:159
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:165
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:192
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:223
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:171
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:199
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:232
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:174
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:235
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:181
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:186
msgid "If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "link:security-openid-connect-multitenancy[OIDC マルチテナンシーを] 使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、 Vert.x `RoutingContext` `tenantId` 属性を例えば次のように使用することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:196
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:204
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:213
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:217
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:227
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:229
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:247
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\"));\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:250
#, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:254
msgid "`OidcClient` has to authenticate to the OpenId Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` やその他のグラントリクエストを成功させるために OpenId Connect Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:256
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:262
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.secret=mysecret ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:264
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:271
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.client-secret.value=mysecret quarkus.oidc-client.credentials.client-secret.method=post ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:273
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`:"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:279
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:281
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` with the PEM key file:"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:287
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:289
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` with the key store file:"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:298
msgid "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"
msgstr "``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password=mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:300
msgid "Using `private_key_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`private_key_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:307
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: Title ==
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:343
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/1.11/guides/security-openid-connect-client.adoc:346
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
