msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:13
msgid "The Reactive SQL Clients have a straightforward API focusing on scalability and low-overhead.  Currently, the following database servers are supported:"
msgstr "Reactive SQL クライアントは、スケーラビリティと低オーバーヘッドに焦点を当てたシンプルな API を持っています。現在、以下のデータベースサーバーがサポートされています。"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:15
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:475
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:662
#, no-wrap
msgid "DB2"
msgstr "DB2"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:16
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:483
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:588
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:670
#, no-wrap
msgid "PostgreSQL"
msgstr "PostgreSQL"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:17
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:479
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:606
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:666
#, no-wrap
msgid "MariaDB/MySQL"
msgstr "MariaDB/MySQL"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:19
msgid "In this guide, you will learn how to implement a simple CRUD application exposing data stored in *PostgreSQL* over a RESTful API."
msgstr "このガイドでは、 *PostgreSQL* に格納されたデータをRESTful APIで公開するシンプルなCRUDアプリケーションの実装方法を学びます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:21
msgid "Extension and connection pool class names for each client can be found at the bottom of this document."
msgstr "各クライアントのエクステンションと接続プールのクラス名は、このドキュメントの下部に記載されています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:23
msgid "If you are not familiar with the Quarkus Vert.x extension, consider reading the link:vertx[Using Eclipse Vert.x] guide first."
msgstr "Quarkus Vert.xエクステンションに慣れていない場合は、まず link:vertx[Using Eclipse Vert.x] ガイドを読むことを検討してください。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:25
msgid "The application shall manage fruit entities:"
msgstr "アプリケーションは、フルーツのエンティティを管理するものとします。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:29
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:31
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:33
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:36
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:40
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:46
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:51
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr "サンプルを試すためにすぐに使えるPostgreSQLサーバーが必要ですか?"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:55
#, no-wrap
msgid "docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:58
#, no-wrap
msgid "Installing"
msgstr "インストール"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:60
#, no-wrap
msgid "Reactive PostgreSQL Client extension"
msgstr "リアクティブな PostgreSQL クライアントエクステンション"

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:64
msgid "First, make sure your project has the `quarkus-reactive-pg-client` extension enabled.  If you are creating a new project, set the `extensions` parameter as follows:"
msgstr "まず、プロジェクトで `quarkus-reactive-pg-client` のエクステンションが有効になっていることを確認します。新しいプロジェクトを作成する場合は、 `extensions` パラメーターを以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:74
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=reactive-pg-client-quickstart \\\n"
"    -DclassName=\"org.acme.vertx.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy,reactive-pg-client,resteasy-mutiny\"\n"
"cd reactive-pg-client-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:77
msgid "If you have an already created project, the `reactive-pg-client` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、`add-extension` コマンドで既存のQuarkusプロジェクトに `reactive-pg-client` エクステンションを追加することが出来ます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:81
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"reactive-pg-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:84
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:93
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:96
msgid "Reactive REST endpoints in your application that return Uni or Multi need `Mutiny support for RESTEasy` extension (`io.quarkus:quarkus-resteasy-mutiny`) to work properly:"
msgstr "アプリケーション内で Uni または Multi を返す Reactive REST エンドポイントが正しく動作するには `Mutiny support for RESTEasy` エクステンション ( `io.quarkus:quarkus-resteasy-mutiny` ) が必要です。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:100
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:106
msgid "In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client.  If you're not familiar with Mutiny reactive types, read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr "このガイドでは、Reactive PostgreSQLクライアントのMutiny APIを使用します。Mutinyのリアクティブ型に慣れていない場合は、まず link:getting-started-reactive#mutiny[Getting Started with Reactiveガイド] を読んでください。"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:108
#, no-wrap
msgid "JSON Binding"
msgstr "JSON バインディング"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:112
msgid "We will expose `Fruit` instances over HTTP in the JSON format.  Consequently, you also need to add the `quarkus-resteasy-jackson` extension:"
msgstr "JSON 形式で HTTP 経由で `Fruit` インスタンスを公開します。そのため、 `quarkus-resteasy-jackson` のエクステンションも追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:116
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:119
msgid "If you prefer not to use the command line, manually add this to the dependencies section of your `pom.xml` file:"
msgstr "コマンドラインを使いたくない場合は、 `pom.xml` ファイルの依存関係セクションに以下を手動で追加してください。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:126
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:129
msgid "Of course, this is only a requirement for this guide, not any application using the Reactive PostgreSQL Client."
msgstr "もちろん、これはこのガイドの要件に過ぎず、Reactive PostgreSQLクライアントを使用したアプリケーションではありません。"

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:130
#, no-wrap
msgid "Configuring"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:133
msgid "The Reactive PostgreSQL Client can be configured with standard Quarkus datasource properties and a reactive URL:"
msgstr "Reactive PostgreSQLクライアントは、Quarkusの標準的なデータソースプロパティーとReactive URLを使用して設定することができます。"

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:135
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr "src/main/resources/application.properties"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:141
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:144
msgid "With that you may create your `FruitResource` skeleton and `@Inject` a `io.vertx.mutiny.pgclient.PgPool` instance:"
msgstr "これで `FruitResource` スケルトンと `@Inject` `io.vertx.mutiny.pgclient.PgPool` インスタンスを作成することができます。"

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:146
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:165
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:262
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:314
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:341
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:373
#, no-wrap
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr "src/main/java/org/acme/vertx/FruitResource.java"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:150
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:154
#, no-wrap
msgid ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:156
#, no-wrap
msgid "Database schema and seed data"
msgstr "データベーススキーマとシードデータ"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:160
msgid "Before we implement the REST endpoint and data management code, we need to setup the database schema.  It would also be convenient to have some data inserted upfront."
msgstr "RESTエンドポイントとデータ管理コードを実装する前に、データベーススキーマを設定する必要があります。また、いくつかのデータを前もって挿入しておくと便利です。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:163
msgid "For production we would recommend to use something like the link:flyway[Flyway database migration tool].  But for development we can simply drop and create the tables on startup, and then insert a few fruits."
msgstr "本番環境では、 link:flyway[Flywayデータベースマイグレーションツール] のようなものを使用することをお勧めします。しかし、開発のためには、単に起動時にテーブルをドロップして作成し、いくつかのフルーツを挿入することができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:170
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:177
#, no-wrap
msgid ""
"@PostConstruct\n"
"void config() {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:181
#, no-wrap
msgid ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:184
msgid "You may override the default value of the `myapp.schema.create` property in the `application.properties` file."
msgstr "`application.properties` ファイルの `myapp.schema.create` プロパティーのデフォルト値を上書きできます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:188
msgid "Almost ready! To initialize the DB in development mode, we will use the client simple `query` method.  It returns a `Uni` and thus can be composed to execute queries sequentially:"
msgstr "ほとんど準備ができています! 開発モードで DB を初期化するには、クライアントの単純な `query` メソッドを使用します。`Uni` を返すため、クエリーを順番に実行するように設定できます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:197
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:209
msgid "Wondering why we need block until the latest query is completed? This code is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  As a consequence, returning prematurely could lead to serving requests while the database is not ready yet."
msgstr "最新のクエリーが完了するまでブロックが必要なのはなぜですか? このコードは `@PostConstruct` メソッドの一部であり、Quarkus はそれを同期的に呼び出します。結果として、返すのが早すぎると、データベースの準備ができていないときにリクエストを処理する可能性があります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:213
msgid "That's it! So far we have seen how to configure a pooled client and execute simple queries.  We are now ready to develop the data management code and implement our RESTful endpoint."
msgstr "以上です。これまで、プールされたクライアントを設定し、単純なクエリーを実行する方法を見てきました。これで、データ管理コードを開発し、RESTful エンドポイントを実装する準備が整いました。"

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:214
#, no-wrap
msgid "Using"
msgstr "使用"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:216
#, no-wrap
msgid "Query results traversal"
msgstr "クエリー結果のトラバーサル"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:220
msgid "In development mode, the database is set up with a few rows in the `fruits` table.  To retrieve all the data, we will use the `query` method again:"
msgstr "開発モードでは、データベースは `fruits` テーブルのいくつかの行で設定されます。すべてのデータを取得するには、`query` メソッドを再度使用します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:224
#, no-wrap
msgid "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:228
msgid "When the operation completes, we will get a `RowSet` that has all the rows buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can be converted to a `Multi`:"
msgstr "操作が完了すると、すべての行がメモリーにバッファーリングされた `RowSet` を取得します。`RowSet` は `java.lang.Iterable<Row>` です。したがって、 `Multi` に変換できます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:234
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:238
msgid "The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It is extracted as a convenience for the implementation of the other data management methods:"
msgstr "`Fruit#from` メソッドは `Row` インスタンスを `Fruit` インスタンスに変換します。これは、他のデータ管理方法の実装の便宜のために展開されています。"

#. type: Block title
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:240
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:250
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:299
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:330
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:361
#, no-wrap
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr "src/main/java/org/acme/vertx/Fruit.java"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:245
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:248
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr "すべてをまとめると、`Fruit.findAll` メソッドは次のようになります。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:257
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:260
msgid "And the endpoint to get all fruits from the backend:"
msgstr "そして、バックエンドからすべての fruits を取得するためのエンドポイント:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:268
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:271
msgid "Now start Quarkus in `dev` mode with:"
msgstr "ここで、 `dev` モードでQuarkusを起動します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:275
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:278
msgid "Lastly, open your browser and navigate to http://localhost:8080/fruits, you should see:"
msgstr "最後に、ブラウザーを開いて http://localhost:8080/fruits に移動します。次のように表示されます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:282
#, no-wrap
msgid "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:284
#, no-wrap
msgid "Prepared queries"
msgstr "準備されたクエリー"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:287
msgid "The Reactive PostgreSQL Client can also prepare queries and take parameters that are replaced in the SQL statement at execution time:"
msgstr "Reactive PostgreSQL Client は、クエリーを準備し、実行時に SQL ステートメントで置き換えられるパラメーターを取得することもできます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:291
#, no-wrap
msgid "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:297
msgid "Similar to the simple `query` method, `preparedQuery` returns an instance of `PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to safely use an `id` provided by the user to get the details of a particular fruit:"
msgstr "単純な `query` メソッドと同様に、`preparedQuery` は `PreparedQuery<RowSet<Row>>` のインスタンスを返します。このツールを装備すると、ユーザーから提供された `id` を安全に使用して、特定の fruit の詳細を取得できます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:306
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:308
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr "準備されたクエリーパラメーターを保持するための `Tuple` を作成します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:309
msgid "Get an `Iterator` for the `RowSet` result."
msgstr "`RowSet` の結果に対して `Iterator` を取得します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:310
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr "エンティティーが見つかった場合は、`Row` から `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:312
msgid "And in the JAX-RS resource:"
msgstr "そして、JAX-RS リソースでは:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:323
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(@PathParam Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:325
msgid "Prepare a JAX-RS response with either the `Fruit` instance if found or the `404` status code."
msgstr "見つかった場合は `Fruit` インスタンスまたは `404` ステータスコードのいずれかを使用して JAX-RS 応答を準備します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:326
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:328
msgid "The same logic applies when saving a `Fruit`:"
msgstr "`Fruit` を保存するときに同じロジックが適用されます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:336
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:339
msgid "And in the web resource we handle the `POST` request:"
msgstr "また、Web リソースでは、`POST` リクエストを処理します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:349
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:351
#, no-wrap
msgid "Result metadata"
msgstr "結果のメタデータ"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:354
msgid "A `RowSet` does not only hold your data in memory, it also gives you some information about the data itself, such as:"
msgstr "`RowSet` はデータをメモリーに保持するだけでなく、次のようなデータ自体に関する情報も提供します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:356
msgid "the number of rows affected by the query (inserted/deleted/updated/retrieved depending on the query type),"
msgstr "クエリーの影響を受ける行数 (クエリータイプに応じて挿入/削除/更新/取得)、"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:357
msgid "the column names."
msgstr "列名。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:359
msgid "Let's use this to support removal of fruits in the database:"
msgstr "これを使用して、データベース内の fruits の削除をサポートしましょう。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:367
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:369
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr "メタデータを調べて、fruit が実際に削除されたかどうかを判断します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:371
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr "また、Web リソースで HTTP の `DELETE` メソッドを処理するには:"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:382
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(@PathParam Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:386
msgid "With `GET`, `POST` and `DELETE` methods implemented, we may now create a minimal web page to try the RESTful application out.  We will use https://jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr "`GET`、`POST`、および `DELETE` メソッドが実装されたので、RESTful アプリケーションを試すための最小限の Web ページを作成できます。 https://jquery.com/[jQuery] を使用して、バックエンドとのやり取りを簡素化します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:399
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:401
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:404
#, no-wrap
msgid ""
"<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:409
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:412
#, no-wrap
msgid ""
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:415
msgid "In the Javascript code, we need a function to refresh the list of fruits when:"
msgstr "Javascript コードでは、次の場合に fruits のリストを更新する関数が必要です。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:417
msgid "the page is loaded, or"
msgstr "ページが読み込まれる、または"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:418
msgid "a fruit is added, or"
msgstr "fruit が追加される、または"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:419
msgid "a fruit is deleted."
msgstr "fruit は削除される。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:444
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:448
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:450
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:459
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:462
#, no-wrap
msgid ""
"    refresh();\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:464
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr "データベースが空の場合、`fruits` パラメーターは定義されません。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:467
msgid "All done! Navigate to http://localhost:8080/fruits.html and read/create/delete some fruits."
msgstr "すべて完了! http://localhost:8080/fruits.html に移動し、いくつかの fruits を読み取り/作成/削除します。"

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:468
#, no-wrap
msgid "Database Clients details"
msgstr "データベースクライアントの詳細"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:472
#, no-wrap
msgid "Database"
msgstr "Database"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:472
#, no-wrap
msgid "Extension name"
msgstr "拡張子名"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:474
#, no-wrap
msgid "Pool class name"
msgstr "プールクラス名"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:476
#, no-wrap
msgid "`quarkus-reactive-db2-client`"
msgstr "`quarkus-reactive-db2-client`"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:478
#, no-wrap
msgid "`io.vertx.mutiny.db2client.DB2Pool`"
msgstr "`io.vertx.mutiny.db2client.DB2Pool`"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:480
#, no-wrap
msgid "`quarkus-reactive-mysql-client`"
msgstr "`quarkus-reactive-mysql-client`"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:482
#, no-wrap
msgid "`io.vertx.mutiny.mysqlclient.MySQLPool`"
msgstr "`io.vertx.mutiny.mysqlclient.MySQLPool`"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:484
#, no-wrap
msgid "`quarkus-reactive-pg-client`"
msgstr "`quarkus-reactive-pg-client`"

#. type: Table
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:485
#, no-wrap
msgid "`io.vertx.mutiny.pgclient.PgPool`"
msgstr "`io.vertx.mutiny.pgclient.PgPool`"

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:487
#, no-wrap
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:500
msgid "The following snippet shows how to run 2 insertions in the same transaction:"
msgstr "次のスニペットは、同じトランザクションで 2 つの挿入を実行する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:509
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return SqlClientHelper.inTransactionUni(client, tx -> {\n"
"        Uni<RowSet<Row>> insertOne = tx.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = tx.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:515
#, no-wrap
msgid ""
"        return insertOne.and(insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .onItem().ignore().andContinueWithNull();\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:518
msgid "In this example, the transaction is automatically committed on success or rolled back on failure."
msgstr "この例では、トランザクションは成功時に自動的にコミットされるか、失敗時にロールバックされます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:520
msgid "You can also create dependent actions as follows:"
msgstr "次のように依存アクションを作成することもできます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:524
#, no-wrap
msgid "return SqlClientHelper.inTransactionUni(client, tx -> tx\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:527
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"                .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:530
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> tx.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:532
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:534
#, no-wrap
msgid "Multiple Datasources"
msgstr "複数のデータソース"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:537
msgid "The reactive SQL clients support defining several datasources."
msgstr "Reactive SQL クライアントは、複数のデータソースの定義をサポートしています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:539
msgid "A typical configuration with several datasources would look like:"
msgstr "複数のデータソースを使用した典型的な構成は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:546
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:551
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:556
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:558
msgid "The default datasource - using PostgreSQL."
msgstr "デフォルトのデータソース - PostgreSQL を使用。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:559
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr "`additional1` と呼ばれる名前付きデータソース - PostgreSQL を使用。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:560
msgid "A named datasource called `additional2` - using MySQL."
msgstr "`additional2` と呼ばれる名前付きデータソース - MySQL を使用。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:562
msgid "You can then inject the clients as follows:"
msgstr "次に、次のようにクライアントを挿入できます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:567
#, no-wrap
msgid ""
"@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:571
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:575
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:577
msgid "Injecting the client for the default datasource does not require anything special."
msgstr "デフォルトのデータソースにクライアントを挿入するために特別なことは何も必要ありません。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:578
msgid "For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with the datasource name as its value."
msgstr "名前付きデータソースの場合、値としてデータソース名を指定して `@ReactiveDataSource` CDI 修飾子を使用します。"

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:579
#, no-wrap
msgid "UNIX Domain Socket connections"
msgstr "UNIX ドメインソケット接続"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:582
msgid "The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the server through a UNIX domain socket."
msgstr "PostgreSQL および MariaDB/MySQL クライアントは、UNIX ドメインソケットを介してサーバーに接続するように設定できます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:587
msgid "Then configure the database connection url.  This step depends on the database type."
msgstr "次に、データベース接続の URL を設定します。この手順は、データベースのタイプによって異なります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:593
msgid "The database connection url must be configured so that:"
msgstr "データベース接続の URL は、次のように設定する必要があります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:595
msgid "the `host` is the `directory` in the socket path"
msgstr "`host` はソケットパスの `directory` です"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:596
msgid "the `port` is the `port` in the socket path"
msgstr "`port` はソケットパスの `port` です"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:598
msgid "Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr "次のソケットパスを検討してください: `/var/run/postgresql/.s.PGSQL.5432`。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:600
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:613
msgid "In `application.properties` add:"
msgstr "`application.properties` で以下を追加します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:604
#, no-wrap
msgid "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:609
msgid "The database connection url must be configured so that the `host` is the socket path."
msgstr "データベース接続 URL は、 `host` がソケットパスになるように設定する必要があります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:611
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr "次のソケットパスを検討してください: `/var/run/mysqld/mysqld.sock`。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:617
#, no-wrap
msgid "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:624
msgid "The `idle-timeout` is disabled by default."
msgstr "`idle-timeout` はデフォルトで無効になっています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:626
msgid "For example, you could expire idle connections after 60 minutes:"
msgstr "たとえば、アイドル状態の接続を 60 分後に期限切れにすることができます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:630
#, no-wrap
msgid "quarkus.datasource.reactive.idle-timeout=PT60M\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:649
#, no-wrap
msgid ""
"// Run a query, retry at most 3 times if it fails\n"
"Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\")\n"
"                            .execute()\n"
"                            .onFailure().retry().atMost(3);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:652
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:654
#, no-wrap
msgid "Common Datasource"
msgstr "共通のデータソース"

#. type: Title ===
#: upstream/_versions/1.11/guides/reactive-sql-clients.adoc:658
#, no-wrap
msgid "Reactive Datasource"
msgstr "リアクティブデータソース"
