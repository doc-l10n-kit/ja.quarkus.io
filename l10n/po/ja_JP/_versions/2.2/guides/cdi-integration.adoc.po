msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:6
#, no-wrap
msgid "CDI Integration Guide"
msgstr "CDI 統合ガイド"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:16
msgid "ArC, the CDI container, is bootstrapped at build time.  The downside of this approach is that CDI Portable Extensions cannot be supported.  Nevertheless, the functionality can be achieved using the Quarkus-specific extensions API."
msgstr "CDI コンテナーである ArC はビルド時にブートストラップされます。このアプローチの欠点は、CDI Portable Extensionsをサポートできないことです。それにもかかわらず、Quarkus固有のエクステンションAPIを使用して機能を実現することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:19
msgid "The container is bootstrapped in multiple phases.  From a high level perspective these phases go as follows:"
msgstr "コンテナーは複数のフェーズでブートストラップされます。高レベルの視点から見ると、これらのフェーズは以下のようになります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:21
msgid "Initialization"
msgstr "初期化"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:22
msgid "Bean discovery"
msgstr "Beanディスカバリ"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:23
msgid "Registration of synthetic components"
msgstr "合成コンポーネントの登録"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:24
msgid "Validation"
msgstr "バリデーション"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:31
msgid "In the _initialization_ phase the preparatory work is being carried out and custom contexts are registered.  _Bean discovery_ is then the process where the container analyzes all application classes, identifies beans and wires them all together based on the provided metadata.  Subsequently, the extensions can register _synthetic components_.  Attributes of these components are fully controlled by the extensions, i.e. are not derived from an existing class.  Finally, the _deployment is validated_.  For example, the container validates every injection point in the application and fails the build if there is no bean that satisfies the given required type and qualifiers."
msgstr "_初期化_ フェーズでは、準備作業が行われ、カスタムコンテキストが登録されます。その後、コンテナーがすべてのアプリケーションクラスを分析し、Beanを識別し、提供されたメタデータに基づいてそれらをすべて繋ぎ合わせるプロセスがBean _ディスカバリ_ です。その後、エクステンションは _合成コンポーネント_ を登録することができます。これらのコンポーネントの属性はエクステンションによって完全に制御されます。最後に、 _デプロイメントが検証されます_ 。例えば、コンテナーはアプリケーション内のすべての注入ポイントを検証し、与えられた必要な型と修飾子を満たすBeanがない場合はビルドを失敗させます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:33
msgid "You can see more information about the bootstrap by enabling additional logging. Simply run the Maven build with `-X` or `--debug` and grep the lines that contain `io.quarkus.arc`. In the <<cdi-reference.adoc#dev-mode,development mode>>, you can use `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` and two special endpoints are also registered automatically to provide some basic debug info in the JSON format."
msgstr "追加のロギングを有効にすることで、ブートストラップに関するより多くの情報を見ることができます。 `-X` または `--debug` で Maven ビルドを実行し、 `io.quarkus.arc` を含む行を grep するだけです。 link:cdi-reference.html#dev-mode[開発モード] では、 `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` を使用することができ、2つの特別なエンドポイントも自動的に登録され、JSON形式でいくつかの基本的なデバッグ情報を提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:36
msgid "Quarkus build steps can produce and consume various build items and hook into each phase.  In the following sections we will describe all the relevant build items and common scenarios."
msgstr "Quarkusのビルドステップでは、さまざまなビルドアイテムを生成したり消費したりして、各フェーズにフックすることができます。以下のセクションでは、関連するすべてのビルド項目と一般的なシナリオについて説明します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:37
#, no-wrap
msgid "Metadata Sources"
msgstr "メタデータソース"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:44
msgid "Classes and annotations are the primary source of bean-level metadata.  The initial metadata are read from the _bean archive index_, an immutable https://github.com/wildfly/jandex[Jandex index, window=\"_blank\"] which is built from various sources during <<cdi-reference.adoc#bean_discovery,bean discovery>>.  However, extensions can add, remove or transform the metadata at certain stages of the bootstrap.  Moreover, extensions can also register <<synthetic_beans,synthetic components>>.  This is an important aspect to realize when integrating CDI components in Quarkus."
msgstr "クラスとアノテーションは、Beanレベルのメタデータの主要なソースです。初期のメタデータは、Beanの link:cdi-reference.html#bean_discovery[ディスカバリ] 時に様々なソースから構築される不変の link:https://github.com/wildfly/jandex[Jandexインデックス, window=\"_blank\"] である _Beanアーカイブインデックス_ から読み込まれます。しかし、エクステンションは、ブートストラップの特定の段階でメタデータを追加、削除、変換することができます。さらに、エクステンションは link:#synthetic_beans[合成コンポーネント] を登録することもできます。これは、CDIコンポーネントをQuarkusに統合する際に実現すべき重要な側面です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:47
msgid "This way, extensions can turn classes, that would be otherwise ignored, into beans and vice versa.  For example, a class that declares a `@Scheduled` method is always registered as a bean even if it is not annotated with a bean defining annotation and would be normally ignored."
msgstr "このようにして、エクステンションは、そうでなければ無視されていたクラスをBeanに変えたり、その逆を行ったりすることができます。例えば、 `@Scheduled` メソッドを宣言するクラスは、たとえそれがBean定義アノテーションでアノテーションされておらず、通常は無視されるようなクラスであっても、常にBeanとして登録されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:51
#, no-wrap
msgid "Use Case - My Class Is Not Recognized as a Bean"
msgstr "ユースケース - クラスがBeanとして認識されません"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:57
msgid "An `UnsatisfiedResolutionException` indicates a problem during <<cdi.adoc#typesafe_resolution,typesafe resolution>>.  Sometimes an injection point cannot be satisfied even if there is a class on the classpath that appears to be eligible for injection.  There are several reasons why a class is not recognized and also several ways to fix it.  In the first step we should identify the _reason_."
msgstr "`UnsatisfiedResolutionException` は、 link:cdi.html#typesafe_resolution[タイプセーフ解決] 時に問題があることを示しています。クラスパス上にインジェクションが可能なクラスがあっても、インジェクションポイントを満たすことができないことがあります。クラスが認識されない理由はいくつかありますが、それを解決する方法もいくつかあります。最初のステップでは、その _理由_ を特定する必要があります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:59
#, no-wrap
msgid "_Reason 1_: Class Is Not discovered "
msgstr "_理由1_ :クラスが発見されない"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:64
msgid "Quarkus has a <<cdi-reference.adoc#bean_discovery,simplified discovery>>.  It might happen that the class is not part of the application index.  For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr "Quarkusには link:cdi-reference.html#bean_discovery[簡易ディスカバリー] があります。クラスがアプリケーションのインデックスに含まれていないことが起こるかもしれません。例えば、Quarkusエクステンションの _ランタイムモジュール_ のクラスは自動的にインデックス化されません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:68
msgid "_Solution_: Use the `AdditionalBeanBuildItem`.  This build item can be used to specify one or more additional classes to be analyzed during the discovery.  Additional bean classes are transparently added to the application index processed by the container."
msgstr "_解決策_ 。 `AdditionalBeanBuildItem` .このビルド項目は、ディスカバリー中に解析する1つ以上の追加クラスを指定するために使用することができます。追加のBean・クラスは、コンテナーによって処理されるアプリケーション・インデックスに透過的に追加されます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:69
#, no-wrap
msgid "`AdditionalBeanBuildItem` Example"
msgstr "`AdditionalBeanBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:76
#, no-wrap
msgid ""
"@BuildStep\n"
"AdditionalBeanBuildItem additionalBeans() {\n"
"     return new AdditionalBeanBuildItem(SmallRyeHealthReporter.class, HealthServlet.class)); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:78
msgid "`AdditionalBeanBuildItem.Builder` can be used for more complex use cases."
msgstr "`AdditionalBeanBuildItem.Builder` は、より複雑なユースケースに使用することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:83
msgid "Bean classes added via `AdditionalBeanBuildItem` are _removable_ by default.  If the container considers them <<cdi-reference.adoc#remove_unused_beans,unused>>, they are just ignored.  However, you can use `AdditionalBeanBuildItem.Builder.setUnremovable()` method to instruct the container to never remove bean classes registered via this build item.  See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr "`AdditionalBeanBuildItem` 経由で追加された Bean クラスは、デフォルトでは _取り外し可能です_ 。コンテナーがそれらを link:cdi-reference.html#remove_unused_beans[未使用] とみなした場合、それらはただ無視されます。しかし、 `AdditionalBeanBuildItem.Builder.setUnremovable()` メソッドを使用して、このビルド項目を介して登録されたBeanクラスを絶対に削除しないようにコンテナーに指示することができます。詳細は、未使用のBeanの link:cdi-reference.html#remove_unused_beans[削除] と link:#unremovable_builditem[[unremovable_builditem]] も参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:86
msgid "It is aso possible to set the default scope via `AdditionalBeanBuildItem.Builder#setDefaultScope()`.  The default scope is only used if there is no scope declared on the bean class."
msgstr "`AdditionalBeanBuildItem.Builder#setDefaultScope()` からデフォルトのスコープを設定することも可能です。デフォルトのスコープは、Beanクラスにスコープが宣言されていない場合にのみ使用されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:88
#: upstream/_versions/2.2/guides/cdi-integration.adoc:130
msgid "If no default scope is specified the `@Dependent` pseudo-scope is used."
msgstr "デフォルトスコープが指定されていない場合は `@Dependent` 擬似スコープが使用されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:89
#, no-wrap
msgid "_Reason 2_: Class Is Discovered but Has No Bean Defining Annotation"
msgstr "_理由2_ : クラスは発見されたが、Beanを定義するアノテーションがない"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:96
msgid "_Solution 1_: Use the `AutoAddScopeBuildItem`. This build item can be used to add a scope to a class that meets certain conditions."
msgstr "_解決策1_ : `AutoAddScopeBuildItem` の使用。このビルドアイテムを使用すると、特定の条件を満たすクラスにスコープを追加することができます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:97
#, no-wrap
msgid "`AutoAddScopeBuildItem` Example"
msgstr "`AutoAddScopeBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:106
#, no-wrap
msgid ""
"@BuildStep\n"
"AutoAddScopeBuildItem autoAddScope() {\n"
"   return AutoAddScopeBuildItem.builder().containsAnnotations(SCHEDULED_NAME, SCHEDULES_NAME) <1>\n"
"      .defaultScope(BuiltinScope.SINGLETON) <2>\n"
"      .build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:108
msgid "Find all classes annotated with `@Scheduled`."
msgstr "`@Scheduled` でアノテーションされたすべてのクラスを検索"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:109
msgid "Add `@Singleton` as default scope. Classes already annotated with a scope are skipped automatically."
msgstr "デフォルトのスコープとして `@Singleton` を追加。既にスコープでアノテーションされているクラスは自動的にスキップされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:111
msgid "_Solution 2_: If you need to process classes annotated with a specific annotation then it's possible to extend the set of bean defining annotations via the `BeanDefiningAnnotationBuildItem`."
msgstr "_解決策2_: 特定のアノテーションが付けられたクラスを処理する必要がある場合は、`BeanDefiningAnnotationBuildItem` を介して Bean 定義アノテーションのセットを拡張することができます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:112
#, no-wrap
msgid "`BeanDefiningAnnotationBuildItem` Example"
msgstr "`BeanDefiningAnnotationBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:119
#, no-wrap
msgid ""
"@BuildStep\n"
"BeanDefiningAnnotationBuildItem additionalBeanDefiningAnnotation() {\n"
"   return new BeanDefiningAnnotationBuildItem(Annotations.GRAPHQL_API); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:121
msgid "Add `org.eclipse.microprofile.graphql.GraphQLApi` to the set of bean defining annotations."
msgstr "Bean 定義アノテーションのセットに `org.eclipse.microprofile.graphql.GraphQLApi` を追加します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:125
msgid "Bean classes added via `BeanDefiningAnnotationBuildItem` are _not removable_ by default, i.e. the resulting beans must not be removed even if they are considered unused.  However, you can change the default behavior.  See also <<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> and <<unremovable_builditem>> for more details."
msgstr "`BeanDefiningAnnotationBuildItem` を介して追加された Bean クラスは、デフォルトでは _削除不可_ です。したがって、結果の Bean は未使用と見なされても削除しないでください。ただし、デフォルトの動作は変更できます。詳細については<<cdi-reference.adoc#remove_unused_beans,Removing Unused Beans>> および<<unremovable_builditem>> を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:128
msgid "It is also possible to specify the default scope.  The default scope is only used if there is no scope declared on the bean class."
msgstr "デフォルトスコープを設定することもできます。デフォルトスコープは、Bean クラスにスコープが宣言されていない場合にのみ使用されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:132
#, no-wrap
msgid "_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed"
msgstr "_理由3_: クラスが検出され、Bean 定義のアノテーションがあるが削除されている"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:139
msgid "The container attempts to <<cdi-reference.adoc#remove_unused_beans,remove all unused beans>> during the build by default.  This optimization allows for _framework-level dead code elimination_.  In few special cases, it's not possible to correctly identify an unused bean.  In particular, Quarkus is not able to detect the usage of the `CDI.current()` static method yet.  Extensions can eliminate possible false positives by producing an `UnremovableBeanBuildItem`."
msgstr "デフォルトで、コンテナーはビルド時に <<cdi-reference.adoc#remove_unused_beans,remove all unused beans>> を試行します。この最適化により、_フレームワークレベルでのデッドコードの排除_ が可能になります。いくつかの特殊なケースでは、未使用の Bean を正しく特定できません。特に、Quarkus はまだ `CDI.current()` 静的メソッドの使用を検出できません。エクステンションは、`UnremovableBeanBuildItem` を生成することで、誤検出の可能性をなくすことができます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:140
#, no-wrap
msgid "`UnremovableBeanBuildItem` Example"
msgstr "`UnremovableBeanBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:147
#, no-wrap
msgid ""
"@BuildStep\n"
"UnremovableBeanBuildItem unremovableBeans() {\n"
"   return UnremovableBeanBuildItem.targetWithAnnotation(STARTUP_NAME); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:149
msgid "Make all classes annotated with `@Startup` unremovable."
msgstr "`@Startup` でアノテーションされたすべてのクラスを削除できないようにする。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:150
#, no-wrap
msgid "Use Case - My Annotation Is Not Recognized as a Qualifier or an Interceptor Binding"
msgstr "ユースケース - アノテーションが修飾子またはインターセプターバインディングとして認識されない"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:154
msgid "It is likely that the annotation class is not part of the application index.  For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr "アノテーションクラスがアプリケーションインデックスに含まれていない可能性があります。たとえば、Quarkus エクステンションの _ランタイムモジュール_ のクラスは自動的にインデックス化されません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:156
msgid "_Solution_: Use the `AdditionalBeanBuildItem` as described in <<additional_bean_build_item>>."
msgstr "_解決策_: <<additional_bean_build_item>> で説明されているとおりに `AdditionalBeanBuildItem` を使用します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:158
#, no-wrap
msgid "Use Case - I Need To Transform Metadata"
msgstr "ユースケース - メタデータを変換する必要があります"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:166
msgid "For example, you might want to add an interceptor binding to a specific bean class.  Here is how to do it:"
msgstr "たとえば、特定の Bean クラスにインターセプターバインディングを追加するとします。以下はその方法です。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:167
#, no-wrap
msgid "`AnnotationsTransformerBuildItem` Example"
msgstr "`AnnotationsTransformerBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:173
#, no-wrap
msgid ""
"@BuildStep\n"
"AnnotationsTransformerBuildItem transform() {\n"
"   return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:177
#, no-wrap
msgid ""
"      public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n"
"         return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS; <1>\n"
"      }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:185
#, no-wrap
msgid ""
"      public void transform(TransformationContext context) {\n"
"         if (context.getTarget().asClass().name().toString().equals(\"org.acme.Bar\")) {\n"
"            context.transform().add(MyInterceptorBinding.class).done(); <2>\n"
"         }\n"
"      }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:187
msgid "The transformer is only applied to classes."
msgstr "トランスフォーマーはクラスにのみ適用されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:188
msgid "If the class name equals to `org.acme.Bar` then add `@MyInterceptorBinding`. Don't forget to invoke `Transformation#done()`."
msgstr "クラス名が `org.acme.Bar` と同じ場合は、`@MyInterceptorBinding` を追加します。`Transformation#done()` を呼び出すことを忘れないでください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:190
msgid "Keep in mind that annotation transformers must be produced _before_ the bean discovery starts."
msgstr "アノテーショントランスフォーマーは、Beanディスカバリが始まる _前に_ 生成されなければならないことを覚えておいてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:192
msgid "Build steps can query the transformed annotations for a given annotation target via the `TransformedAnnotationsBuildItem`."
msgstr "ビルドステップでは、`TransformedAnnotationsBuildItem` を介して、特定のアノテーションターゲットの変換済みアノテーションをクエリーできます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:193
#, no-wrap
msgid "`TransformedAnnotationsBuildItem` Example"
msgstr "`TransformedAnnotationsBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:203
#, no-wrap
msgid ""
"@BuildStep\n"
"void queryAnnotations(TransformedAnnotationsBuildItem transformedAnnotations, BuildProducer<MyBuildItem> myBuildItem) {\n"
"   ClassInfo myClazz = ...;\n"
"   if (transformedAnnotations.getAnnotations(myClazz).isEmpty()) { <1>\n"
"     myBuildItem.produce(new MyBuildItem());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:205
msgid "`TransformedAnnotationsBuildItem.getAnnotations()` will return a possibly transformed set of annotations."
msgstr "`TransformedAnnotationsBuildItem.getAnnotations()` は、変換された可能性のあるアノテーションのセットを返します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:207
msgid "There are other build items specialized in transformation: <<additional_interceptor_bindings>> and <<injection_point_transformation>>."
msgstr "変換に特化した他のビルドアイテム (<<additional_interceptor_bindings>> および<<injection_point_transformation>>) もあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:209
#, no-wrap
msgid "Use Case - Inspect Beans, Observers and Injection Points"
msgstr "使用例 - Bean、オブザーバー、インジェクションポイントの検査"

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:211
#, no-wrap
msgid "_Solution 1_: `BeanDiscoveryFinishedBuildItem`"
msgstr "_解決策1._ `BeanDiscoveryFinishedBuildItem`"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:215
msgid "Consumers of `BeanDiscoveryFinishedBuildItem` can easily inspect all class-based beans, observers and injection points registered in the application.  However, synthetic beans and observers are _not included_ because this build item is produced _before_ the synthetic components are registered."
msgstr "`BeanDiscoveryFinishedBuildItem` のコンシューマーは、アプリケーションに登録されているすべてのクラスベースの Bean、オブザーバー、およびインジェクションポイントを簡単に検査できます。ただし、このビルドアイテムは合成コンポーネントが登録される _前_ に作成されるため、合成 Bean とオブザーバーは _含まれません_ 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:217
msgid "Additionaly, the bean resolver returned from `BeanDiscoveryFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`BeanDiscoveryFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要なタイプと修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:218
#, no-wrap
msgid "`BeanDiscoveryFinishedBuildItem` Example"
msgstr "`BeanDiscoveryFinishedBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:226
#, no-wrap
msgid ""
"@BuildStep\n"
"void doSomethingWithNamedBeans(BeanDiscoveryFinishedBuildItem beanDiscovery, BuildProducer<NamedBeansBuildItem> namedBeans) {\n"
"   List<BeanInfo> namedBeans = beanDiscovery.beanStream().withName().collect(toList())); <1>\n"
"   namedBeans.produce(new NamedBeansBuildItem(namedBeans));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:228
msgid "The resulting list will not contain `@Named` synthetic beans."
msgstr "結果のリストに `@Named` 合成 Bean は含まれません。"

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:229
#, no-wrap
msgid "_Solution 2_: `SynthesisFinishedBuildItem`"
msgstr "_解決策2_ : `SynthesisFinishedBuildItem`"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:232
msgid "Consumers of `SynthesisFinishedBuildItem` can easily inspect all beans, observers and injection points registered in the application. Synthetic beans and observers are included because this build item is produced _after_ the synthetic components are registered."
msgstr "`SynthesisFinishedBuildItem` のコンシューマーは、アプリケーションに登録されているすべての Bean、オブザーバー、およびインジェクションポイントを簡単に検査できます。このビルドアイテムは合成コンポーネントが登録された _後_ に作成されるため、合成 Bean とオブザーバーも _含まれます_ 。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:234
msgid "Additionaly, the bean resolver returned from `SynthesisFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`SynthesisFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要なタイプと修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:235
#, no-wrap
msgid "`SynthesisFinishedBuildItem` Example"
msgstr "`SynthesisFinishedBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:243
#, no-wrap
msgid ""
"@BuildStep\n"
"void doSomethingWithNamedBeans(SynthesisFinishedBuildItem synthesisFinished, BuildProducer<NamedBeansBuildItem> namedBeans) {\n"
"   List<BeanInfo> namedBeans = synthesisFinished.beanStream().withName().collect(toList())); <1>\n"
"   namedBeans.produce(new NamedBeansBuildItem(namedBeans));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:245
msgid "The resulting list will contain `@Named` synthetic beans."
msgstr "結果のリストには、`@Named` 合成 Bean が含まれます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:247
#, no-wrap
msgid "Use Case - The Need for Synthetic Beans"
msgstr "ユースケース - 合成 Bean の必要性"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:255
msgid "_Solution_: If you need to register a synthetic bean then use the `SyntheticBeanBuildItem`."
msgstr "_解決策_: 合成 Bean を登録する必要がある場合は、`SyntheticBeanBuildItem` を使用します。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:256
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 1"
msgstr "`SyntheticBeanBuildItem` の例 1"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:266
#, no-wrap
msgid ""
"@BuildStep\n"
"SyntheticBeanBuildItem syntheticBean() {\n"
"   return SyntheticBeanBuildItem.configure(String.class)\n"
"             .qualifiers(new MyQualifierLiteral())\n"
"             .creator(mc -> mc.returnValue(mc.load(\"foo\"))) <1>\n"
"             .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:268
msgid "Generate the bytecode of the `javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` implementation."
msgstr "`javax.enterprise.context.spi.Contextual#create(CreationalContext<T>)` 実装の培土コードを生成します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:272
msgid "The output of a bean configurator is recorded as bytecode.  Therefore, there are some limitations in how a synthetic bean instance is created at runtime.  You can:"
msgstr "Bean Configurator の出力は、バイトコードとして記録されます。したがって、実行時に合成 Bean インスタンスを作成する方法にはいくつかの制限があります。以下が可能です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:274
msgid "Generate the bytecode of the `Contextual#create(CreationalContext<T>)` method directly via `ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)`."
msgstr "`Contextual#create(CreationalContext<T>)` メソッドのバイトコードを、`ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)` を介して直接生成します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:275
msgid "Pass a `io.quarkus.arc.BeanCreator` implementation class via `ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)`, and possibly specify some parameters via `ExtendedBeanConfigurator#param()`."
msgstr "`ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)` を介して `io.quarkus.arc.BeanCreator` 実装クラスを渡し、可能であれば `ExtendedBeanConfigurator#param()` を介していくつかのパラメーターを指定します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:276
msgid "Produce the runtime instance through a proxy returned from a <<writing-extensions.adoc#bytecode-recording,`@Recorder` method>> and set it via `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` or `ExtendedBeanConfigurator#supplier(Supplier<?>)`."
msgstr "<<writing-extensions.adoc#bytecode-recording,`@Recorder` メソッド>> から返されたプロキシー経由でランタイムインスタンスを生成し、それを `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` または `ExtendedBeanConfigurator#supplier(Supplier<?>)` 経由で設定します。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:277
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 2"
msgstr "`SyntheticBeanBuildItem` の例 2"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:287
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(STATIC_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .runtimeValue(recorder.createFoo()) <2>\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:289
msgid "By default, a synthetic bean is initialized during `STATIC_INIT`."
msgstr "デフォルトでは、合成 Bean は `STATIC_INIT` の間に初期化されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:290
msgid "The bean instance is supplied by a value returned from a recorder method."
msgstr "Bean インスタンスは、レコーダーメソッドから返される値によって提供されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:293
msgid "It is possible to mark a synthetic bean to be initialized during `RUNTIME_INIT`.  See the <<writing-extensions.adoc#bootstrap-three-phases,Three Phases of Bootstrap and Quarkus Philosophy>> for more information about the difference between `STATIC_INIT` and `RUNTIME_INIT`."
msgstr "`RUNTIME_INIT` の間に初期化される合成 Bean をマークできます。`STATIC_INIT` と `RUNTIME_INIT` の違いの詳細については、<<writing-extensions.adoc#bootstrap-three-phases,Three Phases of Bootstrap and Quarkus Philosophy>> を参照してください。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:294
#, no-wrap
msgid "`RUNTIME_INIT` `SyntheticBeanBuildItem` Example"
msgstr "`RUNTIME_INIT` `SyntheticBeanBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:305
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .setRuntimeInit() <2>\n"
"                .runtimeValue(recorder.createFoo())\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:307
msgid "The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase."
msgstr "レコーダーは、`ExecutionTime.RUNTIME_INIT` フェーズで実行する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:308
msgid "The bean instance is initialized during `RUNTIME_INIT`."
msgstr "Bean インスタンスは、`RUNTIME_INIT` の間に初期化されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:312
msgid "Synthetic beans initialized during `RUNTIME_INIT` must not be accessed during `STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:"
msgstr "`RUNTIME_INIT` の間に初期化された合成 Bean は、`STATIC_INIT` の間にアクセスしてはいけません。runtime-init 合成 Bean にアクセスする `RUNTIME_INIT` ビルドステップは、`SyntheticBeansRuntimeInitBuildItem` を消費します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:321
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) \n"
"@Consume(SyntheticBeansRuntimeInitBuildItem.class) <1>\n"
"void accessFoo(TestRecorder recorder) {\n"
"   recorder.foo(); <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:323
msgid "This build step must be executed after `syntheticBean()` completes."
msgstr "このビルドステップは、`syntheticBean()` の完了後に実行する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:324
msgid "This recorder method results in an invocation upon the `Foo` bean instance and thus we need to make sure that the build step is executed after all synthetic beans are initialized."
msgstr "このレコーダーメソッドでは `Foo` Bean インスタンスが呼び出されるため、必ずすべての合成 Bean が初期化された後にビルドステップが実行されることを確認する必要があります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:327
msgid "It is also possible to use the `BeanRegistrationPhaseBuildItem` to register a synthetic bean. However, we recommend extension authors to stick with `SyntheticBeanBuildItem` which is more idiomatic for Quarkus."
msgstr "`BeanRegistrationPhaseBuildItem` を使用して合成 Bean を登録することもできます。ただし、エクステンション作成者においては、Quarkus にとってより慣用的な `SyntheticBeanBuildItem` を使用することをお勧めします。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:329
#, no-wrap
msgid "Use Case - Synthetic Observers"
msgstr "ユースケース - 合成オブザーバー"

#. type: delimited block =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:332
msgid "Similar to <<synthetic_beans,synthetic beans>>, the attributes of a synthetic observer method are not derived from a Java method. Instead, all the attributes are defined by an extension."
msgstr "<<synthetic_beans,synthetic beans>> と同様に、合成オブザーバーメソッドの属性は Java メソッドから派生しません。代わりに、すべての属性がエクステンションによって定義されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:334
msgid "_Solution_: If you need to register a synthetic observer, use the `ObserverRegistrationPhaseBuildItem`."
msgstr "_解決策_: 合成オブザーバーを登録する必要がある場合は、`ObserverRegistrationPhaseBuildItem` を使用します。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/cdi-integration.adoc:336
msgid "A build step that consumes the `ObserverRegistrationPhaseBuildItem` should always produce an `ObserverConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ObserverRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ObserverConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:337
#, no-wrap
msgid "`ObserverRegistrationPhaseBuildItem` Example"
msgstr "`ObserverRegistrationPhaseBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:353
#, no-wrap
msgid ""
"@BuildStep\n"
"void syntheticObserver(ObserverRegistrationPhaseBuildItem observerRegistrationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ObserverConfiguratorBuildItem> observerConfigurationRegistry) {\n"
"   observerConfigurationRegistry.produce(new ObserverConfiguratorBuildItem(observerRegistrationPhase.getContext()\n"
"       .configure()\n"
"       .beanClass(DotName.createSimple(MyBuildStep.class.getName()))\n"
"       .observedType(String.class)\n"
"       .notify(mc -> {\n"
"           // do some gizmo bytecode generation...\n"
"       })));\n"
"   myBuildItem.produce(new MyBuildItem());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:358
msgid "The output of a `ObserverConfigurator` is recorded as bytecode.  Therefore, there are some limitations in how a synthetic observer is invoked at runtime.  Currently, you must generate the bytecode of the method body directly."
msgstr "`ObserverConfigurator` の出力はバイトコードとして記録されます。したがって、実行時に合成オブザーバーを呼び出す方法にはいくつかの制限があります。現時点では、メソッド本体のバイトコードを直接生成する必要があります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:360
#, no-wrap
msgid "Use Case - I Have a Generated Bean Class"
msgstr "ユースケース - 生成された Bean クラスがある"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:364
msgid "No problem.  You can generate the bytecode of a bean class manually and then all you need to do is to produce a `GeneratedBeanBuildItem` instead of `GeneratedClassBuildItem`."
msgstr "問題ありません。Bean クラスのバイトコードを手動で生成し、その後に `GeneratedClassBuildItem` ではなく `GeneratedBeanBuildItem` を生成してください。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:365
#, no-wrap
msgid "`GeneratedBeanBuildItem` Example"
msgstr "`GeneratedBeanBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:377
#, no-wrap
msgid ""
"@BuildStep\n"
"void generatedBean(BuildProducer<GeneratedBeanBuildItem> generatedBeans) {\n"
"    ClassOutput beansClassOutput = new GeneratedBeanGizmoAdaptor(generatedBeans); <1>\n"
"    ClassCreator beanClassCreator = ClassCreator.builder().classOutput(beansClassOutput)\n"
"                .className(\"org.acme.MyBean\")\n"
"                .build();\n"
"    beanClassCreator.addAnnotation(Singleton.class);\n"
"    beanClassCreator.close(); <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:379
msgid "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` makes it easy to produce ``GeneratedBeanBuildItem``s from Gizmo constructs."
msgstr "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` を使用すると、Gizmo コンストラクトから ``GeneratedBeanBuildItem`` を簡単に作成できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:380
msgid "The resulting bean class is something like `public class @Singleton MyBean { }`."
msgstr "結果の Bean クラスは、次のようになります: `public class @Singleton MyBean { }`。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:381
#, no-wrap
msgid "Use Case - I Need to Validate the Deployment"
msgstr "ユースケース - デプロイメントを検証する必要がある"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:384
msgid "Sometimes extensions need to inspect the beans, observers and injection points, then perform additional validations and fail the build if something is wrong."
msgstr "エクステンションは、Bean、オブザーバー、およびインジェクションポイントを検査し、さらに追加の検証を実行して、何か問題がある場合はビルドを失敗にする必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:386
msgid "_Solution_: If an extension needs to validate the deployment it should use the `ValidationPhaseBuildItem`."
msgstr "_解決策_: エクステンションがデプロイメントを検証する必要がある場合、`ValidationPhaseBuildItem` を使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:388
msgid "A build step that consumes the `ValidationPhaseBuildItem` should always produce a `ValidationErrorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ValidationPhaseBuildItem` を消費するビルドステップでは、常に `ValidationErrorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:400
#, no-wrap
msgid ""
"@BuildStep\n"
"void validate(ValidationPhaseBuildItem validationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ValidationErrorBuildItem> errors) {\n"
"   if (someCondition) {\n"
"     errors.produce(new ValidationErrorBuildItem(new IllegalStateException()));\n"
"     myBuildItem.produce(new MyBuildItem());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:403
msgid "You can easily filter all registered beans via the convenient `BeanStream` returned from the `ValidationPhaseBuildItem.getContext().beans()` method."
msgstr "`ValidationPhaseBuildItem.getContext().beans()` メソッドから返される便利な `BeanStream` を使用して、登録されているすべての Bean を簡単にフィルタリングできます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:405
#, no-wrap
msgid "Use Case - Register a Custom CDI Context"
msgstr "ユースケース - カスタム CDI コンテキストの登録"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:408
msgid "Sometimes extensions need to extend the set of built-in CDI contexts."
msgstr "時々、エクステンションは組み込みCDI コンテキストのセットを拡張する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:410
msgid "_Solution_: If you need to register a custom context, use the `ContextRegistrationPhaseBuildItem`."
msgstr "_解決策_: カスタムコンテキストを登録する必要がある場合は、`ContextRegistrationPhaseBuildItem` を使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:412
msgid "A build step that consumes the `ContextRegistrationPhaseBuildItem` should always produce a `ContextConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ContextRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ContextConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer`を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:414
msgid "`ContextRegistrationPhaseBuildItem` Example"
msgstr "`ContextRegistrationPhaseBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:420
#, no-wrap
msgid ""
"@BuildStep\n"
"ContextConfiguratorBuildItem registerContext(ContextRegistrationPhaseBuildItem phase) {\n"
"      return new ContextConfiguratorBuildItem(phase.getContext().configure(TransactionScoped.class).normal().contextClass(TransactionContext.class));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:423
msgid "Additionally, each extension that registers a custom CDI context via `ContextRegistrationPhaseBuildItem` should also produce the `CustomScopeBuildItem` in order to contribute the custom scope annotation name to the set of bean defining annotations."
msgstr "さらに、`ContextRegistrationPhaseBuildItem` を介してカスタム CDI コンテキストを登録する各エクステンションは、Bean 定義アノテーションのセットにカスタムスコープアノテーション名を提供するために、`CustomScopeBuildItem` も生成する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:425
msgid "`CustomScopeBuildItem` Example"
msgstr "`CustomScopeBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:431
#, no-wrap
msgid ""
"@BuildStep\n"
"CustomScopeBuildItem customScope() {\n"
"   return new CustomScopeBuildItem(DotName.createSimple(TransactionScoped.class.getName()));\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/cdi-integration.adoc:433
#, no-wrap
msgid "What if I Need to Know All the Scopes Used in the Application?"
msgstr "アプリケーションで使用されているすべてのスコープを知る必要がある場合はどうなりますか?"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:436
msgid "_Solution_: You can inject the `CustomScopeAnnotationsBuildItem` in a build step and use the convenient methods such as `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`."
msgstr "_ソリューション_: ビルドステップで `CustomScopeAnnotationsBuildItem` を挿入し、 `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()` などの便利なメソッドを使用できます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:438
#, no-wrap
msgid "Use Case - Additional Interceptor Bindings"
msgstr "ユースケース - 追加のインターセプターバインディング"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:443
msgid "In rare cases it might be handy to programmatically register an existing annotation that is not annotated with `@javax.interceptor.InterceptorBinding` as an interceptor binding.  This is similar to what CDI achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.  We are going to use `InterceptorBindingRegistrarBuildItem` to get it done."
msgstr "まれに、インターセプターバインディングとし て `@javax.interceptor.InterceptorBinding` でアノテーションが付けられていない既存のアノテーションをプログラムで登録すると便利な場合があります。これは、CDI が `BeforeBeanDiscovery#addInterceptorBinding()` で達成するものと似ています。これを行うには、`InterceptorBindingRegistrarBuildItem` を使用します。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:444
#, no-wrap
msgid "`InterceptorBindingRegistrarBuildItem` Example"
msgstr "`InterceptorBindingRegistrarBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:456
#, no-wrap
msgid ""
"@BuildStep\n"
"InterceptorBindingRegistrarBuildItem addInterceptorBindings() {\n"
"    return new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar() {\n"
"        @Override\n"
"        public List<InterceptorBinding> getAdditionalBindings() {\n"
"            return List.of(InterceptorBinding.of(NotAnInterceptorBinding.class));\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:458
#, no-wrap
msgid "Use Case - Additional Qualifiers"
msgstr "使用例 - 追加の修飾子"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:463
msgid "Sometimes it might be useful to register an existing annotation that is not annotated with `@javax.inject.Qualifier` as a CDI qualifier.  This is similar to what CDI achieves through `BeforeBeanDiscovery#addQualifier()`.  We are going to use `QualifierRegistrarBuildItem` to get it done."
msgstr "時には、 `@javax.inject.Qualifier` でアノテーションされていない既存のアノテーションをCDI修飾子として登録しておくと便利かもしれません。これは CDI が `BeforeBeanDiscovery#addQualifier()` を通して実現していることに似ています。ここでは `QualifierRegistrarBuildItem` を使ってそれを実現しようとしています。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:464
#, no-wrap
msgid "`QualifierRegistrarBuildItem` Example"
msgstr "`QualifierRegistrarBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:477
#, no-wrap
msgid ""
"@BuildStep\n"
"QualifierRegistrarBuildItem addQualifiers() {\n"
"    return new QualifierRegistrarBuildItem(new QualifierRegistrar() {\n"
"        @Override\n"
"        public Map<DotName, Set<String>> getAdditionalQualifiers() {\n"
"            return Collections.singletonMap(DotName.createSimple(NotAQualifier.class.getName()),\n"
"                                        Collections.emptySet());\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:480
#, no-wrap
msgid "Use Case - Injection Point Transformation"
msgstr "ユースケース - インジェクションポイントの変換"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:485
msgid "Every now and then it is handy to be able to change the qualifiers of an injection point programmatically.  You can do just that with `InjectionPointTransformerBuildItem`.  The following sample shows how to apply transformation to injection points with type `Foo` that contain qualifier `MyQualifier`:"
msgstr "プログラムでインジェクションポイントの修飾子を変更できると便利な場合があります。それは、`InjectionPointTransformerBuildItem` で実行できます。次のサンプルは、修飾子 `MyQualifier` を含むタイプ `Foo` のインジェクションポイント変換を適用する方法を示しています。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:486
#, no-wrap
msgid "`InjectionPointTransformerBuildItem` Example"
msgstr "`InjectionPointTransformerBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:492
#, no-wrap
msgid ""
"@BuildStep\n"
"InjectionPointTransformerBuildItem transformer() {\n"
"    return new InjectionPointTransformerBuildItem(new InjectionPointsTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:496
#, no-wrap
msgid ""
"        public boolean appliesTo(Type requiredType) {\n"
"            return requiredType.name().equals(DotName.createSimple(Foo.class.getName()));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:508
#, no-wrap
msgid ""
"        public void transform(TransformationContext context) {\n"
"            if (context.getQualifiers().stream()\n"
"                    .anyMatch(a -> a.name().equals(DotName.createSimple(MyQualifier.class.getName())))) {\n"
"                context.transform()\n"
"                        .removeAll()\n"
"                        .add(DotName.createSimple(MyOtherQualifier.class.getName()))\n"
"                        .done();\n"
"            }\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:511
msgid "In theory, you can use <<annotations_transformer_build_item,an `AnnotationsTransformer`>> to achieve the same goal. However, there are few differences that make `InjectionPointsTransformer` more suitable for this particular task: (1) annotation transformers are applied to all classes during bean discovery, whereas `InjectionPointsTransformer` is only applied to discovered injection points after bean discovery; (2) with `InjectionPointsTransformer` you don't need to handle various types of injection points (field, parameters of initializer methods, etc.)."
msgstr "理論的には、<<annotations_transformer_build_item,`AnnotationsTransformer`>> を使用して同じ目標を達成できます。ただし、次の多少の違いがあるため、このタスクには `InjectionPointsTransformer` の方が適しています。その違いとは次のとおりです。(1) アノテーショントランスフォーマーは Bean 検出中にすべてのクラスに適用されますが、`InjectionPointsTransformer` は Bean 検出後に検出されたインジェクションポイントにのみ適用されます。(2) `InjectionPointsTransformer` を使用すると、さまざまなタイプのインジェクションポイント (フィールド、初期化メソッドのパラメーターなど) を処理する必要がありません。"

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:512
#, no-wrap
msgid "Use Case - Resource Annotations and Injection"
msgstr "ユースケース - リソースアノテーションとインジェクション"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:516
msgid "The `ResourceAnnotationBuildItem` can be used to specify resource annotations that make it possible to resolve non-CDI injection points, such as Jakarta EE resources.  An integrator must also provide a corresponding `io.quarkus.arc.ResourceReferenceProvider` service provider implementation."
msgstr "`ResourceAnnotationBuildItem` を使用して、Jakarta EE リソースなどの非 CDI インジェクションポイントを解決できるリソースアノテーションを指定できます。インテグレーターは、対応する `io.quarkus.arc.ResourceReferenceProvider` サービスプロバイダー実装も提供する必要があります。"

#. type: Block title
#: upstream/_versions/2.2/guides/cdi-integration.adoc:517
#, no-wrap
msgid "`ResourceAnnotationBuildItem` Example"
msgstr "`ResourceAnnotationBuildItem` の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/cdi-integration.adoc:526
#, no-wrap
msgid ""
"@BuildStep\n"
"void setupResourceInjection(BuildProducer<ResourceAnnotationBuildItem> resourceAnnotations, BuildProducer<GeneratedResourceBuildItem> resources) {\n"
"    resources.produce(new GeneratedResourceBuildItem(\"META-INF/services/io.quarkus.arc.ResourceReferenceProvider\",\n"
"        MyResourceReferenceProvider.class.getName().getBytes()));\n"
"    resourceAnnotations.produce(new ResourceAnnotationBuildItem(DotName.createSimple(MyAnnotation.class.getName())));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/cdi-integration.adoc:529
#, no-wrap
msgid "Available Build Time Metadata"
msgstr "利用可能なビルドタイムメタデータ"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:533
msgid "Any of the above extensions that operates with `BuildExtension.BuildContext` can leverage certain build time metadata that are generated during build.  The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` are:"
msgstr "`BuildExtension.BuildContext` で動作する上記のエクステンションはいずれも、ビルドタイムに生成される特定のビルドタイムメタデータを利用することができます。 `io.quarkus.arc.processor.BuildExtension.Key` にある組込キーは以下の通りです。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:534
#, no-wrap
msgid "ANNOTATION_STORE"
msgstr "ANNOTATION_STORE"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:535
msgid "Contains an `AnnotationStore` that keeps information about all `AnnotationTarget` annotations after application of annotation transformers"
msgstr "アノテーショントランスフォーマーを適用した後は、すべての`AnnotationTarget`アノテーションに関する情報を保持する `AnnotationStore` が含まれます"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:535
#, no-wrap
msgid "INJECTION_POINTS"
msgstr "INJECTION_POINTS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:536
msgid "`Collection<InjectionPointInfo>` containing all injection points"
msgstr "すべてのインジェクションポイントを含む `Collection<InjectionPointInfo>`"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:536
#, no-wrap
msgid "BEANS"
msgstr "BEANS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:537
msgid "`Collection<BeanInfo>` containing all beans"
msgstr "すべての Bean を含む `Collection<BeanInfo>`"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:537
#, no-wrap
msgid "REMOVED_BEANS"
msgstr "REMOVED_BEANS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:538
msgid "`Collection<BeanInfo>` containing all the removed beans; see <<cdi-reference.adoc#remove_unused_beans,Removing unused beans>> for more information"
msgstr "`Collection<BeanInfo>` 削除されたすべての link:cdi-reference.html#remove_unused_beans[Bean] を含む"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:538
#, no-wrap
msgid "OBSERVERS"
msgstr "OBSERVERS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:539
msgid "`Collection<ObserverInfo>` containing all observers"
msgstr "すべてのオブザーバーを含む `Collection<ObserverInfo>`"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:539
#, no-wrap
msgid "SCOPES"
msgstr "SCOPES"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:540
msgid "`Collection<ScopeInfo>` containing all scopes, including custom ones"
msgstr "カスタムスコープも含め、すべてのスコープを含む `Collection<ScopeInfo>`"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:540
#, no-wrap
msgid "QUALIFIERS"
msgstr "QUALIFIERS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:541
msgid "`Map<DotName, ClassInfo>` containing all qualifiers"
msgstr "`Map<DotName, ClassInfo>` すべての修飾子を含む"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:541
#, no-wrap
msgid "INTERCEPTOR_BINDINGS"
msgstr "INTERCEPTOR_BINDINGS"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:542
msgid "`Map<DotName, ClassInfo>` containing all interceptor bindings"
msgstr "すべてのインターセプターバインディングを含む `Map<DotName, ClassInfo>`"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:542
#, no-wrap
msgid "STEREOTYPES"
msgstr "STEREOTYPES"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:543
msgid "`Map<DotName, StereotypeInfo>` containing all stereotypes"
msgstr "すべてのステレオタイプを含む `Map<DotName, StereotypeInfo>`"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:548
msgid "To get hold of these, simply query the extension context object for given key.  Note that these metadata are made available as build proceeds which means that extensions can only leverage metadata that were built before the extensions are invoked.  If your extension attempts to retrieve metadata that wasn't yet produced, `null` will be returned.  Here is a summary of which extensions can access which metadata:"
msgstr "これらのメタデータを取得するには、そのキーのエクステンションコンテキストオブジェクトをクエリするだけ可能です。これらのメタデータはビルドが進むにつれて利用可能になることに注意してください。エクステンションがまだ生成されていないメタデータを取得しようとすると、 `null` が返されます。どのエクステンションがどのメタデータにアクセスできるかをまとめてみました。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:549
#, no-wrap
msgid "AnnotationsTransformer"
msgstr "AnnotationsTransformer"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:550
msgid "Shouldn't rely on any metadata as it could be used at any time in any phase of the bootstrap"
msgstr "ブートストラップのどのフェーズでもいつでも使えるので、メタデータに頼るべきではありません。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:550
#, no-wrap
msgid "ContextRegistrar"
msgstr "ContextRegistrar"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:551
#: upstream/_versions/2.2/guides/cdi-integration.adoc:552
#: upstream/_versions/2.2/guides/cdi-integration.adoc:553
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` . `STEREOTYPES` にアクセスできます。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:551
#, no-wrap
msgid "InjectionPointsTransformer"
msgstr "InjectionPointsTransformer"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:552
#, no-wrap
msgid "ObserverTransformer"
msgstr "ObserverTransformer"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:553
#, no-wrap
msgid "BeanRegistrar"
msgstr "BeanRegistrar"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:554
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS` にアクセスできます。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:554
#, no-wrap
msgid "ObserverRegistrar"
msgstr "ObserverRegistrar"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:555
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` , `STEREOTYPES` , `BEANS` , `OBSERVERS` (クラスベースのオブザーバーのみ), `INJECTION_POINTS` にアクセス可能です。 "

#. type: Labeled list
#: upstream/_versions/2.2/guides/cdi-integration.adoc:555
#, no-wrap
msgid "BeanDeploymentValidator"
msgstr "BeanDeploymentValidator"

#. type: Plain text
#: upstream/_versions/2.2/guides/cdi-integration.adoc:555
msgid "Has access to all build metadata"
msgstr "すべてのビルドメタデータにアクセスできます"
