msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/writing-extensions.adoc:6
#, no-wrap
msgid "Writing Your Own Extension"
msgstr "独自のエクステンションを書く"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:16
msgid "Quarkus extensions add a new developer focused behavior to the core offering, and consist of two distinct parts, buildtime augmentation and runtime container. The augmentation part is responsible for all metadata processing, such as reading annotations, XML descriptors etc. The output of this augmentation phase is recorded bytecode which is responsible for directly instantiating the relevant runtime services."
msgstr "Quarkusのエクステンションは、コアサービスに開発者向けの新しい動作を追加するもので、ビルド時の拡張とランタイムコンテナという2つの異なる部分から構成されています。拡張部分は、アノテーションやXML記述子の読み込みなど、すべてのメタデータ処理を担当します。この拡張フェーズの出力は、関連するランタイムサービスを直接インスタンス化するためのバイトコードとして記録されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:19
msgid "This means that metadata is only processed once at build time, which both saves on startup time, and also on memory usage as the classes etc that are used for processing are not loaded (or even present) in the runtime JVM."
msgstr "これは、メタデータがビルド時に一度だけ処理されることを意味し、起動時間の節約と、処理に使用されるクラスなどがランタイムJVMにロードされない（あるいは存在しない）ため、メモリ使用量の節約の両方を実現しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:21
msgid "This is an in-depth documentation, see the link:building-my-first-extension[building my first extension] if you need an introduction."
msgstr "これは、詳細に踏み込むドキュメントです。入門ドキュメントが必要な場合は、 link:building-my-first-extension[初めてのエクステンションの作成]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/writing-extensions.adoc:22
#, no-wrap
msgid "Extension philosophy"
msgstr "エクステンション哲学"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:25
msgid "This section is a work in progress and gathers the philosophy under which extensions should be designed and written."
msgstr "このセクションは作業中であり、エクステンションがどのように設計され、どのように書かれるべきかの哲学を記述します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-extensions.adoc:26
#, no-wrap
msgid "Why an extension framework"
msgstr "なぜエクステンションフレームワークなのか"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:32
msgid "Quarkus’s mission is to transform your entire application including the libraries it uses, into an artifact that uses significantly less resources than traditional approaches. These can then be used to build native applications using GraalVM.  To do this you need to analyze and understand the full \"closed world\" of the application.  Without the full and complete context, the best that can be achieved is partial and limited generic support.  By using the Quarkus extension approach, we can bring Java applications in line with memory footprint constrained environments like Kubernetes or cloud platforms."
msgstr "Quarkusの使命は、使用するライブラリを含むアプリケーション全体を、従来のアプローチよりも大幅に少ないリソースしか使用しないアーティファクトに変換することです。これらを使用して、GraalVMを使用してネイティブアプリケーションを構築することができます。これを行うためには、アプリケーションの完全な「クローズドワールド」を分析し、理解する必要があります。完全で完璧なコンテキストがなければ、達成可能なものは最高でも部分的で限定的、一般的なサポートです。Quarkusのエクステンションアプローチを使用することで、Kubernetesやクラウドプラットフォームのようなメモリフットプリントに制約のある環境にJavaアプリケーションを合わせることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:35
msgid "The Quarkus extension framework results in significantly improved resource utilization even when GraalVM is not used (e.g. in HotSpot).  Let’s list the actions an extension performs:"
msgstr "Quarkusエクステンションフレームワークは、GraalVMを使用していない場合（HotSpotなど）でも、リソース利用率を大幅に改善します。エクステンションが実行するアクションをリストアップしてみましょう:"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:37
msgid "Gather build time metadata and generate code"
msgstr "ビルド時のメタデータを収集し、コードを生成"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:38
msgid "This part has nothing to do with GraalVM, it is how Quarkus starts frameworks “at build time”"
msgstr "この部分はGraalVMとは何の関係もありませんが、Quarkusがフレームワークを\"ビルド時\" に起動する方法です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:39
msgid "The extension framework facilitates reading metadata, scanning classes as well as generating classes as needed"
msgstr "エクステンションフレームワークは、必要に応じてメタデータの読み込み、クラスのスキャン、クラスの生成を容易にします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:40
msgid "A small part of the extension work is executed at runtime via the generated classes, while the bulk of the work is done at build time (called deployment time)"
msgstr "拡張作業のごく一部は生成されたクラスを介して実行時に実行され、作業の大部分はビルド時に行われます (デプロイメント時と呼ばれます)"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:41
msgid "Enforce opinionated and sensible defaults based on the close world view of the application (e.g. an application with no `@Entity` does not need to start Hibernate ORM)"
msgstr "アプリケーションの近い世界観に基づいて、定見に基づいた賢明なデフォルトを強制（例えば、 `@Entity` のないアプリケーションは、Hibernate ORM を起動する必要はありません）"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:42
msgid "An extension hosts Substrate VM code substitution so that libraries can run on GraalVM"
msgstr "エクステンションは Substrate VM のコード置換をホストし、ライブラリを GraalVM 上で実行できるようにします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:43
msgid "Most changes are pushed upstream to help the underlying library run on GraalVM"
msgstr "ほとんどの変更は、基礎となるライブラリがGraalVM上で動作するようにupstreamにプッシュされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:44
msgid "Not all changes can be pushed upstream, extensions host Substrate VM substitutions - which is a form of code patching - so that libraries can run"
msgstr "すべての変更をupstreamにプッシュできるわけではないので、エクステンションは Substrate VM 置換をホスト。これはコードパッチの一形態で、ライブラリが実行できるようになっています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:45
msgid "Host Substrate VM code substitution to help dead code elimination based on the application needs"
msgstr "Substrate VMコード置換のホストにより、アプリケーションのニーズに基づいたデッドコードの排除を支援します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:46
msgid "This is application dependant and cannot really be shared in the library itself"
msgstr "これはアプリケーションに依存しており、ライブラリ自体で共有することはできません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:47
msgid "For example, Quarkus optimizes the Hibernate code because it knows it only needs a specific connection pool and cache provider"
msgstr "たとえば、Quarkusは、特定の接続プールとキャッシュプロバイダだけが必要であることを知っているため、Hibernateコードを最適化します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:48
msgid "Send metadata to GraalVM for example classes in need of reflection"
msgstr "メタデータをGraalVMに送信。例えば、リフレクションに必要なクラス"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:49
msgid "This information is not static per library (e.g. Hibernate) but the framework has the semantic knowledge and knows which classes need to have reflection (for example @Entity classes)"
msgstr "この情報はライブラリ(Hibernateなど)ごとに静的ではありませんが、フレームワークはセマンティックな知識を持っており、どのクラスがリフレクションを必要とするかを知っています(例えば@Entityクラスなど)。"

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-extensions.adoc:50
#, no-wrap
msgid "Favor build time work over runtime work"
msgstr "ランタイムワークよりもビルドタイムワーク"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:54
msgid "As much as possible favor doing work at build time (deployment part of the extension) as opposed to let the framework do work at startup time (runtime).  The more is done there, the smaller Quarkus applications using that extension will be and the faster they will load."
msgstr "可能な限り、フレームワークに起動時（ランタイム）に作業をさせるのではなく、ビルド時（エクステンションのデプロイメント部分）に作業を行うことをお勧めします。そこでの作業が多いほど、そのエクステンションを使用しているQuarkusアプリケーションは小さくなり、ロードが速くなります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/writing-extensions.adoc:55
#, no-wrap
msgid "How to expose configuration"
msgstr "設定を公開する方法"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:59
msgid "Quarkus simplifies the most common usages.  This means that its defaults might be different than the library it integrates."
msgstr "Quarkusは、最も一般的な使用法を簡略化しています。つまり、そのデフォルトは、統合されているライブラリとは異なる場合があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:62
msgid "To make the simple experience easiest, unify the configuration in `application.properties` via SmallRye Config.  Avoid library specific configuration files, or at least make them optional: e.g. `persistence.xml` for Hibernate ORM is optional."
msgstr "シンプルな体験を最も簡単にするために、SmallRye Configを介して `application.properties` で設定を統一します。ライブラリ固有の設定ファイルは避けるか、少なくともオプションにしてください。例えば、Hibernate ORM用の `persistence.xml` はオプションです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:67
msgid "Extensions should see the configuration holistically as a Quarkus application instead of focusing on the library experience.  For example `quarkus.database.url` and friends are shared between extensions as defining a database access is a shared task (instead of a `hibernate.` property for example).  The most useful configuration options should be exposed as `quarkus.[extension].` instead of the natural namespace of the library.  Less common properties can live in the library namespace."
msgstr "エクステンションは、ライブラリの体験に焦点を当てるのではなく、Quarkusアプリケーションとして全体的に設定を見るべきです。例えば、データベースアクセスの定義が共有タスクであるように、 `quarkus.database.url` 等々がエクステンション間で共有されます（例えば `hibernate.` プロパティを使用される代わりに）。最も便利な設定オプションは、ライブラリの自然な名前空間ではなく、 `quarkus.[extension].` として公開されるべきです。あまり一般的ではないプロパティは、ライブラリの名前空間に置くことができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:71
msgid "To fully enable the close world assumptions that Quarkus can optimize best, it is better to consider configuration options as build time settled vs overridable at runtime.  Of course properties like host, port, password should be overridable at runtime.  But many properties like enable caching or setting the JDBC driver can safely require a rebuild of the application."
msgstr "Quarkusが最適化できる閉じた世界の仮定を完全に有効にするには、ビルド時に設定された設定オプションと実行時にオーバーライド可能な設定オプションのどちらを採用するか検討するべきでしょう。もちろん、ホスト、ポート、パスワードなどのプロパティは、実行時にオーバーライド可能でなければなりません。しかし、キャッシングを有効にしたり、JDBCドライバを設定したりするような多くのプロパティは、アプリケーションの再構築を安全に要求することができます。"

#. type: Title ====
#: upstream/_versions/2.2/guides/writing-extensions.adoc:72
#, no-wrap
msgid "Static Init Config"
msgstr "スタティック初期化設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:75
msgid "If the extension provides additional Config Sources and if these are required during Static Init, these must be registered with `StaticInitConfigSourceProviderBuildItem`. Configuration in Static Init does not scan for additional sources to avoid double initialization at application startup time."
msgstr "エクステンションが追加のコンフィグソースを提供し、それらがスタティック初期化中に必要な場合は、それらを `StaticInitConfigSourceProviderBuildItem` に登録する必要があります。スタティック初期化での設定は、アプリケーション起動時の二重の初期化を避けるため、追加のソースをスキャンしません。"

#
#
#
#. === API
#. TODO: Describe where to put APIs
#. I wonder if that content should be in the technical aspects
#. === Substitution and recorders
#. TODO: Describe where Substitutions and recorders should live
#. type: Title ===
#: upstream/_versions/2.2/guides/writing-extensions.adoc:87
#, no-wrap
msgid "Expose your components via CDI"
msgstr "CDI でコンポーネントを公開する"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:92
msgid "Since CDI is the central programming model when it comes to component composition, frameworks and extensions should expose their components as beans that are easily consumable by user applications.  For example, Hibernate ORM exposes `EntityManagerFactory` and `EntityManager` beans, the connection pool exposes `DataSource` beans etc.  Extensions must register these bean definitions at build time."
msgstr "CDI がコンポーネントの構成に関して中心的なプログラミングモデルであるため、フレームワークやエクステンションはそのコンポーネントを、ユーザアプリケーションが容易に消費できるBeanとして公開しなければなりません。例えば、Hibernate ORM は `EntityManagerFactory` と `EntityManager` の Bean を公開し、コネクションプールは `DataSource` のBeanを公開します。エクステンションは、ビルド時にこれらのBean定義を登録しなければなりません。"

#. type: Title ====
#: upstream/_versions/2.2/guides/writing-extensions.adoc:93
#, no-wrap
msgid "Beans backed by classes"
msgstr "クラスに裏付けられたBean"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:96
msgid "An extension can produce an <<cdi-reference.adoc#additional_beans,`AdditionalBeanBuildItem`>> to instruct the container to read a bean definition from a class as if it was part of the original application:"
msgstr "エクステンションは link:cdi-reference.html#additional_beans[`AdditionalBeanBuildItem`] コンテナに、元のアプリケーションの一部であるかのようにクラスからBeanの定義を読み込むように指示します。"

#. type: Block title
#: upstream/_versions/2.2/guides/writing-extensions.adoc:97
#, no-wrap
msgid "Bean Class Registered by `AdditionalBeanBuildItem`"
msgstr "登録されている Bean クラス `AdditionalBeanBuildItem`"

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-extensions.adoc:102
#, no-wrap
msgid ""
"@Singleton <1>\n"
"public class Echo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-extensions.adoc:107
#, no-wrap
msgid ""
"   public String echo(String val) {\n"
"      return val;\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:109
msgid "If a bean registered by an `AdditionalBeanBuildItem` does not specify a scope then `@Dependent` is assumed."
msgstr "`AdditionalBeanBuildItem` で登録された Bean がスコープを指定しない場合は `@Dependent` とする。"

#. type: Plain text
#: upstream/_versions/2.2/guides/writing-extensions.adoc:111
msgid "All other beans can inject such a bean:"
msgstr "他のすべての Bean は、このような Bean を注入することができます。"

#. type: Block title
#: upstream/_versions/2.2/guides/writing-extensions.adoc:112
#, no-wrap
msgid "Bean Injecting a Bean Produced by an `AdditionalBeanBuildItem`"
msgstr "`AdditionalBeanBuildItem` によって構築された Bean をインジェクトするBean"

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-extensions.adoc:117
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-extensions.adoc:120
#, no-wrap
msgid ""
"    @Inject\n"
"    Echo echo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/writing-extensions.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(String foo) {\n"
"        return echo.echo(foo);\n"
"    }\n"
"}\n"
msgstr ""
