msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Using Hibernate ORM and JPA"
msgstr "Hibernate ORMとJPAの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:13
msgid "Hibernate ORM is the de facto standard JPA implementation and offers you the full breadth of an Object Relational Mapper.  It works beautifully in Quarkus."
msgstr "Hibernate ORMは、デファクトスタンダートなJPA実装であり、オブジェクトリレーショナルマッパーの全幅を提供します。これはQuarkusで美しく動作します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:14
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:18
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:20
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:22
msgid "The solution is located in the `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr "このソリューションは `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:23
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:26
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:29
msgid "Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs; so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr "このような古典的な設定ファイルを使用することは選択しとしてありますが、特定の高度なニーズがない限り不要です。そのため、まずはHibernate ORMを `persistence.xml` リソース無しで設定できることをみていきましょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:31
msgid "In Quarkus, you just need to:"
msgstr "Quarkusでは、以下を実施するだけです:"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:33
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:34
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常通りにアノテーションします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:36
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:38
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:40
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:41
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:42
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2の] ための `quarkus-jdbc-db2`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:43
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[アパッチダービー] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:44
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:45
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:46
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:47
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:48
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:49
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:52
#, no-wrap
msgid "Example dependencies using Maven"
msgstr "Mavenを使った依存関係の例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:60
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Hibernate ORM specific dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-orm</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:67
#, no-wrap
msgid ""
"    <!-- JDBC driver dependencies -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:71
msgid "Annotate your persistent objects with `@Entity`, then add the relevant configuration properties in `{config-file}`."
msgstr " persistent オブジェクトに`@Entity` アノテーションを付けてから、 `{config-file}` で関連する設定プロパティーを追加します。"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:73
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例 `{config-file}`"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:80
#, no-wrap
msgid ""
"# datasource configuration\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = hibernate\n"
"quarkus.datasource.password = hibernate\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:83
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:87
msgid "Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.  They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr "これらの設定プロパティは、通常のHibernate ORMの設定ファイルにあるものとは異なることに注意してください。多くの場合はHibernate ORMの設定のプロパティに対応していますが、名前が異なる場合もあり、必ずしも1対1で対応しているわけではありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:89
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate ORMの設定を自動的に設定し、多くの場合、より現代的なデフォルト値を使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:91
msgid "Please see below section <<hibernate-configuration-properties, Hibernate ORM configuration properties>> for the list of properties you can set in `{config-file}`."
msgstr "`{config-file}` で設定できるプロパティのリストについては、以下の <<hibernate-configuration-properties, Hibernate ORM 設定プロパティ>> のセクションを参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:93
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr "Hibernate ORM エクステンションがプロジェクトの依存関係の中に入っていればQuarkus の `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:95
msgid "The dialect will be selected based on the JDBC driver - unless you set one explicitly."
msgstr "方言(dialect)は、明示的に設定しない限りはJDBCドライバに基づいて選択されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:97
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、 `EntityManager` をうまくインジェクションすることができます:"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:99
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:105
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
"    @Inject\n"
"    EntityManager em; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:113
#, no-wrap
msgid ""
"    @Transactional <2>\n"
"    public void createGift(String giftDescription) {\n"
"        Gift gift = new Gift();\n"
"        gift.setName(giftDescription);\n"
"        em.persist(gift);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:116
msgid "Inject your entity manager and have fun"
msgstr "エンティティーマネージャーを注入して楽しむ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:117
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr "CDI Beanメソッドに `@Transactional` を付けると `EntityManager` がトランザクション境界内に入りコミット時にフラッシュします。"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:119
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:125
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:132
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(name = \"giftSeq\", sequenceName = \"gift_id_seq\", allocationSize = 1, initialValue = 1)\n"
"    @GeneratedValue(generator = \"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:136
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:140
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:145
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:150
msgid "To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your resources directory.  This script can contain any SQL DML statements.  Make sure to terminate each statement with a semicolon."
msgstr "Hibernate ORMの起動時にSQL文をロードするには、 `import.sql` ファイルをresourcesディレクトリーのルートに追加します。このスクリプトには、任意のSQL DML文を含めることができます。各ステートメントは必ずセミコロンで終了させてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:152
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:156
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:158
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:161
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "`EntityManagerFactory` を改良したり、Quarkusの推測を導くのに便利な様々なオプションのプロパティがあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:163
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されていれば、それ以外に必須のプロパティはありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:168
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr "ここに記載されている設定プロパティーでは、このようなデフォルトを上書きしたり、様々な面をカスタマイズしたり調整したりすることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:176
msgid "Do not mix `persistence.xml` and `quarkus.hibernate-orm.*` properties in `{config-file}`.  Quarkus will raise an exception.  Make up your mind on which approach you want to use."
msgstr "`persistence.xml` への設定と `{config-file}` に `quarkus.hibernate-orm.*` のプロパティを使用することを混在させないでください。Quarkusは例外を発生させます。どちらの方法を採用するかを決めてください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:181
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr "PostgreSQLサーバをDockerで起動したいですか？"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:187
#, no-wrap
msgid ""
"docker run --rm=true --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n"
"           -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n"
"           -p 5432:5432 postgres:13.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:190
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr "これは、永続化されない空のデータベースを起動します。簡単な実験に最適です!"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:193
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続性ユニット"

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:195
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:198
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティーを使用して、複数の永続化ユニットを定義することができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:201
msgid "The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.  For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr "`quarkus.hibernate-orm.` 名前空間のルートにあるプロパティで、デフォルトの永続化ユニットを定義します。例えば、次のスニペットではデフォルトのデータソースとデフォルトの永続化ユニットを定義しています:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:206
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:209
#, no-wrap
msgid ""
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:212
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップをベースにした方法で名前付きの永続化ユニットを定義することができます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:217
#, no-wrap
msgid ""
"quarkus.datasource.\"users\".db-kind=h2 <1>\n"
"quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:220
#, no-wrap
msgid ""
"quarkus.datasource.\"inventory\".db-kind=h2 <2>\n"
"quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:224
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n"
"quarkus.hibernate-orm.\"users\".datasource=users <4>\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:228
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n"
"quarkus.hibernate-orm.\"inventory\".datasource=inventory\n"
"quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:230
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:231
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:232
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:233
msgid "Define the datasource used by the persistence unit."
msgstr "永続性ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:234
msgid "This configuration property is important but we will discuss it a bit later."
msgstr "この設定プロパティーは重要ですが、後ほど少し説明します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:235
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`users` という永続化ユニットを定義します。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:239
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトデータソースと名前付きデータソースを混在させることも、どちらか一方だけにすることもできます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:247
msgid "The default persistence unit points to the default datasource by default.  For named persistence units, the `datasource` property is mandatory.  You can point your persistence unit to the default datasource by setting it to `<default>` (which is the internal name of the default datasource)."
msgstr "デフォルトの永続化ユニットは、デフォルトでデフォルトデータソースを使用します。名前付きの永続化ユニットの場合は `datasource` プロパティが必須です。 `<default>` （デフォルトのデータソースの内部名）に設定することで、永続化ユニットをデフォルトデータソースに向けることができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:249
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "複数の永続化ユニットが同じデータソースを使用することもできます。"

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:252
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスを永続化ユニットにアタッチする"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:255
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在してはいけません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:257
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティーを使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:258
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` パッケージレベルのアノテーションを使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:260
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合はアノテーションが無視され、 `packages` の設定プロパティのみが考慮されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:262
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティは簡単です:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:267
#, no-wrap
msgid ""
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
"quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:271
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n"
"quarkus.hibernate-orm.\"users\".datasource=users\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:274
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは、2つの永続化ユニットを作成します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:276
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "デフォルトでは、 `org.acme.model.defaultpu` パッケージのすべてのモデルクラスが含まれ、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:277
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr "`users` という名前の永続化ユニットで、 `org.acme.model.user` パッケージのすべてのモデルクラスを含み、サブパッケージも含まれています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:279
msgid "You can attach several packages to a persistence unit:"
msgstr "複数のpackageを永続化ユニットにアタッチできます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:283
#, no-wrap
msgid "quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:286
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr "`org.acme.model.shared` と `org.acme.model.user` パッケージの下にあるすべてのモデル・クラスは、 `users` 永続化ユニットにアタッチされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:288
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "モデルクラスを複数の永続化ユニットにアタッチすることもサポートされます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:294
msgid "Model classes need to be consistently added to a given persistence unit.  That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.  As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr "モデルクラスは与えられた永続化ユニットに一貫して追加される必要があります。つまり、与えられたエンティティのすべての依存するモデルクラス（ `@MappedSuperClass` 、 `@Embeddable` ...）はすべて同じ永続化ユニットにアタッチされる必要があります。パッケージレベルで永続化ユニットを扱っているので簡単なことでしょう。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:299
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティーは、1つの永続化ユニットにのみアタッチできます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:302
msgid "For entities attached to several persistence units, you cannot use Panache.  You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr "複数の永続化ユニットに接続されたエンティティではPanacheを使用することはできません。しかし、この2つのアプローチを混在させることは可能で、Panacheエンティティと複数の永続化ユニットが必要な従来のエンティティを混在させることはできます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:305
msgid "If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach, contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr "もし、そのようなユースケースがあり、シンプルなPanacheのアプローチを乱すことなく実装する方法について素晴らしいアイデアがあれば、 link:{quarkus-mailing-list-index}[quarkus-dev メーリングリスト]までご連絡ください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:309
msgid "The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.  Again, the two approaches cannot be mixed."
msgstr "モデルクラスを永続化ユニットにアタッチする2つ目の方法は、パッケージレベルの `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することです。繰り返しになりますが、この2つのアプローチを混在させることはできません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:311
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr "上記のような構成を `packages` の設定プロパティで取得するには、以下の内容の `package-info.java` ファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:316
#, no-wrap
msgid ""
"@PersistenceUnit(\"users\") <1>\n"
"package org.acme.model.user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:318
#, no-wrap
msgid "import io.quarkus.hibernate.orm.PersistenceUnit;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:320
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr "JPAのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使うことに注意してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:325
msgid "We only support defining the `@PersistenceUnit` for model classes at the package level, using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr "モデルクラスの `@PersistenceUnit` はパッケージレベルで定義することのみサポートしています。この場合、クラスレベルで `@PersistenceUnit` アノテーションを使用することはサポートされていません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:328
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "設定プロパティで行うのと同様で、アノテーションのつけられたパッケージだけでなく、そのすべてのサブパッケージも入れていることに注意してください。"

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:329
#, no-wrap
msgid "CDI integration"
msgstr "CDI統合"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:332
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr "QuarkusでHibernate ORMを使用することに慣れている方は、CDIを使用して `EntityManager` をインジェクションしたことがあると思います:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:337
#, no-wrap
msgid ""
"@Inject\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:340
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:342
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr "名前付き永続化ユニット ( この例では `users` ) の `EntityManager` をインジェクトするのは簡単です:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:348
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\") <1>\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:350
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも同じ `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:352
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "全く同じ仕組みで名前付き永続化ユニットの `EntityManagerFactory` をインジェクトすることができます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:358
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\")\n"
"EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:361
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "`persistence.xml` を使用した場合のHibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:365
msgid "Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.  This is useful for:"
msgstr "また、 `META-INF/persistence.xml` を使用して、Hibernate ORM を設定することもできます。これは次のような場合に便利です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:367
msgid "migrating existing code"
msgstr "既存コードの移行"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:368
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr "比較的複雑な設定をしていて、設定の柔軟性が必要な場合"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:369
msgid "or if you like it the good old way"
msgstr "または、昔ながらの方法が好みの場合"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:374
msgid "If you have a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties and only persistence units defined in `persistence.xml` will be taken into account."
msgstr "`persistence.xml` がある場合には `quarkus.hibernate-orm.*` のプロパティは使用できず、 `persistence.xml` で定義された永続化ユニットのみが考慮されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:378
msgid "Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr "`pom.xml` の依存関係と Java コードは先の例と同じになります。唯一の違いは `META-INF/persistence.xml` で Hibernate ORM の設定を行うことだけです:"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:380
#, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xml リソースの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:387
#, no-wrap
msgid ""
"<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n"
"             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n"
"             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n"
"             version=\"2.1\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:389
#, no-wrap
msgid "    <persistence-unit name=\"CustomerPU\" transaction-type=\"JTA\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:391
#, no-wrap
msgid "        <description>My customer entities</description>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:395
#, no-wrap
msgid ""
"        <properties>\n"
"            <!-- Connection specific -->\n"
"            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL95Dialect\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:398
#, no-wrap
msgid ""
"            <property name=\"hibernate.show_sql\" value=\"true\"/>\n"
"            <property name=\"hibernate.format_sql\" value=\"true\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:404
#, no-wrap
msgid ""
"            <!--\n"
"                Optimistically create the tables;\n"
"                will cause background errors being logged if they already exist,\n"
"                but is practical to retain existing data across runs (or create as needed) -->\n"
"            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:407
#, no-wrap
msgid ""
"            <property name=\"javax.persistence.validation.mode\" value=\"NONE\"/>\n"
"        </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:410
#, no-wrap
msgid ""
"    </persistence-unit>\n"
"</persistence>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:417
msgid "Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will the same defaults be applied."
msgstr "Quarkusの `{config-file}` で使用されているものと同じプロパティ名ではなく、同じデフォルト値が適用されるわけではありませんのでご注意ください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:419
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:425
msgid "Hibernate ORM in Quarkus supports XML mapping.  You can add mapping files following the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (JPA)] or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr "QuarkusのHibernate ORMは、XMLマッピングをサポートしています。 link:https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` 形式（JPA）] または link:http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` 形式（Hibernate ORM専用、非推奨）] に従ったマッピングファイルを追加できます:"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:427
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr "`application.properties` で（ビルド時の） link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`]プロパティを使用して。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:428
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr "<<persistence-xml,`persistence.xml`>> の `<mapping-file>` の要素を使用して。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:430
msgid "XML mapping files are parsed at build time."
msgstr "XMLマッピングファイルは、ビルド時に解析されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:434
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr "`META-INF/orm.xml` ファイルがクラスパスに存在する場合は、常にデフォルトでインクルードされます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:436
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr "そうしたくない場合は、 `quarkus.hibernate-orm.mapping-files = no-file` や `<mapping-file>no-file</mapping-file>` を使用してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:438
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:442
msgid "Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORMは、エンティティーに対するコンパイル時のバイトコード強化に依存しています。Quarkusアプリケーションを構築するのと同じプロジェクトでエンティティーを定義すれば、すべてがうまく動作します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:445
msgid "If the entities come from external projects or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:447
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:449
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:452
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードはフロントエンドやサービス、データベースアクセスが混在するアプリケーションにとても便利です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:454
msgid "There are a few common approaches to make the best of it."
msgstr "それを生かすためにはいくつかの共通したアプローチがあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:456
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr "1つ目の選択肢は、 `quarkus.hibernate-orm.database.generation=drop-and-create` と `import.sql` を併用することです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:461
msgid "That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live reload mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "そうすることで、アプリケーション、特にエンティティに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ（ `import.sql` に保存）がゼロから再投入されます。これは環境を完全にコントロールするための最良の方法であり、Quarkusのライブリロードモードでは魔法のように機能します。エンティティの変更や `import.sql` へのあらゆる変更が即座に反映され、アプリケーションを再起動しなくてもスキーマが更新されます！"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:476
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr "2つ目の選択肢は `quarkus.hibernate-orm.database.generation=update` を使用することです。 この方法は、多くのエンティティを変更するが本番データのコピーで作業する必要がある場合や、特定のデータベースのデータエントリーに基づくバグを再現する場合に最適です。 `update` は Hibernate ORM によってベストエフォートで実行され、データ損失につながるデータベース構造の変更を含む特定の状況では失敗します。 例えば、外部キー制約に違反する構造を変更する場合、Hibernate ORM の挙動を助けてあげなければならないかもしれません。 しかし、開発中だとこれらの制限は許容範囲内です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:483
msgid "With this approach when making changes to an entity, make sure to adapt the database schema accordingly; you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr "この方法では、エンティティに変更を加える時にデータベーススキーマに確実に適合させる必要があります。また、 `validate` を使用して、Hibernateにスキーマが期待どおりかを確認させることもできます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:485
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr "本番環境では、 `quarkus.hibernate-orm.database.generation` で `drop-and-create` と `update` は使用しないでください。"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:493
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:528
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:497
#, no-wrap
msgid ""
"%dev.quarkus.hibernate-orm.database.generation = drop-and-create\n"
"%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:500
#, no-wrap
msgid ""
"%dev-with-data.quarkus.hibernate-orm.database.generation = update\n"
"%dev-with-data.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:503
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:532
#, no-wrap
msgid ""
"%prod.quarkus.hibernate-orm.database.generation = none\n"
"%prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:509
#, no-wrap
msgid "./mvnw compile quarkus:dev -Dquarkus.profile=dev-with-data\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:511
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:515
msgid "Quarkus comes with default profiles (`dev`, `test` and `prod`).  And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr "Quarkusにはデフォルトのプロファイルが付属しています ( `dev` , `test` と `prod` )。また、様々な環境を記述するために独自のカスタムプロファイルを追加することができます ( `staging` , `prod-us` , など )。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:517
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:519
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:523
msgid "You can override it in your `application.properties` explicitly (e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)  but we wanted you to avoid overriding your database by accident in prod :)"
msgstr "ユーザーが `application.properties` で明示的にオーバーライドすることもできますが (例: `%prod.quarkus.hibernate-orm.sql-load-script = import.sql` )、prod で誤ってデータベースをオーバーライドしないようにしたいと思いました :)"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:526
msgid "Speaking of, make sure to not drop your database schema in production! Add the following in your properties file."
msgstr "そういえば、本番ではデータベーススキーマを落とさないようにしましょう!プロパティーファイルに以下を追加します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:535
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:538
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr "同じエンティティを頻繁に読み込むアプリケーションでは、Hibernate ORMのL2キャッシュを有効にするとパフォーマンスが向上します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:539
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティーのキャッシュ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:542
msgid "To enable second-level cache, mark the entities that you want cached with `@javax.persistence.Cacheable`:"
msgstr "第 2 レベルのキャッシュを有効にするには、キャッシュしたいエンティティーを `@javax.persistence.Cacheable` でマークします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:551
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    int dialInCode;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:554
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティーが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティーとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:556
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr "これは、データベースに問い合わせることなくエンティティをロードできることを意味しますが、ロードされたエンティティがデータベースの最近の変更を反映していない可能性があることを意味するので注意が必要です。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:557
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:560
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr "コレクションとリレーションはキャッシュするために個別にアノテーションする必要があります。この場合、Hibernate固有の `@org.hibernate.annotations.Cache` を使用する必要があり、さらに `CacheConcurrencyStrategy` を指定する必要があります:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:564
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:569
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:573
#, no-wrap
msgid ""
"    @OneToMany\n"
"    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)\n"
"    List<City> cities;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:576
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:578
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:581
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリは、第二レベルのキャッシュの恩恵を受けることもできます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:583
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:585
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:590
#, no-wrap
msgid ""
"Query query = ...\n"
"query.setHint(\"org.hibernate.cacheable\", Boolean.TRUE);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:593
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` があれば、その定義で直接キャッシュを有効にすることができます。これは通常、エンティティ上で行われます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:602
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Fruits.findAll\",\n"
"      query = \"SELECT f FROM Fruit f ORDER BY f.name\",\n"
"      hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\") )\n"
"public class Fruit {\n"
"   ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:605
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr "以上です。キャッシュ技術はすでにQuarkusに統合されてデフォルトで有効になってるのでキャッシュしても問題ないものを設定するだけで十分です。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:606
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:609
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr "キャッシュはデータの異なる部分を分離するために別々の領域にデータを保存します。このような領域には名前が付けられ、各領域を独立して設定したり、統計を監視したりするのに役立ちます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:613
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr "`org.acme.Country#cities` コレクションは保持するエンティティの完全修飾名とコレクションのフィールド名を `#` 文字で区切った名前の領域にキャッシュされます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:615
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr "すべてのキャッシュされたクエリは、デフォルトでは、 `default-query-results-region` と呼ばれる一つの専用の領域に保存されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:617
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr "すべてのリージョンは、デフォルトではサイズと時間で制限されています。デフォルトでは、最大で `10000` のエントリ数、最大で `100` 秒のアイドル時間が設定されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:619
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr "各領域のサイズは、 `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` プロパティ（ _<region_name>_ を実際の領域名に置き換えてください）でカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:621
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr "最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` プロパティ （_<region_name>_ を実際のリージョン名に置き換えてください）で時間（下記の時間のフォーマットに関する注意を参照）を指定します。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:625
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "領域名にドットが含まれている場合は二重引用符が必須です。次のようになります:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:629
#, no-wrap
msgid "quarkus.hibernate-orm.cache.\"org.acme.MyEntity\".memory.object-count=1000\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:635
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシングの制限"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:638
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシング技術は、現在のところ非常に初歩的で限られています。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:640
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr "Quarkusの開発チームは最初から _ある程度の_ キャッシュ機能があった方が何もないよりは良いと考えました。将来のリリースではより良いキャッシュソリューションが統合されることを期待しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:644
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr "これらのキャッシュはローカルに保持されているため、他のアプリケーションによって永続ストアに変更が加えられても無効化されたり更新されたりすることはありません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:646
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr "また、同じアプリケーションの複数のコピーを（Kubernetes/OpenShiftなどのクラスタで）実行している場合、アプリケーションの別々のコピーのキャッシュは同期されません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:648
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr "これらの理由から、ある種の仮定が成り立つ場合にのみキャッシュを有効にすることが適しています。私たちは、変化しないエンティティ、コレクション、およびクエリのみをキャッシュすることを強く推奨します。あるいは、そのようなエンティティが実際に変更され、古くなった（stale）ものを読み取ったとしても、アプリケーションの期待値に影響を与えないようにする必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:650
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションがL2キャッシュから最高のパフォーマンスを引き出し、かつ予期せぬ動作を避けることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:655
#, no-wrap
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data.\n"
msgstr "不変のデータだけでなく、ある文脈では、可変のデータに対してもキャッシュを有効にすることが許容されるかもしれません。これは、頻繁に読み込まれ、ある程度の陳腐化を許容できるようなエンティティを選択した場合、必要なトレードオフとなり得ます。この「許容される陳腐化の度合い」は、eviction プロパティを設定することで調整できます。しかし、これは推奨されておらず、データに予期せぬ影響を与える可能性があるため、細心の注意を払って行う必要があります。\n"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:657
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "理想的には、変更可能なデータでキャッシュを有効にするのではなく、クラスタ化されたキャッシュを使用することがより良い解決策です。しかし、現時点では、Quarkusはそのような実装を提供していません：この必要性を知らせれば、チームがこれを考慮することができますので、お気軽にご連絡ください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:660
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr "最後に、 `hibernate.cache.use_second_level_cache` を `false` に設定することで、L2キャッシュをグローバルで無効化できます。この設定は、 `persistence.xml` 設定ファイルで指定する必要があります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:662
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr "L2キャッシュを無効にすると、すべてのキャッシュアノテーションは無視され、すべてのクエリはキャッシュを無視して実行されます。これは通常、問題を診断する場合にのみ有効です。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:664
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:666
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティークラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:668
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus Extensionがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:670
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:677
#, no-wrap
msgid ""
"    <!-- Add the Hibernate Envers extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-envers</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:680
msgid "At this point the extension does not expose additional configuration properties."
msgstr "Quarkusの設定プロパティを使用して、複数の永続化ユニットを定義することができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:682
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr "Hibernate Enversの詳細については、 link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]を参照してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:684
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:689
msgid "Either link:micrometer[Micrometer] or link:microprofile-metrics[SmallRye Metrics] are capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.  When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr "link:micrometer[Micrometer] または link:microprofile-metrics[SmallRye Metrics] は、Hibernate ORM が実行時に収集するメトリクスを公開することができます。 `/q/metrics` エンドポイントで Hibernate メトリクスを公開できるようにするには、プロジェクトがメトリクスエクステンションに依存していることを確認し、設定プロパティー `quarkus.hibernate-orm.metrics.enabled` を `true` に設定します。 link:microprofile-metrics[SmallRye Metrics] を使用すると、メトリクスは `vendor` スコープの下で利用可能になります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:690
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:694
msgid "Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using this extension you will mostly have the same experience as using the original library."
msgstr "Quarkusは使用するライブラリを変更しません。このルールはHibernate ORMにも適用されます。このエクステンションを使用すると、元のライブラリを使用した場合とほとんど同じエクスペリエンスが得られます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:698
msgid "But while they share the same code, Quarkus does configure some components automatically and injects custom implementations for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to know what is being done."
msgstr "しかし、両者は同じコードを共有していますが、Quarkusはいくつかのコンポーネントを自動的に設定し、いくつかの拡張ポイントにカスタム実装をインジェクションしています。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:699
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:711
msgid "Due to the usage of enhancement, using the `clone()` method on entities is currently not supported as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr "Enhancement を使用しているため、エンティティで `clone()` メソッドを使用することは現在サポートされていません。これは、エンティティにEnhancement 固有のフィールドもクローンされるためです。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:713
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:715
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:717
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクション・マネージャーの統合"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:722
#, no-wrap
msgid "Connection pool"
msgstr "接続プール"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:727
#, no-wrap
msgid "Second Level Cache"
msgstr "セカンドレベルキャッシュ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:730
msgid "as explained above in section <<caching,Caching>>, you don't need to pick an implementation.  A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr "<<caching,キャッシング>> の項で説明したように、実装を選択する必要はありません。 link:https://infinispan.org/[Infinispan]と link:https://github.com/ben-manes/caffeine[Caffeine] の技術をベースにした適切な実装は、Hibernate ORM拡張の推移依存関係に含まれており、ビルド時に自動的に統合されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:731
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:733
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr "クラスパスに重複したファイルがある場合のXMLマッピング"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:735
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr "<<xml-mapping,XML マッピング>> ファイルは一意のパスを持つことが期待されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:740
msgid "In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.  For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path, but in different JARs), then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml` **in the same JAR as the `META-INF/orm.xml` file**."
msgstr "実際には、クラスパスに XML マッピングファイルが重複して存在するのは、非常に特殊なシナリオの場合に限られます。 例えば、2つのJARに `META-INF/orm.xml` ファイルが含まれている場合（全く同じパスで、異なるJARに含まれている）、マッピングファイルのパス `META-INF/orm.xml` は、 **<code>META-INF/orm.xml</code>** ファイルと同じJARにある `persistence.xml` からしか参照できません。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:741
#, no-wrap
msgid "JMX"
msgstr "JMX"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:746
msgid "Management beans are not working in GraalVM native images; therefore Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.  This limitation is likely permanent, as it's not a goal for native images to implement support for JMX. All such metrics can be accessed in other ways."
msgstr "マネージメントBeanはGraalVMのネイティブイメージでは動作しません。したがって、ネイティブイメージにコンパイルした場合、JMX Beanに統計や管理操作を登録するHibernateの機能は無効になります。ネイティブイメージがJMXのサポートを実装することが目標ではないため、この制限はおそらく永久的なものです。このようなメトリクスはすべて他の方法でアクセスできます。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:747
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:750
msgid "Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images, as JACC is not available - nor useful - in native mode."
msgstr "GraalVMのネイティブイメージを構築する際には、JACCと統合するHibernate ORMの機能は無効になります。なぜなら、JACCはネイティブ・モードでは利用できず、有用でもないからです。"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:751
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:761
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:763
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:768
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:772
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:776
msgid "Datasource configuration is extremely simple, but is covered in a different guide as technically it's implemented by the Agroal connection pool extension for Quarkus."
msgstr "データソースの設定は非常にシンプルですが、技術的にはQuarkus用のAgroal接続プールエクステンションによって実装されているため、別のガイドで説明します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:778
msgid "Jump over to link:datasource[Quarkus - Datasources] for all details."
msgstr "すべての詳細については、 link:datasource[Quarkus - データソース] にジャンプしてください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:780
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:783
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy[Hibernate User Guide])."
msgstr "\"マルチテナンシーという用語は、一般的にソフトウェア開発に適用され、アプリケーションの単一の実行中のインスタンスが同時に複数のクライアント(テナント)にサービスを提供するアーキテクチャを示しています。これはSaaSソリューションでは非常に一般的です。様々なテナントに関連する情報(データ、カスタマイズなど)を分離することは、これらのシステムでは特別な課題です。これには、データベースに格納されている各テナントが所有するデータも含まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:785
msgid "Quarkus currently supports the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-database[separate database] and the link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-schema[separate schema] approach."
msgstr "Quarkusは現在、 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-database[分離型データベース] と link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#multitenacy-separate-schema[分離型スキーマ] アプローチをサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:787
msgid "To see multitenancy in action, you can check out the {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr "マルチテナンシーの動作を確認するには、 {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] クイックスタートをご覧ください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:788
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:791
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:799
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.persistence.EntityManager;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:803
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/{tenant}\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:806
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:813
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"fruits\")\n"
"    public Fruit[] getFruits() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"                .getResultList().toArray(new Fruit[0]);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:815
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:851
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:875
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:818
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr "受信したリクエストからテナントを解決し、特定のテナント構成にマッピングするためには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` インターフェースの実装を作成する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:822
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:863
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:825
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:887
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:828
#, no-wrap
msgid ""
"@RequestScoped <1>\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:831
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:836
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDefaultTenantId() {\n"
"        return \"base\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:841
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolveTenantId() {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:846
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant config\n"
"            return getDefaultTenantId();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:849
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:853
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "Beanは、テナントの解決が入ってくるリクエストに依存するため `@RequestScoped` にします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:855
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装ではテナントはリクエストパスから解決されるので、テナントが推測できない場合はデフォルトのテナント識別子が返されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:867
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.PersistenceUnit;\n"
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:871
#, no-wrap
msgid ""
"@PersistenceUnit(\"name-of-persistence-unit\") <1>\n"
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:873
#, no-wrap
msgid "   // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:890
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:900
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolveTenantId() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:903
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:909
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#. type: delimited block =
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:913
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.  CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr "すべてのテナントに同じデータソースを使用し、そのデータソース内に各テナント用のスキーマを作成する必要があります。注意：MariaDB/MySQLのような一部のデータベースは、データベーススキーマをサポートしていません。このような場合には、以下のようなDATABASEアプローチを使用する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:918
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:973
#, no-wrap
msgid ""
"# Disable generation\n"
"quarkus.hibernate-orm.database.generation=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:923
#, no-wrap
msgid ""
"# Enable SCHEMA approach and use default datasource\n"
"quarkus.hibernate-orm.multitenant=SCHEMA\n"
"# You could use a non-default datasource by using the following setting \n"
"# quarkus.hibernate-orm.multitenant-schema-datasource=other\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:929
#, no-wrap
msgid ""
"# The default data source used for all tenant schemas\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:934
#, no-wrap
msgid ""
"# Enable Flyway configuration to create schemas\n"
"quarkus.flyway.schemas=base,mycompany\n"
"quarkus.flyway.locations=classpath:schema\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:937
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:950
#, no-wrap
msgid ""
"CREATE SEQUENCE base.known_fruits_id_seq;\n"
"SELECT setval('base.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE base.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO base.known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:961
#, no-wrap
msgid ""
"CREATE SEQUENCE mycompany.known_fruits_id_seq;\n"
"SELECT setval('mycompany.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE mycompany.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:965
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:968
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:976
#, no-wrap
msgid ""
"# Enable DATABASE approach\n"
"quarkus.hibernate-orm.multitenant=DATABASE\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:982
#, no-wrap
msgid ""
"# Default tenant 'base'\n"
"quarkus.datasource.base.db-kind=postgresql\n"
"quarkus.datasource.base.username=quarkus_test\n"
"quarkus.datasource.base.password=quarkus_test\n"
"quarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:988
#, no-wrap
msgid ""
"# Tenant 'mycompany'\n"
"quarkus.datasource.mycompany.db-kind=postgresql\n"
"quarkus.datasource.mycompany.username=mycompany\n"
"quarkus.datasource.mycompany.password=mycompany\n"
"quarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5433/mycompany\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:992
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.locations=classpath:database/default\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:996
#, no-wrap
msgid ""
"# Flyway configuration for the mycompany datasource\n"
"quarkus.flyway.mycompany.locations=classpath:database/mycompany\n"
"quarkus.flyway.mycompany.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:999
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1001
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr "デフォルトスキーマ ( `src/main/resources/database/default/V1.0.0__create_fruits.sql` )。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1014
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1017
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: delimited block -
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1030
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/hibernate-orm.adoc:1032
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"
