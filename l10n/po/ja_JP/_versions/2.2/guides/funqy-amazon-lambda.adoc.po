msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:6
#, no-wrap
msgid "Funqy Amazon Lambda Binding"
msgstr "Funqy Amazon Lambda バインディング"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:12
msgid "The guide walks through quickstart code to show you how you can deploy Funqy functions to Amazon Lambda."
msgstr "このガイドでは、Funqy関数をAmazon Lambdaにデプロイする方法をクイックスタートコードで説明しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:15
msgid "Funqy functions can be deployed using the AWS Lambda Java Runtime, or you can build a native executable and use Lambda Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Funqy関数はAWS Lambda Java Runtimeを使ってデプロイすることもできますし、より少ないメモリーフットプリントとより高速なコールドブート起動時間が必要な場合は、ネイティブ実行可能ファイルをビルドしてLambda Custom Runtimeを使うこともできます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:21
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:23
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:24
msgid "Read about link:funqy[Funqy Basics].  This is a short read!"
msgstr "link:funqy[Funqy の基礎] を読む。短時間で読めます!"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:27
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "https://aws.amazon.com[An Amazon AWS account]"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:28
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:29
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 、ローカルテスト用"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:31
msgid "Funqy Amazon Lambdas build off of our link:amazon-lambda[Quarkus Amazon Lambda support]."
msgstr "Funqy Amazon Lambdasは、 link:amazon-lambda[Quarkus Amazon Lambdaのサポート] をベースに構築されています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:32
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:36
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:37
#, no-wrap
msgid "The Quickstart"
msgstr "クイックスタート"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:40
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:42
msgid "The solution is located in the `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[directory]."
msgstr "ソリューションは `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:43
#, no-wrap
msgid "The Code"
msgstr "コード"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:47
msgid "There is nothing special about the code and more importantly nothing AWS specific.  Funqy functions can be deployed to many different environments and AWS Lambda is one of them.  The Java code is actually the same exact code as the {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]."
msgstr "コードには何も特別なものはありませんし、もっと重要なのはAWSに特化したものは何もありません。Funqy関数は様々な環境にデプロイすることができ、AWS Lambdaもその一つです。Javaのコードは、実は{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]と全く同じコードです。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:49
#, no-wrap
msgid "Choose Your Function"
msgstr "functionの選択"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:53
msgid "Only one Funqy function can be exported per Amazon Lambda deployment.  If you have multiple functions defined within your project, then you will need to choose the function within your Quarkus `application.properties`:"
msgstr "Amazon LambdaデプロイメントごとにエクスポートできるFunqy関数は1つだけです。プロジェクト内で複数の関数を定義している場合は、Quarkus `application.properties` 内で関数を選択する必要があります ."

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:57
#, no-wrap
msgid "quarkus.funqy.export=greet\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:60
msgid "You can see how the quickstart has done it within its own {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties]."
msgstr "クイックスタートがそれをどのように行ったかは、自身の {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties] で確認できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:62
msgid "Alternatively, you can set the `QUARKUS_FUNQY_EXPORT` environment variable when you create the Amazon Lambda using the `aws` cli."
msgstr "または、`aws` cli を使用して Amazon Lambda を作成する際に、環境変数 `QUARKUS_FUNQY_EXPORT` を設定することもできます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:63
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "AWS Lambda Java Runtime へのデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:68
msgid "There are a few steps to get your Funqy function running on AWS Lambda.  The quickstart maven project generates a helpful script to create, update, delete, and invoke your functions for pure Java and native deployments.  This script is generated at build time."
msgstr "Funqy 関数を AWS Lambda 上で動作させるには、いくつかのステップがあります。quickstart maven プロジェクトは、純粋な Java とネイティブデプロイメント用の関数を作成、更新、削除、呼び出すための便利なスクリプトを生成します。このスクリプトはビルド時に生成されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:69
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:72
msgid "Build the project using maven."
msgstr "mavenを使ってプロジェクトをビルドします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:76
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:79
msgid "This will compile and package your code."
msgstr "これでコードがコンパイルされ、パッケージ化されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:80
#, no-wrap
msgid "Create an Execution Role"
msgstr "実行ロールの作成"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:86
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "AWS CLIを使った Lambda のデプロイ方法については、 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] を参照してください。具体的には、 `Execution Role` を作成していることを確認してください。プロファイルやコンソールウィンドウで `LAMBDA_ROLE_ARN` 環境変数を定義する必要があります。また、ビルドで生成される `manage.sh` スクリプトを編集して、そこに直接ロール値を置くこともできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:90
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:92
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:98
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:99
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - aws Lambda CLI の呼び出しのラッパー"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:100
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr "`bootstrap-example.sh` - ネイティブデプロイメント用のブートストラップスクリプトの例"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:101
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr "`sam.jvm.yaml` - (オプション) SAM CLI やローカル・テスト用"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:102
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr "`sam.native.yaml` - (オプション) SAM CLI やネイティブ・ローカル・テスト用(オプション)"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:103
#, no-wrap
msgid "Create the function"
msgstr "関数を作成する"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:108
msgid "The `target/manage.sh` script is for managing your Funqy function using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr "`target/manage.sh` スクリプトは、AWS Lambda Java ランタイムを使用して Funqy 関数を管理するためのものです。このスクリプトは利便性のためだけに提供されています。関数の作成、削除、更新のためにどのような aws コマンドが実行されるかを知りたい場合は、`manage.sh` スクリプトの出力を確認してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:110
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` は、 `create` , `delete` , `update` , `invoke` の 4 つの操作をサポートしています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:114
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr "AWS CLIがインストールされていること、AWSアクセスキーのためのaws configureを実行していること、 `LAMBDA_ROLE_ARN` 環境変数を設定していること(上記の通り)を確認するには、 `manage.sh` をパラメーターなしで実行してください。それに応じて利用方法のガイドが表示されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:116
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "`usage` を参照したり、AWS の設定を検証するためには次のようにします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:119
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:122
msgid "You can `create` your function using the following command:"
msgstr "次のコマンドを使って、 Function を `create` します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:126
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:129
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "または、このシェルで既に `LAMBDA_ROLE_ARN` が定義されていない場合にはこうです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:133
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:137
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest`.  This special handler is Funqy's integration point with AWS Lambda."
msgstr "ハンドラースイッチを変更しないでください。これは `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest` にハードコードされている必要があります。この特別なハンドラーは、Funqy と AWS Lambda の統合ポイントです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:140
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "Function の作成に問題がある場合は、 `delete` で Function を削除してから `create` コマンドを再実行する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:144
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:147
msgid "Commands may also be stacked:"
msgstr "コマンドはスタックすることもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:150
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:152
#, no-wrap
msgid "Invoke the function"
msgstr "関数の呼出"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:155
msgid "Use the `invoke` command to invoke your function."
msgstr "Function を呼び出すには `invoke` コマンドを使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:159
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:163
msgid "The example function takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr "サンプルの関数は、プロジェクトのルートディレクトリーにある json ファイルを指す `--payload` スイッチを介して渡された入力を受け取ります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:165
msgid "The function can also be invoked locally with the SAM CLI like this:"
msgstr "この関数は、以下のようにSAM CLI によってローカルで呼び出すこともできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:169
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:285
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:172
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "ネイティブイメージのビルドで作業している場合は、テンプレート名をネイティブバージョンに置き換えてください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:176
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:292
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:178
#, no-wrap
msgid "Update the function"
msgstr "functionの更新"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:182
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your function by executing the `update` command."
msgstr "お好きなように Java コードを更新することができます。リビルドしたら、 `update` コマンドを実行することで、関数を再配備できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:186
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:188
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "AWS Lambda カスタム (ネイティブ) ランタイムへのデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:192
msgid "If you want a lower memory footprint and faster initialization times for your Funqy function, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr "Funqy 関数のメモリーフットプリントを減らし、初期化時間を短縮したい場合は、Javaコードをネイティブ実行可能ファイルにコンパイルすることができます。`-Pnative` スイッチでプロジェクトをリビルドすることを確認してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:194
msgid "For Linux hosts execute:"
msgstr "Linuxホストの場合は以下を実行します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:198
#, no-wrap
msgid "mvn package -Pnative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:207
#, no-wrap
msgid "./mvnw clean install -Pnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:212
msgid "Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr "これらのコマンドのいずれかがコンパイルされ、ネイティブの実行イメージが作成されます。また、zip ファイル `target/function.zip` も生成されます。このzipファイルには、 `bootstrap` にリネームされたネイティブ実行イメージが含まれています。これはAWS Lambda Custom (Provided) Runtimeの要件です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:215
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "ここでの説明は上記と全く同じですが、1つ変更点があります: `manage.sh` スクリプトの最初のパラメーターとして `native` を追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:219
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:224
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "上記のように、コマンドはスタックすることができます。唯一の要件は、ネイティブイメージビルドで作業したい場合、最初のパラメーターとして `native` を指定することです。このスクリプトは、ネイティブイメージ Function のデプロイメントを管理するために必要な残りの詳細を処理します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:227
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr "関数を作成、削除、更新するためにどのようなawsコマンドが実行されるかを知りたい場合は、 `manage.sh` スクリプトの出力を調べてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:230
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "ネイティブ用のcreateコマンドについて注意すべき点は、 `aws lambda create-function` 呼び出しで特定の環境変数を設定しなければならないということです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:234
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:236
#, no-wrap
msgid "Examine the POM"
msgstr "POM を検証する"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:241
#, no-wrap
msgid "Integration Testing"
msgstr "統合テスト"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:246
msgid "Funqy Amazon Lambda support leverages the Quarkus AWS Lambda test framework so that you can unit tests your Funqy functions.  This is true for both JVM and native modes.  This test framework provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr "Funqy の Amazon Lambda サポートは、Quarkus AWS Lambda テストフレームワークを利用して、Funqy 関数をユニットテストできるようにします。これは、JVM とネイティブモードの両方に当てはまります。このテストフレームワークは、Docker のオーバーヘッドなしで、SAM CLI と同様の機能を提供します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:249
msgid "If you open up {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that the test replicates the AWS execution environment."
msgstr "{quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] を開いてみると、AWS 実行環境を複製したテストであることがわかると思います。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:253
#, no-wrap
msgid "package org.acme.funqy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:258
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.test.LambdaClient;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:268
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class FunqyTest {\n"
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Friend friend = new Friend(\"Bill\");\n"
"        Greeting out = LambdaClient.invoke(Greeting.class, friend);\n"
"        Assertions.assertEquals(\"Hello Bill\", out.getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:270
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr "SAM CLI を使用したテスト"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:276
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your functions locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] を利用すると、Lambda をシミュレートした環境でラップトップ上のローカルで関数を実行することができます。これには link:https://www.docker.com/products/docker-desktop[docker] のインストールが必要です。これは、利用することを選択した場合のオプションのアプローチです。それ以外の場合は、Quarkus JUnitの統合でほとんどのニーズを満たすことができるはずです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:278
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "JVMとネイティブ実行モードの両方に対応したスターターテンプレートが生成されています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:281
msgid "Run the following SAM CLI command to locally test your function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "以下の SAM CLI コマンドを実行して、適切な SAM `template` を渡して関数をローカルでテストします。 `event` パラメーターには任意の JSON ファイルを指定します。この場合はサンプル `payload.json` を指定しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:288
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "ネイティブイメージは、 `sam.native.yaml` テンプレートを使ってローカルでテストすることもできます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:294
#, no-wrap
msgid "Modifying `function.zip`"
msgstr "`function.zip` の修正"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:301
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "zipディレクトリーの下に作成したファイルやディレクトリーは、すべて `function.zip` に含まれます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:302
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:308
msgid "There are times you may want to set specific system properties or other arguments when lambda invokes your native Funqy deployment.  If you include a `bootstrap` script file within `zip.native`, the Funqy extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "ラムダがネイティブの Funqy デプロイメントを起動する際に、特定のシステムプロパティーやその他の引数を設定したい場合があるかもしれません。 `zip.native` 内に `bootstrap` スクリプトファイルを含めると、Funqy エクステンションは自動的に実行可能ファイルの名前を `function.zip` 内の `runner` に変更し、 `bootstrap` スクリプトの unix モードを実行可能ファイルに設定します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:310
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "カスタム `bootstrap` スクリプトを含む場合は、ネイティブ実行可能ファイルを `runner` として参照する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/funqy-amazon-lambda.adoc:311
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "このエクステンションは、サンプルのスクリプト `target/bootstrap-example.sh` を生成します。"
