msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/building-native-image.adoc:6
#, no-wrap
msgid "Building a Native Executable"
msgstr "ネイティブ実行可能ファイルのビルド"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:11
msgid "This guide covers:"
msgstr "このガイドでは以下をカバーしています:"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:13
msgid "Compiling the application to a native executable"
msgstr "アプリケーションをネイティブ実行可能ファイルにコンパイル"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:14
msgid "Packaging the native executable in a container"
msgstr "ネイティブ実行可能ファイルのコンテナーへのパッケージング"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:15
#: upstream/_versions/2.2/guides/building-native-image.adoc:702
#, no-wrap
msgid "Debugging native executable"
msgstr "ネイティブ実行可能ファイルのデバッグ"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:17
msgid "This guide takes as input the application developed in the link:getting-started[Getting Started Guide]."
msgstr "このガイドは、 link:getting-started[入門ガイド] で開発されたアプリケーションを入力としています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:18
#, no-wrap
msgid "GraalVM"
msgstr "GraalVM"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:24
msgid "Building a native executable requires using a distribution of GraalVM.  There are three distributions: Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.  The differences between the Oracle and Mandrel distributions are as follows:"
msgstr "ネイティブな実行可能ファイルをビルドするには、GraalVM のディストリビューションを使用する必要があります。ディストリビューションは3つあります。Oracle GraalVM Community Edition (CE)、Oracle GraalVM Enterprise Edition (EE)、そして Mandrel です。Oracle ディストリビューションと Mandrel ディストリビューションの違いは以下の通りです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:27
msgid "Mandrel is a downstream distribution of the Oracle GraalVM CE.  Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr "Mandrelは、Oracle GraalVM CEのダウンストリームディストリビューションです。Mandrelの主な目的は、Quarkusをサポートするために特別に設計されたネイティブ実行可能ファイルを構築する方法を提供することです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:36
msgid "Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base, with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.  They support the same capabilities to build native executables as Oracle GraalVM CE, with no significant changes to functionality.  Notably, they do not include support for polyglot programming.  The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.  These exclusions also mean Mandrel offers a considerable reduction in its distribution size when compared with Oracle GraalVM CE/EE."
msgstr "Mandrel のリリースは、アップストリームのOracle GraalVM CEコードベースから派生したコードベースから構築されており、わずかな変更しか行われていませんが、Quarkusネイティブアプリには必要ない重要な除外事項がいくつかあります。これらのリリースは、Oracle GraalVM CEと同じ機能をサポートしており、機能に大きな変更はありません。特筆すべきは、多言語プログラミングのサポートが含まれていないことです。これらの除外の理由は、大多数のQuarkusユーザーにより良いレベルのサポートを提供するためです。また、これらの除外は、Oracle GraalVM CE/EEと比較して、Mandrelの配布サイズが大幅に縮小されていることを意味しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:41
msgid "Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.  This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.  This enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.  This is particularly important when it comes to conformance and security."
msgstr "Mandrelは、標準のOpenJDKプロジェクトを使用して、Oracle GraalVM CEとは少し違った形で構築されています。これは、Oracleが独自のGraalVMダウンロードを構築するために使用するOpenJDKのバージョンに追加したいくつかの小さなエクステンションから利益を得られないことを意味します。アップストリームのOpenJDKはそれらを管理しておらず、保証することができないため、このような機能強化は省略されています。これは、規格適合性とセキュリティーに関しては特に重要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:52
msgid "The prerequisites vary slightly depending on whether you are using Oracle GraalVM CE/EE or Mandrel."
msgstr "前提条件は、Oracle GraalVM CE/EEを使用しているか、Mandrelを使用しているかによって若干異なります。"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:54
#, no-wrap
msgid "Install the Java 11 version of GraalVM"
msgstr "Java 11 バージョンのGraalVMをインストールします。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:58
msgid "While Oracle GraalVM is available for both Java 8 and Java 11 (Mandrel only supports Java 11), Quarkus only works with the Java 11 version.  If you use the Oracle distribution, make sure to install the Java 11 version."
msgstr "Oracle GraalVM はJava 8とJava 11の両方に対して存在しますが (Mandrel はJava 11のみをサポート)、Quarkus Java 11でのみ動作します。Oracleのディストリビューションを使用する場合は、Java 11をインストールするようにしてください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:66
#: upstream/_versions/2.2/guides/building-native-image.adoc:79
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:67
#: upstream/_versions/2.2/guides/building-native-image.adoc:80
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11 がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:68
#: upstream/_versions/2.2/guides/building-native-image.adoc:83
msgid "A working container runtime (Docker, podman)"
msgstr "動作するコンテナーランタイム(Docker, podman)"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:69
#: upstream/_versions/2.2/guides/building-native-image.adoc:84
msgid "The code of the application developed in the link:getting-started[Getting Started Guide]."
msgstr "link:getting-started[入門ガイド]で開発したアプリケーションのコード"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:72
msgid "Skip to <<#container-runtime,this section>> to continue with the guide for Mandrel, and follow the Mandrel-specific instructions in that section."
msgstr "この <<#container-runtime, セクション>>をスキップして、 Mandrel のガイドを続行し、そのセクションの Mandrel 固有の指示に従ってください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:76
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:81
msgid "A xref:configuring-c-development[working C development environment]"
msgstr "xref:configuring-c-development[動作するC言語の開発環境]"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:82
msgid "GraalVM version {graalvm-version} (be sure to install the Java 11 support) installed and xref:configuring-graalvm[configured appropriately]"
msgstr "GraalVM のバージョン {graalvm-version} (必ずJava 11 のサポートをインストールしてください)がインストールされ、 #configuring-graalvm[適切に設定されていること]"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:85
#, no-wrap
msgid "Supporting native compilation in C"
msgstr "C言語でのネイティブコンパイルのサポート"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:90
msgid "What does having a working C developer environment mean?"
msgstr "動作するC言語の開発環境があるとはどういう意味でしょうか?"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:92
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr "Linuxでは、GCC、glibc、zlibヘッダが必要です。一般的なディストリビューションでは次の通りです:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:99
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
"# Debian-based distributions:\n"
"sudo apt-get install build-essential libz-dev zlib1g-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:101
msgid "XCode provides the required dependencies on macOS:"
msgstr "macOS では、XCode が必要な依存関係を提供します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:105
#, no-wrap
msgid "xcode-select --install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:107
msgid "On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]"
msgstr "Windowsの場合は、 https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools] をインストールする必要があります。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:110
#, no-wrap
msgid "Configuring GraalVM"
msgstr "GraalVMの設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:115
msgid "If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM. There is an explanation of how to do this at the end of this guide."
msgstr "GraalVMをインストールできない場合は、マルチステージのDockerビルドを使用して、GraalVMを含むDockerコンテナー内でMavenを実行することができます。このガイドの最後にこれを行う方法の説明があります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:118
msgid "Version {graalvm-version} is required. Using the community edition is enough."
msgstr "Version {graalvm-version} が必要です。コミュニティエディションで大丈夫です。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:120
msgid "Install GraalVM (pick the java 11 version) if you haven't already. You have a few options for this:"
msgstr "まだの場合は、GraalVM(のJava 11バージョン)をインストールしてください。いくつかポイントがあります:"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:121
msgid "Use platform-specific install tools like https://github.com/graalvm/homebrew-tap[homebrew], https://sdkman.io/jdks#Oracle[sdkman], or https://github.com/ScoopInstaller/Java[scoop]."
msgstr "プラットフォーム固有の方法を用いてください: https://github.com/graalvm/homebrew-tap[homebrew], https://sdkman.io/jdks#Oracle[sdkman], or https://github.com/ScoopInstaller/Java[scoop]."

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:123
msgid "Download the appropriate Community Edition archive from <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK.  Make sure to download and install at Java 11 version."
msgstr "適切なコミュニティエディションのアーカイブを <https://github.com/graalvm/graalvm-ce-builds/releases> からダウンロードし、他のJDK同様に解凍して下さい。Java 11バージョンをダウンロードしてインストールするようにして下さい。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:124
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr "ランタイム環境を構成します。 `GRAALVM_HOME` 環境変数をGraalVMインストールディレクトリーに設定します。例えば、"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:128
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:131
msgid "On macOS, point the variable to the `Home` sub-directory:"
msgstr "macOSでは、変数を `Home`  サブディレクトリーに指定します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:135
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/Contents/Home/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:138
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr "Windowsでは、コントロールパネルから環境変数を設定する必要があります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:142
msgid "Installing via scoop will do this for you."
msgstr "scoop でインストールすれば自動的に設定されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:144
msgid "Install the `native-image` tool using `gu install`:"
msgstr "`gu install`  を使用して `native-image`  ツールをインストールします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:148
#, no-wrap
msgid "${GRAALVM_HOME}/bin/gu install native-image\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:151
msgid "Some previous releases of GraalVM included the `native-image` tool by default.  This is no longer the case; it must be installed as a second step after GraalVM itself is installed. Note: there is an outstanding issue xref:graal-and-catalina[using GraalVM with macOS Catalina]."
msgstr "GraalVMの以前のリリースでは、デフォルトで `native-image`  ツールが含まれていました。現在はそのようになっておらず、GraalVM自体をインストールした後の第二ステップとしてインストールする必要があります。注意: #graal-and-catalina[macOS CatalinaでGraalVMを使用する]際に、未解決の問題が発生しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:152
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr "(オプション) 環境変数 `JAVA_HOME`  を GraalVM のインストールディレクトリーに設定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:156
#, no-wrap
msgid "export JAVA_HOME=${GRAALVM_HOME}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:158
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr "(オプション) GraalVM `bin`  ディレクトリーをパスに追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:162
#, no-wrap
msgid "export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:165
#, no-wrap
msgid "Issues using GraalVM with macOS Catalina"
msgstr "macOS CatalinaでGraalVMを使用している場合の問題"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:169
msgid "GraalVM binaries are not (yet) notarized for macOS Catalina as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `gu`:"
msgstr "この https://github.com/oracle/graal/issues/1724[GraalVMの問題]で報告されているように、GraalVMバイナリーは(まだ)macOS Catalinaに対して認証されていません。これは、`gu` 使用時に次のエラーが表示される可能性があることを意味します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:173
#, no-wrap
msgid "“gu” cannot be opened because the developer cannot be verified\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:176
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr "回避策として、次のコマンドを使用して、GraalVMインストールディレクトリー上の `com.apple.quarantine` 拡張属性を再帰的に削除します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:180
#, no-wrap
msgid "xattr -r -d com.apple.quarantine ${GRAALVM_HOME}/../..\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:183
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:186
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr "次のセクションの手順に従って、アプリケーションを段階的にパッケージ化することをお勧めします。しかしながら、完成したサンプルに直接進むこともできます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:188
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:190
msgid "The solution is located in the `getting-started` directory."
msgstr "ソリューションは `getting-started` ディレクトリーに存在します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:191
#, no-wrap
msgid "Producing a native executable"
msgstr "ネイティブ実行可能ファイルの生成"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:194
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr "アプリケーションのネイティブ実行可能ファイルには、アプリケーション・コード、必要なライブラリ、Java API、および VM の縮小版が含まれます。VM ベースが小さくなることで、アプリケーションの起動時間が改善され、ディスクフットプリントが最小限に抑えられます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:196
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr "image:native-executable-process.png[ネイティブ実行可能ファイルの生成]"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:198
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:"
msgstr "前回のチュートリアルでアプリケーションを生成した場合は、 `pom.xml` に以下の _プロファイル_ があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:209
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:215
msgid "You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.  Multiple options may be separated by a comma."
msgstr "`<quarkus.native.additional-build-args>` プロパティーを使用して、 `native-image` コマンドにカスタムオプションを指定できます。複数のオプションはカンマで区切ることができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:217
msgid "Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`."
msgstr "もう一つの可能性は、 `application.properties` に `quarkus.native.additional-build-args` 設定プロパティーを含めることです。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:219
msgid "You can find more information about how to configure the native image building process in the <<configuration-reference>> section below."
msgstr "ネイティブイメージビルド処理の設定方法については、以下の <<設定リファレンス>> の項で詳しく説明しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:224
msgid "We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could just pass -Dquarkus.package.type=native as a property on the command line, however it is better to use a profile as this allows native image tests to also be run."
msgstr "プロファイルを使用しているのは、すぐにわかると思いますが、ネイティブ実行可能ファイルをパッケージ化するのに _数_ 分かかるからです。コマンドラインのプロパティーとして -Dquarkus.package.type=native を渡すだけでもいいのですが、プロファイルを使う方がいいでしょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:226
msgid "Create a native executable using: `./mvnw package -Pnative`."
msgstr "`./mvnw package -Pnative`  を使用してネイティブ実行可能ファイルを作成します。"

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:229
#, no-wrap
msgid "Issues with packaging on Windows"
msgstr "Windows でのパッケージ化に関する問題"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:234
msgid "The Microsoft Native Tools for Visual Studio must first be initialized before packaging. You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools. At `x64 Native Tools Command Prompt` you can navigate to your project folder and run `mvnw package -Pnative`."
msgstr "Visual Studio の Microsoft Native Tools はパッケージングを行う前に、初期化する必要があります。これは、Visual Studio ビルドツールと一緒にインストールされた `x64 Native Tools Command Prompt`  を起動することで行うことができます。 `x64 Native Tools Command Prompt` で、プロジェクト・フォルダーに移動して `mvnw package -Pnative` を実行してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:236
msgid "Another solution is to write a script to do this for you:"
msgstr "もう一つのソリューションは、これを行うためのスクリプトを書くことです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:240
#, no-wrap
msgid "cmd /c 'call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\" && mvn package -Pnative'\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:245
msgid "In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.  You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr "通常のファイルに加えて、このビルドでは `target/getting-started-1.0-SNAPSHOT-runner` を生成します。これを実行するには、次のようにします: `./target/getting-started-1.0-SNAPSHOT-runner` ."

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:246
#, no-wrap
msgid "Testing the native executable"
msgstr "ネイティブ実行可能ファイルのテスト"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:249
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file."
msgstr "ネイティブ実行可能ファイルを生成することはいくつかの問題を引き起こす可能性があるので、ネイティブファイルで実行されているアプリケーションに対していくつかのテストを実行するのも良いアイデアです。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:251
msgid "In the `pom.xml` file, the `native` profile contains:"
msgstr "`pom.xml`  ファイルには、 `native`  プロファイルが含まれています。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:274
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:277
msgid "This instructs the failsafe-maven-plugin to run integration-test and indicates the location of the produced native executable."
msgstr "これは、failsaf-maven-plugin が integration-test を実行するように指示し、生成されたネイティブ実行可能ファイルの場所を示します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:279
msgid "Then, open the `src/test/java/org/acme/quickstart/NativeGreetingResourceIT.java`. It contains:"
msgstr "次に、 `src/test/java/org/acme/quickstart/NativeGreetingResourceIT.java`  を開きます。次の内容が含まれています:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:283
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:286
#, no-wrap
msgid "import io.quarkus.test.junit.NativeImageTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:289
#, no-wrap
msgid ""
"@NativeImageTest // <1>\n"
"public class NativeGreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:291
#, no-wrap
msgid "    // Run the same tests\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:293
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:296
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved using the `native.image.path` system property configured in the _Failsafe Maven Plugin_."
msgstr "テストの前にネイティブ ファイルからアプリケーションを起動する別のテスト ランナーを使用します。実行可能ファイルは、 _Failsafe Maven プラグイン_ で構成された `native.image.path`  システム プロパティーを使用して取得されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:297
msgid "We extend our previous tests, but you can also implement your tests"
msgstr "既存のテストを extend していますが、自分でテストを実装することもできます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:299
msgid "To see the `NativeGreetingResourceIT` run against the native executable, use `./mvnw verify -Pnative`:"
msgstr "`NativeGreetingResourceIT`  がネイティブ実行可能ファイルに対して実行されているのを見るには、 `./mvnw verify -Pnative` を使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:323
#, no-wrap
msgid ""
"$ ./mvnw verify -Pnative\n"
"...\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     universe:     587.26 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      (parse):   2,247.59 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]     (inline):   1,985.70 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]    (compile):  14,922.77 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      compile:  20,361.28 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        image:   2,228.30 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]        write:     364.35 ms\n"
"[getting-started-1.0.0-SNAPSHOT-runner:18820]      [total]:  52,777.76 ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:2.22.1:integration-test (default) @ getting-started ---\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quickstart.NativeGreetingResourceIT\n"
"Executing [/data/home/gsmet/git/quarkus-quickstarts/getting-started/target/getting-started-1.0.0-SNAPSHOT-runner, -Dquarkus.http.port=8081, -Dtest.url=http://localhost:8081, -Dquarkus.log.file.path=build/quarkus.log]\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT started in 0.002s. Listening on: http://[::]:8081\n"
"2019-04-15 11:33:20,348 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.387 s - in org.acme.quickstart.NativeGreetingResourceIT\n"
"...\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:330
msgid "By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration to 300 seconds, use: `./mvnw verify -Pnative -Dquarkus.test.wait-time=300`."
msgstr "デフォルトでは、Quarkusはネイティブテストを開始し、自動的に失敗するまでに60秒待機します。この時間は、`quarkus.test.wait-time` システムプロパティーを使用して変更できます。たとえば、待機時間を300秒に増やすには、`./mvnw verify -Pnative -Dquarkus.test.wait-time=300` となります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:344
msgid "By default, native tests runs using the `prod` profile.  This can be overridden using the `quarkus.test.native-image-profile` property.  For example, in your `application.properties` file, add: `quarkus.test.native-image-profile=test`.  Alternatively, you can run your tests with: `./mvnw verify -Pnative -Dquarkus.test.native-image-profile=test`.  However, don't forget that when the native executable is built the `prod` profile is enabled.  So, the profile you enable this way must be compatible with the produced executable."
msgstr "デフォルトでは、ネイティブテストは `prod`  プロファイルを使用して実行されます。これは `quarkus.test.native-image-profile`  プロパティーを使用して上書きすることができます。たとえば、 `application.properties`  ファイルに `quarkus.test.native-image-profile=test`  を追加します。あるいは、次のようにしてテストを実行することもできます: `./mvnw verify -Pnative -Dquarkus.test.native-image-profile=test` .ただし、ネイティブ実行可能ファイルがビルドされたときに `prod`  プロファイルが有効になっていることを忘れないでください。したがって、この方法で有効にしたプロファイルは、生成された実行可能ファイルと互換性がなければなりません。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:345
#, no-wrap
msgid "Excluding tests when running as a native executable"
msgstr "ネイティブ実行可能ファイルとして実行している場合のテストの除外"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:350
msgid "When running tests this way, the only things that actually run natively are you application endpoints, which you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr "この方法でテストを実行する場合、実際にネイティブで実行されるのはアプリケーションのエンドポイントのみで、HTTP 呼び出しでしかテストできません。テストコードは実際にはネイティブには実行されないので、HTTP エンドポイントを呼び出さないコードをテストしている場合は、ネイティブテストの一部として実行するのは良い考えではないでしょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:353
msgid "If you share your test class between JVM and native executions like we advise above, you can mark certain tests with the `@DisabledOnNativeImage` annotation in order to only run them on the JVM."
msgstr "上記のようにJVMとネイティブ実行でテストクラスを共有している場合、特定のテストをJVM上でのみ実行するために、 `@DisabledOnNativeImage`  アノテーションを付けておくことができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:355
#, no-wrap
msgid "Testing an existing native executable"
msgstr "既存のネイティブ実行可能ファイルのテスト"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:360
msgid "It is also possible to re-run the tests against a native executable that has already been built. To do this run `./mvnw test-compile failsafe:integration-test`. This will discover the existing native image and run the tests against it using failsafe."
msgstr "すでにビルドされているネイティブ実行可能ファイルに対してテストを再実行することも可能です。これを行うには `./mvnw test-compile failsafe:integration-test`  を実行してください。これにより、既存のネイティブイメージが検出され、フェイルセーフを使用してそれに対してテストが実行されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:363
msgid "If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr "何らかの理由でプロセスがネイティブイメージを見つけられない場合や、ターゲットディレクトリーにないネイティブイメージをテストしたい場合は、 `-Dnative.image.path=`  システムプロパティーで実行可能ファイルを指定することができます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:365
#, no-wrap
msgid "Creating a Linux executable without GraalVM installed"
msgstr "GraalVM をインストールせずに Linux 実行可能ファイルを作成する方法"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:369
msgid "Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr "先に進む前に、コンテナーランタイム(Docker、podman)の動作環境が整っていることを確認しておきましょう。WindowsでDockerを使用している場合は、Docker Desktopのファイル共有設定でプロジェクトのドライブを共有し、Docker Desktopを再起動する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:373
msgid "Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice to install as little software as possible)."
msgstr "多くの場合、Quarkusアプリケーション用のネイティブLinux実行可能ファイルを作成する必要があります(例えば、コンテナー化された環境で実行するためなど)、このタスクを達成するために適切なGraalVMバージョンをインストールする手間を省きたいと考えています(例えば、CI環境では、できるだけ少ないソフトウェアをインストールするのが一般的です)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:376
msgid "To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.  The easiest way of accomplishing this task is to execute:"
msgstr "このため、Quarkusでは、Dockerやpodmanなどのコンテナーランタイムを利用して、ネイティブのLinux実行可能ファイルを作成する非常に便利な方法を提供しています。このタスクを達成する最も簡単な方法は、次を実行することです:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:380
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:386
msgid "By default Quarkus automatically detects the container runtime.  If you want to explicitely select the container runtime, you can do it with:"
msgstr "デフォルトでは、Quarkusはコンテナーランタイムを自動的に検出します。コンテナーランタイムを明示的に選択したい場合は、次のようにします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:392
#, no-wrap
msgid ""
"# Docker\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=docker\n"
"# Podman\n"
"./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=podman\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:396
msgid "These are normal Quarkus config properties, so if you always want to build in a container it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr "これらは通常のQuarkusの設定プロパティーなので、常にコンテナーでビルドしたい場合は、毎回指定しなくて済むように、 `application.properties`  に追加することをお勧めします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:401
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr "JARが正常にビルドされているにもかかわらず、コンテナビルドでネイティブ実行可能ファイルを作成しようとすると、アプリケーションJARに対して以下のようなinvalid pathエラーが表示される場合は、コンテナランタイムにリモートデーモンを使用している可能性があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:404
#, no-wrap
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:406
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr "この場合、パラメータ `-Dquarkus.native.container-build=true` の代わりに `-Dquarkus.native.remote-container-build=true` を使用してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:408
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr "その理由は、 `-Dquarkus.native.container-build=true` を通して起動されるローカルビルドドライバは、ビルドコンテナで JAR を利用できるようにするためにボリュームマウントを使用しますが、ボリュームマウントはリモートデーモンでは機能しません。リモートコンテナのビルドドライバは、必要なファイルをマウントするのではなく、コピーします。リモートドライバはローカルデーモンでも動作しますが、ローカルの場合はローカルドライバを使用した方が良いことに注意してください。なぜなら、マウントの方がコピーよりもパフォーマンスが高いからです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:413
msgid "Building with Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr "Mandrel を使用してビルドするには、カスタムビルダーイメージパラメーターを追加で渡す必要があります:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:416
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:{mandrel-flavor}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:424
msgid "Please note that the above command points to a floating tag.  It is highly recommended to use the floating tag, so that your builder image remains up-to-date and secure.  If you absolutely must, you may hard-code to a specific tag (see https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[here] for available tags), but be aware that you won't get security updates that way and it's unsupported."
msgstr "上記のコマンドはフローティングタグを指していることに注意してください。ビルダーイメージを最新かつ安全に保つために、フローティングタグを使用することを強く推奨します。どうしても必要な場合は、特定のタグをハードコーディングしても構いませんが(利用可能なタグについては https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[こちら]を参照してください)、その方法ではセキュリティーアップデートが受けられず、サポートされていないことに注意してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:426
#, no-wrap
msgid "Creating a container"
msgstr "コンテナーの作成"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:428
#, no-wrap
msgid "Using the container-image extensions"
msgstr "コンテナーイメージのエクステンションの使用"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:431
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr "Quarkusアプリケーションからコンテナーイメージを作成する最も簡単な方法は、コンテナーイメージ エクステンションの1つを利用することです。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:433
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr "これらのエクステンションのいずれかが存在する場合、ネイティブ実行可能ファイル用のコンテナーイメージを作成することは、基本的には単一のコマンドを実行することになります:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:437
#, no-wrap
msgid "./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:440
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr "`quarkus.native.container-build=true`  では GraalVM がインストールされていなくても Linux の実行可能ファイルを作成することができます(ローカルに GraalVM がインストールされていない場合や、ローカルのオペレーティングシステムが Linux ではない場合にのみ必要です)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:441
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr "`quarkus.container-image.build=true`  最終的なアプリケーションアーティファクト(この場合はネイティブ実行可能ファイル)を使用してコンテナーイメージを作成するようにQuarkusに指示します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:443
msgid "See the link:container-image[Container Image guide] for more details."
msgstr "詳細については、 link:container-image[コンテナーイメージガイド] を参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:444
#, no-wrap
msgid "Manually"
msgstr "手動"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:448
msgid "You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.  However, in this section we focus on creating a container image using the produced native executable."
msgstr "Quarkus Mavenプラグインで生成されたJARを使用して、コンテナー内でアプリケーションを実行することができます。ただし、このセクションでは、生成されたネイティブ実行可能ファイルを使用してコンテナーイメージを作成することに焦点を当てます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:450
msgid "image:containerization-process.png[Containerization Process]"
msgstr "image:containerization-process.png[alt=\"Containerization Process\"]"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:454
msgid "When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).  However, as a container may not use the same _executable_ format as the one produced by your operating system, we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in <<#container-runtime,this section>>):"
msgstr "ローカルのGraalVMインストール環境を使用する場合、ネイティブ実行可能ファイルは、ローカルのオペレーティングシステム(Linux、macOS、Windowsなど)をターゲットにしています。しかし、コンテナーはオペレーティングシステムによって生成されたものと同じ _実行_ 形式を使用しない場合があるため、コンテナーランタイムを活用して実行形式を生成するようにMavenビルドに指示します(この <<#container-runtime, セクション>> で説明されているように)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:458
msgid "The produced executable will be a 64 bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a container.  The project generation has provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr "生成される実行可能ファイルは64ビットのLinux実行可能ファイルになりますので、お使いのOSによっては実行できなくなる可能性があります。しかし、コンテナーにコピーするので問題ありません。プロジェクト生成では、 `src/main/docker`  ディレクトリーに `Dockerfile.native`  を用意し、以下のような内容にしています。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:467
#, no-wrap
msgid ""
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY target/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.2/guides/building-native-image.adoc:470
#, no-wrap
msgid "Ubi?"
msgstr "Ubi?"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:475
msgid "The provided `Dockerfiles` use https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI] (Universal Base Image) as parent image.  This base image has been tailored to work perfectly in containers.  The `Dockerfiles` use the https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[_minimal_ version] of the base image to reduce the size of the produced image."
msgstr "提供されている `Dockerfiles`  は親イメージとして https://access.redhat.com/containers/?tab=overview#/registry.access.redhat.com/ubi8/ubi[UBI](Universal Base Image) を使用しています。このベースイメージはコンテナー内で完全に動作するように調整されています。 `Dockerfiles`  では、生成されるイメージのサイズを小さくするためにベースイメージの https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/ubi-minimal[_最小_バージョン]を使用しています。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:477
msgid "You can read more about UBI on:"
msgstr "UBIについての詳細はこちらをご覧ください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:484
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr "あとは、生成されたネイティブ実行可能ファイルを削除していなければ、dockerイメージを使ってビルドします:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:488
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.native -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:491
msgid "And finally, run it with:"
msgstr "そして最後に、以下を実行します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:495
#: upstream/_versions/2.2/guides/building-native-image.adoc:590
#, no-wrap
msgid "docker run -i --rm -p 8080:8080 quarkus-quickstart/getting-started\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:498
#, no-wrap
msgid "Using a multi-stage Docker build"
msgstr "マルチステージDockerビルドの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:502
msgid "The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.  In addition, this native executable must be a Linux 64 bits executable."
msgstr "前のセクションでは、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドする方法を示しましたが、その場合は最初にネイティブ実行可能ファイルを作成しておく必要があります。さらに、このネイティブ実行可能ファイルは  Linux64 ビットの実行可能ファイルである必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:505
msgid "You may want to build the native executable directly in a container without having a final container containing the build tools.  That approach is possible with a multi-stage Docker build:"
msgstr "ビルドツールを含む最終的なコンテナを用意せずに、ネイティブ実行可能ファイルをコンテナに直接ビルドする必要がある場合もあるはずです。このアプローチは、マルチステージの Docker ビルドで使用可能です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:507
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr "最初の段階では、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドします"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:508
msgid "The second stage is a minimal image copying the produced native executable"
msgstr "第 2 段階は、生成されたネイティブ実行可能ファイルをコピーする最小限のイメージです"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:510
msgid "Such a multi-stage build can be achieved as follows:"
msgstr "このような多段階を用いたビルドは、次のように実現できます:"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:512
msgid "Sample Dockerfile for building with Maven:"
msgstr "MavenでビルドするためのサンプルDockerfileです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:524
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} AS build\n"
"COPY pom.xml /code/\n"
"COPY mvnw /code/mvnw\n"
"COPY .mvn /code/.mvn\n"
"USER quarkus\n"
"WORKDIR /code\n"
"RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline\n"
"COPY src /code/src\n"
"RUN ./mvnw package -Pnative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:529
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4\n"
"WORKDIR /work/\n"
"COPY --from=build /code/target/*-runner /work/application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:535
#, no-wrap
msgid ""
"# set up permissions for user `1001`\n"
"RUN chmod 775 /work /work/application \\\n"
"  && chown -R 1001 /work \\\n"
"  && chmod -R \"g+rwX\" /work \\\n"
"  && chown -R 1001:root /work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:538
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER 1001\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:540
#: upstream/_versions/2.2/guides/building-native-image.adoc:619
#, no-wrap
msgid "CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:548
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr "このファイルは、Getting started quickstartには含まれていないので、 `src/main/docker/Dockerfile.multistage`  に保存してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:550
msgid "Sample Dockerfile for building with Gradle:"
msgstr "GradleでビルドするためのサンプルDockerfileです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:563
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} AS build\n"
"COPY gradlew /code/gradlew\n"
"COPY gradle /code/gradle\n"
"COPY build.gradle /code/\n"
"COPY settings.gradle /code/\n"
"COPY gradle.properties /code/\n"
"USER quarkus\n"
"WORKDIR /code\n"
"COPY src /code/src\n"
"RUN gradle -b /code/build.gradle buildNative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:571
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM registry.access.redhat.com/ubi8/ubi-minimal\n"
"WORKDIR /work/\n"
"COPY --from=build /code/build/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:574
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr "プロジェクトでGradleを使用している場合は、このサンプルDockerfileを使用することができます。 `src/main/docker/Dockerfile.multistage`  に保存してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:578
msgid "Before launching our Docker build, we need to update the default `.dockerignore` file as it filters everything except the `target` directory. As we plan to build inside a container, we need to copy the `src` directory. Thus, edit your `.dockerignore` and update the content."
msgstr "Dockerビルドを起動する前に、デフォルトの `.dockerignore` ファイルを更新する必要があります。これは、`target` ディレクトリ以のすべてがフィルタリングされるためです。コンテナ内にビルドする予定であるため、`src` ディレクトリをコピーする必要があります。そのために、`.dockerignore` を編集し、その内容を更新します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:583
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.multistage -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:586
msgid "And, finally, run it with:"
msgstr "最後に、以下を実行します:"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:595
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr "ネイティブ実行可能ファイルにSSLサポートが必要な場合は、Dockerイメージに必要なライブラリを簡単に含めることができます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:597
msgid "Please see link:native-and-ssl#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr "詳しくは native-and-ssl#working-with-containers[ネイティブ実行可能ファイルでのSSL利用ガイド] をご覧ください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:601
msgid "To use Mandrel instead of GraalVM CE, update the `FROM` clause to: `FROM quay.io/quarkus/ubi-quarkus-mandrel:$TAG AS build`.  `$TAG` can be found on the https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[Quarkus Mandrel Images Tags page]."
msgstr "GraalVM CE の代わりに Mandrel を使用するには、`FROM` 句を `FROM quay.io/quarkus/ubi-quarkus-mandrel:$TAG AS build` に更新します。`$TAG` は、 https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[Quarkus Mandrel イメージタグのページ] にあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:606
msgid "If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.  The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr "小さなコンテナイメージを探している場合は、 https://github.com/GoogleContainerTools/distroless[distroless] アプローチでベースレイヤーのサイズが縮小されます。 _distroless_ の背後には、すべての要件 (場合によってはアプリケーション自体) を含む単一の最小限のベースイメージを使用するという考え方があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:609
msgid "Quarkus provides a distroless base image that you can use in your `Dockerfile`.  You only need to copy your application, and you are done:"
msgstr "Quarkus は、`Dockerfile` で使用できる distroless ベースイメージを提供します。ユーザーは、アプリケーションをコピーするだけです:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:614
#, no-wrap
msgid ""
"FROM quay.io/quarkus/quarkus-distroless-image:1.0\n"
"COPY target/*-runner /application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:617
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER nonroot\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:626
msgid "Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:1.0` image.  It contains the required packages to run a native executable and is only **9Mb**.  Just add your application on top of this image, and you will get a tiny container image."
msgstr "Quarkus は、`quay.io/quarkus/quarkus-distroless-image:1.0` イメージを提供します。ネイティブ実行可能ファイルを実行するために必要なパッケージが含まれており、サイズはほんの **9Mb** です。このイメージの上にアプリケーションを追加するだけで、小さなコンテナイメージを得ることができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/building-native-image.adoc:627
#, no-wrap
msgid "Separating Java and native image compilation"
msgstr "Java とネイティブイメージのコンパイルの分離"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:637
#, no-wrap
msgid "$ ./mvnw clean package -Dquarkus.package.type=native-sources\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:640
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr "コンパイルが完了すると、ビルドアーティファクトが `target/native-sources` に表示されます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:646
#, no-wrap
msgid ""
"$ cd target/native-sources\n"
"$ ls\n"
"native-image.args  getting-started-1.0.0-SNAPSHOT-runner.jar lib\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:651
msgid "From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.  This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.  If you have GraalVM installed, you can start the native compilation by executing:"
msgstr "上記の出力から、生成された jar ファイルと関連する lib ディレクトリに加えて、`native-image.args` という名前のテキストファイルが作成されたことがわかります。このファイルは、GraalVM の `native-image` コマンドに渡すすべてのパラメーター (コンパイルする JAR の名前を含む) を保持します。GraalVM がインストールされている場合は、以下を実行してネイティブコンパイルを開始できます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:662
#, no-wrap
msgid ""
"$ cd target/native-source\n"
"$ native-image $(cat native-image.args)\n"
"...\n"
"$ ls\n"
"native-image.args\n"
"getting-started-1.0.0-SNAPSHOT-runner\n"
"getting-started-1.0.0-SNAPSHOT-runner.build_artifacts.txt\n"
"getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:665
msgid "The process for Gradle is analogous."
msgstr "Gradle のプロセスも同様です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:667
msgid "Running the build process in a container is also possible:"
msgstr "コンテナでビルドプロセスを実行することも可能です:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:679
#, no-wrap
msgid ""
"cd target/native-image\n"
"docker run \\\n"
"  -it \\\n"
"  --rm \\\n"
"  --v $(pwd):/work <1>\n"
"  -w /work <2>\n"
"  --entrypoint bin/sh \\\n"
"  quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor} \\ <3>\n"
"  -c \"native-image $(cat native-image.args) -J-Xmx4g\" <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:682
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr "ホストのディレクトリ `target/native-image` をコンテナの `/work` にマウントします。したがって、生成されたバイナリーもこのディレクトリに書き込まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:683
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr "作業ディレクトリを、<1> でマウントした `/work` に切り替えます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:684
msgid "Use the `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` docker image introduced in <<#multistage-docker,Using a multi-stage Docker build>> to build the native image."
msgstr "<<#multistage-docker,マルチステージDockerビルドの使用>> で導入された `quay.io/quarkus/ubi-quarkus-native-image:{graalvm-flavor}` docker イメージを使用して、ネイティブイメージをビルドします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:685
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr "ファイル `native-image.args` の内容を引数として `native-image` を呼び出します。また、プロセスの最大メモリーを 4 ギガバイトに制限するための追加の引数も提供します (これは、ビルドするプロジェクトとそれをビルドしているマシンにより異なります)。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:690
msgid "If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.  Hence, the binary will not be executable on the host Windows machine."
msgstr "Windows マシンで実行している場合は、バイナリーが Linux docker コンテナ内で作成されていることに注意してください。つまり、バイナリーはホスト Windows マシンでは実行できません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:693
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr "CI/CD パイプラインのさまざまなステップがどのように見えるかについて、以下に概要を示しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:695
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr "`./mvnw ...` コマンドを実行するステップの出力 (つまり、ディレクトリ `target/native-image`) をビルドアーティファクトとして登録します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:696
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr "`native-image ...` コマンドを実行するステップでこのアーティファクトを要求し、"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:697
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr "`native-image ...` コマンドを実行するステップの出力 (つまり、`target/*runner` に一致するファイル) をビルドアーティファクトとして登録します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:699
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr "ステップ `1` を実行する環境には、Java と Maven (または Gradle) のみインストールされている必要がありますが、ステップ `3` を実行する環境には GraalVM のインストール (`native-image` 機能を含む) のみが必要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:701
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr "CI/CD パイプラインの最終的な出力に応じて、生成されたバイナリーがコンテナイメージの作成に使用されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:708
msgid "Starting with Oracle GraalVM 20.2 or Mandrel 20.1, debug symbols for native executables can be generated for Linux environments (Windows support is still under development).  These symbols can be used to debug native executables with tools such as `gdb`."
msgstr "Oracle GraalVM 20.2またはMandrel 20.1から、Linux環境用にネイティブ実行可能ファイルのデバッグシンボルを生成できるようになりました(Windowsのサポートはまだ開発中です)。これらのシンボルは、 `gdb`  のようなツールを使用してネイティブ実行可能ファイルをデバッグするために使用できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:712
msgid "To generate debug symbols, add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.  You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr "デバッグシンボルを生成するには、ネイティブ実行可能ファイルの生成時に `-Dquarkus.native.debug.enabled=true`  フラグを追加してください。ネイティブ実行可能ファイルのデバッグシンボルは、ネイティブ実行可能ファイルの隣にある `.debug`  ファイルにあります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:717
msgid "The generation of the `.debug` file depends on `objcopy`.  On common Linux distributions and macOS you will need to install the `binutils` package:"
msgstr "`.debug`  ファイルの生成は `objcopy`  に依存します。一般的な Linux ディストリビューションや macOS では、 `binutils`  パッケージをインストールする必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:727
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install binutils\n"
"# Debian-based distributions\n"
"sudo apt-get install binutils\n"
"# macOS\n"
"brew install binutils\n"
"export PATH=/usr/local/opt/binutils/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:730
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr "`objcopy`  が利用できない場合、デバッグシンボルが実行可能ファイルに埋め込まれています。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:738
msgid "Aside from debug symbols, setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.  This source cache is useful for native debugging tools, to establish the link between the symbols and matching source code.  It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr "デバッグシンボルとは別に、 `-Dquarkus.native.debug.enabled=true`  フラグを設定すると、ネイティブ実行可能ファイル生成時に解決された JDK ランタイムクラス、GraalVM クラス、アプリケーションクラスのソースファイルのキャッシュが生成されます。このソースキャッシュは、シンボルと一致するソースコード間のリンクを確立するために、ネイティブデバッグツールにとって有用です。ネイティブ実行可能ファイルをデバッグする際に、必要なソースだけをデバッガー/IDEが利用できるようにする便利な方法を提供します。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:744
msgid "Sources for third party jar dependencies, including Quarkus source code, are not added to the source cache by default.  To include those, make sure you invoke `mvn dependency:sources` first.  This step is required in order to pull the sources for these dependencies, and get them included in the source cache."
msgstr "Quarkusのソースコードを含むサードパーティのjar依存関係のソースは、デフォルトではソースキャッシュに追加されません。これらを含めるには、まず `mvn dependency:sources`  を起動してください。このステップは、これらの依存関係のソースを引き出し、ソースキャッシュに含めるために必要です。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:746
msgid "The source cache is located in the `target/sources` folder."
msgstr "ソースキャッシュは `target/sources`  フォルダーにあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:750
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr "`gdb`  を `target`  とは異なるディレクトリーから実行している場合、ソースは以下を"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:754
#, no-wrap
msgid "directory path/to/target\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:757
msgid "in the `gdb` prompt."
msgstr " `gdb`  プロンプトで実行することで読み込まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:759
msgid "Or start `gdb` with:"
msgstr "または、 `gdb`  を以下のように起動してください:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:763
#, no-wrap
msgid "gdb -ex 'directory path/to/target' path/to/target/{project.name}-{project.version}-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/building-native-image.adoc:766
msgid "e.g.,"
msgstr "例えば、"

#. type: delimited block -
#: upstream/_versions/2.2/guides/building-native-image.adoc:769
#, no-wrap
msgid "gdb -ex 'directory ./target' ./target/getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:773
#, no-wrap
msgid "Configuring the Native Executable"
msgstr "ネイティブ実行可能ファイルの設定"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:777
msgid "There are a lot of different configuration options that can affect how the native executable is generated.  These are provided in `application.properties` the same as any other config property."
msgstr "ネイティブ実行可能ファイルの生成方法に影響を与える設定オプションがたくさんあります。これらは他の設定プロパティーと同じように `application.properties`  で提供されています。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:779
msgid "The properties are shown below:"
msgstr "プロパティーは以下の通りです:"

#. type: Title ==
#: upstream/_versions/2.2/guides/building-native-image.adoc:782
#, no-wrap
msgid "What's next?"
msgstr "次のステップ"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:787
msgid "This guide covered the creation of a native (binary) executable for your application.  It provides an application exhibiting a swift startup time and consuming less memory.  However, there is much more."
msgstr "このガイドでは、アプリケーション用のネイティブ(バイナリー)実行可能ファイルの作成について説明しました。これにより、迅速な起動時間と少ないメモリー消費を示すアプリケーションを提供します。しかし、それだけではありません。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/building-native-image.adoc:788
msgid "We recommend continuing the journey with the link:deploying-to-kubernetes[deployment to Kubernetes and OpenShift]."
msgstr "link:deploying-to-kubernetes[KubernetesとOpenShiftへのデプロイ]で探検を続けることをお勧めします。"
