msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:6
#, no-wrap
msgid "Deploying to Heroku"
msgstr "Herokuへのデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:10
msgid "In this guide you will learn how to deploy a Quarkus based web application as a web-dyno to Heroku."
msgstr "このガイドでは、QuarkusベースのWebアプリケーションをweb-dynoとしてHerokuにデプロイする方法を説明します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:12
msgid "This guide covers:"
msgstr "このガイドでは以下をカバーしています:"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:14
msgid "Update Quarkus HTTP Port"
msgstr "Quarkus HTTPポートの更新"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:15
msgid "Install the Heroku CLI"
msgstr "Heroku CLIのインストール"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:16
msgid "Deploy the application to Heroku"
msgstr "アプリケーションのHerokuへのデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:17
msgid "Deploy the application as Docker image to Heroku"
msgstr "アプリケーションをDockerイメージとしてHerokuにデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:18
msgid "Deploy the native application as Docker image to Heroku"
msgstr "ネイティブアプリケーションをDockerイメージとしてHerokuにデプロイ"

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:22
msgid "For this guide you need:"
msgstr "このガイドには以下が必要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:24
msgid "Roughly 1 hour for all modalities"
msgstr "すべての手順を試すのに約1時間"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:26
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:27
msgid "https://www.heroku.com/[A Heroku Account]. Free accounts work."
msgstr "link:https://www.heroku.com/[Herokuのアカウント]。無料のアカウントが使えます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:28
msgid "https://devcenter.heroku.com/articles/heroku-cli[Heroku CLI installed]"
msgstr "link:https://devcenter.heroku.com/articles/heroku-cli[Heroku CLIのインストール]"

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:29
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:34
msgid "Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.  It supports several languages like Java, Ruby, Node.js, Scala, Clojure, Python, PHP, and Go.  In addition it offers a container registry that can be used to deploy prebuilt container images."
msgstr "Herokuは、開発者がアプリケーションの構築、実行、運用をすべてクラウド上で行うことができるPaaS（Platform as a Service）です。Herokuは、Java、Ruby、Node.js、Scala、Clojure、Python、PHP、Goなどの言語をサポートしています。さらに、あらかじめ構築されたコンテナイメージを展開するためのコンテナレジストリも提供しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:36
msgid "Heroku can be used in different ways to run a Quarkus application:"
msgstr "Herokuは、Quarkusのアプリケーションを実行するためにさまざまな方法で使用できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:38
msgid "As a plain Java program running in a container defined by Heroku's environment"
msgstr "Herokuの環境で定義されたコンテナ内で動作するプレーンなJavaプログラムとして"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:39
msgid "As a containerized Java program running in a container defined by the Quarkus build process"
msgstr "Quarkusのビルドプロセスで定義されたコンテナ内で実行されるコンテナ化されたJavaプログラムとして"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:40
msgid "As a containerized native program running in a container defined by the Quarkus build process"
msgstr "Quarkusのビルドプロセスで定義されたコンテナ内で実行されるコンテナ化されたネイティブプログラムとして"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:43
msgid "All three approaches need to be aware of the port that Heroku assigns to it to handle traffic.  Luckily, there's a dynamic configuration property for it."
msgstr "この3つのアプローチはいずれも、トラフィックを処理するためにHerokuが割り当てるポートを意識する必要があります。幸運なことに、そのための動的な設定プロパティがあります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:45
msgid "The guide assumes that you have the https://devcenter.heroku.com/articles/heroku-cli[Heroku CLI] installed."
msgstr "このガイドでは、 link:https://devcenter.heroku.com/articles/heroku-cli[Heroku CLI]がインストールされていることを前提としています。"

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:46
#, no-wrap
msgid "Common project setup"
msgstr "プロジェクトの共通設定"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:49
msgid "This guide will take as input an application developed in the link:getting-started[Getting Started guide]."
msgstr "このガイドでは、 link:getting-started[入門ガイド] で開発されたアプリケーションを入力として使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:52
msgid "Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory."
msgstr "手元に get-started アプリケーションがあることを確認するか、Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、もしくは {quickstarts-archive-url}[archive] をダウンロードしてください。ソリューションは `getting-started` ディレクトリーにあります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:64
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=code-with-quarkus-on-heroku \\\n"
"    -DclassName=\"org.acme.getting.started.GreetingResource\" \\\n"
"    -Dpath=\"/hello\"\n"
"cd code-with-quarkus-on-heroku\n"
"git init && git add . && git commit -am \"Create initial project.\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:68
msgid "Heroku can react on changes in your repository, run CI and redeploy your application when your code changes.  Therefore we start with a valid repository already."
msgstr "Herokuは、リポジトリの変更に反応し、CIを実行し、コードが変更されたときにアプリケーションを再デプロイすることができます。したがって、私たちはすでに有効なリポジトリから始めます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:70
msgid "Also, make sure your Heroku CLI is working:"
msgstr "また、Heroku CLIが動作していることを確認してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:75
#, no-wrap
msgid ""
"heroku --version\n"
"heroku login\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:77
#, no-wrap
msgid "Prepare the Quarkus HTTP Port"
msgstr "QuarkusのHTTPポートの準備"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:82
msgid "Heroku picks a random port and assigns it to the container that is eventually running your Quarkus application.  That port is available as an environment variable under `$PORT`.  The easiest way to make Quarkus in all deployment scenarios aware of it is using the following configuration:"
msgstr "Herokuはランダムにポートを選択し、最終的にQuarkusアプリケーションを実行するコンテナに割り当てます。このポートは、 `$PORT` の環境変数として利用できます。すべての導入シナリオでQuarkusにそれを認識させる最も簡単な方法は、以下の設定を使用することです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:86
#, no-wrap
msgid "quarkus.http.port=${PORT:8080}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:90
msgid "This reads as: \"Listen on `$PORT` if this is a defined variable, otherwise listen on 8080 as usual.\" Run the following to add this to your `application.properties`:"
msgstr "これは次のように読み取れます。\"定義済の変数の場合、 `$PORT` をリッスンする。そうでなければ、通常通り8080でリッスンする\" です。以下を実行して、これを `application.properties` に追加してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:95
#, no-wrap
msgid ""
"echo \"quarkus.http.port=\\${PORT:8080}\" >> src/main/resources/application.properties\n"
"git commit -am \"Configure the HTTP Port.\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:97
#, no-wrap
msgid "Deploy the repository and build on Heroku"
msgstr "リポジトリのデプロイとHerokuでのビルド"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:101
msgid "The first variant uses the Quarkus Maven build to create the _quarkus-app_ application structure containing the runnable \"fast-jar\" as well as all libraries needed inside Heroku's build infrastructure and then deploying that result, the other one uses a local build process to create an optimized container."
msgstr "1つ目は、QuarkusのMavenビルドを使用して、実行可能な \"fast-jar \"とHerokuのビルドインフラに必要なすべてのライブラリを含む _quarkus-app_アプリケーション構造を作成し、その結果をデプロイするもので、もう1つはローカルビルドプロセスを使用して最適化されたコンテナを作成するものです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:103
msgid "Two additional files are needed in your application's root directory:"
msgstr "アプリケーションのルートディレクトリには、2つの追加ファイルが必要です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:105
msgid "`system.properties` to configure the Java version"
msgstr "Javaのバージョンを設定する為に `system.properties`"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:106
msgid "`Procfile` to configure how Heroku starts your application"
msgstr "Herokuがアプリケーションを開始する方法を設定するために `Procfile`"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:108
msgid "Quarkus needs JDK 11, so we specify that first:"
msgstr "QuarkusはJDK 11を必要とするので、まずそれを指定します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:114
#, no-wrap
msgid ""
"echo \"java.runtime.version=11\" >> system.properties\n"
"git add system.properties\n"
"git commit -am \"Configure the Java version for Heroku.\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:117
msgid "We will deploy a web application so we need to configure the type `web` in the Heroku `Procfile` like this:"
msgstr "今回はWebアプリケーションをデプロイするので、Heroku `Procfile` でタイプ `web` を以下のように設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:123
#, no-wrap
msgid ""
"echo \"web: java \\$JAVA_OPTS -jar target/quarkus-app/quarkus-run.jar\" >> Procfile\n"
"git add Procfile\n"
"git commit -am \"Add a Procfile.\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:126
msgid "Your application should already be runnable via `heroku local web`."
msgstr "あなたのアプリケーションは、すでに `heroku local web` を通して実行可能になっているはずです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:128
msgid "Let's create an application in your account and deploy that repository to it:"
msgstr "自分のアカウントでアプリケーションを作成し、そこにそのリポジトリをデプロイしてみましょう。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:134
#, no-wrap
msgid ""
"heroku create\n"
"git push heroku master\n"
"heroku open\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:137
msgid "The application will have a generated name and the terminal should output that. `heroku open` opens your default browser to access your new application."
msgstr "アプリケーションには生成された名前があり、ターミナルにはその名前が出力されるはずです。 `heroku open` は、新しいアプリケーションにアクセスするためにデフォルトのブラウザで開きます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:139
msgid "To access the REST endpoint via curl, run:"
msgstr "curlでRESTエンドポイントにアクセスするには、次のように実行します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:144
#, no-wrap
msgid ""
"APP_NAME=`heroku info | grep  \"=== .*\" |sed \"s/=== //\"`\n"
"curl $APP_NAME.herokuapp.com/hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:147
msgid "Of course, you can use the Heroku CLI to connect this repo to your GitHub account, too, but this is out of scope for this guide."
msgstr "もちろん、Heroku CLIを使ってこのレポジトリをGitHubアカウントに接続することもできますが、これはこのガイドでは対象外です。"

#. type: Title ==
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:148
#, no-wrap
msgid "Deploy as container"
msgstr "コンテナとしてデプロイ"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:151
msgid "The advantage of pushing a whole container is that we are in complete control over its content and maybe even choose to deploy a container with a native executable running on GraalVM."
msgstr "コンテナ全体をプッシュすることの利点は、その内容を完全にコントロールできることであり、GraalVM上で動作するネイティブ実行可能ファイルを持つコンテナをデプロイすることも可能です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:153
msgid "First, login to Heroku's container registry:"
msgstr "まず、Herokuのコンテナレジストリにログインします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:157
#, no-wrap
msgid "heroku container:login\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:160
msgid "We need to add an extension to our project to build container images via the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインを使ってコンテナイメージを構築するために、プロジェクトにエクステンションを追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:166
#, no-wrap
msgid ""
"mvn quarkus:add-extension -Dextensions=\"container-image-docker\"\n"
"git add pom.xml\n"
"git commit -am \"Add container-image-docker extension.\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:170
msgid "The image we are going to build needs to be named accordingly to work with Heroku's registry and deployment.  We get the generated name via `heroku info` and pass it on to the (local) build:"
msgstr "これからビルドするイメージは、Herokuのレジストリやデプロイメントと連携するために、適切な名前を付ける必要があります。 `heroku info` を通して生成された名前を取得し、それを（ローカル）ビルドに渡します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:179
#, no-wrap
msgid ""
"APP_NAME=`heroku info | grep  \"=== .*\" |sed \"s/=== //\"`\n"
"mvn clean package\\\n"
"  -Dquarkus.container-image.build=true\\\n"
"  -Dquarkus.container-image.group=registry.heroku.com/$APP_NAME\\\n"
"  -Dquarkus.container-image.name=web\\\n"
"  -Dquarkus.container-image.tag=latest\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:182
msgid "With Docker installed, you can now push the image and release it:"
msgstr "Dockerがインストールされたので、イメージをプッシュしてリリースすることができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:187
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:224
#, no-wrap
msgid ""
"docker push registry.heroku.com/$APP_NAME/web\n"
"heroku container:release web --app $APP_NAME\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:190
msgid "You can and should check the logs to see if your application is now indeed running from the container:"
msgstr "アプリケーションが実際にコンテナから実行されているかどうか、ログを確認することができますし、確認すべきです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:194
#, no-wrap
msgid "heroku logs --app $APP_NAME --tail\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:198
msgid "The initial push is rather big, as all layers of the image need to be transferred.  The following pushes will be smaller."
msgstr "イメージの全レイヤーを転送する必要があるため、最初のプッシュはかなり大きくなります。それ以降のプッシュは小さくなります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:202
msgid "The biggest advantage we take when deploying our app as a container is to deploy a container with the natively compiled application.  Why? Because Heroku will stop or sleep the application when there's no incoming traffic.  A native application will wake up much faster from its sleep."
msgstr "アプリをコンテナとしてデプロイする際の最大のメリットは、ネイティブにコンパイルされたアプリを使ってコンテナをデプロイすることです。なぜか？なぜなら、Herokuは着信トラフィックがないときにアプリケーションを停止またはスリープさせるからです。ネイティブ・アプリケーションは、スリープ状態からより早く目覚めます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:205
msgid "The process is pretty much the same.  We opt in to compiling a native image inside a local container, so that we don't have to deal with installing GraalVM locally:"
msgstr "プロセスはほとんど同じです。ここでは、ローカルコンテナ内でネイティブイメージをコンパイルすることを選択し、ローカルにGraalVMをインストールする必要がないようにしています。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:216
#, no-wrap
msgid ""
"APP_NAME=`heroku info | grep  \"=== .*\" |sed \"s/=== //\"`\n"
"mvn clean package\\\n"
"  -Dquarkus.container-image.build=true\\\n"
"  -Dquarkus.container-image.group=registry.heroku.com/$APP_NAME\\\n"
"  -Dquarkus.container-image.name=web\\\n"
"  -Dquarkus.container-image.tag=latest\\\n"
"  -Pnative\\\n"
"  -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/deploying-to-heroku.adoc:219
msgid "After that, push and release again:"
msgstr "その後、もう一度プッシュし、リリースします。"
