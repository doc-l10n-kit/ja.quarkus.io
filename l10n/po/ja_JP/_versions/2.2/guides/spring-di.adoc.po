msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/spring-di.adoc:6
#, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr "Spring DI APIのためのQuarkusエクステンション"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:11
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "インジェクションにはCDIアノテーションを使用することが推奨されていますが、Quarkusでは、 `spring-di` エクステンションという形で、Springの依存性インジェクションのための互換レイヤーを提供しています。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:13
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "このガイドでは、Spring Frameworkに含まれる有名なDependency InjectionアノテーションをQuarkusアプリケーションでどのように活用するかを説明します。"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:17
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:20
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:21
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:22
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:24
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:28
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:30
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:32
msgid "The solution is located in the `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "このソリューションは `spring-di-quickstart` {quickstarts-tree-url}/spring-di-QuickStart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:33
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:36
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:46
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-di-quickstart \\\n"
"    -DclassName=\"org.acme.spring.di.GreeterResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"resteasy,spring-di\"\n"
"cd spring-di-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `spring-di` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `spring-di` エクステンションをプロジェクトに追加することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:56
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-di\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:59
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-di</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:68
#, no-wrap
msgid "Add beans using Spring annotations"
msgstr "Springアノテーションを使用したBeanの追加"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:71
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "それでは、さまざまなSpringアノテーションを使って、いくつかのBeanを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:74
msgid "First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.  Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "まず、 `StringFunction` インターフェースを作成します。これは、いくつかのBeanがこれから実装し、後に別のBeanに注入されます。 `src/main/java/org/acme/spring/di/StringFunction.java` ファイルを作成し、以下の内容を設定します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:78
#: upstream/_versions/2.2/guides/spring-di.adoc:93
#: upstream/_versions/2.2/guides/spring-di.adoc:116
#: upstream/_versions/2.2/guides/spring-di.adoc:144
#: upstream/_versions/2.2/guides/spring-di.adoc:166
#: upstream/_versions/2.2/guides/spring-di.adoc:210
#, no-wrap
msgid "package org.acme.spring.di;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:80
#, no-wrap
msgid "import java.util.function.Function;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:82
#, no-wrap
msgid "public interface StringFunction extends Function<String, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:84
#: upstream/_versions/2.2/guides/spring-di.adoc:259
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:89
msgid "With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.  It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.  Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "インターフェイスが整ったところで、SpringのJava Configスタイルを使ってBeanを定義する `AppConfiguration` クラスを追加します。これを使って、パラメータとして渡されたテキストを大文字にする `StringFunction` Beanを作成します。以下の内容で `src/main/java/org/acme/spring/di/AppConfiguration.java` ファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:96
#, no-wrap
msgid ""
"import org.springframework.context.annotation.Bean;\n"
"import org.springframework.context.annotation.Configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:99
#, no-wrap
msgid ""
"@Configuration\n"
"public class AppConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:105
#, no-wrap
msgid ""
"    @Bean(name = \"capitalizeFunction\")\n"
"    public StringFunction capitalizer() {\n"
"        return String::toUpperCase;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:112
msgid "Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.  This bean will effectively be a no-op bean that simply returns the input as is.  Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "次に、Springのステレオタイプアノテーションスタイルを使用して、 `StringFunction` を実装する別のBeanを定義します。このBeanは、事実上、入力をそのまま返すだけのno-op beanとなります。 `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` ファイルを作成し、以下の内容を設定します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:118
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:121
#, no-wrap
msgid ""
"@Component(\"noopFunction\")\n"
"public class NoOpSingleStringFunction implements StringFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:127
#, no-wrap
msgid ""
"    @Override\n"
"    public String apply(String s) {\n"
"        return s;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:131
msgid "Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.  To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "Quarkusは、Springの `@Value` アノテーションを使用して設定値を注入するサポートも提供しています。動作を確認するには、まず、以下の内容で `src/main/resources/application.properties` を編集します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:136
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:139
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "次に、 `src/main/java/org/acme/spring/di/MessageProducer.java` に以下の内容で新しいSpring Beanを作成します:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:147
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:150
#, no-wrap
msgid ""
"@Service\n"
"public class MessageProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:153
#, no-wrap
msgid ""
"    @Value(\"${greeting.message}\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:158
#, no-wrap
msgid ""
"    public String getPrefix() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:162
msgid "The final bean we will create ties together all the previous beans.  Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "最後に作成するBeanは、これまでのBeanをすべて結びつけるものです。 `src/main/java/org/acme/spring/di/GreeterBean.java` ファイルを作成し、以下の内容をコピーします:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:171
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Qualifier;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:174
#, no-wrap
msgid ""
"@Component\n"
"public class GreeterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:176
#, no-wrap
msgid "    private final MessageProducer messageProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:180
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"noopFunction\")\n"
"    StringFunction noopStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:184
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"capitalizeFunction\")\n"
"    StringFunction capitalizerStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:187
#, no-wrap
msgid ""
"    @Value(\"${greeting.suffix:!}\")\n"
"    String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:191
#, no-wrap
msgid ""
"    public GreeterBean(MessageProducer messageProducer) {\n"
"        this.messageProducer = messageProducer;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:197
#, no-wrap
msgid ""
"    public String greet(String name) {\n"
"        final String initialValue = messageProducer.getPrefix() + \" \" + name + suffix;\n"
"        return noopStringFunction.andThen(capitalizerStringFunction).apply(initialValue);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:201
msgid "In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).  Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "上のコードでは、フィールドインジェクションとコンストラクタインジェクションの両方が使用されていることがわかります（コンストラクタインジェクションでは、コンストラクタが 1 つなので、 `@Autowired` のアノテーションは必要ないことに注意してください）。さらに、 `suffix` の `@Value` アノテーションには、デフォルト値も定義されています。この場合、 `application.properties` で `greeting.suffix` を定義していないので、これが使用されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/spring-di.adoc:203
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr "JAX-RS リソースの更新"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:212
#, no-wrap
msgid "import org.springframework.beans.factory.annotation.Autowired;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:217
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:220
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class GreeterResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:223
#, no-wrap
msgid ""
"    @Autowired\n"
"    GreeterBean greeterBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:230
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return greeterBean.greet(\"world\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:232
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:236
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/spring/di/GreetingResourceTest.java` ファイルを編集し、 `testHelloEndpoint` メソッドの内容を次のように変更します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:242
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:245
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:248
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/spring-di.adoc:257
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"            .when().get(\"/greeting\")\n"
"            .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"HELLO WORLD!\"));\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:261
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:265
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/greeting."
msgstr "アプリケーションを実行するには、次の手順を実行します: `./mvnw compile quarkus:dev` 。ブラウザで http://localhost:8080/greeting を開きます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:267
msgid "The result should be: `HELLO WORLD!`."
msgstr "結果は次のようになります： `HELLO WORLD!`."

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:268
#, no-wrap
msgid "Run the application as a native"
msgstr "アプリケーションをネイティブバイナリーとして実行"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:272
#, no-wrap
msgid "Important Technical Note"
msgstr "重要な技術的な注意点"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:281
#, no-wrap
msgid "Conversion Table"
msgstr "変換テーブル"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:284
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "以下の表は、Spring DIのアノテーションをCDIおよび/またはMicroProfileのアノテーションに変換する方法を示しています。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:286
#, no-wrap
msgid "Spring"
msgstr "Spring"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:286
#, no-wrap
msgid "CDI / MicroProfile"
msgstr "CDI / MicroProfile"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:288
#, no-wrap
msgid "Comments"
msgstr "Comments"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:289
#, no-wrap
msgid "@Autowired"
msgstr "@Autowired"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:290
#, no-wrap
msgid "@Inject"
msgstr "@Inject"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:293
#, no-wrap
msgid "@Qualifier"
msgstr "@Qualifier"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:294
#, no-wrap
msgid "@Named"
msgstr "@Named"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:297
#, no-wrap
msgid "@Value"
msgstr "@Value"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:298
#, no-wrap
msgid "@ConfigProperty"
msgstr "@ConfigProperty"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:300
#, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "ConfigurationProperty は、@Value のような式言語をサポートしていませんが、典型的な使用例をはるかに簡単に扱うことができます。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:301
#, no-wrap
msgid "@Component"
msgstr "@Component"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:302
#: upstream/_versions/2.2/guides/spring-di.adoc:306
#: upstream/_versions/2.2/guides/spring-di.adoc:310
#, no-wrap
msgid "@Singleton"
msgstr "@Singleton"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:304
#: upstream/_versions/2.2/guides/spring-di.adoc:308
#: upstream/_versions/2.2/guides/spring-di.adoc:312
#, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "デフォルトでは、SpringのステレオタイプアノテーションはシングルトンBeanです。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:305
#, no-wrap
msgid "@Service"
msgstr "@Service"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:309
#, no-wrap
msgid "@Repository"
msgstr "@Repository"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:313
#, no-wrap
msgid "@Configuration"
msgstr "@Configuration"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:314
#, no-wrap
msgid "@ApplicationScoped"
msgstr "@ApplicationScoped"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:316
#, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "CDIでは、プロデューサBeanはアプリケーションスコープに限定されず、@Singletonや@Dependentにすることもできます。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:317
#, no-wrap
msgid "@Bean"
msgstr "@Bean"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:318
#, no-wrap
msgid "@Produces"
msgstr "@Produces"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:321
#, no-wrap
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:324
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "CDI アノテーションへの 1 対 1 のマッピングはありません。Scope の値に応じて、@Singleton、@ApplicationScoped、@SessionScoped、@RequestScoped、@Dependent のいずれかが使用されます。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:325
#, no-wrap
msgid "@ComponentScan"
msgstr "@ComponentScan"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:328
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "CDIアノテーションへの1対1のマッピングはありません。Quarkusはビルド時にすべてのクラスパスのスキャンを行うため、Quarkusでは使用されません。"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:329
#, no-wrap
msgid "@Import"
msgstr "@Import"

#. type: Table
#: upstream/_versions/2.2/guides/spring-di.adoc:331
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "CDIアノテーションとの1対1のマッピングはありません。"

#. type: Title ==
#: upstream/_versions/2.2/guides/spring-di.adoc:333
#, no-wrap
msgid "More Spring guides"
msgstr "その他のSpringガイド"

#. type: Plain text
#: upstream/_versions/2.2/guides/spring-di.adoc:336
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkusには、より多くのSpring互換機能があります。詳細については、以下のガイドを参照してください。"
