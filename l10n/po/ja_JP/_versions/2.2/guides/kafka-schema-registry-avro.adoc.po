msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:6
#, no-wrap
msgid "Using Apache Kafka with Schema Registry and Avro"
msgstr " Schema RegistryとAvroと共にApache Kafkaを使用"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:19
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:21
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:22
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:23
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:24
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:26
msgid "GraalVM installed if you want to run in native mode."
msgstr "ネイティブモードで実行する場合は、GraalVM がインストールされていること"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:28
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:32
msgid "In this guide we are going to implement a REST resource, namely `MovieResource`, that will consume movie DTOs and put them in a Kafka topic."
msgstr "このガイドでは、REST リソース、つまりムービー DTO を消費して Kafka トピックに配置する `MovieResource` を実装します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:36
msgid "Then, we will implement a consumer that will consume and collect messages from the same topic.  The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr "次に、同じトピックからメッセージを消費および収集するコンシューマーを実装します。収集されたメッセージは、 https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events] を介して別のリソースである `ConsumedMovieResource` によって公開されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:40
msgid "The _Movies_ will be serialized and deserialized using Avro.  The schema, describing the _Movie_, is stored in Apicurio Registry.  The same concept applies if you are using the Confluent Avro _serde_ and Confluent Schema Registry."
msgstr "_Movies_ は、Avro を使用してシリアライズおよびデシリアライズされます。_Movie_ を記述するスキーマは、Apicurio Registry に保存されます。Confluent Avro _serde_ および Confluent Schema Registry を使用している場合も同じ概念が適用されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:41
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:45
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:47
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:49
msgid "The solution is located in the `kafka-avro-schema-quickstart` {quickstarts-tree-url}/kafka-avro-schema-quickstart[directory]."
msgstr "ソリューションは `kafka-avro-schema-quickstart` {quickstarts-tree-url}/kafka-avro-schema-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:50
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:53
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:63
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-avro-schema-quickstart \\\n"
"    -DclassName=\"org.acme.kafka.MovieResource\" \\\n"
"    -Dpath=\"/movies\" \\\n"
"    -Dextensions=\"resteasy-reactive,resteasy-reactive-jackson,smallrye-reactive-messaging-kafka,apicurio-registry-avro\"\n"
"cd kafka-avro-schema-quickstart\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:98
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"    <!-- Quarkus extension for generating Java code from Avro schemas -->\n"
"    <!-- with this, you don't have to use avro-maven-plugin -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-avro</artifactId>\n"
"    </dependency>\n"
"    <!-- Confluent registry libraries use JAX-RS client -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.confluent</groupId>\n"
"        <artifactId>kafka-avro-serializer</artifactId>\n"
"        <version>6.1.1</version>\n"
"        <exclusions>\n"
"            <exclusion>\n"
"                <groupId>jakarta.ws.rs</groupId>\n"
"                <artifactId>jakarta.ws.rs-api</artifactId>\n"
"            </exclusion>\n"
"        </exclusions>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:108
#, no-wrap
msgid ""
"<repositories>\n"
"    <repository>\n"
"        <id>confluent</id>\n"
"        <url>https://packages.confluent.io/maven/</url>\n"
"        <snapshots>\n"
"            <enabled>false</enabled>\n"
"        </snapshots>\n"
"    </repository>\n"
"</repositories>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:111
#, no-wrap
msgid "Avro schema"
msgstr "Avro スキーマ"

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:116
msgid "Apache Avro is a data serialization system. Data structures are described using schemas.  The first thing we need to do is to create a schema describing the `Movie` structure.  Create a file called `src/main/avro/movie.avsc` with the schema for our record (Kafka message):"
msgstr "Apache Avro はデータシリアル化システムです。データ構造はスキーマを使用して記述されます。最初に `Movie` 構造を記述するスキーマを作成する必要があります。レコードのスキーマ (Kafka メッセージ) を使用して、`src/main/avro/movie.avsc` というファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:133
#, no-wrap
msgid ""
"{\n"
"  \"namespace\": \"org.acme.kafka.quarkus\",\n"
"  \"type\": \"record\",\n"
"  \"name\": \"Movie\",\n"
"  \"fields\": [\n"
"    {\n"
"      \"name\": \"title\",\n"
"      \"type\": \"string\"\n"
"    },\n"
"    {\n"
"      \"name\": \"year\",\n"
"      \"type\": \"int\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:140
msgid "Take a look at the https://avro.apache.org/docs/current/spec.html#schemas[Avro specification] to learn more about the Avro syntax and supported types."
msgstr "Avro 構文とサポートされているタイプの詳細については、 https://avro.apache.org/docs/current/spec.html#schemas[Avro 仕様] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:142
msgid "With Quarkus, there's no need to use a specific Maven plugin to process the Avro schema, this is all done for you by the `quarkus-avro` extension!"
msgstr "Quarkus を使用すると、Avro スキーマを処理するために特定の Maven プラグインを使用する必要はありません。これはすべて、`quarkus-avro` エクステンションによって行われます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:146
#, no-wrap
msgid "The `Movie` producer"
msgstr "`Movie` プロデューサー"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:149
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr "スキーマを定義したら、`MovieResource` を実装できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:152
msgid "Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method that consumes `Movie` and sends it through the `Emitter`:"
msgstr "`MovieResource` を開き、`Movie` DTO の https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] を挿入し、`Movie` を消費する `@POST` メソッドを実装して `Emitter` 経由で送信してください。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:156
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:223
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:472
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:592
#, no-wrap
msgid "package org.acme.kafka;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:161
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:165
#, no-wrap
msgid ""
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:169
#, no-wrap
msgid ""
"@Path(\"/movies\")\n"
"public class MovieResource {\n"
"    private static final Logger LOGGER = Logger.getLogger(MovieResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:172
#, no-wrap
msgid ""
"    @Channel(\"movies\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:179
#, no-wrap
msgid ""
"    @POST\n"
"    public Response enqueueMovie(Movie movie) {\n"
"        LOGGER.infof(\"Sending movie %s to Kafka\", movie.getTitle());\n"
"        emitter.send(movie);\n"
"        return Response.accepted().build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:181
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:560
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:185
msgid "Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic.  To achieve this, edit the `application.properties` file, and add the following content:"
msgstr "ここで、`movies` チャネル (`Emitter` はこのチャネルに出力) を Kafka トピックに _マップ_ する必要があります。これを実現するには、`application.properties` ファイルを編集し、次のコンテンツを追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:190
#, no-wrap
msgid ""
"# set the connector for the outgoing channel to `smallrye-kafka`\n"
"mp.messaging.outgoing.movies.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:193
#, no-wrap
msgid ""
"# set the topic name for the channel to `movies`\n"
"mp.messaging.outgoing.movies.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:196
#, no-wrap
msgid ""
"# automatically register the schema with the registry, if not present\n"
"mp.messaging.outgoing.movies.apicurio.registry.auto-register=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:203
msgid "You might have noticed that we didn't define the `value.serializer`.  That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaSerializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.  We still have to define the `apicurio.registry.auto-register` property."
msgstr "`value.serializer` を定義しなかったことにお気づきかもしれません。これは、`@Channel` 宣言、`Movie` タイプの構造、Apicurio Registry ライブラリーの存在に基づき、`io.apicurio.registry.serde.avro.AvroKafkaSerializer` が適切であることを、Quarkus が xref:kafka.adoc#serialization-autodetection[自動検出] できるためです。それでも、`apicurio.registry.auto-register` プロパティーは定義する必要があります。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:209
msgid "If you use Confluent Schema Registry, you don't have to configure `value.serializer` either.  It is also detected automatically.  The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.  It defaults to `true`, so it doesn't have to be configured in this example.  It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr "Confluent Schema Registry を使用する場合は、`value.serializer` も設定する必要はありません。同様に、自動的に検出されます。`apicurio.registry.auto-register` の Confluent Schema Registry アナログは、`auto.register.schemas` と呼ばれます。デフォルトは `true` であるため、この例で設定する必要はありません。自動スキーマ登録を無効にする場合は、明示的に `false` に設定できます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:211
#, no-wrap
msgid "The `Movie` consumer"
msgstr "`Movie` コンシューマー"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:216
msgid "So, we can write records into Kafka containing our `Movie` data.  That data is serialized using Avro.  Now, it's time to implement a consumer for them."
msgstr "`Movie` データを含むレコードを Kafka に書き込むことができます。そのデータは Avro を使用してシリアライズされます。では、それらのコンシューマーを実装してみましょう。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:219
msgid "Let's create `ConsumedMovieResource` that will consume `Movie` messages from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr "`movies-from-kafka` チャネルからの `Movie` メッセージを消費し、Server-Sent Event を介して公開する `ConsumedMovieResource` を作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:229
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:233
#, no-wrap
msgid ""
"import org.acme.kafka.quarkus.Movie;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.jboss.resteasy.reactive.RestSseElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:235
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:239
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/consumed-movies\")\n"
"public class ConsumedMovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:242
#, no-wrap
msgid ""
"    @Channel(\"movies-from-kafka\")\n"
"    Multi<Movie> movies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestSseElementType(MediaType.TEXT_PLAIN)\n"
"    public Multi<String> stream() {\n"
"        return movies.map(movie -> String.format(\"'%s' from %s\", movie.getTitle(), movie.getYear()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:254
msgid "The last bit of the application's code is the configuration of the `movies-from-kafka` channel in `application.properties`:"
msgstr "アプリケーションのコードの最後のビットは、`application.properties` の `movies-from-kafka` チャネルの設定です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:259
#, no-wrap
msgid ""
"# set the connector for the incoming channel to `smallrye-kafka`\n"
"mp.messaging.incoming.movies-from-kafka.connector=smallrye-kafka\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:262
#, no-wrap
msgid ""
"# set the topic name for the channel to `movies`\n"
"mp.messaging.incoming.movies-from-kafka.topic=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:265
#, no-wrap
msgid ""
"# disable auto-commit, Reactive Messaging handles it itself\n"
"mp.messaging.incoming.movies-from-kafka.enable.auto.commit=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:267
#, no-wrap
msgid "mp.messaging.incoming.movies-from-kafka.auto.offset.reset=earliest\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:274
msgid "You might have noticed that we didn't define the `value.deserializer`.  That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.  We don't have to define the `apicurio.registry.use-specific-avro-reader` property either, that is also configured automatically."
msgstr "`value.deserializer` を定義しなかったことにお気づきかもしれません。これは、`@Channel` 宣言、`Movie` タイプの構造、Apicurio Registry ライブラリーの存在に基づき、`io.apicurio.registry.serde.avro.AvroKafkaDeserializer` が適切であることを、Quarkus が xref:kafka.adoc#serialization-autodetection[自動検出] できるためです。`apicurio.registry.use-specific-avro-reader` プロパティーも自動で設定されるため、定義する必要はありません。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:277
msgid "If you use Confluent Schema Registry, you don't have to configure `value.deserializer` or `specific.avro.reader` either.  They are both detected automatically."
msgstr "Confluent Schema Registry を使用する場合は、`value.deserializer` や `specific.avro.reader` を設定する必要はありません。どちらも自動的に検出されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:279
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:282
msgid "Start the application in dev mode:"
msgstr "アプリケーションを開発モードで実行します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:286
#, no-wrap
msgid "mvn quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:290
msgid "Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.  See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr "Dev Services により、Kafka ブローカーと Apicurio Registry インスタンスは自動的に開始されます。詳細については、xref:kafka-dev-services.adoc[Dev Services for Kafka] および xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] を参照してください。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:295
msgid "You might have noticed that we didn't configure the schema registry URL anywhere.  This is because Dev Services for Apicurio Registry configures all Kafka channels in SmallRye Reactive Messaging to use the automatically started registry instance."
msgstr "ここまで、スキーマレジストリーの URL を設定していません。なぜなら、Dev Services for Apicurio Registry が、自動的に開始されたレジストリーインスタンスを使用するように、SmallRye リアクティブメッセージングのすべての Kafka チャネルを設定するからです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:303
#, no-wrap
msgid ""
"kafka.bootstrap.servers=PLAINTEXT://localhost:9092\n"
"mp.messaging.connector.smallrye-kafka.schema.registry.url=http://localhost:8081\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:307
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr "2 番目のターミナルで、`ConsumedMovieResource` リソースを `curl` でクエリーします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:311
#, no-wrap
msgid "curl -N http://localhost:8080/consumed-movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:314
msgid "In the third one, post a few movies:"
msgstr "3番目のターミナルで、いくつかの movie をポストします。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:321
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Shawshank Redemption\",\"year\":1994}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:326
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Godfather\",\"year\":1972}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:331
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"The Dark Knight\",\"year\":2008}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:336
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"title\":\"12 Angry Men\",\"year\":1957}' \\\n"
"  http://localhost:8080/movies\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:339
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr "2 番目のターミナルに表示されているものを確認します。次の行に何かが表示されているはずです。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:343
#, no-wrap
msgid "data:'The Shawshank Redemption' from 1994\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:345
#, no-wrap
msgid "data:'The Godfather' from 1972\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:347
#, no-wrap
msgid "data:'The Dark Knight' from 2008\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:349
#, no-wrap
msgid "data:'12 Angry Men' from 1957\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:351
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "JVM またはネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:355
msgid "When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.  The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr "開発モードまたはテストモードで実行していない場合は、独自の Kafka ブローカーと Apicurio Registry を起動する必要があります。そのための最も簡単な方法は、`docker-compose` を使用して適切なコンテナーを起動することです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:358
msgid "If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.  You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr "Confluent Schema Registry を使用している場合は、すでに Kafka ブローカーと Confluent Schema Registry インスタンスが実行および設定されています。ここに記した`docker-compose` や Apicurio Registry の設定に関する説明は無視してかまいません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:360
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr "プロジェクトのルートに、次の内容の `docker-compose.yaml` ファイルを作成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:364
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:366
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:377
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:393
#, no-wrap
msgid ""
"  kafka:\n"
"    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0\n"
"    command: [\n"
"        \"sh\", \"-c\",\n"
"        \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:402
#, no-wrap
msgid ""
"  schema-registry:\n"
"    image: apicurio/apicurio-registry-mem:2.0.1.Final\n"
"    ports:\n"
"      - 8081:8080\n"
"    depends_on:\n"
"      - kafka\n"
"    environment:\n"
"      QUARKUS_PROFILE: prod\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:405
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr "アプリケーションを開始する前に、まず Kafka ブローカーと Apicurio Registry を起動します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:409
#, no-wrap
msgid "docker-compose up\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:413
msgid "To stop the containers, use `docker-compose down`. You can also clean up the containers with `docker-compose rm`"
msgstr "コンテナを停止するには、`docker-compose down` を使用します。`docker-compose rm` を使用してコンテナをクリーンアップすることもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:420
#, no-wrap
msgid ""
"mvn package\n"
"java -Dmp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2 -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:424
msgid "By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.  You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr "デフォルトでは、アプリケーションは `localhost:9092` でリッスンしている Kafka ブローカーに接続しようとします。ブートストラップサーバーは、`java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar` を使用して設定できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:426
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr "コマンドラインでレジストリー URL を指定する方法は便利ではないため、`prod` プロファイルに対してのみ設定プロパティーを追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:430
#, no-wrap
msgid "%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8081/apis/registry/v2\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:438
#, no-wrap
msgid ""
"mvn package -Dnative\n"
"./target/kafka-avro-schema-quickstart-1.0.0-SNAPSHOT-runner -Dkafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:440
#, no-wrap
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:445
msgid "As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.  Hence, we don't have to set up Kafka and Apicurio Registry ourselves.  We can just focus on writing the test."
msgstr "上記のとおり、Dev Services for Kafka と Apicurio Registry は、Kafka ブローカーと Apicurio Registry インスタンスを開発モードおよびテスト用に自動で開始し、設定します。したがって、Kafka および Apicurio Registry を自分で設定する必要はなく、テストの作成に集中できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:464
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"    <!-- we'll use JAX-RS Client for talking to the SSE endpoint -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.awaitility</groupId>\n"
"        <artifactId>awaitility</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:468
msgid "In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns what we send."
msgstr "テストでは、ムービーをループで送信し、送信したものを `ConsumedMovieResource` が返すかどうかを確認します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:479
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.http.ContentType;\n"
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:489
#, no-wrap
msgid ""
"import javax.ws.rs.client.Client;\n"
"import javax.ws.rs.client.ClientBuilder;\n"
"import javax.ws.rs.client.WebTarget;\n"
"import javax.ws.rs.sse.SseEventSource;\n"
"import java.net.URI;\n"
"import java.util.List;\n"
"import java.util.concurrent.CopyOnWriteArrayList;\n"
"import java.util.concurrent.ExecutorService;\n"
"import java.util.concurrent.Executors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:495
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static java.util.concurrent.TimeUnit.MILLISECONDS;\n"
"import static java.util.concurrent.TimeUnit.SECONDS;\n"
"import static org.awaitility.Awaitility.await;\n"
"import static org.hamcrest.MatcherAssert.assertThat;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:498
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MovieResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:501
#, no-wrap
msgid ""
"    @TestHTTPResource(\"/consumed-movies\")\n"
"    URI consumedMovies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:507
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() throws InterruptedException {\n"
"        // create a client for `ConsumedMovieResource` and collect the consumed resources in a list\n"
"        Client client = ClientBuilder.newClient();\n"
"        WebTarget target = client.target(consumedMovies);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:509
#, no-wrap
msgid "        List<String> received = new CopyOnWriteArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:512
#, no-wrap
msgid ""
"        SseEventSource source = SseEventSource.target(target).build();\n"
"        source.register(inboundSseEvent -> received.add(inboundSseEvent.readData()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:515
#, no-wrap
msgid ""
"        // in a separate thread, feed the `MovieResource`\n"
"        ExecutorService movieSender = startSendingMovies();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:517
#, no-wrap
msgid "        source.open();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:523
#, no-wrap
msgid ""
"        // check if, after at most 5 seconds, we have at least 2 items collected, and they are what we expect\n"
"        await().atMost(5, SECONDS).until(() -> received.size() >= 2);\n"
"        assertThat(received, Matchers.hasItems(\"'The Shawshank Redemption' from 1994\",\n"
"                \"'12 Angry Men' from 1957\"));\n"
"        source.close();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:528
#, no-wrap
msgid ""
"        // shutdown the executor that is feeding the `MovieResource`\n"
"        movieSender.shutdownNow();\n"
"        movieSender.awaitTermination(5, SECONDS);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:540
#, no-wrap
msgid ""
"    private ExecutorService startSendingMovies() {\n"
"        ExecutorService executorService = Executors.newSingleThreadExecutor();\n"
"        executorService.execute(() -> {\n"
"            while (true) {\n"
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"The Shawshank Redemption\\\",\\\"year\\\":1994}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:548
#, no-wrap
msgid ""
"                given()\n"
"                        .contentType(ContentType.JSON)\n"
"                        .body(\"{\\\"title\\\":\\\"12 Angry Men\\\",\\\"year\\\":1957}\")\n"
"                .when()\n"
"                        .post(\"/movies\")\n"
"                .then()\n"
"                        .statusCode(202);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:558
#, no-wrap
msgid ""
"                try {\n"
"                    Thread.sleep(200L);\n"
"                } catch (InterruptedException e) {\n"
"                    break;\n"
"                }\n"
"            }\n"
"        });\n"
"        return executorService;\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:566
#, no-wrap
msgid "Manual setup"
msgstr "手動セットアップ"

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:587
#, no-wrap
msgid ""
"<dependencies>\n"
"    ...\n"
"   <dependency>\n"
"        <groupId>io.strimzi</groupId>\n"
"        <artifactId>strimzi-test-container</artifactId>\n"
"        <version>0.22.1</version>\n"
"        <scope>test</scope>\n"
"        <exclusions>\n"
"            <exclusion>\n"
"                <groupId>org.apache.logging.log4j</groupId>\n"
"                <artifactId>log4j-core</artifactId>\n"
"            </exclusion>\n"
"        </exclusions>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:595
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:597
#, no-wrap
msgid "import org.testcontainers.containers.GenericContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:600
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
"import io.strimzi.StrimziKafkaContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:602
#, no-wrap
msgid "public class KafkaAndSchemaRegistryTestResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:604
#, no-wrap
msgid "    private final StrimziKafkaContainer kafka = new StrimziKafkaContainer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:606
#, no-wrap
msgid "    private GenericContainer<?> registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:620
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        kafka.start();\n"
"        registry = new GenericContainer<>(\"apicurio/apicurio-registry-mem:2.0.1.Final\")\n"
"                .withExposedPorts(8080)\n"
"                .withEnv(\"QUARKUS_PROFILE\", \"prod\");\n"
"        registry.start();\n"
"        Map<String, String> properties = new HashMap<>();\n"
"        properties.put(\"mp.messaging.connector.smallrye-kafka.apicurio.registry.url\",\n"
"                \"http://\" + registry.getHost() + \":\" + registry.getMappedPort(8080) + \"/apis/registry/v2\");\n"
"        properties.put(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());\n"
"        return properties;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:627
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        registry.stop();\n"
"        kafka.stop();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:636
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KafkaAndSchemaRegistryTestResource.class)\n"
"public class MovieResourceTest {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:638
#, no-wrap
msgid "Avro code generation details"
msgstr "Avro コード生成の詳細"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:642
msgid "In this guide we used the Quarkus code generation mechanism to generate Java files from Avro schema."
msgstr "このガイドでは、Quarkus コード生成メカニズムを使用して、Avro スキーマから Java ファイルを生成しました。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:644
msgid "Under the hood, the mechanism uses `org.apache.avro:avro-compiler`."
msgstr "内部で、メカニズムは `org.apache.avro:avro-compiler` を使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:646
msgid "You can use the following configuration properties to alter how it works:"
msgstr "次の設定プロパティーを使用して、動作を変更できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:650
msgid "`avro.codegen.[avsc|avdl|avpr].imports` - a list of files or directories that should be compiled first thus making them importable by subsequently compiled schemas. Note that imported files should not reference each other. All paths should be relative to the `src/[main|test]/avro` directory. Passed as a comma-separated list."
msgstr "`avro.codegen.[avsc|avdl|avpr].imports` - 最初にコンパイルする必要があるファイルまたはディレクトリーのリスト。これにより、後でコンパイルされるスキーマでインポートが可能になります。インポートされたファイルは相互に参照してはならないことに注意してください。すべてのパスは、`src/[main|test]/avro` ディレクトリーに対する相対パスでなければなりません。コンマ区切りのリストとして渡されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:652
msgid "`avro.codegen.stringType` - the Java type to use for Avro strings. May be one of `CharSequence`, `String` or `Utf8`. Defaults to `String`"
msgstr "`avro.codegen.stringType` - Avro 文字列に使用する Java タイプ。`CharSequence`、`String`、`Utf8` のいずれかである可能性があります。デフォルトは `String` です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:654
msgid "`avro.codegen.createOptionalGetters` - enables generating the `getOptional...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.createOptionalGetters` - 要求されたタイプの Optional を返す`getOptional...` メソッドを生成できるようにします。デフォルトは `false` です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:655
msgid "`avro.codegen.enableDecimalLogicalType` - determines whether to use Java classes for decimal types, defaults to `false`"
msgstr "`avro.codegen.enableDecimalLogicalType` - 10 進型に Java クラスを使用するかどうかを決定します。デフォルトは `false` です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:657
msgid "`avro.codegen.createSetters` - determines whether to create setters for the fields of the record.  Defaults to `false`"
msgstr "`avro.codegen.createSetters` - レコードのフィールドにセッターを作成するかどうかを決定します。デフォルトは `false` です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:659
msgid "`avro.codegen.gettersReturnOptional` - enables generating `get...` methods that return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.gettersReturnOptional` - 要求されたタイプの Optional を返す `get...` メソッドを生成できるようにします。デフォルトは `false` です。"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:662
msgid "`avro.codegen.optionalGettersForNullableFieldsOnly`, works in conjunction with `gettersReturnOptional` option.  If it is set, `Optional` getters will be generated only for fields that are nullable. If the field is mandatory, regular getter will be generated. Defaults to `false`"
msgstr "`avro.codegen.optionalGettersForNullableFieldsOnly` は、`gettersReturnOptional` オプションと連携して機能します。設定されている場合、`Optional` ゲッターは null 許容フィールドに対してのみ生成されます。フィールドが必須の場合、通常のゲッターが生成されます。デフォルトは `false` です。"

#. type: Title ==
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:663
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/2.2/guides/kafka-schema-registry-avro.adoc:667
msgid "link:https://quarkus.io/blog/kafka-avro/[How to Use Kafka, Schema Registry and Avro with Quarkus] - a blog post on which the guide is based. It gives a good introduction to Avro and the concept of schema registry"
msgstr "link:https://quarkus.io/blog/kafka-avro/[Quarkus での Kafka、Schema Registry、Avro の使用方法] - ガイドの基となるブログ投稿。Avro の紹介とスキーマレジストリーの概念について説明しています。"
