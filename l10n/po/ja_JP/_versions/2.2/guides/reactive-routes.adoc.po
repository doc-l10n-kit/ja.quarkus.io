msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.2/guides/reactive-routes.adoc:6
#, no-wrap
msgid "Using Reactive Routes"
msgstr "リアクティブルートの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:14
msgid "Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.  This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.  Quarkus also offers the possibility to use reactive routes.  You can implement REST API with routes only or combine them with JAX-RS resources and servlets."
msgstr "Reactive Routesは、HTTPエンドポイントを実装するために、 _routes_ を宣言して連鎖させる代替アプローチを提案します。このアプローチは、Express.JsやHapiのようなフレームワークで、JavaScriptの世界で非常に人気があります。Quarkusは、Reactive Routesを使用する可能性も提供しています。ルートのみでREST APIを実装することもできますし、JAX-RSリソースやサーブレットと組み合わせて実装することもできます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:16
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "このガイドで紹介するコードは、この{quickstarts-base-url}[GitHub リポジトリ]の{quickstarts-tree-url}/reactive-routes-quickstart[ `reactive-routes-quickstart` ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:17
#, no-wrap
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:24
msgid "Before going further, let's have a look at the HTTP layer of Quarkus.  Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).  All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.  Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).  Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr "先に進む前に、QuarkusのHTTPレイヤーを見てみましょう。QuarkusのHTTPサポートは、ノンブロッキングでリアクティブなエンジン(Eclipse Vert.xとNetty)に基づいています。アプリケーションが受け取るすべてのHTTPリクエストは、 _イベントループ_ (I/Oスレッド)によって処理され、リクエストを管理するコードに向かってルーティングされます。宛先に応じて、ワーカースレッド(Servlet、Jax-RS)でリクエストを管理するコードを呼び出すか、IOスレッド(Reactive Routes)を使用します。このため、Reactive Routesはノンブロッキングであるか、そのブロッキング性を明示的に宣言しなければならないことに注意してください (ワーカースレッド上で呼び出されることで結果的にブロッキングされます)。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:26
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=Quarkus HTTP Architecture]"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:28
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "このトピックの詳細については、xref:quarkus-reactive-architecture.adoc[Quarkus リアクティブアーキテクチャのドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:30
#, no-wrap
msgid "Declaring reactive routes"
msgstr "Reactive Routesの宣言"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:34
msgid "The first way to use reactive routes is to use the `@Route` annotation.  To have access to this annotation, you need to add the `quarkus-vertx-web` extension:"
msgstr "Reactive Routesを使用する最初の方法は、 `@Route` アノテーションを使用することです。このアノテーションにアクセスするには、 `quarkus-vertx-web` エクステンションを追加する必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:36
msgid "In your `pom.xml` file, add:"
msgstr "`pom.xml` ファイルに以下を追加します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:43
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx-web</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:46
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:50
#: upstream/_versions/2.2/guides/reactive-routes.adoc:622
#, no-wrap
msgid "package org.acme.reactive.routes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:55
#, no-wrap
msgid ""
"import io.quarkus.vertx.web.Route;\n"
"import io.quarkus.vertx.web.Route.HttpMethod;\n"
"import io.quarkus.vertx.web.RoutingExchange;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:57
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:60
#, no-wrap
msgid ""
"@ApplicationScoped // <1>\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:66
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET) // <2>\n"
"    void hello(RoutingContext rc) { // <3>\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:71
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() { // <4>\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:77
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = Route.HttpMethod.GET)\n"
"    void greetings(RoutingExchange ex) { // <5>\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:79
msgid "If there is a reactive route found on a class with no scope annotation then `@javax.inject.Singleton` is added automatically."
msgstr "スコープアノテーションがないクラスでリアクティブルートが見つかった場合、`@javax.inject.Singleton` が自動的に追加されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:80
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr "`@Route` アノテーションは、メソッドがリアクティブルートであることを示します。繰り返しになりますが、デフォルトでは、メソッドに含まれるコードはブロックしてはいけません。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:81
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "このメソッドは、 https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] をパラメーターとして取得します。 `RoutingContext` から HTTP リクエストを ( `request()` を使用して) 取得し、 `response().end(...)` を使用してレスポンスを書き込むことができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:82
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:83
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr "`RoutingExchange` は、いくつかの便利なメソッドを提供する `RoutingContext` の便利なラッパーです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:85
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "`RoutingContext` の使用の詳細については、 https://vertx.io/docs/vertx-web/java/[Vert.x Web ドキュメント] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:87
msgid "The `@Route` annotation allows you to configure:"
msgstr "`@Route` アノテーションを使用すると、以下を設定できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:89
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr "`path`- https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web フォーマット] を使用したパスによるルーティング用"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:90
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr "`regex` - 正規表現を使用したルーティングについては、 https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[詳細] を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:91
msgid "The `methods` - the HTTP verb triggering the route such as `GET`, `POST`..."
msgstr "`methods` - `GET`、`POST` などのルートをトリガーする HTTP メソッド"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:92
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr "`type` - _normal_ (ノンブロッキング)、_blocking_ (ワーカスレッドにディスパッチされるメソッド)、あるいは _failure_ で、失敗時にこのルートが呼び出されることを示します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:94
msgid "The `order` - the order of the route when several routes are involved in handling the incoming request.  Must be positive for regular user routes."
msgstr "`order` - 受信リクエストの処理に複数のルートが関与している場合のルートの順序。通常のユーザールートでは正である必要があります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:95
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "`produces` と `consumes` を使用して生成および消費された mime タイプ。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:97
msgid "For instance, you can declare a blocking route as follows:"
msgstr "たとえば、次のようにブロッキングルートを宣言できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:104
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\", type = Route.HandlerType.BLOCKING)\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.2/guides/reactive-routes.adoc:109
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "または、`@io.smallrye.common.annotation.Blocking` を使用して、`type = Route.HandlerType.BLOCKING` を省略できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:116
#, no-wrap
msgid ""
"@Route(methods = HttpMethod.POST, path = \"/post\")\n"
"@Blocking\n"
"public void blocking(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:118
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr "`@Blocking` が使用されている場合、`@Route` の `type` 属性は無視されます。"

#. type: delimited block =
#: upstream/_versions/2.2/guides/reactive-routes.adoc:121
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr "`@Route` アノテーションは繰り返し可能であるため、1 つのメソッドに対して複数のルートを宣言できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:129
#, no-wrap
msgid ""
"@Route(path = \"/first\") <1>\n"
"@Route(path = \"/second\")\n"
"public void route(RoutingContext rc) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:131
msgid "Each route can use different paths, methods..."
msgstr "各ルートは、異なるパスやメソッドなどを使用できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:133
msgid "If no content-type header is set then we will try to use the most acceptable content type as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "content-type ヘッダーが設定されていない場合は、`io.vertx.ext.web.RoutingContext.getAcceptableContentType()` で定義されている最も受け入れやすいコンテンツタイプの使用を試みます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:140
#, no-wrap
msgid ""
"@Route(path = \"/person\", produces = \"text/html\") <1>\n"
"String person() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:142
msgid "If the `accept` header matches `text/html` we set the content type automatically."
msgstr "`accept` ヘッダーが `text/html` と一致する場合、コンテンツタイプを自動的に設定します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:143
#, no-wrap
msgid "Handling conflicting routes"
msgstr "競合するルートの処理"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:147
msgid "You may end up with multiple routes matching a given path.  In the following example, both route matches `/accounts/me`:"
msgstr "特定のパスに複数のルートが一致する場合があります。次の例では、両方のルートが `/accounts/me` に一致しています。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:154
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:159
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:163
msgid "As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.  To avoid the conflict, use the `order` attribute:"
msgstr "その結果、パスパラメーター `id` が `me` に設定された状態で最初のルートが呼び出されます。競合を回避するには、`order` 属性を使用します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:170
#, no-wrap
msgid ""
"@Route(path = \"/accounts/:id\", methods = HttpMethod.GET, order = 2)\n"
"void getAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:175
#, no-wrap
msgid ""
"@Route(path = \"/accounts/me\", methods = HttpMethod.GET, order = 1)\n"
"void getCurrentUserAccount(RoutingContext ctx) {\n"
"  ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:179
msgid "By giving a lower order to the second route, it gets evaluated first.  If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr "2 番目のルートに低い順序を与えることで、それが最初に評価されます。リクエストパスが一致する場合は呼び出され、一致しない場合は他のルートが評価されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:180
#, no-wrap
msgid "`@RouteBase`"
msgstr "`@RouteBase`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:183
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "このアノテーションを使用して、クラスで宣言されたReactive Routesのデフォルトを設定できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:188
#, no-wrap
msgid ""
"@RouteBase(path = \"simple\", produces = \"text/plain\") <1> <2>\n"
"public class SimpleRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:194
#, no-wrap
msgid ""
"    @Route(path = \"ping\") // the final path is /simple/ping\n"
"    void ping(RoutingContext rc) {\n"
"        rc.response().end(\"pong\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:196
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr "`path` 値は、`Route#path()` が使用されるクラスで宣言されたルートメソッドの接頭辞として使用されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:197
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr "`produces()` の値は、 `Route#produces()` が空のすべてのルートで、コンテンツベースのルーティングに使用されます。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:199
#, no-wrap
msgid "Reactive Route Methods"
msgstr "Reactive Routesメソッド"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:204
msgid "A route method must be a non-private non-static method of a CDI bean.  If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.  If the annotated method does not return `void` then the arguments are optional."
msgstr "ルートメソッドは、CDIBean の非プライベート非静的メソッドでなければなりません。アノテーションされたメソッドが `void` を返す場合は、少なくとも 1 つの引数を受け入れる必要があります。以下はサポート対象のタイプです。アノテーションされたメソッドが `void` を返さない場合、引数はオプションになります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:207
msgid "Methods that return `void` must __end__ the response or the HTTP request to this route will never end.  Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr "`void` を返すメソッドは、このルートへの応答または HTTP リクエストを __終了__ する必要があります。`RoutingExchange` のメソッドの中には、それを行うものとそうでないものがあり、レスポンスの `end ()` メソッドを自分で呼び出す必要があります。詳細については、JavaDoc を参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:209
msgid "A route method can accept arguments of the following types:"
msgstr "ルートメソッドは、次のタイプの引数を受け取ることができます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:211
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr "`io.vertx.ext.web.RoutingContext`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:212
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr "`io.quarkus.vertx.web.RoutingExchange`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:213
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:214
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:215
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr "`io.vertx.mutiny.core.http.HttpServerRequest`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:216
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr "`io.vertx.mutiny.core.http.HttpServerResponse`"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:218
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into a method parameter annotated with `@io.quarkus.vertx.web.Param`:"
msgstr "さらに、`HttpServerRequest` パラメーターを `@io.quarkus.vertx.web.Param` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:221
#: upstream/_versions/2.2/guides/reactive-routes.adoc:241
#: upstream/_versions/2.2/guides/reactive-routes.adoc:261
#, no-wrap
msgid "Parameter Type"
msgstr "パラメータータイプ"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:223
#: upstream/_versions/2.2/guides/reactive-routes.adoc:243
#: upstream/_versions/2.2/guides/reactive-routes.adoc:263
#, no-wrap
msgid ""
"Obtained via  \n"
"//-------------"
msgstr ""
"Obtained via  \n"
"//-------------"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:223
#: upstream/_versions/2.2/guides/reactive-routes.adoc:243
#: upstream/_versions/2.2/guides/reactive-routes.adoc:263
#, no-wrap
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:224
#: upstream/_versions/2.2/guides/reactive-routes.adoc:225
#, no-wrap
msgid "`routingContext.request().getParam()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:224
#: upstream/_versions/2.2/guides/reactive-routes.adoc:244
#, no-wrap
msgid "`java.util.Optional<String>`"
msgstr "`java.util.Optional<String>`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:225
#: upstream/_versions/2.2/guides/reactive-routes.adoc:245
#, no-wrap
msgid "`java.util.List<String>`"
msgstr "`java.util.List<String>`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:226
#, no-wrap
msgid "`routingContext.request().params().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Block title
#: upstream/_versions/2.2/guides/reactive-routes.adoc:228
#, no-wrap
msgid "Request Parameter Example"
msgstr "リクエストパラメーターの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:235
#, no-wrap
msgid ""
"@Route\n"
"String hello(@Param Optional<String> name) {\n"
"   return \"Hello \" + name.orElse(\"world\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:238
msgid "The `HttpServerRequest` headers can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Header`:"
msgstr "`HttpServerRequest` ヘッダーは、`@io.quarkus.vertx.web.Header` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:244
#: upstream/_versions/2.2/guides/reactive-routes.adoc:245
#, no-wrap
msgid "`routingContext.request().getHeader()`"
msgstr "`routingContext.request().getHeader()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:246
#, no-wrap
msgid "`routingContext.request().headers().getAll()`"
msgstr "`routingContext.request().headers().getAll()`"

#. type: Block title
#: upstream/_versions/2.2/guides/reactive-routes.adoc:248
#, no-wrap
msgid "Request Header Example"
msgstr "リクエストヘッダーの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:255
#, no-wrap
msgid ""
"@Route\n"
"String helloFromHeader(@Header(\"My-Header\") String header) {\n"
"   return header;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:258
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body`."
msgstr "リクエストボディは、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:264
#, no-wrap
msgid "`routingContext.getBodyAsString()`"
msgstr "`routingContext.getBodyAsString()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:264
#, no-wrap
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:265
#, no-wrap
msgid "`routingContext.getBody()`"
msgstr "`routingContext.getBody()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:265
#, no-wrap
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:266
#, no-wrap
msgid "`routingContext.getBodyAsJson()`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:266
#, no-wrap
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:267
#, no-wrap
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr "`routingContext.getBodyAsJsonArray()`"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:267
#, no-wrap
msgid "any other type"
msgstr "他の型"

#. type: Table
#: upstream/_versions/2.2/guides/reactive-routes.adoc:268
#, no-wrap
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"

#. type: Block title
#: upstream/_versions/2.2/guides/reactive-routes.adoc:270
#, no-wrap
msgid "Request Body Example"
msgstr "リクエストボディの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:278
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body Person person, @Param(\"id\") Optional<String> primaryKey) {\n"
"  person.setId(primaryKey.map(Integer::valueOf).orElse(42));\n"
"  return person;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:282
msgid "A failure handler can declare a single method parameter whose type extends `Throwable`.  The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr "失敗ハンドラーは、タイプが `Throwable` を拡張する単一のメソッドパラメーターを宣言できます。パラメーターのタイプは、 `RoutingContext#failure()` の結果と一致させるために使用されます。"

#. type: Block title
#: upstream/_versions/2.2/guides/reactive-routes.adoc:283
#, no-wrap
msgid "Failure Handler Example"
msgstr "失敗ハンドラーの例"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:290
#, no-wrap
msgid ""
"@Route(type = HandlerType.FAILURE)\n"
"void unsupported(UnsupportedOperationException e, HttpServerResponse response) {\n"
"  response.setStatusCode(501).end(e.getMessage());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:292
#, no-wrap
msgid "Returning Unis"
msgstr "Uni を返す"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:295
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "Reactive Routesでは、`Uni` を直接返すことができます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:302
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Uni<String> hello(RoutingContext context) {\n"
"    return Uni.createFrom().item(\"Hello world!\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:307
#, no-wrap
msgid ""
"@Route(path = \"/person\")\n"
"Uni<Person> getPerson(RoutingContext context) {\n"
"    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:310
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "リアクティブクライアントを使用している場合、`Unis` を返すと便利です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:317
#, no-wrap
msgid ""
"@Route(path = \"/mail\")\n"
"Uni<Void> sendEmail(RoutingContext context) {\n"
"    return mailer.send(...);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:320
msgid "The item produced by the returned `Uni` can be:"
msgstr "返された `Uni` によって生成されるアイテムは以下のとおりです。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:322
#: upstream/_versions/2.2/guides/reactive-routes.adoc:348
msgid "a string - written into the HTTP response directly"
msgstr "文字列 - HTTP レスポンスに直接書き込まれます"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:323
#: upstream/_versions/2.2/guides/reactive-routes.adoc:349
msgid "a buffer - written into the HTTP response directly"
msgstr "バッファー - HTTP レスポンスに直接書き込まれます"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:325
#: upstream/_versions/2.2/guides/reactive-routes.adoc:351
msgid "an object - written into the HTTP response after having been encoded into JSON.  The `content-type` header is set to `application/json` if not already set."
msgstr "オブジェクト - JSON にエンコードされた後に HTTP レスポンスに書き込まれます。まだ設定されていない場合、`content-type` ヘッダーは `application/json` に設定されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:327
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "返された `Uni` が失敗した場合 (または `null` の場合)、HTTP 500 レスポンスが書き込まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:329
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "`Uni<Void>` を返すと 204 レスポンス (コンテンツなし) が生成されます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:330
#, no-wrap
msgid "Returning results"
msgstr "結果を返す"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:333
msgid "You can also return a result directly:"
msgstr "結果を直接返すこともできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:340
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"String helloSync(RoutingContext context) {\n"
"    return \"Hello world\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:344
msgid "Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.  Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr "Reactive Routesは IO スレッドで呼び出されるため、処理は **非ブロッキング** である必要があることに注意してください。それ以外の場合は、`@Route` アノテーションの `type` 属性を `Route.HandlerType.BLOCKING` に設定するか、`@io.smallrye.common.annotation.Blocking` アノテーションを使用します。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:346
#: upstream/_versions/2.2/guides/reactive-routes.adoc:368
msgid "The method can return:"
msgstr "メソッドは以下を返すことができます。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:352
#, no-wrap
msgid "Returning Multis"
msgstr "Multi を返す"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:357
msgid "A reactive route can return a `Multi`.  The items are written one by one, in the response.  The response `Transfer-Encoding` header is set to `chunked`."
msgstr "Reactive Routesは `Multi` を返すことができます。レスポンスでは、項目が 1 つずつ書き込まれます。レスポンスの  `Transfer-Encoding` ヘッダーは `chunked` に設定されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:364
#, no-wrap
msgid ""
"@Route(path = \"/hello\")\n"
"Multi<String> hellos(RoutingContext context) {\n"
"    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:366
msgid "Produces `helloworld!`"
msgstr "`helloworld!` の生成"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:370
msgid "a `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "`Multi<String>` - アイテムはレスポンスに 1 つずつ (_チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:371
msgid "a `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "`Multi<Buffer>` - バッファーは処理なしで 1 つずつ (_チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:372
msgid "a `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "`Multi<Object>` - アイテムは、レスポンスに 1 つずつ書き込まれる JSON にエンコードされます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:383
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:386
#: upstream/_versions/2.2/guides/reactive-routes.adoc:414
msgid "The previous snippet produces:"
msgstr "前のスニペットは以下を生成します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:392
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:394
#, no-wrap
msgid "Streaming JSON Array items"
msgstr "JSON 配列アイテムのストリーミング"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:411
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonArray(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:422
#, no-wrap
msgid ""
"[\n"
"  {\"name\":\"superman\", \"id\": 1} // chunk 1\n"
"  ,{\"name\":\"batman\", \"id\": 2} // chunk 2\n"
"  ,{\"name\":\"spiderman\", \"id\": 3} // chunk 3\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:428
msgid "Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.  Using a `Multi<Void>` produces an empty array.  You cannot use `Multi<Buffer>`.  If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr "`Multi<String>`、`Multi<Object>`、`Multi<Void>` のみ JSON 配列に書き込むことができます。`Multi<Void>` を使用すると空の配列が生成されます。`Multi<Buffer>` は使用できません。`Buffer` を使用する必要がある場合は、最初にコンテンツを JSON または文字列表現に変換します。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:429
#, no-wrap
msgid "Event Stream and Server-Sent Event support"
msgstr "イベントストリームとサーバー送信イベントのサポート"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:443
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asEventStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:446
#: upstream/_versions/2.2/guides/reactive-routes.adoc:526
msgid "This method would produce:"
msgstr "この方法では、以下が生成されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:451
#, no-wrap
msgid ""
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 0\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:454
#, no-wrap
msgid ""
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:457
#, no-wrap
msgid ""
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:461
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "`io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` インターフェイスを実装して、サーバー送信イベントの `event` および `id` セクションをカスタマイズすることもできます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:467
#, no-wrap
msgid ""
"class PersonEvent implements ReactiveRoutes.ServerSentEvent<Person> {\n"
"    public String name;\n"
"    public int id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:472
#, no-wrap
msgid ""
"    public PersonEvent(String name, int id) {\n"
"        this.name = name;\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:477
#, no-wrap
msgid ""
"    @Override\n"
"    public Person data() {\n"
"        return new Person(name, id); // Will be JSON encoded\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:482
#, no-wrap
msgid ""
"    @Override\n"
"    public long id() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:488
#, no-wrap
msgid ""
"    @Override\n"
"    public String event() {\n"
"        return \"person\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:497
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"superman\", \"id\": 1}\n"
"id: 1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:501
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"batman\", \"id\": 2}\n"
"id: 2\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:505
#, no-wrap
msgid ""
"event: person\n"
"data: {\"name\":\"spiderman\", \"id\": 3}\n"
"id: 3\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:508
#, no-wrap
msgid "Json Stream in NDJSON format"
msgstr "NDJSON 形式の Json ストリーム"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:523
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            new Person(\"superman\", 1),\n"
"            new Person(\"batman\", 2),\n"
"            new Person(\"spiderman\", 3)\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:532
#, no-wrap
msgid ""
"{\"name\":\"superman\", \"id\": 1}\n"
"{\"name\":\"batman\", \"id\": 2}\n"
"{\"name\":\"spiderman\", \"id\": 3}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:536
msgid "You can also provide strings instead of Objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "オブジェクトの代わりに文字列を指定することもできます。その場合、文字列を引用符で囲うことで、有効な JSON 値になります。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:547
#, no-wrap
msgid ""
"@Route(path = \"/people\")\n"
"Multi<Person> people(RoutingContext context) {\n"
"    return ReactiveRoutes.asJsonStream(Multi.createFrom().items(\n"
"            \"superman\",\n"
"            \"batman\",\n"
"            \"spiderman\"\n"
"            ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:554
#, no-wrap
msgid ""
"\"superman\"\n"
"\"batman\"\n"
"\"spiderman\"\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:557
#, no-wrap
msgid "Using Bean Validation"
msgstr "Bean バリデーションの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:562
msgid "You can combine reactive routes and Bean Validation.  First, don't forget to add the `quarkus-hibernate-validator` extension to your project.  Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr "Reactive Routesと Bean バリデーションを組み合わせることができます。まず、プロジェクトに `quarkus-hibernate-validator` エクステンションを必ず追加してください。次に、ルートパラメーターに制約を追加できます (`@Param` または `@Body` でアノテーションされます)。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:569
#, no-wrap
msgid ""
"@Route(produces = \"application/json\")\n"
"Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:573
msgid "If the parameters do not pass the tests, it returns an HTTP 400 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "パラメーターがテストに合格しなかった場合、HTTP 400 レスポンスを返します。リクエストが JSON ペイロードを受け入れる場合、レスポンスは https://opensource.zalando.com/problem/constraint-violation/[問題] のとおりの形式になります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:575
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "オブジェクトまたは `Uni` を返す場合、`@Valid` アノテーションも使用できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:582
#, no-wrap
msgid ""
"@Route(...)\n"
"@Valid Uni<Person> createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:586
msgid "If the item produced by the route does not pass the validation, it returns a HTTP 500 response.  If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "ルートによって生成されたアイテムがバリデーションに合格しない場合、HTTP 500 レスポンスを返します。リクエストが JSON ペイロードを受け入れる場合、レスポンスは https://opensource.zalando.com/problem/constraint-violation/[問題] のとおりの形式になります。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:590
msgid "Note that only `@Valid` is supported on the return type.  The returned class can use any constraint.  In the case of `Uni`, it checks the item produced asynchronously."
msgstr "リターンタイプでは `@Valid` のみがサポートされていることに注意してください。返されるクラスは任意の制約を使用できます。`Uni` の場合、非同期で生成されたアイテムをチェックします。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:591
#, no-wrap
msgid "Using the Vert.x Web Router"
msgstr "Vert.x Web ルーターの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:595
msgid "You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.  To retrieve the `Router` instance at startup:"
msgstr "ルートを `Router` オブジェクトに直接登録することにより、ルートを _HTTP ルーティングレイヤー_ に直接登録することもできます。起動時に `Router` インスタンスを取得するには、以下を実行します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:601
#, no-wrap
msgid ""
"public void init(@Observes Router router) {\n"
"    router.get(\"/my-route\").handler(rc -> rc.response().end(\"Hello from my route\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:604
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "ルート登録、オプション、および使用可能なハンドラーの詳細については、 https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web ドキュメント] を確認してください。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:612
#, no-wrap
msgid "Intercepting HTTP requests"
msgstr "HTTP リクエストのインターセプト"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:616
msgid "You can also register filters that would intercept incoming HTTP requests.  Note that these filters are also applied for servlets, JAX-RS resources, and reactive routes."
msgstr "受信 HTTP リクエストをインターセプトするフィルターを登録することもできます。これらのフィルターは、サーブレット、JAX-RS リソース、およびReactive Routesにも適用されることに注意してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:618
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "たとえば、次のコードスニペットは、HTTP ヘッダーを追加するフィルターを登録します。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:624
#, no-wrap
msgid "import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:626
#, no-wrap
msgid "public class MyFilters {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:633
#, no-wrap
msgid ""
"    @RouteFilter(100) <1>\n"
"    void myFilter(RoutingContext rc) {\n"
"       rc.response().putHeader(\"X-Header\", \"intercepting the request\");\n"
"       rc.next(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:636
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr "`RouteFilter#value()` は、フィルターの並べ替えに使用される優先度を定義します。優先度の高いフィルターが先に呼び出されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:637
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "フィルターが `next()`メソッドを呼び出さなければ、チェーンを継続できない可能性があります。"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:638
#, no-wrap
msgid "Adding OpenAPI and Swagger UI"
msgstr "OpenAPI と Swagger UI の追加"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:641
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "`quarkus-smallrye-openapi` エクステンションを使用してlink:https://www.openapis.org/[OpenAPI] および link:https://swagger.io/tools/swagger-ui/[Swagger UI] のサポートを追加できます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:643
msgid "Add the extension by running this command:"
msgstr "このコマンドを実行してエクステンションを追加"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:647
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:650
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:657
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:660
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "これだけで、Vert.x ルートから基本的な OpenAPI スキーマドキュメントを生成できます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:664
#, no-wrap
msgid "curl http://localhost:8080/q/openapi\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:667
msgid "You will see the generated OpenAPI schema document:"
msgstr "生成された OpenAPI スキーマドキュメントが表示されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:670
#: upstream/_versions/2.2/guides/reactive-routes.adoc:751
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:695
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Generated API\n"
"  version: \"1.0\"\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"204\":\n"
"          description: No Content\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:698
msgid "Also see link:openapi-swaggerui[the OpenAPI Guide]."
msgstr "link:openapi-swaggerui[OpenAPIガイド] も参照してください。"

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:699
#, no-wrap
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPIアノテーションの追加"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:703
msgid "You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, example, adding header info, or specifying the return type on `void` methods might be usefull :"
msgstr "link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI ] を使用してスキーマをより良くドキュメント化することができます。例えば、ヘッダ情報を追加したり、 `void` メソッドでリターンタイプを指定したりすると便利です。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:720
#, no-wrap
msgid ""
"@OpenAPIDefinition( // <1>\n"
"    info = @Info(\n"
"        title=\"Greeting API\",\n"
"        version = \"1.0.1\",\n"
"        contact = @Contact(\n"
"            name = \"Greeting API Support\",\n"
"            url = \"http://exampleurl.com/contact\",\n"
"            email = \"techsupport@example.com\"),\n"
"        license = @License(\n"
"            name = \"Apache 2.0\",\n"
"            url = \"https://www.apache.org/licenses/LICENSE-2.0.html\"))\n"
")\n"
"@ApplicationScoped\n"
"public class MyDeclarativeRoutes {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:729
#, no-wrap
msgid ""
"    // neither path nor regex is set - match a path derived from the method name\n"
"    @Route(methods = Route.HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Say hello\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING))) // <2>\n"
"    void hello(RoutingContext rc) {\n"
"        rc.response().end(\"hello\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:734
#, no-wrap
msgid ""
"    @Route(path = \"/world\") \n"
"    String helloWorld() {\n"
"        return \"Hello world!\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:743
#, no-wrap
msgid ""
"    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n"
"    @APIResponse(responseCode=\"200\", \n"
"            description=\"Greeting\", \n"
"            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n"
"    void greetings(RoutingExchange ex) {\n"
"        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:745
msgid "Header information about your API."
msgstr "APIに関するヘッダー情報"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:746
msgid "Defining the response"
msgstr "レスポンスの定義"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:748
msgid "This will generate this OpenAPI schema:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: delimited block -
#: upstream/_versions/2.2/guides/reactive-routes.adoc:791
#, no-wrap
msgid ""
"openapi: 3.0.3\n"
"info:\n"
"  title: Greeting API\n"
"  contact:\n"
"    name: Greeting API Support\n"
"    url: http://exampleurl.com/contact\n"
"    email: techsupport@example.com\n"
"  license:\n"
"    name: Apache 2.0\n"
"    url: https://www.apache.org/licenses/LICENSE-2.0.html\n"
"  version: 1.0.1\n"
"paths:\n"
"  /greetings:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Greeting\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /hello:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: Say hello\n"
"          content:\n"
"            application/json:\n"
"              schema:\n"
"                type: string\n"
"  /world:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.2/guides/reactive-routes.adoc:793
#, no-wrap
msgid "Using Swagger UI"
msgstr "Swagger UIの使用"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:797
msgid "Swagger UI is included by default when running in `dev` or `test` mode, and can optionally added to `prod` mode.  See <<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> Guide for more details."
msgstr "Swagger UIは、 `dev` または `test` モードで実行しているときにデフォルトで含まれており、オプションで `prod` モードに追加することができます。詳細については、<<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> ガイドを参照してください。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:799
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and you will see the Swagger UI screen:"
msgstr "link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] に移動すると、Swagger UIの画面が表示されます。"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:801
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_versions/2.2/guides/reactive-routes.adoc:802
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/2.2/guides/reactive-routes.adoc:805
msgid "This guide has introduced how you can use reactive routes to define an HTTP endpoint.  It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr "このガイドでは、Reactive Routesを使用してHTTPエンドポイントを定義する方法を紹介してきました。また、Quarkus HTTPレイヤーの構造とフィルターの書き方についても説明しました。"
