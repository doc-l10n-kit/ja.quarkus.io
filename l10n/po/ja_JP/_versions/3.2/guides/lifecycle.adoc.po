msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/3.2/guides/lifecycle.adoc:6
msgid "Application Initialization and Termination"
msgstr "アプリケーションの初期化と終了"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:11
msgid ""
"You often need to execute custom actions when the application starts and clean up everything when the application stops.\n"
"This guide explains how to:"
msgstr "アプリケーションの起動時にカスタムアクションを実行し、アプリケーションの停止時にすべてをクリーンアップする必要があることがよくあります。このガイドでは、以下の方法を説明します:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:14
msgid "Write a Quarkus application with a main method"
msgstr "メインメソッドでQuarkusアプリケーションを書く"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:15
msgid "Write command mode applications that run a task and then terminate"
msgstr "タスクを実行して終了するコマンドモードのアプリケーションを書く"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:16
msgid "Be notified when the application starts"
msgstr "アプリケーションの開始時に通知される"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:17
msgid "Be notified when the application stops"
msgstr "アプリケーションが停止したときに通知される"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:19
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:21
msgid "link:{includes}/prerequisites.adoc[role=include]"
msgstr "link:{includes}/prerequisites.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:23
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:25
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:28
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:30
#, fuzzy
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr "ソリューションは `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:32
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:34
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:37
msgid "link:{includes}/devtools/create-app.adoc[role=include]"
msgstr "link:{includes}/devtools/create-app.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:39
msgid "It generates:"
msgstr "以下が生成されます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:41
msgid "the Maven structure"
msgstr "Mavenの構造"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:42
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "`native`  と `jvm`  の両方のモードに対応した `Dockerfile`  ファイルの例"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:43
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:45
msgid "The main method"
msgstr "メインメソッド"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:47
msgid ""
"By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for\n"
"shutdown to be initiated. Let's provide our own main method:"
msgstr "デフォルトでは、Quarkusは自動的にメインメソッドを生成し、Quarkusをブートストラップして、シャットダウンが開始されるのを待ちます。独自のメインメソッドを用意しましょう:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:65
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr "このアノテーションは、設定でオーバーライドされない限り、これをメインのメソッドとして使用するようQuarkusに指示します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:66
msgid "This launches Quarkus"
msgstr "これによりQuarkusが起動します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:68
msgid ""
"This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically\n"
"generated main class, but has the advantage that you can just launch it directly from the IDE without needing\n"
"to run a Maven or Gradle command."
msgstr "このメインクラスはQuarkusを起動し、停止するまで実行します。これは自動生成されたメインクラスと変わりませんが、MavenやGradleのコマンドを実行する必要がなく、IDEから直接起動するだけで済むという利点があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:72
msgid ""
"It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet,\n"
"and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication`\n"
"as described below."
msgstr "まだQuarkusが設定されておらず、Quarkusは別のClassLoaderで動作する可能性があるため、このメインメソッドでビジネスロジックを行うことは推奨されていません。起動時にロジックを実行したい場合は、以下のように `io.quarkus.runtime.QuarkusApplication`  を使用してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:76
#, fuzzy
msgid ""
"If we want to actually perform business logic on startup (or write applications that complete a task and then exit)\n"
"we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started\n"
"the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr "起動時に実際にビジネスロジックを実行したい場合（またはタスクを完了してから終了するアプリケーションを作成したい場合）は、 `io.quarkus.runtime.QuarkusApplication` クラスを run メソッドに指定する必要があります。Quarkusの起動後、アプリケーションの `run` メソッドが呼び出されます。このメソッドが返されると、Quarkusアプリケーションは終了します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:80
msgid ""
"If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown\n"
"is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr "起動時にロジックを実行したい場合は、 `Quarkus.waitForExit()`  を呼び出す必要があります。このメソッドは、シャットダウンが要求されるまで待機します( `Ctrl+C`  を押したときのような外部シグナルや、スレッドが `Quarkus.asyncExit()`  を呼び出したときのような外部シグナルのいずれか)。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:83
msgid "An example of what this looks like is below:"
msgstr "その一例が以下のようなものです:"

#. type: Title ===
#: upstream/_versions/3.2/guides/lifecycle.adoc:111
msgid "Injecting the command line arguments"
msgstr "コマンドライン引数の注入"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:113
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr "コマンドラインで渡された引数を注入することができます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:122
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr "コマンドライン引数は、プロパティ `quarkus.args` で `-D` フラグを介してアプリケーションに渡すことができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:128
msgid "For Quarkus dev mode:"
msgstr "Quarkus開発モードの場合:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:130
#, fuzzy
msgid "link:{includes}/devtools/dev-parameters.adoc[role=include]"
msgstr "{includes}/devtools/dev-parameters.adoc"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:132
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr "runner jarの場合: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:133
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr "ネイティブ実行可能ファイルの場合: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:138
msgid "Listening for startup and shutdown events"
msgstr "スタートアップとシャットダウンのイベントをリッスンする"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:140
msgid ""
"Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the\n"
"following content:"
msgstr "`org.acme.lifecycle`  パッケージ内に `AppLifecycleBean`  という名前の新しいクラスを作成し(または別の名前を選び)、以下の内容をコピーします。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:169
msgid "Method called when the application is starting"
msgstr "アプリケーションの起動時に呼び出されるメソッド"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:170
msgid "Method called when the application is terminating"
msgstr "アプリケーションの終了時に呼び出されるメソッド"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:172
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr "また、各再配置の間に _devモード_ でイベントが呼び出されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:174
#, fuzzy
msgid "The methods can access injected beans. Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr "メソッドは，注入されたBeanにアクセスできる。詳細は link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] クラスを確認すること。"

#. type: Title ===
#: upstream/_versions/3.2/guides/lifecycle.adoc:176
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr "`@Initialized(ApplicationScoped.class)`  との違いは? `@Destroyed(ApplicationScoped.class)`"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:178
msgid ""
"In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.\n"
"For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.\n"
"See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr "JVMモードでは、 `StartupEvent` が常に `@Initialized(ApplicationScoped.class)` の *後に* 起動され、 `ShutdownEvent` が `@Destroyed(ApplicationScoped.class)` の *前に* 起動されることを除けば、実質的な違いはありません。しかし、ネイティブの実行形式のビルドでは、 `@Initialized(ApplicationScoped.class)` は *ネイティブのビルドプロセスの一部* として起動され、 `StartupEvent` はネイティブイメージが実行されるときに起動されます。詳細は、link:writing-extensions.html#bootstrap-three-phases[ブートストラップの 3 つのフェーズと Quarkus 哲学] を参照してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:182
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr "CDIアプリケーションでは、アプリケーションコンテキストが初期化されたときに、Qualifier `@Initialized(ApplicationScoped.class)` のイベントが発生します。詳しくは link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[仕様, window=_blank]をご覧ください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/lifecycle.adoc:185
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr "`@Startup`  を使用して、アプリケーション起動時に CDI Bean を初期化する"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:187
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr "`@Startup`  でアノテーションされたクラス、プロデューサメソッド、フィールドで表現されたBeanは、アプリケーションの起動時に初期化されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:206
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "`@Startup`  でアノテーションされた各Beanに対して、 `StartupEvent`  の合成オブザーバが生成されます。デフォルトの優先度が使用されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:207
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "Beanのコンストラクタは、アプリケーションの起動時に呼び出され、結果として得られるコンテキストインスタンスがアプリケーションのコンテキストに格納されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:209
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr "`@Dependent` Beanは、 `@Dependent`  Beanに宣言されたオブザーバーの行動に従うために、その後すぐに破壊されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:211
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr "クラスが `@Startup`  でアノテーションされていて、スコープのアノテーションがない場合は、 `@ApplicationScoped`  が自動的に追加されます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:213
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:215
msgid "Run the application with:"
msgstr "アプリケーションを実行します:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:217
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:219
msgid ""
"The logged message is printed.\n"
"When the application is stopped, the second log message is printed."
msgstr "ログメッセージが表示されます。アプリケーションが停止すると、2つ目のログメッセージが印刷されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:222
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化できます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:224
msgid "link:{includes}/devtools/build.adoc[role=include]"
msgstr "link:{includes}/devtools/build.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:226
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のように実行します `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:228
msgid "You can also generate the native executable using:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:230
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:232
msgid "Launch Modes"
msgstr "起動モード"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:234
msgid ""
"Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev`\n"
"then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr "Quarkusには3種類の起動モードがあります。 `NORMAL`  (つまりプロダクション)、 `DEVELOPMENT`  、 `TEST`  です。 `quarkus:dev`  を実行している場合は `DEVELOPMENT`  、JUnit テストを実行している場合は `TEST`  、それ以外の場合は `NORMAL`  となります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:237
msgid ""
"Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean,\n"
"or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr "アプリケーションは、 `io.quarkus.runtime.LaunchMode`  enum を CDI Beanに注入するか、静的メソッド `io.quarkus.runtime.LaunchMode.current()`  を呼び出すことで起動モードを取得できます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/lifecycle.adoc:240
msgid "Graceful Shutdown"
msgstr "グレースフルシャットダウン"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:242
msgid ""
"Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up\n"
"till a set timeout. By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout`\n"
"config property. When this is set shutdown will not happen until all running requests have completed, or until\n"
"this timeout has elapsed. This config property is a duration, and can be set using the standard\n"
"`java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr "Quarkusはグレースフルシャットダウンをサポートします。Quarkusは、設定されたタイムアウトまで、実行中のリクエストが終了するのを待つことができます。デフォルトでは無効になっていますが、 `quarkus.shutdown.timeout` 設定プロパティを設定することで設定可能です。このプロパティを設定すると、実行中のリクエストがすべて完了するか、タイムアウトが経過するまでシャットダウンは行われません。このプロパティは継続時間であり、標準の `java.time.Duration` 形式で設定できます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/lifecycle.adoc:248
msgid ""
"Extensions that accept requests need to add support for this on an individual basis. At the moment only the\n"
"HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr "リクエストを受け付けるエクステンションは、個別にサポートを追加する必要があります。現時点では HTTP エクステンションだけがこれをサポートしているので、メッセージングリクエストがアクティブなときにシャットダウンが発生する可能性があります。"
