msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/3.2/guides/building-native-image.adoc:6
msgid "Building a Native Executable"
msgstr "ネイティブ実行可能ファイルのビルド"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:11
msgid "This guide covers:"
msgstr "このガイドでは以下をカバーしています:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:13
msgid "Compiling the application to a native executable"
msgstr "アプリケーションをネイティブ実行可能ファイルにコンパイル"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:14
msgid "Packaging the native executable in a container"
msgstr "ネイティブ実行可能ファイルのコンテナーへのパッケージング"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:829
msgid "Debugging native executable"
msgstr "ネイティブ実行可能ファイルのデバッグ"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:17
msgid "This guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr "このガイドは、xref:getting-started.adoc[入門ガイド] で開発されたアプリケーションを入力としています。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:19
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:23
#, fuzzy
msgid ""
"link:{includes}/prerequisites.adoc[role=include]\n"
"* A xref:configuring-c-development[working C development environment]\n"
"* The code of the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr "{includes}/prerequisites.adoc * xref:configuring-c-development[動作するCの開発環境] * xref:getting-started.adoc[スタートアップガイドで] 開発したアプリケーションのコード。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:27
msgid "Supporting native compilation in C"
msgstr "C言語でのネイティブコンパイルのサポート"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:31
msgid "What does having a working C developer environment mean?"
msgstr "動作するC言語の開発環境があるとはどういう意味でしょうか?"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:33
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr "Linuxでは、GCC、glibc、zlibヘッダが必要です。一般的なディストリビューションでは次の通りです:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:42
msgid "XCode provides the required dependencies on macOS:"
msgstr "macOS では、XCode が必要な依存関係を提供します:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:48
msgid "On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]"
msgstr "Windowsの場合は、 https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools] をインストールする必要があります。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:51
#, fuzzy
msgid "Background"
msgstr "背景"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:53
msgid ""
"Building a native executable requires using a distribution of GraalVM.\n"
"There are three distributions:\n"
"Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.\n"
"The differences between the Oracle and Mandrel distributions are as follows:"
msgstr "ネイティブな実行可能ファイルをビルドするには、GraalVM のディストリビューションを使用する必要があります。ディストリビューションは3つあります。Oracle GraalVM Community Edition (CE)、Oracle GraalVM Enterprise Edition (EE)、そして Mandrel です。Oracle ディストリビューションと Mandrel ディストリビューションの違いは以下の通りです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:58
msgid ""
"Mandrel is a downstream distribution of the Oracle GraalVM CE.\n"
"Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr "Mandrelは、Oracle GraalVM CEのダウンストリームディストリビューションです。Mandrelの主な目的は、Quarkusをサポートするために特別に設計されたネイティブ実行可能ファイルを構築する方法を提供することです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:61
msgid ""
"Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base,\n"
"with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.\n"
"They support the same capabilities to build native executables as Oracle GraalVM CE,\n"
"with no significant changes to functionality.\n"
"Notably, they do not include support for polyglot programming.\n"
"The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.\n"
"These exclusions also mean Mandrel offers a considerable reduction in its distribution size\n"
"when compared with Oracle GraalVM CE/EE."
msgstr "Mandrel のリリースは、アップストリームのOracle GraalVM CEコードベースから派生したコードベースから構築されており、わずかな変更しか行われていませんが、Quarkusネイティブアプリには必要ない重要な除外事項がいくつかあります。これらのリリースは、Oracle GraalVM CEと同じ機能をサポートしており、機能に大きな変更はありません。特筆すべきは、多言語プログラミングのサポートが含まれていないことです。これらの除外の理由は、大多数のQuarkusユーザーにより良いレベルのサポートを提供するためです。また、これらの除外は、Oracle GraalVM CE/EEと比較して、Mandrelの配布サイズが大幅に縮小されていることを意味しています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:70
msgid ""
"Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.\n"
"This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.\n"
"These enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.\n"
"This is particularly important when it comes to conformance and security."
msgstr "Mandrelは、標準のOpenJDKプロジェクトを使用して、Oracle GraalVM CEとは少し違った形で構築されています。これは、Oracleが独自のGraalVMダウンロードを構築するために使用するOpenJDKのバージョンに追加したいくつかの小さな機能強化から利益を得られないことを意味します。アップストリームのOpenJDKはそれらを管理しておらず、保証することができないため、このような機能強化は省略されています。これは、規格適合性とセキュリティーに関しては特に重要です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:75
msgid ""
"Mandrel is recommended for building native executables that target Linux containerized environments.\n"
"This means that Mandrel users are encouraged to use containers to build their native executables.\n"
"If you are building native executables for macOS,\n"
"you should consider using Oracle GraalVM instead,\n"
"because Mandrel does not currently target this platform.\n"
"Building native executables directly on bare metal Linux or Windows is possible,\n"
"with details available in the https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README]\n"
"and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr "Mandrelは現在のところ、Linuxのコンテナ化された環境をターゲットとしたネイティブ実行ファイルのビルドにのみ推奨されています。つまり、Mandrelユーザーは、コンテナを使用してネイティブ実行可能ファイルを構築することが推奨されます。macOS用のネイティブ実行ファイルをビルドする場合、Mandrelは現在そのプラットフォームをターゲットにしていないため、代わりにOracle GraalVMの使用を検討するべきです。ベアメタルのLinux上で直接ネイティブ実行可能ファイルをビルドすることも可能です。詳細は https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README] and https://github.com/graalvm/mandrel/releases[Mandrel のリリース]を参照してください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:86
msgid "Configuring GraalVM"
msgstr "GraalVMの設定"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:90
#, fuzzy
msgid ""
"This step is only required for generating native executables targeting non-Linux operating systems.\n"
"For generating native executables targeting Linux, you can optionally skip this section and xref:container-runtime[use a builder image] instead."
msgstr "このステップは、Linux以外のオペレーティング・システムをターゲットとするネイティブ実行可能ファイルを生成する場合にのみ必要です。Linuxをターゲットにしたネイティブ実行可能ファイルを生成する場合、オプションでこのセクションをスキップして、代わりに xref:container-runtime[ビルダー・イメージを使用] することができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:96
#, fuzzy
msgid ""
"If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM.\n"
"There is an explanation of how to do this at xref:multistage-docker[the end of this guide]."
msgstr "GraalVMをインストールできない場合は、多段Dockerビルドを使用して、GraalVMを組み込んだDockerコンテナ内でMavenを実行することができます。これを行う方法については、 xref:multistage-docker[このガイドの] 最後に説明があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:100
#, fuzzy
msgid "Version {graalvm-version} is required."
msgstr "バージョン{graalvm-version}が必要です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:102
msgid "Install GraalVM if you haven't already. You have a few options for this:"
msgstr "まだの場合は、GraalVM をインストールします。これにはいくつかのオプションがあります:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:103
msgid "Download the appropriate archive from <https://github.com/graalvm/mandrel/releases> or <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK."
msgstr "<https://github.com/graalvm/mandrel/releases> または <https://github.com/graalvm/graalvm-ce-builds/releases> から適切なアーカイブをダウンロードし、他の JDK と同じように解凍します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:104
msgid "Use platform-specific install tools like https://sdkman.io/jdks#Oracle[sdkman], https://github.com/graalvm/homebrew-tap[homebrew], or https://github.com/ScoopInstaller/Java[scoop]."
msgstr "https://sdkman.io/jdks#Oracle[sdkman]、 https://github.com/graalvm/homebrew-tap[homebrew]、 https://github.com/ScoopInstaller/Java[scoop] など、プラットフォーム固有のインストールツールを使用してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:105
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr "ランタイム環境を構成します。 `GRAALVM_HOME` 環境変数をGraalVMインストールディレクトリーに設定します。例えば、"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:112
msgid "On macOS (not supported by Mandrel), point the variable to the `Home` sub-directory:"
msgstr "macOS (Mandrel ではサポート対象外) では、変数を `Home` のサブディレクトリに指定します:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:119
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr "Windowsでは、コントロールパネルから環境変数を設定する必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:123
msgid "Installing via scoop will do this for you."
msgstr "scoop でインストールすれば自動的に設定されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:125
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr "(オプション) 環境変数 `JAVA_HOME`  を GraalVM のインストールディレクトリーに設定します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:131
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr "(オプション) GraalVM `bin`  ディレクトリーをパスに追加します。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:139
#, fuzzy
msgid "Issues using GraalVM with macOS"
msgstr "GraalVMをmacOSで使用する際の問題"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:142
#, fuzzy
msgid "GraalVM binaries are not (yet) notarized for macOS as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `native-image`:"
msgstr "この link:https://github.com/oracle/graal/issues/1724[GraalVMの問題で] 報告されているように、GraalVMのバイナリは（まだ）macOS用に公証されていません。これは、 `native-image` を使用する際に以下のエラーが表示される可能性があることを意味します："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:149
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr "回避策として、次のコマンドを使用して、GraalVMインストールディレクトリー上の `com.apple.quarantine` 拡張属性を再帰的に削除します。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:157
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:159
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr "次のセクションの手順に従って、アプリケーションを段階的にパッケージ化することをお勧めします。しかしながら、完成したサンプルに直接進むこともできます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:161
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:163
msgid "The solution is located in the `getting-started` directory."
msgstr "ソリューションは `getting-started` ディレクトリーに存在します。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:165
msgid "Producing a native executable"
msgstr "ネイティブ実行可能ファイルの生成"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:167
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr "アプリケーションのネイティブ実行可能ファイルには、アプリケーション・コード、必要なライブラリ、Java API、および VM の縮小版が含まれます。VM ベースが小さくなることで、アプリケーションの起動時間が改善され、ディスクフットプリントが最小限に抑えられます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:169
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr "image:native-executable-process.png[ネイティブ実行可能ファイルの生成]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:171
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:"
msgstr "前回のチュートリアルでアプリケーションを生成した場合は、 `pom.xml` に以下の _プロファイル_ があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:187
msgid ""
"You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.\n"
"Multiple options may be separated by a comma."
msgstr "`<quarkus.native.additional-build-args>` プロパティーを使用して、 `native-image` コマンドにカスタムオプションを指定できます。複数のオプションはカンマで区切ることができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:190
msgid "Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`."
msgstr "もう一つの可能性は、 `application.properties` に `quarkus.native.additional-build-args` 設定プロパティーを含めることです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:192
msgid "You can find more information about how to configure the native image building process in the xref:configuration-reference[Configuring the Native Executable] section below."
msgstr "ネイティブイメージビルドの設定方法については、下記の xref:configuration-reference[ネイティブ実行可能ファイルの設定] セクションで詳しく説明しています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:195
msgid ""
"We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could\n"
"just pass -Dquarkus.package.type=native as a property on the command line, however it is better to use a profile as\n"
"this allows native image tests to also be run."
msgstr "プロファイルを使用しているのは、すぐにわかると思いますが、ネイティブ実行可能ファイルをパッケージ化するのに _数_ 分かかるからです。コマンドラインのプロパティーとして -Dquarkus.package.type=native を渡すだけでもいいのですが、プロファイルを使う方がいいでしょう。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:199
msgid "Create a native executable using:"
msgstr "次のようにネイティブ実行可能ファイルの作成"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:201
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:205
msgid "Issues with packaging on Windows"
msgstr "Windows でのパッケージ化に関する問題"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:207
#, fuzzy
msgid ""
"The Microsoft Native Tools for Visual Studio must first be initialized before packaging.\n"
"You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools.\n"
"At the `x64 Native Tools Command Prompt`, you can navigate to your project folder and run `./mvnw package -Dnative`."
msgstr "パッケージングの前に、Microsoft Native Tools for Visual Studioを初期化する必要があります。これを行うには、Visual Studio* Build Tools と一緒にインストールされた `x64 Native Tools Command Prompt` を起動します。 `x64 Native Tools Command Prompt` でプロジェクト・フォルダーに移動し、 `./mvnw package -Dnative` を実行します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:211
msgid "Another solution is to write a script to do this for you:"
msgstr "もう一つのソリューションは、これを行うためのスクリプトを書くことです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:219
msgid ""
"In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.\n"
"You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr "通常のファイルに加えて、このビルドでは `target/getting-started-1.0.0-SNAPSHOT-runner` を生成します。これを実行するには、次のようにします: `./target/getting-started-1.0-SNAPSHOT-runner` ."

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:350
msgid "Java preview features"
msgstr "Java プレビュー機能"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:226
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To produce a native executable, this means that the `--enable-preview` flag needs to be passed to the underlying native image invocation.\n"
"You can do so by prepending the flag with `-J` and passing it as additional native build argument: `-Dquarkus.native.additional-build-args=-J--enable-preview`."
msgstr "プレビュー機能に依存する Java コードには、特別な注意が必要です。これは、ネイティブ実行可能ファイルを生成する場合、`--enable-preview` フラグを基になるネイティブイメージ呼び出しに渡す必要があることを意味します。そのためには、フラグの前に `-J` を付け、それを追加のネイティブビルド引数として渡します: `-Dquarkus.native.additional-build-args=-J--enable-preview` 。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:231
msgid "Build fully static native executables"
msgstr "完全に静的なネイティブ実行可能ファイルのビルド"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:233
msgid "Fully static native executables support is experimental."
msgstr "完全に静的なネイティブ実行可能ファイルのサポートは実験的なものです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:235
#, fuzzy
msgid ""
"On Linux it's possible to package a native executable that doesn't depend on any system shared library.\n"
"There are link:https://www.graalvm.org/latest/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[some system requirements] to be fulfilled and additional build arguments to be used along with the `native-image` invocation, a minimum is `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"`."
msgstr "Linuxでは、システム共有ライブラリに依存しないネイティブ実行ファイルをパッケー ジすることができる。満たすべき link:https://www.graalvm.org/latest/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[システム要件がいくつか] あり、 `native-image` の呼び出しとともに使用する追加のビルド引数がある。最低限必要なのは、 `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"` 。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:238
msgid "Compiling fully static binaries is done by statically linking https://musl.libc.org/[musl] instead of `glibc` and should not be used in production without rigorous testing."
msgstr "完全な静的バイナリのコンパイルは、 `glibc` の代わりに link:https://musl.libc.org/[musl] を静的にリンクすることで行われます。厳密なテストなしに実運用で使用するべきではありません。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:240
msgid "Testing the native executable"
msgstr "ネイティブ実行可能ファイルのテスト"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:242
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file. The reasoning is explained in the link:getting-started-testing#quarkus-integration-test[Testing Guide]."
msgstr "ネイティブ実行可能ファイルを生成することはいくつかの問題を引き起こす可能性があるので、ネイティブファイルで実行されているアプリケーションに対していくつかのテストを実行することをお勧めします。その理由は link:getting-started-testing#quarkus-integration-test[アプリケーションのテスト] で説明されています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:244
#, fuzzy
msgid "To see the `GreetingResourceIT` run against the native executable, use `./mvnw verify -Dnative`:"
msgstr "`GreetingResourceIT` 、ネイティブの実行ファイルに対して実行されるのを見るには、 `./mvnw verify -Dnative` ："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:274
#, fuzzy
msgid ""
"By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This\n"
"duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration\n"
"to 300 seconds, use: `./mvnw verify -Dnative -Dquarkus.test.wait-time=300`."
msgstr "デフォルトでは、Quarkusはネイティブイメージの開始を60秒間待ってから、ネイティブテストを自動的に失敗させます。この時間は、 `quarkus.test.wait-time` システムプロパティを使用して変更できます。例えば、待機時間を300秒に増やすには、 `./mvnw verify -Dnative -Dquarkus.test.wait-time=300` を使用します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:281
msgid ""
"This procedure was formerly accomplished using the `@NativeImageTest` annotation. `@NativeImageTest` was replaced by `@QuarkusIntegrationTest` which provides a superset of the testing\n"
"capabilities of `@NativeImageTest`. More information about `@QuarkusIntegrationTest` can be found in the xref:getting-started-testing.adoc#quarkus-integration-test[Testing Guide]."
msgstr "この手順は、以前は `@NativeImageTest` のアノテーションを使用していました。 `@NativeImageTest` は `@QuarkusIntegrationTest` に置き換えられ、 `@NativeImageTest` のテスト機能のスーパーセットを提供します。 `@QuarkusIntegrationTest` の詳細については、 xref:getting-started-testing.adoc#quarkus-integration-test[テストガイド] を参照してください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:285
msgid "Profiles"
msgstr "プロファイル"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:286
msgid "By default, integration tests both *build* and *run* the native executable using the `prod` profile."
msgstr "デフォルトでは、インテグレーションテストは `prod` プロファイルを使用して、ネイティブの実行ファイルに対して *build* と *run* の両方を行います。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:288
#, fuzzy
msgid ""
"You can override the profile the executable *runs* with during the test using the `quarkus.test.native-image-profile` property.\n"
"Either by adding it to `application.properties` or by appending it to the command line:\n"
"`./mvnw verify -Dnative -Dquarkus.test.native-image-profile=test`.\n"
"Your `%test.` prefixed properties will be used at the test runtime."
msgstr "`quarkus.test.native-image-profile` プロパティを使用して、テスト中に実行ファイルが *実行* するプロファイルを上書きすることができます。このプロパティを `application.properties` に追加するか、コマンドラインに追加してください： `./mvnw verify -Dnative -Dquarkus.test.native-image-profile=test` 。 `%test.` に接頭辞を付けたプロパティは、テストの実行時に使用されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:294
#, fuzzy
msgid ""
"You can override the profile the executable is *built* with and *runs* with using the `quarkus.profile=test` property, e.g.\n"
"`./mvnw clean verify -Dnative -Dquarkus.profile=test`. This might come handy if there are test specific resources to be processed,\n"
"such as importing test data into the database."
msgstr "`./mvnw clean verify -Dnative -Dquarkus.profile=test` などのように、 `quarkus.profile=test` プロパティを使用して、実行ファイルが *ビルドさ* れ、 *実行さ* れるプロファイルをオーバーライドできます。これは、テストデータをデータベースにインポートするなど、テスト固有のリソースを処理する場合に便利です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:306
msgid ""
"With the aforementioned example in your `application.properties`, your Hibernate ORM managed database will be populated with test\n"
"data both during the JVM mode test run and during the native mode test run. The production\n"
"executable will contain only the `version.txt` resource, no superfluous test data."
msgstr "上記の例を `application.properties` に記述すると、Hibernate ORM が管理するデータベースには、JVM モードのテスト実行中とネイティブモードのテスト実行中の両方でテストデータが入力されることになります。本番用の実行ファイルには `version.txt` リソースのみが含まれ、余分なテストデータは含まれません。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:312
#, fuzzy
msgid ""
"The executable built with `-Dquarkus.profile=test` is not suitable for production deployment.\n"
"It contains your test resources files and settings. Once the testing is done, the executable would have to be built again,\n"
"using the default, `prod` profile."
msgstr "`-Dquarkus.profile=test` でビルドされた実行ファイルは、本番環境への配備には適していません。このファイルにはテスト用のリソースファイルと設定が含まれています。テストが終わったら、デフォルトの `prod` プロファイルを使用して、実行ファイルを再度ビルドする必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:316
#, fuzzy
msgid ""
"Alternatively, if you need to specify specific properties when running tests against the native executable\n"
"built using the `prod` profile, an option is to put those properties in file `src/test/resources/application-nativeit.yaml`, and refer to it from the `failsafe` plugin configuration using the `QUARKUS_CONFIG_LOCATIONS` environment variable. For instance:"
msgstr "あるいは、 `prod` プロファイルを使用してビルドしたネイティブ実行ファイルに対してテストを実行する際に、特定のプロパティを指定する必要がある場合は、それらのプロパティをファイル `src/test/resources/application-nativeit.yaml` に記述し、 `QUARKUS_CONFIG_LOCATIONS` 環境変数を使用して `failsafe` プラグイン設定から参照することもできます。例えば"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:352
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To test a native executable, this means that the `--enable-preview` flag needs to be passed to the Surefire plugin.\n"
"Adding `<argLine>--enable-preview</argLine>` to its `configuration` section is one way to do so."
msgstr "プレビュー機能に依存する Java コードには、特別な注意が必要です。つまり、ネイティブ実行可能ファイルをテストする場合は、`--enable-preview` フラグを Surefire プラグインに渡す必要があります。その方法の 1 つが、`<argLine>--enable-preview</argLine>` を `configuration` セクションに追加する方法です。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:357
msgid "Excluding tests when running as a native executable"
msgstr "ネイティブ実行可能ファイルとして実行している場合のテストの除外"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:359
msgid ""
"When running tests this way, the only things that actually run natively are your application endpoints, which\n"
"you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code\n"
"that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr "この方法でテストを実行する場合、実際にネイティブで実行されるのはアプリケーションのエンドポイントのみで、HTTP 呼び出しでしかテストできません。テストコードは実際にはネイティブには実行されないので、HTTP エンドポイントを呼び出さないコードをテストしている場合は、それらをネイティブテストの一部として実行するのは良い考えではないでしょう。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:363
msgid ""
"If you share your test class between JVM and native executions like we advise above, you can mark certain tests\n"
"with the `@DisabledOnIntegrationTest` annotation in order to skip them when testing against a native image."
msgstr "上記のようにJVMとネイティブ実行でテストクラスを共有している場合、特定のテストをネイティブイメージに対してテストをするときにそれらをスキップするために、 `@DisabledOnNativeImage` アノテーションを付けることができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:368
msgid ""
"Using `@DisabledOnIntegrationTest` will also disable the test in all integration test instances, including\n"
"testing the application in JVM mode, in a container image, and native image."
msgstr "`@DisabledOnIntegrationTest` を使用すると、JVM モード、コンテナイメージ、ネイティブイメージでのアプリケーションのテストを含む、すべての統合テストインスタンスでのテストも無効になります。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:372
msgid "Testing an existing native executable"
msgstr "既存のネイティブ実行可能ファイルのテスト"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:374
#, fuzzy
msgid ""
"It is also possible to re-run the tests against a native executable that has already been built. To do this run\n"
"`./mvnw test-compile failsafe:integration-test -Dnative`. This will discover the existing native image and run the tests against it using failsafe."
msgstr "ビルド済みのネイティブ実行ファイルに対してテストを再実行することも可能である。そのためには `./mvnw test-compile failsafe:integration-test -Dnative` を実行する。これにより、既存のネイティブイメージが検出され、failafe を使用してテストが実行されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:377
msgid ""
"If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the\n"
"target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr "何らかの理由でプロセスがネイティブイメージを見つけられない場合や、ターゲットディレクトリーにないネイティブイメージをテストしたい場合は、 `-Dnative.image.path=`  システムプロパティーで実行可能ファイルを指定することができます。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:381
msgid "Creating a Linux executable without GraalVM installed"
msgstr "GraalVM をインストールせずに Linux 実行可能ファイルを作成する方法"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:383
msgid ""
"Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker\n"
"on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr "先に進む前に、コンテナーランタイム(Docker、podman)の動作環境が整っていることを確認しておきましょう。WindowsでDockerを使用している場合は、Docker Desktopのファイル共有設定でプロジェクトのドライブを共有し、Docker Desktopを再起動する必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:386
msgid ""
"Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid\n"
"the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice\n"
"to install as little software as possible)."
msgstr "多くの場合、Quarkusアプリケーション用のネイティブLinux実行可能ファイルを作成する必要があります(例えば、コンテナー化された環境で実行するためなど)、このタスクを達成するために適切なGraalVMバージョンをインストールする手間を省きたいと考えています(例えば、CI環境では、できるだけ少ないソフトウェアをインストールするのが一般的です)。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:390
msgid ""
"To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.\n"
"The easiest way of accomplishing this task is to execute:"
msgstr "このため、Quarkusでは、Dockerやpodmanなどのコンテナーランタイムを利用して、ネイティブのLinux実行可能ファイルを作成する非常に便利な方法を提供しています。このタスクを達成する最も簡単な方法は、次を実行することです:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:393
msgid "link:{includes}/devtools/build-native-container.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native-container.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:397
msgid ""
"By default, Quarkus automatically detects the container runtime.\n"
"If you want to explicitly select the container runtime, you can do it with:"
msgstr "デフォルトでは、Quarkusはコンテナランタイムを自動的に検出します。コンテナランタイムを明示的に選択したい場合は、次のようにします:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:400
msgid "For Docker:"
msgstr "Docker の場合:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:445
msgid ""
"link:{includes}/devtools/build-native-container-parameters.adoc[role=include]\n"
":!build-additional-parameters:"
msgstr ""
"link:{includes}/devtools/build-native-container-parameters.adoc[role=include]\n"
":!build-additional-parameters:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:406
msgid "For podman:"
msgstr "podman の場合:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:412
#, fuzzy
msgid ""
"These are regular Quarkus config properties, so if you always want to build in a container\n"
"it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr "これらは通常のQuarkusのコンフィグプロパティなので、常にコンテナでビルドしたい場合は、 `application.properties` 。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:419
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr "JARが正常にビルドされているにもかかわらず、コンテナビルドでネイティブ実行可能ファイルを作成しようとすると、アプリケーションJARに対して以下のようなinvalid pathエラーが表示される場合は、コンテナランタイムにリモートデーモンを使用している可能性があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:420
#, fuzzy
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar"
msgstr "エラー：Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar Caused by: java.nio.file.NoSuchFileException：/project/getting-started-1.0.0-SNAPSHOT-runner.jar。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:424
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr "この場合、パラメータ `-Dquarkus.native.container-build=true` の代わりに `-Dquarkus.native.remote-container-build=true` を使用してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:426
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr "その理由は、 `-Dquarkus.native.container-build=true` を通して起動されるローカルビルドドライバは、ビルドコンテナで JAR を利用できるようにするためにボリュームマウントを使用しますが、ボリュームマウントはリモートデーモンでは機能しません。リモートコンテナのビルドドライバは、必要なファイルをマウントするのではなく、コピーします。リモートドライバはローカルデーモンでも動作しますが、ローカルの場合はローカルドライバを使用した方が良いことに注意してください。なぜなら、マウントの方がコピーよりもパフォーマンスが高いからです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:431
#, fuzzy
msgid "The builder image used by default supports Java 17 as it is the latest LTS version."
msgstr "デフォルトで使用されるビルダーイメージは、最新のLTSバージョンであるJava 17をサポートしている。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:433
#, fuzzy
msgid "If your application uses Java 18 or later, you need to specify a builder image supporting Java 20:"
msgstr "アプリケーションでJava 18以降を使用する場合は、Java 20をサポートするビルダー・イメージを指定する必要があります："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:442
#, fuzzy
msgid "Building with GraalVM instead of Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr "Mandrelの代わりにGraalVMでビルドするには、カスタムビルダーイメージパラメーターを追加で渡す必要があります："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:448
msgid ""
"Please note that the above command points to a floating tag.\n"
"It is highly recommended to use the floating tag,\n"
"so that your builder image remains up-to-date and secure.\n"
"If you absolutely must, you may hard-code to a specific tag\n"
"(see https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here] for available tags),\n"
"but be aware that you won't get security updates that way and it's unsupported."
msgstr "上記のコマンドはイメージが更新されるフローティングタグを指していることに注意してください。ビルダーイメージを最新かつ安全に保つために、フローティングタグを使用することを強く推奨します。どうしても必要な場合は、特定のタグをハードコーディングしても構いませんが(利用可能なタグについては https://quay.io/repository/quarkus/ubi-quarkus-mandrel?tab=tags[こちら]を参照してください)、その方法ではセキュリティーアップデートが受けられず、サポートされていないことに注意してください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:456
msgid "Creating a container"
msgstr "コンテナーの作成"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:458
msgid "Using the container-image extensions"
msgstr "コンテナーイメージのエクステンションの使用"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:460
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr "Quarkusアプリケーションからコンテナーイメージを作成する最も簡単な方法は、コンテナーイメージ エクステンションの1つを利用することです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:462
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr "これらのエクステンションのいずれかが存在する場合、ネイティブ実行可能ファイル用のコンテナーイメージを作成することは、基本的には単一のコマンドを実行することになります:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:469
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr "`quarkus.native.container-build=true`  では GraalVM がインストールされていなくても Linux の実行可能ファイルを作成することができます(ローカルに GraalVM がインストールされていない場合や、ローカルのオペレーティングシステムが Linux ではない場合にのみ必要です)。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:473
msgid "If you're running a remote Docker daemon, you need to replace `quarkus.native.container-build=true` with `quarkus.native.remote-container-build=true`."
msgstr "リモートDockerデーモンを実行している場合、 `-Dquarkus.native.container-build=true` を `-Dquarkus.native.remote-container-build=true` で置換する必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:475
msgid "See xref:tip-quarkus-native-remote-container-build[Creating a Linux executable without GraalVM installed] for more details."
msgstr "詳しくは、GraalVMが xref:tip-quarkus-native-remote-container-build[GraalVMをインストールせずにLinux実行可能ファイルを作成] をご覧ください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:478
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr "`quarkus.container-image.build=true`  最終的なアプリケーションアーティファクト(この場合はネイティブ実行可能ファイル)を使用してコンテナーイメージを作成するようにQuarkusに指示します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:480
msgid "See the xref:container-image.adoc[Container Image guide] for more details."
msgstr "詳細については、 xref:container-image.adoc[コンテナイメージガイド] を参照してください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:482
msgid "Manually using the micro base image"
msgstr "マイクロベースイメージを手動で使用する方法"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:484
msgid ""
"You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.\n"
"However, in this section we focus on creating a container image using the produced native executable."
msgstr "Quarkus Mavenプラグインで生成されたJARを使用して、コンテナー内でアプリケーションを実行することができます。ただし、このセクションでは、生成されたネイティブ実行可能ファイルを使用してコンテナーイメージを作成することに焦点を当てます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:487
msgid "image:containerization-process.png[Containerization Process]"
msgstr "image:containerization-process.png[alt=\"Containerization Process\"]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:489
#, fuzzy
msgid ""
"When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).\n"
"However, as a container may not use the same _executable_ format as the one produced by your operating system,\n"
"we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in xref:container-runtime[this section]):"
msgstr "ローカルGraalVMインストールを使用する場合、ネイティブ実行可能ファイルは、ローカルオペレーティングシステム（Linux、macOS、Windowsなど）をターゲットにします。しかし、コンテナは、あなたのオペレーティングシステムによって生成されたものと同じ _実行可能ファイル_ 形式を使用しないかもしれないので、（ xref:container-runtime[このセクションで] 説明するように）コンテナランタイムを活用して実行可能ファイルを生成するようにMavenビルドを指示します："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:493
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a container.\n"
"The project generation has provided a `Dockerfile.native-micro` in the `src/main/docker` directory with the following content:"
msgstr "生成される実行ファイルは 64 ビットの Linux 実行ファイルになるので、お使いの OS によっては実行できなくなる可能性があります。しかし、コンテナにコピーするので問題ありません。プロジェクト生成では、 `src/main/docker` ディレクトリに `Dockerfile.native-micro` を用意し、以下のような内容にしています:"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:508
msgid "Quarkus Micro Image?"
msgstr "Quarkus マイクロイメージとは？"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:510
msgid ""
"The Quarkus Micro Image is a small container image providing the right set of dependencies to run your native application.\n"
"It is based on https://catalog.redhat.com/software/containers/ubi8-micro/601a84aadd19c7786c47c8ea?container-tabs=overview[UBI Micro].\n"
"This base image has been tailored to work perfectly in containers."
msgstr "Quarkus マイクロイメージは、ネイティブアプリケーションを実行するための適切な依存関係のセットを提供する小さなコンテナイメージです。これは https://catalog.redhat.com/software/containers/ubi8-micro/601a84aadd19c7786c47c8ea?container-tabs=overview[UBI Micro] に基づいています。このベースイメージは、コンテナで完全に機能するように調整されています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:514
msgid "You can read more about UBI images on:"
msgstr "UBI イメージの詳細については、以下をご覧ください:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:516
msgid "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"
msgstr "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:517
msgid "https://catalog.redhat.com/software/container-stacks/detail/5ec53f50ef29fd35586d9a56[Red Hat Universal Base Image 8]"
msgstr "https://catalog.redhat.com/software/container-stacks/detail/5ec53f50ef29fd35586d9a56[Red Hat Universal Base Image 8]"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:519
msgid "UBI images can be used without any limitations."
msgstr "UBI イメージは制限なく使用できます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:521
msgid "xref:quarkus-runtime-base-image.adoc[This page] explains how to extend the `quarkus-micro` image when your application has specific requirements."
msgstr "xref:quarkus-runtime-base-image.adoc[このページ] では、アプリケーションに特定の要件がある場合に、`quarkus-micro` イメージを拡張する方法について説明しています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:524
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr "あとは、生成されたネイティブ実行可能ファイルを削除していなければ、dockerイメージを使ってビルドします:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:531
msgid "And finally, run it with:"
msgstr "そして最後に、以下を実行します:"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:538
msgid "Manually using the minimal base image"
msgstr "最小限のベースイメージを手動で使用する方法"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:540
msgid "The project generation has also provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr "プロジェクト生成では、以下の内容の `src/main/docker docker` ディレクトリも提供されます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:557
msgid ""
"The UBI minimal image is bigger than the micro one mentioned above.\n"
"It contains more utilities such as the `microdnf` package manager."
msgstr "UBI の最小イメージは、上記のマイクロイメージよりも大きくなっています。これには、`microdnf` パッケージマネージャーなどのユーティリティーが含まれています。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:561
msgid "Using a multi-stage Docker build"
msgstr "マルチステージDockerビルドの使用"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:563
msgid ""
"The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.\n"
"In addition, this native executable must be a Linux 64 bits executable."
msgstr "前のセクションでは、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドする方法を示しましたが、その場合は最初にネイティブ実行可能ファイルを作成しておく必要があります。さらに、このネイティブ実行可能ファイルは  Linux64 ビットの実行可能ファイルである必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:566
msgid ""
"You may want to build the native executable directly in a container without having a final container containing the build tools.\n"
"That approach is possible with a multi-stage Docker build:"
msgstr "ビルドツールを含む最終的なコンテナを用意せずに、ネイティブ実行可能ファイルをコンテナに直接ビルドする必要がある場合もあるはずです。このアプローチは、マルチステージの Docker ビルドで使用可能です:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:569
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr "最初の段階では、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドします"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:570
msgid "The second stage is a minimal image copying the produced native executable"
msgstr "第 2 段階は、生成されたネイティブ実行可能ファイルをコピーする最小限のイメージです"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:575
msgid "Before building a container image from the Dockerfiles shown below, you need to update the default `.dockerignore` file, as it filters everything except the `target` directory. In order to build inside a container, you need to copy the `src` directory. Thus, edit your `.dockerignore` and remove the `*` line."
msgstr "以下のDockerファイルからコンテナイメージをビルドする前に、デフォルトの `.dockerignore` ファイルを更新する必要があります。これは、`target` ディレクトリ以のすべてがフィルタリングされるためです。コンテナ内でビルドするため、`src` ディレクトリをコピーする必要があります。そのために、`.dockerignore` を編集し、その内容を更新し、`*` の行を削除します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:578
msgid "Such a multi-stage build can be achieved as follows:"
msgstr "このような多段階を用いたビルドは、次のように実現できます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:580
msgid "Sample Dockerfile for building with Maven:"
msgstr "MavenでビルドするためのサンプルDockerfileです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:611
msgid ""
"This multi-stage Docker build copies the Maven wrapper from the host machine.\n"
"The Maven wrapper (or the Gradle wrapper) is a convenient way to provide a specific version of Maven/Gradle.\n"
"It avoids having to create a base image with Maven and Gradle.\n"
"To provision the Maven Wrapper in your project, use: `mvn -N org.apache.maven.plugins:maven-wrapper-plugin:3.1.1:wrapper`."
msgstr "このマルチステージDockerビルドは、ホストマシンからMavenラッパーをコピーします。Mavenラッパー（またはGradleラッパー）は、Maven/Gradleの特定のバージョンを提供する便利な方法です。それは、MavenとGradleでベースイメージを作成することを避けることができます。プロジェクトでMavenラッパーをプロビジョニングするには、次のようにします： `mvn -N org.apache.maven.plugins:maven-wrapper-plugin:3.1.1:wrapper` ."

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:616
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr "このファイルは、Getting started quickstartには含まれていないので、 `src/main/docker/Dockerfile.multistage`  に保存してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:618
msgid "Sample Dockerfile for building with Gradle:"
msgstr "GradleでビルドするためのサンプルDockerfileです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:644
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr "プロジェクトでGradleを使用している場合は、このサンプルDockerfileを使用することができます。 `src/main/docker/Dockerfile.multistage`  に保存してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:651
msgid "And, finally, run it with:"
msgstr "最後に、以下を実行します:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:660
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr "ネイティブ実行可能ファイルにSSLサポートが必要な場合は、Dockerイメージに必要なライブラリを簡単に含めることができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:662
msgid "Please see xref:native-and-ssl.adoc#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr "詳しくは xref:native-and-ssl.adoc#working-with-containers[ネイティブ実行可能ファイルでのSSL利用ガイド] を参照してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:667
#, fuzzy
msgid "To use GraalVM CE instead of Mandrel, update the `FROM` clause to: `FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`."
msgstr "Mandrel の代わりに GraalVM CE を使用するには、 `FROM` 節を次のように更新します： `FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build` ."

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:670
msgid "Using a Distroless base image"
msgstr "Distroless ベースイメージの使用"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:672
msgid "Distroless image support is experimental."
msgstr "Distroless イメージのサポートは実験的なものです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:674
msgid ""
"If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.\n"
"The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr "小さなコンテナイメージを探している場合は、 https://github.com/GoogleContainerTools/distroless[distroless] アプローチでベースレイヤーのサイズが縮小されます。 _distroless_ の背後には、すべての要件 (場合によってはアプリケーション自体) を含む単一の最小限のベースイメージを使用するという考え方があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:677
msgid ""
"Quarkus provides a distroless base image that you can use in your `Dockerfile`.\n"
"You only need to copy your application, and you are done:"
msgstr "Quarkus は、`Dockerfile` で使用できる distroless ベースイメージを提供します。ユーザーは、アプリケーションをコピーするだけです:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:691
msgid ""
"Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:2.0` image.\n"
"It contains the required packages to run a native executable and is only **9Mb**.\n"
"Just add your application on top of this image, and you will get a tiny container image."
msgstr "Quarkus は、`quay.io/quarkus/quarkus-distroless-image:2.0` イメージを提供します。ネイティブ実行可能ファイルを実行するために必要なパッケージが含まれており、サイズはほんの **9Mb** です。このイメージの上にアプリケーションを追加するだけで、小さなコンテナイメージを得られます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:695
msgid "Distroless images should not be used in production without rigorous testing."
msgstr "Distroless イメージを本番環境で使用する場合は、必ず厳密なテストを実施してください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:697
msgid "Build a container image from scratch"
msgstr "コンテナイメージをゼロから構築する"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:699
msgid "Scratch image support is experimental."
msgstr "スクラッチベースイメージのサポートは実験的なものです。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:701
msgid "Building fully statically linked binaries enables the usage of a https://hub.docker.com/_/scratch[scratch image] containing solely the resulting native executable."
msgstr "完全に静的にリンクされたバイナリをビルドすることで、ビルド結果のネイティブ実行ファイルのみを含む https://hub.docker.com/_/scratch[スクラッチイメージ] を使用することができます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:703
msgid "Sample multistage Dockerfile for building an image from `scratch`:"
msgstr "`Scratch` からイメージを構築するためのサンプルのマルチステージのDockerfileです:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:736
msgid "Scratch images should not be used in production without rigorous testing."
msgstr "スクラッチイメージを本番環境で使用する場合は、必ず厳密なテストを実施してください。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:738
msgid "The versions of musl and zlib may need to be updated to meet the native-image executable requirements (and UPX if you use native image compression)."
msgstr "ネイティブイメージの実行ファイルの要件に合わせて、muslとzlibのバージョンを更新する必要があるかもしれません（ネイティブイメージ圧縮を使用する場合はUPXも）。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:740
msgid "Compress native images"
msgstr "ネイティブイメージの圧縮"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:742
msgid ""
"Quarkus can compress the produced native executable using UPX.\n"
"More details on xref:./upx.adoc[UPX Compression documentation]."
msgstr "Quarkus は、UPX を使用して生成されたネイティブ実行可能ファイルを圧縮できます。詳細については、xref:./upx.adoc[UPX 圧縮のドキュメント] を参照してください。"

#. type: Title ===
#: upstream/_versions/3.2/guides/building-native-image.adoc:745
msgid "Separating Java and native image compilation"
msgstr "Java とネイティブイメージのコンパイルの分離"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:747
#, fuzzy
msgid ""
"In certain circumstances, you may want to build the native image in a separate step.\n"
"For example, in a CI/CD pipeline, you may want to have one step to generate the source that will be used for the native image generation and another step to use these sources to actually build the native executable.\n"
"For this use case, you can set the `quarkus.package.type=native-sources`.\n"
"This will execute the java compilation as if you had started native compilation (`-Dnative`), but stops before triggering the actual call to GraalVM's `native-image`."
msgstr "状況によっては、ネイティブ・イメージを別のステップでビルドしたい場合があります。例えば、CI/CDパイプラインにおいて、ネイティブ・イメージ生成に使用するソースを生成するステップと、これらのソースを使用して実際にネイティブ実行ファイルをビルドするステップを用意したい場合があります。このような場合、 `quarkus.package.type=native-sources` を設定すると、ネイティブ・コンパイル（ `-Dnative` ）を開始したかのようにjavaのコンパイルが実行されますが、GraalVMの `native-image` を実際に呼び出す前に停止します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:757
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr "コンパイルが完了すると、ビルドアーティファクトが `target/native-sources` に表示されます:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:766
#, fuzzy
msgid ""
"From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.\n"
"This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.\n"
"A text file named `graalvm.version` was also created and holds the GraalVM version that should be used.\n"
"If you have GraalVM installed and it matches this version, you can start the native compilation by executing:"
msgstr "上記の出力から、生成されたjarファイルと関連するlibディレクトリに加えて、 `native-image.args` という名前のテキストファイルが作成されたことがわかる。このファイルは、GraalVMの `native-image` コマンドに渡すすべてのパラメータ（コンパイルするJARの名前を含む）を保持しています。 `graalvm.version` という名前のテキストファイルも作成され、使用すべきGraalVMのバージョンを保持しています。GraalVMがインストールされており、このバージョンと一致する場合、実行することでネイティブ・コンパイルを開始することができます："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:783
msgid "The process for Gradle is analogous."
msgstr "Gradle のプロセスも同様です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:785
msgid "Running the build process in a container is also possible:"
msgstr "コンテナでビルドプロセスを実行することも可能です:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:792
msgid "`-Dquarkus.native.container-build=true` will produce an additional text file named `native-builder.image` holding the docker image name to be used to build the native image."
msgstr "`-Dquarkus.native.container-build=true` は、ネイティブイメージのビルドに使用するDockerイメージ名を保持する `native-builder.image` という名前の追加のテキストファイルを生成します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:808
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr "ホストのディレクトリ `target/native-image` をコンテナの `/work` にマウントします。したがって、生成されたバイナリーもこのディレクトリに書き込まれます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:809
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr "作業ディレクトリを、<1> でマウントした `/work` に切り替えます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:810
msgid "Use the docker image from the file `native-builder.image`."
msgstr "ファイル `native-builder.image` からDocker イメージを使用します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:811
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr "ファイル `native-image.args` の内容を引数として `native-image` を呼び出します。また、プロセスの最大メモリーを 4 ギガバイトに制限するための追加の引数も提供します (これは、ビルドするプロジェクトとそれをビルドしているマシンにより異なります)。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:815
msgid ""
"If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.\n"
"Hence, the binary will not be executable on the host Windows machine."
msgstr "Windows マシンで実行している場合は、バイナリーが Linux docker コンテナ内で作成されていることに注意してください。つまり、バイナリーはホスト Windows マシンでは実行できません。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:819
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr "CI/CD パイプラインのさまざまなステップがどのように見えるかについて、以下に概要を示しています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:821
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr "`./mvnw ...` コマンドを実行するステップの出力 (つまり、ディレクトリ `target/native-image`) をビルドアーティファクトとして登録します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:822
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr "`native-image ...` コマンドを実行するステップでこのアーティファクトを要求し、"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:823
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr "`native-image ...` コマンドを実行するステップの出力 (つまり、`target/*runner` に一致するファイル) をビルドアーティファクトとして登録します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:825
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr "ステップ `1` を実行する環境には、Java と Maven (または Gradle) のみインストールされている必要がありますが、ステップ `3` を実行する環境には GraalVM のインストール (`native-image` 機能を含む) のみが必要です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:827
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr "CI/CD パイプラインの最終的な出力に応じて、生成されたバイナリーがコンテナイメージの作成に使用されます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:831
#, fuzzy
msgid ""
"Native executables can be debugged using tools such as `gdb`.\n"
"For this to be possible native executables need to be generated with debug symbols."
msgstr "ネイティブ実行可能ファイルは、 `gdb` などのツールを使ってデバッグできます。そのためには、ネイティブ実行可能ファイルをデバッグ・シンボルとともに生成する必要があります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:835
#, fuzzy
msgid ""
"Debug symbol generation is only supported on Linux.\n"
"Windows support is still under development, while macOS is not supported."
msgstr "デバッグ・シンボル生成はLinuxでのみサポートされている。Windowsのサポートはまだ開発中であり、macOSはサポートされていない。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:838
msgid ""
"To generate debug symbols,\n"
"add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.\n"
"You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr "デバッグシンボルを生成するには、ネイティブ実行可能ファイルの生成時に `-Dquarkus.native.debug.enabled=true`  フラグを追加してください。ネイティブ実行可能ファイルのデバッグシンボルは、ネイティブ実行可能ファイルの隣にある `.debug`  ファイルにあります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:844
#, fuzzy
msgid ""
"The generation of the `.debug` file depends on `objcopy`.\n"
"As a result, when using a local GraalVM installation on common Linux distributions you will need to install the `binutils` package:"
msgstr "`.debug` ファイルの生成は `objcopy` に依存します。そのため、一般的なLinuxディストリビューションでGraalVMのローカル・インストールを使用する場合、 `binutils` パッケージをインストールする必要があります："

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:855
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr "`objcopy`  が利用できない場合、デバッグシンボルが実行ファイルに埋め込まれています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:858
msgid ""
"Aside from debug symbols,\n"
"setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files\n"
"for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.\n"
"This source cache is useful for native debugging tools,\n"
"to establish the link between the symbols and matching source code.\n"
"It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr "デバッグシンボルとは別に、 `-Dquarkus.native.debug.enabled=true`  フラグを設定すると、ネイティブ実行可能ファイル生成時に解決された JDK ランタイムクラス、GraalVM クラス、アプリケーションクラスのソースファイルのキャッシュが生成されます。このソースキャッシュは、シンボルと一致するソースコード間のリンクを確立するために、ネイティブデバッグツールにとって有用です。ネイティブ実行可能ファイルをデバッグする際に、必要なソースだけをデバッガー/IDEが利用できるようにする便利な方法を提供します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:865
msgid ""
"Sources for third party jar dependencies, including Quarkus source code,\n"
"are not added to the source cache by default.\n"
"To include those, make sure you invoke `mvn dependency:sources` first.\n"
"This step is required in order to pull the sources for these dependencies,\n"
"and get them included in the source cache."
msgstr "Quarkusのソースコードを含むサードパーティのjar依存関係のソースは、デフォルトではソースキャッシュに追加されません。これらを含めるには、まず `mvn dependency:sources`  を起動してください。このステップは、これらの依存関係のソースを引き出し、ソースキャッシュに含めるために必要です。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:871
msgid "The source cache is located in the `target/sources` folder."
msgstr "ソースキャッシュは `target/sources`  フォルダーにあります。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:875
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr "`gdb`  を `target`  とは異なるディレクトリから実行している場合、ソースは以下を"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:882
msgid "in the `gdb` prompt."
msgstr "`gdb`  プロンプトで実行することで読み込まれます。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:884
msgid "Or start `gdb` with:"
msgstr "または、 `gdb`  を以下のように起動してください:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:891
msgid "e.g.,"
msgstr "例えば、"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:898
msgid "For a more detailed guide about debugging native images please refer to the xref:native-reference.adoc[Native Reference Guide]."
msgstr "ネイティブイメージのデバッグに関する詳細なガイドについては、xref:native-reference.adoc[ネイティブリファレンスガイド] を参照してください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:900
#, fuzzy
msgid "Using Monitoring Options"
msgstr "監視オプションの使用"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:902
#, fuzzy
msgid ""
"Monitoring options such as JDK flight recorder, jvmstat, heap dumps, and remote JMX (experimental in Mandrel 23)\n"
"can be added to the native executable build. Simply supply a comma separated list of the monitoring options you wish to\n"
"include at build time."
msgstr "JDK フライトレコーダー、jvmstat、ヒープダンプ、リモート JMX (Mandrel 23 では実験的) などの監視オプションを、ネイティブの実行可能ビルドに追加できます。ビルド時に含めたい監視オプションをカンマ区切りで指定するだけです。"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:911
#, fuzzy
msgid "Monitoring Option"
msgstr "モニタリング・オプション"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:911
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:911
#, fuzzy
msgid "Availability As Of"
msgstr "在庫状況"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:913
#, fuzzy
msgid "jfr"
msgstr "ジェファ"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:914
#, fuzzy
msgid "Include JDK Flight Recorder support"
msgstr "JDKフライトレコーダーのサポートを含む"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:915
#, fuzzy
msgid "GraalVM CE 21.3 Mandrel 21.3"
msgstr "グラールVM CE 21.3 マンドレル 21.3"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:917
#, fuzzy
msgid "jvmstat"
msgstr "jvmstat"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:918
#, fuzzy
msgid "Adds jvmstat support"
msgstr "jvmstatのサポートを追加"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:935
#, fuzzy
msgid "GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)"
msgstr "GraalVM 22.3、GraalVM CE 17.0.7 マンドレル 22.3 マンドレル 23.0 (17.0.7)"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:921
#, fuzzy
msgid "heapdump"
msgstr "ヒープダンプ"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:922
#, fuzzy
msgid "Adds support for generating heap dumps"
msgstr "ヒープダンプの生成をサポート"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:925
#, fuzzy
msgid "jmxclient"
msgstr "ジーエムエックスクライアント"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:926
#, fuzzy
msgid "Adds support for connections to JMX servers."
msgstr "JMXサーバーへの接続のサポートを追加。"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:927
#, fuzzy
msgid "GraalVM for JDK 17/20 Mandrel 23.0"
msgstr "GraalVM for JDK 17/20 マンドレル 23.0"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:929
#, fuzzy
msgid "jmxserver"
msgstr "ジーエムエックスサーバー"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:930
#, fuzzy
msgid "Adds support for accepting connections from JMX clients."
msgstr "JMXクライアントからの接続を受け付けるサポートを追加する。"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:931
#, fuzzy
msgid "GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)"
msgstr "JDK 17/20 用 GraalVM マンドレル 23.0 (17.0.7)"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:933
#, fuzzy
msgid "all"
msgstr "すべて"

#. type: Table
#: upstream/_versions/3.2/guides/building-native-image.adoc:934
#, fuzzy
msgid "Adds all monitoring options."
msgstr "すべての監視オプションを追加します。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:938
#, fuzzy
msgid "Please see the Quarkus Native Reference Guide for more detailed information on these monitoring options."
msgstr "これらのモニタリングオプションの詳細については、『Quarkus Native Reference Guide』を参照してください。"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:941
msgid "Configuring the Native Executable"
msgstr "ネイティブ実行可能ファイルの設定"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:943
msgid ""
"There are a lot of different configuration options that can affect how the native executable is generated.\n"
"These are provided in `application.properties` the same as any other config property."
msgstr "ネイティブ実行可能ファイルの生成方法に影響を与える設定オプションがたくさんあります。これらは他の設定プロパティーと同じように `application.properties`  で提供されています。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:946
msgid "The properties are shown below:"
msgstr "プロパティーは以下の通りです:"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:948
msgid "link:{generated-dir}/config/quarkus-native-pkg-native-config.adoc[role=include]"
msgstr "link:{generated-dir}/config/quarkus-native-pkg-native-config.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/3.2/guides/building-native-image.adoc:950
msgid "What's next?"
msgstr "次のステップ"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:952
msgid ""
"This guide covered the creation of a native (binary) executable for your application.\n"
"It provides an application exhibiting a swift startup time and consuming less memory.\n"
"However, there is much more."
msgstr "このガイドでは、アプリケーション用のネイティブ(バイナリー)実行可能ファイルの作成について説明しました。これにより、迅速な起動時間と少ないメモリー消費を示すアプリケーションを提供します。しかし、それだけではありません。"

#. type: Plain Text
#: upstream/_versions/3.2/guides/building-native-image.adoc:956
msgid "We recommend continuing the journey with the xref:deploying-to-kubernetes.adoc[deployment to Kubernetes and OpenShift]."
msgstr "xref:deploying-to-kubernetes.adoc[Kubernetes と OpenShift へのデプロイメント] で探検を続けることをお勧めします。"
