msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "OpenID Connect client and token propagation quickstart"
msgstr "OpenID Connectクライアントとトークン伝搬クイックスタート"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Learn how to use OpenID Connect (OIDC) and OAuth2 clients with filters to get, refresh, and propagate access tokens in your applications."
msgstr "OpenID Connect (OIDC) と OAuth2 クライアントにフィルタを使用して、アプリケーションでアクセストークンを取得、更新、伝播する方法を学びます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This approach uses an OIDC token propagation Reactive filter to propagate the incoming bearer access tokens."
msgstr "このアプローチでは、OIDC トークン伝搬リアクティブ・フィルタを使用して、着信ベアラ・アクセ ス・トークンを伝搬します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "For more information about `OIDC Client` and `Token Propagation` support in Quarkus, see the xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference guide]."
msgstr "Quarkusの `OIDC Client` 、 `Token Propagation` サポートの詳細については、 xref:security-openid-connect-client-reference.adoc[OpenID Connect（OIDC）およびOAuth2クライアントとフィルターのリファレンスガイドを] 参照してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To protect your applications by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "ベアラートークン認証を使用してアプリケーションを保護するには、 xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) ベアラートークン認証] ガイドを参照してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In this example, an application is built with two Jakarta REST resources, `FrontendResource` and `ProtectedResource`.\n"
"Here, `FrontendResource` uses one of two methods to propagate access tokens to `ProtectedResource`:"
msgstr "この例では、 `FrontendResource` と `ProtectedResource` という 2 つの Jakarta REST リソースを使用してアプリケーションを構築しています。 `FrontendResource` は、 `ProtectedResource` にアクセストークンを伝搬するために、2 つのメソッドのいずれかを使用しています："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can get a token by using an OIDC token propagation Reactive filter before propagating it."
msgstr "トークンを伝搬する前に、OIDCトークン伝搬リアクティブフィルターを使用してトークンを取得することができます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "It can use an OIDC token propagation Reactive filter to propagate the incoming access token."
msgstr "OIDC トークン伝搬 Reactive フィルタを使用して、受信アクセストークンを伝搬することができます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`FrontendResource` has four endpoints:"
msgstr "`FrontendResource` には4つのエンドポイントがあります："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`FrontendResource` uses a REST Client with an OIDC token propagation Reactive filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called.\n"
"Also, `FrontendResource` uses a REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、 または のいずれかが呼び出されたときに、REST Client と OIDC トークン伝搬 Reactive フィルタを使用してアクセストークンを取得し、 に伝搬します。また、 は、 と共に REST Client を使用し、 または のいずれかが呼び出されたときに、現在受信しているアクセストークンを に伝播します。 `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` `FrontendResource` `OpenID Connect Token Propagation Reactive Filter` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `ProtectedResource`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "`ProtectedResource` has two endpoints:"
msgstr "`ProtectedResource` には2つのエンドポイントがあります："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Both endpoints return the username extracted from the incoming access token, which was propagated to `ProtectedResource` from `FrontendResource`.\n"
"The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role, and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "どちらのエンドポイントも、入力されたアクセストークンから抽出されたユーザー名を返します。これは、 `FrontendResource` から `ProtectedResource` に伝搬されたものです。これらのエンドポイントの唯一の違いは、 `/protected/user-name` を呼び出すことは、現在のアクセストークンが `user` の役割を持っている場合にのみ許可され、 `/protected/admin-name` を呼び出すことは、現在のアクセストークンが `admin` の役割を持っている場合にのみ許可されるということです。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The solution is in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "解決策は `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリ] にあります。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"First, you need a new project.\n"
"Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新しいプロジェクトを作成してください："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter`, and `resteasy-reactive` extensions."
msgstr "このコマンドは、 `oidc` 、 `oidc-client-reactive-filter` 、 `oidc-token-propagation-reactive-filter` 、 `resteasy-reactive` エクステンションをインポートして、Maven プロジェクトを生成します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command adds the following extensions to your build file:"
msgstr "このコマンドは、ビルドファイルに以下のエクステンションを追加します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Start by implementing `ProtectedResource`:"
msgstr "`ProtectedResource` を導入することから始めましょう："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`ProtectedResource` returns a name from both `userName()` and `adminName()` methods.\n"
"The name is extracted from the current `JsonWebToken`."
msgstr "`ProtectedResource` は、 と の両方のメソッドから名前を返します。名前は現在の から抽出されます。 `userName()` `adminName()` `JsonWebToken`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, add two REST clients, `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter`, which `FrontendResource` uses to call `ProtectedResource`."
msgstr "次に、 `OidcClientRequestReactiveFilter` と `AccessTokenRequestReactiveFilter` という2つのRESTクライアントを追加します。 `FrontendResource` は、 `ProtectedResource` を呼び出すために使用します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `OidcClientRequestReactiveFilter` REST Client:"
msgstr "`OidcClientRequestReactiveFilter` REST Client を追加します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The `RestClientWithOidcClientFilter` interface depends on `OidcClientRequestReactiveFilter` to get and propagate the tokens."
msgstr "`RestClientWithOidcClientFilter` インターフェースは、トークンの取得と伝播のために `OidcClientRequestReactiveFilter` に依存しています。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Add the `AccessTokenRequestReactiveFilter` REST Client:"
msgstr "`AccessTokenRequestReactiveFilter` REST Client を追加します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "The `RestClientWithTokenPropagationFilter` interface depends on `AccessTokenRequestReactiveFilter` to propagate the incoming already-existing tokens."
msgstr "`RestClientWithTokenPropagationFilter` インターフェースは、 `AccessTokenRequestReactiveFilter` に依存して、着信した既存のトークンを伝播します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are the same.\n"
"This is because combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client causes side effects because both filters can interfere with each other.\n"
"For example, `OidcClientRequestReactiveFilter` can override the token propagated by `AccessTokenRequestReactiveFilter`, or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to get a new token instead."
msgstr "`RestClientWithOidcClientFilter` と `RestClientWithTokenPropagationFilter` の両方のインターフェイスが同じであることに注意してください。これは、 `OidcClientRequestReactiveFilter` と `AccessTokenRequestReactiveFilter` を同じ REST Client 上で組み合わせると、両方のフィルタが互いに干渉する可能性があるため、副作用が発生するためです。たとえば、 `OidcClientRequestReactiveFilter` は、 `AccessTokenRequestReactiveFilter` によって伝播されたトークンをオーバーライドすることができます。また、 `AccessTokenRequestReactiveFilter` は、伝播可能なトークンがないときに呼び出されると失敗することがあり、 `OidcClientRequestReactiveFilter` は、代わりに新しいトークンを取得することが期待されます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, finish creating the application by adding `FrontendResource`:"
msgstr "`FrontendResource` を追加してアプリケーションの作成を終了します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"`FrontendResource` uses REST Client with an OIDC token propagation Reactive filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called.\n"
"Also, `FrontendResource` uses REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、REST Client と OIDC トークン伝搬 Reactive フィルタを使用して、 または のいずれかが呼び出されたときにアクセストークンを取得し、 に伝搬します。また、 は とともに REST Client を使用して、 または のいずれかが呼び出されたときに、現在受信しているアクセストークンを に伝搬します。 `/frontend/user-name-with-oidc-client-token` `/frontend/admin-name-with-oidc-client-token` `ProtectedResource` `FrontendResource` `OpenID Connect Token Propagation Reactive Filter` `/frontend/user-name-with-propagated-token` `/frontend/admin-name-with-propagated-token` `ProtectedResource`"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Finally, add a Jakarta REST `ExceptionMapper`:"
msgstr "最後に、Jakarta REST `ExceptionMapper` を追加します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role.\n"
"Without this mapper, `RESTEasy Reactive` would correctly convert the exceptions that escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource`.\n"
"However, in the tests, it would not be possible to assert that `500` is caused by an authorization exception instead of some internal error."
msgstr "この例外マッパーは、トークンが期待される役割を持たないときに `ProtectedResource` が `403` を返すことをテスト中に検証するためだけに追加されています。このマッパーがなければ、 `RESTEasy Reactive` は REST Client 呼び出しからエスケープされた例外を `500` に正しく変換し、 `ProtectedResource` のような下流のリソースから情報が漏れるのを防ぎます。 しかし、テストでは、 `500` が何らかの内部エラーではなく認可例外によるものであることを主張することはできません。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Having prepared the code, you configure the application:"
msgstr "コードを準備したら、アプリケーションを設定します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This configuration references Keycloak, which is used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` by using a `password` grant.\n"
"Both REST clients point to `ProtectedResource`'s HTTP address."
msgstr "このコンフィギュレーションはKeycloakを参照します。このKeycloakは `ProtectedResource` 、受信したアクセストークンを検証するために使用され、 `OidcClient` 、 `password` グラントを使用してユーザー `alice` のトークンを取得するために使用されます。どちらのRESTクライアントも`ProtectedResource'のHTTPアドレスを指しています。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` launches a container for you when the application is run in dev or test modes.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイル接頭辞を追加すると、アプリケーションを dev モードまたは test モードで実行するときに、 `Dev Services for Keycloak` でコンテナが起動されるようになります。詳細については、「 xref:oidc-client-keycloak-dev-mode[dev モードでアプリケーションを実行] する」のセクションを参照してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Starting and configuring the Keycloak server"
msgstr "Keycloakサーバーの起動と設定"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Do not start the Keycloak server when you run the application in dev or test modes; `Dev Services for Keycloak` launches a container.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section.\n"
"Ensure you put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath, in the `target/classes` directory.\n"
"This placement ensures that the file is automatically imported in dev mode.\n"
"However, if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], you do not need to add the realm file to the classpath because the build process has already done so."
msgstr "アプリケーションをdevモードまたはtestモードで実行するときは、Keycloakサーバーを起動しないでください。 `Dev Services for Keycloak` 、コンテナが起動します。詳細については、devモードでアプリケーションを xref:oidc-client-keycloak-dev-mode[実行] するセクションを参照してください。 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm設定] ファイルをクラスパスの `target/classes` 。このように配置することで、dev モードでこのファイルが自動的にインポートされるようになります。しかし、すでに link:{quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューションを] ビルドしている場合は、realm ファイルをクラスパスに追加する必要はありません。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
msgstr "Keycloakサーバーを起動するには、Dockerを使って以下のコマンドを実行するだけです："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Set `{keycloak.version}` to `24.0.0` or later."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Keycloakサーバーには link:http://localhost:8180[localhost:8180] でアクセスできます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"The password is `admin`."
msgstr "Keycloak管理コンソールにアクセスするには、 `admin` ユーザーでログインします。パスワードは `admin` です。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定] ファイルをインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいrealmを作成] する方法についてKeycloakのドキュメントを参照してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This `quarkus` realm file adds a `frontend` client, and `alice` and `admin` users.\n"
"`alice` has a `user` role.\n"
"`admin` has both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルには、 `frontend` クライアント、 `alice` および `admin` ユーザが追加されています。 `alice` には `user` ロールがあります。 `admin` には `user` および `admin` ロールがあります。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in dev mode"
msgstr "devモードでアプリケーションを実行"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] launches a Keycloak container and imports `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloakは] Keycloakコンテナを起動し、 `quarkus-realm.json` をインポートします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click a `Provider: Keycloak` link in the *OpenID Connect Dev UI* card."
msgstr "link:http://localhost:8080/q/dev-ui[q/dev-ui] で利用可能な xref:dev-ui.adoc[Dev UI] を開き、 *OpenID Connect Dev UI* カードの `Provider: Keycloak` リンクをクリックします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "When asked, log in to a `Single Page Application` provided by the OpenID Connect Dev UI:"
msgstr "と聞かれたら、OpenID Connect Dev UI が提供する `Single Page Application` にログインします："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log in as `alice`, with the password, `alice`.\n"
"This user has a `user` role."
msgstr "`alice` `alice` このユーザは `user` のロールを持ちます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/user-name-with-propagated-token`, which returns `200`."
msgstr "`200` を返す `/frontend/user-name-with-propagated-token` にアクセスします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `403`."
msgstr "`403` を返す `/frontend/admin-name-with-propagated-token` にアクセスします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Log out and back in as `admin` with the password, `admin`.\n"
"This user has both `admin` and `user` roles."
msgstr "ログアウトし、パスワード「 `admin` 」で「 `admin` 」としてログインし直します。このユーザは「 `admin` 」と「 `user` 」の両方のロールを持ちます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `200`."
msgstr "`200` を返す `/frontend/admin-name-with-propagated-token` にアクセスします。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In this case, you are testing that `FrontendResource` can propagate the access tokens from the OpenID Connect Dev UI."
msgstr "この場合、 `FrontendResource` が OpenID Connect Dev UI からアクセストークンを伝搬できることをテストしています。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in JVM mode"
msgstr "JVMモードでのアプリケーションの実行"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "開発モードでアプリケーションを探索した後、標準のJavaアプリケーションとして実行することができます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "First, compile it:"
msgstr "まず、コンパイルします:"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Then, run it:"
msgstr "そして、実行してみてください:"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Running the application in native mode"
msgstr "ネイティブ・モードでのアプリケーションの実行"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "You can compile this demo into native code; no modifications are required."
msgstr "このデモをネイティブ・コードにコンパイルすることができます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary and optimized to run with minimal resources."
msgstr "これは、ランタイム・テクノロジーが生成されたバイナリに含まれており、最小限のリソースで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Compilation takes longer, so this step is turned off by default.\n"
"To build again, enable the `native` profile:"
msgstr "コンパイルには時間がかかるので、このステップはデフォルトではオフになっています。再度ビルドするには、 `native` プロファイルを有効にします："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "After a little while, when the build finishes, you can run the native binary directly:"
msgstr "しばらくしてビルドが終了すると、ネイティブ・バイナリを直接実行できます："

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "For more information about testing your application in dev mode, see the preceding <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr "devモードでのアプリケーションのテストについての詳細は、前の「 xref:oidc-client-keycloak-dev-mode[devモードでアプリケーションを実行] する」のセクションを参照してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使って、 `/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns the `200` status code and the name `alice`."
msgstr "このコマンドは、 `200` ステータスコードと名前 `alice` を返します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"In contrast, this command returns `403`.\n"
"Recall that `alice` only has a `user` role."
msgstr "対照的に、このコマンドは `403` を返します。 `alice` には `user` の役割しかないことを思い出してください。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Next, obtain an access token for `admin`:"
msgstr "次に、 `admin` のアクセストークンを取得します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Use this token to call `/frontend/user-name-with-propagated-token`:"
msgstr "このトークンを使って `/frontend/user-name-with-propagated-token` を呼び出します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command returns a `200` status code and the name `admin`."
msgstr "このコマンドは `200` というステータスコードと `admin` という名前を返します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "Now, use this token to call `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使って `/frontend/admin-name-with-propagated-token` を呼び出します："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "This command also returns the `200` status code and the name `admin` because `admin` has both `user` and `admin` roles."
msgstr "このコマンドは、 `admin` が `user` と `admin` の両方の役割を持っているため、 `200` ステータスコードと名前 `admin` も返します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid ""
"Now, check the `FrontendResource` methods, which do not propagate the existing tokens but use `OidcClient` to get and propagate the tokens.\n"
"As already shown, `OidcClient` is configured to get the tokens for the `alice` user, so:"
msgstr "`FrontendResource` メソッドをチェックしてください。 メソッドは既存のトークンを伝搬しませんが、 `OidcClient` を使用してトークンを取得し、伝搬します。すでに示したように、 `OidcClient` は、 `alice` ユーザのトークンを取得するように構成されています："

#: _versions/3.8/guides/security-openid-connect-client.adoc
#, fuzzy
msgid "In contrast with the preceding command, this command returns a `403` status code."
msgstr "先のコマンドとは対照的に、このコマンドは `403` ステータス・コードを返します。"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "References"
msgstr "参照"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#: _versions/3.8/guides/security-openid-connect-client.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
