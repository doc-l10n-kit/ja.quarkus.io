msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/rest-json.adoc:6
msgid "Writing JSON REST Services"
msgstr "JSON RESTサービスの実装"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:11
msgid "JSON is now the _lingua franca_ between microservices."
msgstr "JSON は今やマイクロサービス間の _共通言語_ となっています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:13
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr "このガイドでは、REST サービスが JSON ペイロードを利用および生成する方法を見ていきます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:15
msgid "there is another guide if you need a xref:rest-client-reactive.adoc[REST client] (including support for JSON)."
msgstr "link:rest-client.html[RESTクライアント]（JSONのサポートを含む）が必要な場合は、別のガイドがあります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:19
msgid ""
"This is an introduction to writing JSON REST services with Quarkus.\n"
"A more detailed guide about RESTEasy Reactive is available xref:resteasy-reactive.adoc[here]."
msgstr "Quarkusを使用してJSON RESTサービスを記述するための入門書です。RESTEasy Reactiveに関するより詳細なガイドは、 link:resteasy-reactive.html[こちら] をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:23
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:25
msgid "link:{includes}/prerequisites.adoc[role=include]"
msgstr "link:{includes}/prerequisites.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:27
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:29
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで構築されるアプリケーションは非常にシンプルです。ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:31
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべて JSON 形式になっています。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:33
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:35
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:38
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:40
msgid "The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr "ソリューションは `rest-json-quickstart` {quickstarts-tree-url}/rest-json-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:42
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:44
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:77
msgid "link:{includes}/devtools/create-app.adoc[role=include]"
msgstr "link:{includes}/devtools/create-app.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:50
msgid ""
"This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular adds the following dependency:"
msgstr "このコマンドは、RESTEasy/JAX-RSと link:https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートする新しいプロジェクトを生成し、特に以下の依存関係を追加します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:83
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:92
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:70
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、 Quarkus は3つの Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 モジュール] を登録するため、手動で登録する必要はありません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:73
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy Reactive JSON-B extension instead:"
msgstr "Quarkusは https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているので、JacksonよりもJSON-Bが好きな場合は、代わりにRESTEasy JSON-B エクステンションに依存したプロジェクトを作成することができます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:79
msgid ""
"This command generates a new project importing the RESTEasy Reactive/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular adds the following dependency:"
msgstr "このコマンドは、RESTEasy/JAX-RSと https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] エクステンションをインポートする新しいプロジェクトを生成し、特に以下の依存関係を追加します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:99
msgid "While named \"reactive\", RESTEasy Reactive supports equally well both traditional blocking patterns and reactive patterns."
msgstr "RESTEasy Reactiveは、「リアクティブ」という名前が付いていますが、従来のブロッキングパターンとリアクティブパターンの両方を同じようにサポートしています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:101
msgid "For more information about RESTEasy Reactive, please refer to the xref:resteasy-reactive.adoc[dedicated guide]."
msgstr "RESTEasy Reactiveの詳細については、 link:resteasy-reactive.html[専用ガイド]をご参照ください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:104
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:106
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、フルーツのリストを管理するアプリケーションを作成します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:108
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:129
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことはJSONシリアライズレイヤーがデフォルトコンストラクターを必要とすることだけです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:131
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "次に、 `org.acme.rest.json.FruitResource` クラスを以下のように作成します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:175
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations."
msgstr "実装は非常に簡単で、 JAX-RS のアノテーションを使ってエンドポイントを定義するだけです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:177
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:182
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-reactive-jackson` or `quarkus-resteasy-reactive-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr "`quarkus-resteasy-jackson` や `quarkus-resteasy-jsonb` などの JSON エクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkus はほとんどの戻り値に `application/json` メディアタイプをデフォルトで使用します( `String` や `File` などのよく知られたタイプには例外があり、それぞれ `text/plain` と `application/octet-stream` がデフォルトとなっています)。"

#. type: Title ===
#: upstream/_versions/2.13/guides/rest-json.adoc:189
msgid "Configuring JSON support"
msgstr "JSON サポートの設定"

#. type: Title ====
#: upstream/_versions/2.13/guides/rest-json.adoc:191
msgid "Jackson"
msgstr "Jackson"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:193
msgid ""
"In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties\n"
"(by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "Quarkus では、 CDI経由で取得され、 Quarkusのエクステンションによって消費されるデフォルトの Jackson `ObjectMapper` は、 `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 機能を無効にすることで不明なプロパティを無視するように設定されています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:196
msgid ""
"You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`\n"
"or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 クラスごとに `@JsonIgnoreProperties(ignoreUnknown = false)` を設定することで、Jackson のデフォルトの動作を復元することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:199
msgid ""
"Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601\n"
"(by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "さらに、`ObjectMapper` は、 `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` 機能を無効化することで日付と時刻を ISO-8601 でフォーマットするように設定されています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:202
msgid ""
"The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true`\n"
"in your `application.properties`. If you want to change the format for a single field, you can use the\n"
"`@JsonFormat` annotation."
msgstr "`application.properties` で `quarkus.jackson.write-dates-as-timestamps=true` を設定すると、Jackson のデフォルトの動作を復元することができます。単一のフィールドのフォーマットを変更したい場合は、`@JsonFormat` アノテーションを使用することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:206
msgid ""
"Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.\n"
"The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer`\n"
"inside of which any Jackson configuration can be applied."
msgstr "また、 Quarkus では、 CDI Bean を介して様々な Jackson の設定を非常に簡単に設定することができます。最も単純な、そして推奨されるアプローチは、 `io.quarkus.jackson.ObjectMapperCustomizer` 型の CDI Bean を定義し、その中であらゆる Jackson の設定を適用できるようにすることです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:210
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:227
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、自分の `ObjectMapper` Bean を提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#. type: Title =====
#: upstream/_versions/2.13/guides/rest-json.adoc:258
msgid "Mixin support"
msgstr "Mixinサポート"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:260
msgid ""
"Quarkus automates the registration of Jackson's Mixin support, via the `io.quarkus.jackson.JacksonMixin` annotation.\n"
"This annotation can be placed on classes that are meant to be used as Jackson mixins while the classes they are meant to customize\n"
"are defined as the value of the annotation."
msgstr "Quarkus は、`io.quarkus.jackson.JacksonMixin` アノテーションを介して、Jackson の Mixin サポートの登録を自動化します。 このアノテーションは、Jackson mixin として使用することを意図したクラスに配置できますが、カスタマイズすることを意図したクラスはアノテーションの値として定義されます。"

#. type: Title ====
#: upstream/_versions/2.13/guides/rest-json.adoc:264
msgid "JSON-B"
msgstr "JSON-B"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:266
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、 Quarkus では、 `quarkus-resteasy-jsonb` エクステンションを使用することで、 Jackson の代わりに JSON-B を使用するオプションを提供しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:268
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前項と同様のアプローチで、 `io.quarkus.jsonb.JsonbConfigCustomizer` bean を使用して JSON-B を設定することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:270
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `FooSerializer` という名前のカスタムシリアライザーを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:288
msgid ""
"A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションとしては、 `Dependent` スコープ付きの `javax.json.bind.JsonbConfig` の Bean を直接提供するか、極端な場合には `Singleton` スコープ付きの `javax.json.bind.Jsonb` のタイプの Bean を提供することが考えられます。後者のアプローチを利用する場合は、 `javax.json.bind.Jsonb` を生成する CDI プロデューサーの `io.quarkus.jsonb.JsonbConfigCustomizer` Bean をすべて手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される JSON-B 固有のカスタマイズが適用されなくなります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:318
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:320
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "それでは、 `FruitResource` とやりとりするための簡単なウェブページを追加してみます。 Quarkus は、 `META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルの内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:324
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:328
msgid "start Quarkus with:"
msgstr "Quarkusを起動します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:330
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:331
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr " `http://localhost:8080/fruits.html` をブラウザで開く"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:332
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:336
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:338
msgid "You can build a native executable with the usual command:"
msgstr "通常のコマンドでネイティブ実行可能ファイルをビルドすることができます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:496
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:342
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:344
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開き、アプリケーションを使用します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:346
msgid "About serialization"
msgstr "シリアライゼーションについて"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:348
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSON シリアライズライブラリーは、 Java のリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:350
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "GraalVM でネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。幸いなことに、 Quarkus はその作業のほとんどを代行してくれます。 これまでのところ、 `Fruit` でさえ、リフレクションを使用するためのクラスを登録しておらず、すべてが正常に動作しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:354
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkus は、 REST メソッドからシリアライズされた型を推論することができる場合に、何らかの妙技を実行します。以下のような REST メソッドがある場合、 Quarkus は、 `Fruit` がシリアライズされることを決定します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:365
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at build time\n"
"and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkusは 、ビルド時に REST メソッドを分析することで自動的にこれを行います。そのため、このガイドの最初の部分では、リフレクションを登録する必要がありませんでした。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:368
msgid ""
"Another common pattern in the JAX-RS world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "JAX-RS の世界でよくあるもう一つのパターンは、 `Response` オブジェクトを使用することです。 `Response` オブジェクトには、いくつかの便利な機能があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:371
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "メソッド内で発生した内容に応じて異なるエンティティータイプを返すことができます ( 例えば `Legume` や `Error` ) 。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:372
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "`Response` の属性 ( エラーの場合は、そのステータスなど ) を設定することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:374
msgid "Your REST method then looks like this:"
msgstr "REST メソッドは次のようになります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:384
msgid ""
"It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "`Response` に含まれるタイプは情報がないため、Quarkusがビルド時に判断することはできません。この場合、Quarkus は必要なクラスのリフレクションを自動的に登録することができません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:387
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:389
msgid "Using Response"
msgstr "レスポンスの利用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:391
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:412
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "それでは、マメ科植物 ( Legume ) のリストを返すメソッドを一つだけ持つ `LegumeResource` REST サービスを作成してみます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:414
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Legume` のリストではなく `Response` を返ます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:445
msgid ""
"Now let's add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみます。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:449
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "ブラウザーを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:451
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深いのは、アプリケーションをネイティブ実行可能ファイルとして実行するときです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:494
msgid "create the native executable with:"
msgstr "以下でネイティブの実行ファイルを作成します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:497
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:498
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "ブラウザーを起動し、 http://localhost:8080/legumes.html にアクセスします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:463
msgid "No legumes there."
msgstr "マメ科植物は見当たりません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:465
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr "上記のように、問題は Quarkus が、 REST エンドポイントを分析することで `Legume` クラスが何らかのリフレクションを必要とすることを判断できなかったことです。 JSON シリアライズライブラリーは、 `Legume` のフィールドのリストを取得しようとすると空のリストを取得するため、フィールドのデータをシリアライズしません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:470
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will simply return an empty list of fields."
msgstr "現時点では、 JSON-B や Jackson がクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外は発生しません。 GraalVM は単に空のフィールドのリストを返します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:473
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "将来的にはこの点が変わり、エラーがより明白になることが期待されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:476
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:487
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するよう Quarkus に指示します。 `@RegisterForReflection` アノテーションの詳細については、 xref:writing-native-applications-tips.adoc#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:489
msgid "Let's do that and follow the same steps as before:"
msgstr "上記を反映して、今までと同じ手順を実行してみます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:493
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` でアプリケーションを停止させます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:502
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科植物の一覧が表示されました。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:505
msgid "Being reactive"
msgstr "リアクティブであること"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:507
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:510
msgid "RESTEasy Reactive is naturally integrated with Mutiny."
msgstr "RESTEasy Reactiveは、Mutinyと自然に統合されています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:512
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:529
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に発行される可能性のある複数の項目がある場合に使用します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:532
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni<Response>` のように、 `Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:534
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutiny についての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリー] に記載されています。"

#. type: Title ==
#: upstream/_versions/2.13/guides/rest-json.adoc:536
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:538
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行うことができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:540
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、 Quarkus は、アプリケーションをネイティブ実行可能ファイルとして実行する際に、内部の作業をさらに簡略化しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/rest-json.adoc:542
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "覚えておくべきことは一つだけ、 `Response` を使用していて、 Quarkus がシリアライズされている Bean を特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があることです。"
