msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/reactive-routes.adoc:6
msgid "Using Reactive Routes"
msgstr "リアクティブルートの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:11
msgid ""
"Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.\n"
"This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.\n"
"Quarkus also offers the possibility to use reactive routes.\n"
"You can implement REST API with routes only or combine them with JAX-RS resources and servlets."
msgstr "Reactive Routesは、HTTPエンドポイントを実装するために、 _routes_ を宣言して連鎖させる代替アプローチを提案します。このアプローチは、Express.JsやHapiのようなフレームワークで、JavaScriptの世界で非常に人気があります。Quarkusは、Reactive Routesを使用する可能性も提供しています。ルートのみでREST APIを実装することもできますし、JAX-RSリソースやサーブレットと組み合わせて実装することもできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:16
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr "このガイドに記載されているコードは、この {quickstarts-base-url}[GitHub リポジトリー] の {quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` ディレクトリー] から入手できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:18
msgid ""
"Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].\n"
"With the introduction of xref:resteasy-reactive.adoc[RESTEasy Reactive], you can now implement reactive HTTP APIs and still use JAX-RS annotations.\n"
"Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr "Reactive Routesは当初、 link:quarkus-reactive-architecture.html[Quarkus リアクティブアーキテクチャ]の上にHTTP APIのリアクティブな実行モデルを提供するために導入されました。 link:resteasy-reactive.html[RESTEasy Reactive]の導入により、リアクティブなHTTP APIを実装できるようになり、JAX-RSアノテーションも使用できるようになりました。リアクティブ・ルートは引き続きサポートされています。特に、より _ルートベース_ のアプローチや、基礎となるリアクティブ・エンジンに近いものが必要な場合は、そのようにしてください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:22
msgid "Quarkus HTTP"
msgstr "Quarkus HTTP"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:24
msgid ""
"Before going further, let's have a look at the HTTP layer of Quarkus.\n"
"Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).\n"
"All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.\n"
"Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).\n"
"Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr "先に進む前に、QuarkusのHTTPレイヤーを見てみましょう。QuarkusのHTTPサポートは、ノンブロッキングでリアクティブなエンジン(Eclipse Vert.xとNetty)に基づいています。アプリケーションが受け取るすべてのHTTPリクエストは、 _イベントループ_ (I/Oスレッド)によって処理され、リクエストを管理するコードに向かってルーティングされます。宛先に応じて、ワーカースレッド(Servlet、Jax-RS)でリクエストを管理するコードを呼び出すか、IOスレッド(Reactive Routes)を使用します。このため、Reactive Routesはノンブロッキングであるか、そのブロッキング性を明示的に宣言しなければならないことに注意してください (ワーカースレッド上で呼び出されることで結果的にブロッキングされます)。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:30
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr "image:http-architecture.png[alt=Quarkus HTTP Architecture]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:32
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "このトピックの詳細については、xref:quarkus-reactive-architecture.adoc[Quarkus リアクティブアーキテクチャのドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:35
msgid "Declaring reactive routes"
msgstr "Reactive Routesの宣言"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:37
msgid ""
"The first way to use reactive routes is to use the `@Route` annotation.\n"
"To have access to this annotation, you need to add the `quarkus-reactive-routes` extension by running this command:"
msgstr "Reactive Routes を使用する最初の方法は、`@Route` アノテーションを使用することです。このアノテーションにアクセスするには、次のコマンドを実行し `quarkus-reactive-routes` エクステンションを追加する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:723
msgid "link:{includes}/devtools/extension-add.adoc[role=include]"
msgstr "link:{includes}/devtools/extension-add.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:725
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:728
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:737
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:60
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr "そして、 _Bean_ では、以下のように `@Route` アノテーションを使用することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:98
msgid "If there is a reactive route found on a class with no scope annotation then `@javax.inject.Singleton` is added automatically."
msgstr "スコープアノテーションがないクラスでリアクティブルートが見つかった場合、`@javax.inject.Singleton` が自動的に追加されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:99
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr "`@Route` アノテーションは、メソッドがリアクティブルートであることを示します。繰り返しになりますが、デフォルトでは、メソッドに含まれるコードはブロックしてはいけません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:100
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr "このメソッドは、 https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] をパラメーターとして取得します。 `RoutingContext` から HTTP リクエストを ( `request()` を使用して) 取得し、 `response().end(...)` を使用してレスポンスを書き込むことができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:101
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr "アノテーションされたメソッドが `void` を返さない場合、引数はオプションです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:102
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr "`RoutingExchange` は、いくつかの便利なメソッドを提供する `RoutingContext` の便利なラッパーです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:103
msgid "The `RoutingExchange` is used to retrieve the request query parameter `name`."
msgstr "`RoutingExchange` は、リクエストクエリパラメータ `name` を取得するために使用されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:104
msgid "The path defines a parameter `name` which can be injected inside the method parameters using the annotation `@Param`."
msgstr "パスはパラメータ `name` を定義します。パラメータ `name` は `@Param` アノテーションを使用してメソッドパラメータ内に注入することができます 。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:106
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr "`RoutingContext` の使用の詳細については、 https://vertx.io/docs/vertx-web/java/[Vert.x Web ドキュメント] を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:108
msgid "The `@Route` annotation allows you to configure:"
msgstr "`@Route` アノテーションを使用すると、以下を設定できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:110
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr "`path`- https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web フォーマット] を使用したパスによるルーティング用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:111
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr "`regex` - 正規表現を使用したルーティングについては、 https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[詳細] を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:112
msgid "The `methods` - the HTTP verbs triggering the route such as `GET`, `POST`..."
msgstr "`methods` - `GET`、`POST` などのルートをトリガーする HTTP 動詞"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:113
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr "`type` - _normal_ (ノンブロッキング)、_blocking_ (ワーカスレッドにディスパッチされるメソッド)、あるいは _failure_ で、失敗時にこのルートが呼び出されることを示します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:114
msgid ""
"The `order` - the order of the route when several routes are involved in handling the incoming request.\n"
"Must be positive for regular user routes."
msgstr "`order` - 受信リクエストの処理に複数のルートが関与している場合のルートの順序。通常のユーザールートでは正である必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:116
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr "`produces` と `consumes` を使用して生成および消費された mime タイプ。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:118
msgid "For instance, you can declare a blocking route as follows:"
msgstr "たとえば、次のようにブロッキングルートを宣言できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:130
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr "または、`@io.smallrye.common.annotation.Blocking` を使用して、`type = Route.HandlerType.BLOCKING` を省略できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:139
msgid "When `@Blocking` is used, it ignores the `type` attribute of `@Route`."
msgstr "`@Blocking` が使用されている場合、`@Route` の `type` 属性は無視されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:142
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr "`@Route` アノテーションは繰り返し可能であるため、1 つのメソッドに対して複数のルートを宣言できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:152
msgid "Each route can use different paths, methods..."
msgstr "各ルートは、異なるパスやメソッドなどを使用できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:154
msgid "If no content-type header is set, then we will try to use the most acceptable content type by matching the accept header with the value of the `Route` produces attribute as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr "もしcontent-typeヘッダーが設定されていなければ、acceptヘッダーを `io.vertx.ext.web.RoutingContext.getAcceptableContentType()` で定義されている `Route` produces属性の値と照合して、最も受け入れやすいコンテンツタイプを使用しようと試みます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:163
msgid "If the `accept` header matches `text/html`, we set the content type automatically to `text/html`."
msgstr "`accept` ヘッダーが `text/html` と一致する場合、コンテンツタイプを自動的に `text/html` に設定します。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:165
msgid "Handling conflicting routes"
msgstr "競合するルートの処理"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:167
msgid ""
"You may end up with multiple routes matching a given path.\n"
"In the following example, both route matches `/accounts/me`:"
msgstr "特定のパスに複数のルートが一致する場合があります。次の例では、両方のルートが `/accounts/me` に一致しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:183
msgid ""
"As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.\n"
"To avoid the conflict, use the `order` attribute:"
msgstr "その結果、パスパラメーター `id` が `me` に設定された状態で最初のルートが呼び出されます。競合を回避するには、`order` 属性を使用します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:199
msgid ""
"By giving a lower order to the second route, it gets evaluated first.\n"
"If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr "2 番目のルートに低い順序を与えることで、それが最初に評価されます。リクエストパスが一致する場合は呼び出され、一致しない場合は他のルートが評価されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:202
msgid "`@RouteBase`"
msgstr "`@RouteBase`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:204
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr "このアノテーションを使用して、クラスで宣言されたReactive Routesのデフォルトを設定できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:217
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr "`path` 値は、`Route#path()` が使用されるクラスで宣言されたルートメソッドの接頭辞として使用されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:218
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr "`produces()` の値は、 `Route#produces()` が空のすべてのルートで、コンテンツベースのルーティングに使用されます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:221
msgid "Reactive Route Methods"
msgstr "Reactive Routesメソッド"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:223
msgid ""
"A route method must be a non-private non-static method of a CDI bean.\n"
"If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.\n"
"If the annotated method does not return `void` then the arguments are optional."
msgstr "ルートメソッドは、CDIBean の非プライベート非静的メソッドでなければなりません。アノテーションされたメソッドが `void` を返す場合は、少なくとも 1 つの引数を受け入れる必要があります。以下はサポート対象のタイプです。アノテーションされたメソッドが `void` を返さない場合、引数はオプションになります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:227
msgid ""
"Methods that return `void` must __end__ the response or the HTTP request to this route will never end.\n"
"Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr "`void` を返すメソッドは、このルートへの応答または HTTP リクエストを __終了__ する必要があります。`RoutingExchange` のメソッドの中には、それを行うものとそうでないものがあり、レスポンスの `end ()` メソッドを自分で呼び出す必要があります。詳細については、JavaDoc を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:230
msgid "A route method can accept arguments of the following types:"
msgstr "ルートメソッドは、次のタイプの引数を受け取ることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:232
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr "`io.vertx.ext.web.RoutingContext`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:233
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr "`io.quarkus.vertx.web.RoutingExchange`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:234
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr "`io.vertx.core.http.HttpServerRequest`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:235
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr "`io.vertx.core.http.HttpServerResponse`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:236
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr "`io.vertx.mutiny.core.http.HttpServerRequest`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:237
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr "`io.vertx.mutiny.core.http.HttpServerResponse`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:239
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into method parameters annotated with `@io.quarkus.vertx.web.Param` using the following types:"
msgstr "さらに、`HttpServerRequest` パラメーターを以下の型を使用した `@io.quarkus.vertx.web.Param` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:283
msgid "Parameter Type"
msgstr "パラメータータイプ"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:283
#, fuzzy
msgid "Obtained via"
msgstr "経由で入手"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:284
msgid "`java.lang.String`"
msgstr "`java.lang.String`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:245
msgid "`routingContext.request().getParam()`"
msgstr "`routingContext.request().getParam()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:265
msgid "`java.util.Optional<String>`"
msgstr "`java.util.Optional<String>`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:266
msgid "`java.util.List<String>`"
msgstr "`java.util.List<String>`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:246
msgid "`routingContext.request().params().getAll()`"
msgstr "`routingContext.request().params().getAll()`"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:250
msgid "Request Parameter Example"
msgstr "リクエストパラメーターの例"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:259
msgid "The `HttpServerRequest` headers can be injected into method parameters annotated with `@io.quarkus.vertx.web.Header` using the following types:"
msgstr "`HttpServerRequest` ヘッダーは、以下の型を使用した `@io.quarkus.vertx.web.Header` でアノテーションされたメソッドパラメーターに挿入できます。"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:265
msgid "`routingContext.request().getHeader()`"
msgstr "`routingContext.request().getHeader()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:266
msgid "`routingContext.request().headers().getAll()`"
msgstr "`routingContext.request().headers().getAll()`"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:270
msgid "Request Header Example"
msgstr "リクエストヘッダーの例"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:279
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body` using the following types:"
msgstr "リクエストボディは、以下の型を使用した、 `@io.quarkus.vertx.web.Body` でアノテーションされたメソッドパラメーターに注入することができます。"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:284
msgid "`routingContext.getBodyAsString()`"
msgstr "`routingContext.getBodyAsString()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:285
msgid "`io.vertx.core.buffer.Buffer`"
msgstr "`io.vertx.core.buffer.Buffer`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:285
msgid "`routingContext.getBody()`"
msgstr "`routingContext.getBody()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:286
msgid "`io.vertx.core.json.JsonObject`"
msgstr "`io.vertx.core.json.JsonObject`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:286
msgid "`routingContext.getBodyAsJson()`"
msgstr "`routingContext.getBodyAsJson()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:287
msgid "`io.vertx.core.json.JsonArray`"
msgstr "`io.vertx.core.json.JsonArray`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:287
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr "`routingContext.getBodyAsJsonArray()`"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:288
msgid "any other type"
msgstr "他の型"

#. type: Table
#: upstream/_versions/2.13/guides/reactive-routes.adoc:288
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:292
msgid "Request Body Example"
msgstr "リクエストボディの例"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:302
msgid ""
"A failure handler can declare a single method parameter whose type extends `Throwable`.\n"
"The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr "失敗ハンドラーは、タイプが `Throwable` を拡張する単一のメソッドパラメーターを宣言できます。パラメーターのタイプは、 `RoutingContext#failure()` の結果と一致させるために使用されます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:305
msgid "Failure Handler Example"
msgstr "失敗ハンドラーの例"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:314
msgid "Returning Unis"
msgstr "Uni を返す"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:316
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr "Reactive Routesでは、`Uni` を直接返すことができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:331
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr "リアクティブクライアントを使用している場合、`Unis` を返すと便利です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:341
msgid "The item produced by the returned `Uni` can be:"
msgstr "返された `Uni` によって生成されるアイテムは以下のとおりです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:369
msgid "A string - written into the HTTP response directly."
msgstr "文字列 - HTTP レスポンスに直接書き込まれます"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:370
msgid "A `io.vertx.core.buffer.Buffer` - written into the HTTP response directly."
msgstr "`io.vertx.core.buffer.Buffer` - HTTP レスポンスに直接書き込まれます"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:371
msgid ""
"An object - written into the HTTP response after having been encoded into JSON.\n"
"The `content-type` header is set to `application/json` if not already set."
msgstr "オブジェクト - JSON にエンコードされた後に HTTP レスポンスに書き込まれます。まだ設定されていない場合、`content-type` ヘッダーは `application/json` に設定されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:348
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr "返された `Uni` が失敗した場合 (または `null` の場合)、HTTP 500 レスポンスが書き込まれます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:350
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr "`Uni<Void>` を返すと 204 レスポンス (コンテンツなし) が生成されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:352
msgid "Returning results"
msgstr "結果を返す"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:354
msgid "You can also return a result directly:"
msgstr "結果を直接返すこともできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:364
msgid ""
"Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n"
"Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr "Reactive Routesは IO スレッドで呼び出されるため、処理は **非ブロッキング** である必要があることに注意してください。それ以外の場合は、`@Route` アノテーションの `type` 属性を `Route.HandlerType.BLOCKING` に設定するか、`@io.smallrye.common.annotation.Blocking` アノテーションを使用します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:389
msgid "The method can return:"
msgstr "メソッドは以下を返すことができます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:374
msgid "Returning Multis"
msgstr "Multi を返す"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:376
msgid ""
"A reactive route can return a `Multi`.\n"
"The items are written one by one, in the response.\n"
"The response `Transfer-Encoding` header is set to `chunked`."
msgstr "Reactive Routesは `Multi` を返すことができます。レスポンスでは、項目が 1 つずつ書き込まれます。レスポンスの  `Transfer-Encoding` ヘッダーは `chunked` に設定されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:387
msgid "Produces `helloworld!`"
msgstr "`helloworld!` の生成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:391
msgid "A `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr "`Multi<String>` - アイテムはレスポンスに 1 つずつ ( _チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:392
msgid "A `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr "`Multi<Buffer>` - バッファーは処理なしで 1 つずつ ( _チャンク_ ごとに 1 つ) 書き込まれます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:393
msgid "A `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr "`Multi<Object>` - アイテムは、 JSON にエンコードされ、レスポンスに 1 つずつ書き込まれるます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:433
msgid "The previous snippet produces:"
msgstr "前のスニペットは以下を生成します。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:416
msgid "Streaming JSON Array items"
msgstr "JSON 配列アイテムのストリーミング"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:418
msgid ""
"You can return a `Multi` to produce a JSON Array, where every item is an item from this array.\n"
"The response is written item by item to the client.\n"
"To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr "`Multi` を返して、JSON 配列を生成できます。その場合、すべてのアイテムはこの配列のアイテムです。レスポンスは、クライアントに青て、いごとに書き込まれます。これを行うには、`produces` 属性を `\"application/json\"` (または `ReactiveRoutes.APPLICATION_JSON`) に設定します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:444
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/json\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、{\" と \"}\" を省略できます。`\"application/json\"` は配列の最初の値でなければならないことに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:448
msgid ""
"Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.\n"
"Using a `Multi<Void>` produces an empty array.\n"
"You cannot use `Multi<Buffer>`.\n"
"If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr "`Multi<String>`、`Multi<Object>`、`Multi<Void>` のみ JSON 配列に書き込むことができます。`Multi<Void>` を使用すると空の配列が生成されます。`Multi<Buffer>` は使用できません。`Buffer` を使用する必要がある場合は、最初にコンテンツを JSON または文字列表現に変換します。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:454
msgid "Deprecation of `asJsonArray`"
msgstr "`asJsonArray` の非推奨"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:456
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonArray` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:459
msgid "Event Stream and Server-Sent Event support"
msgstr "イベントストリームとサーバー送信イベントのサポート"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:461
msgid ""
"You can return a `Multi` to produce an event source (stream of server sent events).\n"
"To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr "`Multi` を返して、イベントソース (サーバー送信イベントのストリーム) を生成できます。この機能を有効にするには、次のように `produces` 属性を `\"text/event-stream\"` (または `ReactiveRoutes.EVENT_STREAM`) に設定します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:565
msgid "This method would produce:"
msgstr "この方法では、以下が生成されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:490
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"text/event-stream\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、{\" と \"}\" を省略できます。`\"text/event-stream\"` は配列の最初の値でなければならないことに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:494
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr "`io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` インターフェイスを実装して、サーバー送信イベントの `event` および `id` セクションをカスタマイズすることもできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:524
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr "`Multi<PersonEvent>` を使用すると、以下が生成されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:543
msgid "Deprecation of `asEventStream`"
msgstr "`asEventStream` の非推奨"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:545
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asEventStream` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:548
msgid "Json Stream in NDJSON format"
msgstr "NDJSON 形式の Json ストリーム"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:550
msgid ""
"You can return a `Multi` to produce a newline delimited stream of JSON values.\n"
"To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr "`Multi` を返して、JSON 値の改行区切りストリームを生成できます。この機能を有効にするには、`@Route` アノテーションの `produces` 属性を `\"application/x-ndjson\"` (または `ReactiveRoutes.ND_JSON`) に設定します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:575
msgid ""
"The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr "`produces` 属性は配列です。単一の値を渡す場合は、{\" と \"}\" を省略できます。`\"application/x-ndjson\"` は配列の最初の値でなければならないことに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:578
msgid "You can also provide strings instead of objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr "オブジェクトの代わりに文字列を指定することもできます。その場合、文字列を引用符で囲うことで、有効な JSON 値になります。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:601
msgid "Deprecation of `asJsonStream`"
msgstr "`asJsonStream` の非推奨"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:603
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr "`ReactiveRoutes.asJsonStream` は、Quarkus のセキュリティーレイヤーと互換性がないため、非推奨になりました。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:606
msgid "Using Bean Validation"
msgstr "Bean バリデーションの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:608
msgid ""
"You can combine reactive routes and Bean Validation.\n"
"First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n"
"Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr "Reactive Routesと Bean バリデーションを組み合わせることができます。まず、プロジェクトに `quarkus-hibernate-validator` エクステンションを必ず追加してください。次に、ルートパラメーターに制約を追加できます (`@Param` または `@Body` でアノテーションされます)。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:620
msgid ""
"If the parameters do not pass the tests, it returns an HTTP 400 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "パラメーターがテストに合格しなかった場合、HTTP 400 レスポンスを返します。リクエストが JSON ペイロードを受け入れる場合、レスポンスは https://opensource.zalando.com/problem/constraint-violation/[問題] のとおりの形式になります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:623
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr "オブジェクトまたは `Uni` を返す場合、`@Valid` アノテーションも使用できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:633
msgid ""
"If the item produced by the route does not pass the validation, it returns an HTTP 500 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr "ルートによって生成されたアイテムがバリデーションを通過しない場合、HTTP 500 レスポンスが返されます。リクエストが JSON ペイロードを受け入れる場合、レスポンスは https://opensource.zalando.com/problem/constraint-violation/[問題] のとおりの形式になります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:636
msgid ""
"Note that only `@Valid` is supported on the return type.\n"
"The returned class can use any constraint.\n"
"In the case of `Uni`, it checks the item produced asynchronously."
msgstr "リターンタイプでは `@Valid` のみがサポートされていることに注意してください。返されるクラスは任意の制約を使用できます。`Uni` の場合、非同期で生成されたアイテムをチェックします。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:640
msgid "Using the Vert.x Web Router"
msgstr "Vert.x Web ルーターの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:642
msgid ""
"You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.\n"
"To retrieve the `Router` instance at startup:"
msgstr "ルートを `Router` オブジェクトに直接登録することにより、ルートを _HTTP ルーティングレイヤー_ に直接登録することもできます。起動時に `Router` インスタンスを取得するには、以下を実行します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:652
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr "ルート登録、オプション、および使用可能なハンドラーの詳細については、 https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web ドキュメント] を確認してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:657
msgid ""
"`Router` access is provided by the `quarkus-vertx-http` extension.\n"
"If you use `quarkus-resteasy-reactive` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr "`Router` アクセスは、`quarkus-vertx-http` エクステンションにより指定されます。`quarkus-resteasy-reactive` または `quarkus-reactive-routes` を使用すると、エクステンションが自動的に追加されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:661
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr "ルーターの Mutiny バリアント (`io.vertx.mutiny.ext.web.Router`) を受け取ることもできます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:670
msgid "Intercepting HTTP requests"
msgstr "HTTP リクエストのインターセプト"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:672
msgid ""
"You can also register filters that would intercept incoming HTTP requests.\n"
"Note that these filters are also applied for servlets, JAX-RS resources, and reactive routes."
msgstr "受信 HTTP リクエストをインターセプトするフィルターを登録することもできます。これらのフィルターは、サーブレット、JAX-RS リソース、およびReactive Routesにも適用されることに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:675
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr "たとえば、次のコードスニペットは、HTTP ヘッダーを追加するフィルターを登録します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:693
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr "`RouteFilter#value()` は、フィルターの並べ替えに使用される優先度を定義します。優先度の高いフィルターが先に呼び出されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:694
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr "フィルターが `next()`メソッドを呼び出さなければ、チェーンを継続できない可能性があります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:696
msgid "HTTP Compression"
msgstr "HTTP圧縮"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:698
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr "HTTP レスポンスのボディは、デフォルトでは圧縮されていません。`quarkus.http.enable-compression=true` を使用して HTTP 圧縮サポートを有効にできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:701
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "圧縮サポートが有効であれば、以下の場合にレスポンスボディが圧縮されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:703
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "ルートメソッドが `@ io.quarkus.vertx.http.Compressed` でアノテーションされている、または"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:704
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr "`Content-Type` ヘッダーが設定されており、その値は `quarkus.http.compress-media-types` を介して設定された圧縮メディアタイプである。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:706
msgid "The response body is never compressed if:"
msgstr "次の場合、レスポンスボディは圧縮されません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:708
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Uncompressed` でアノテーションされている、または"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:709
msgid "the `Content-Type` header is not set."
msgstr "`Content-Type` ヘッダーが設定されていない。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:711
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript` and `application/javascript`."
msgstr "デフォルトでは、 `text/html` , `text/plain` , `text/xml` , `text/css` , `text/javascript` , `application/javascript` のメディアタイプが圧縮されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:713
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "クライアントが HTTP 圧縮をサポートしていない場合、レスポンスボディは圧縮されません。"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:716
msgid "Adding OpenAPI and Swagger UI"
msgstr "OpenAPI と Swagger UI の追加"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:718
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr "`quarkus-smallrye-openapi` エクステンションを使用してlink:https://www.openapis.org/[OpenAPI] および link:https://swagger.io/tools/swagger-ui/[Swagger UI] のサポートを追加できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:720
msgid "Add the extension by running this command:"
msgstr "このコマンドを実行してエクステンションを追加"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:742
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr "これだけで、Vert.x ルートから基本的な OpenAPI スキーマドキュメントを生成できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:749
msgid "You will see the generated OpenAPI schema document:"
msgstr "生成された OpenAPI スキーマドキュメントが表示されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:780
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr "xref:openapi-swaggerui.adoc[OpenAPI ガイド] も参照してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:782
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPIアノテーションの追加"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:784
msgid ""
"You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema,\n"
"for instance, adding header info, or specifying the return type on `void` methods might be useful:"
msgstr "link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] を使用してスキーマをよりよくドキュメント化することができます。例えば、ヘッダー情報を追加したり、 `void` メソッドの戻り値の型を指定したりすると便利かもしれません:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:827
msgid "Header information about your API."
msgstr "APIに関するヘッダー情報"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:828
msgid "Defining the response."
msgstr "レスポンスの定義"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:830
msgid "This will generate this OpenAPI schema:"
msgstr "これにより、このOpenAPIスキーマが生成されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/reactive-routes.adoc:876
msgid "Using Swagger UI"
msgstr "Swagger UIの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:878
msgid ""
"Swagger UI is included by default when running in `dev` or `test` mode, and can optionally be added to `prod` mode.\n"
"See <<openapi-swaggerui.adoc#dev-mode,the Swagger UI>> Guide for more details."
msgstr "Swagger UIは、 `dev` や `test` モードで実行しているときにデフォルトで含まれており、 `prod` モードに追加することもできます。詳細については、<<openapi-swaggerui.adoc#dev-mode,開発にSwagger UIを使用する>> を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:881
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and you will see the Swagger UI screen:"
msgstr "link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] に移動すると、Swagger UIの画面が表示されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:883
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_versions/2.13/guides/reactive-routes.adoc:885
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/reactive-routes.adoc:887
msgid ""
"This guide has introduced how you can use reactive routes to define an HTTP endpoint.\n"
"It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr "このガイドでは、Reactive Routesを使用してHTTPエンドポイントを定義する方法を紹介してきました。また、Quarkus HTTPレイヤーの構造とフィルターの書き方についても説明しました。"
