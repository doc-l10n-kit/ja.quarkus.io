msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/spring-di.adoc:6
msgid "Quarkus Extension for Spring DI API"
msgstr "Spring DI APIのためのQuarkusエクステンション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:11
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "インジェクションにはCDIアノテーションを使用することが推奨されていますが、Quarkusでは、 `spring-di` エクステンションという形で、Springのディペンデンシーインジェクションのための互換レイヤーを提供しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:13
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "このガイドでは、Spring Frameworkに含まれる有名なDependency InjectionアノテーションをQuarkusアプリケーションでどのように活用するかを説明します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:15
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:17
msgid "link:{includes}/prerequisites.adoc[role=include]"
msgstr "link:{includes}/prerequisites.adoc[role=include]"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:19
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:21
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:24
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:26
msgid "The solution is located in the `spring-di-quickstart` {quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "このソリューションは `spring-di-quickstart` {quickstarts-tree-url}/spring-di-QuickStart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:28
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:30
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:34
msgid "link:{includes}/devtools/create-app.adoc[role=include]"
msgstr "link:{includes}/devtools/create-app.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:36
msgid "This command generates a project which imports the `spring-di` extension."
msgstr "このコマンドは、プロジェクトを生成し、 `spring-di` エクステンションをインポートします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:38
msgid ""
"If you already have your Quarkus project configured, you can add the `spring-di` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `spring-di` エクステンションをプロジェクトに追加することができます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:42
msgid "link:{includes}/devtools/extension-add.adoc[role=include]"
msgstr "link:{includes}/devtools/extension-add.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:44
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:47
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:56
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:61
msgid "Add beans using Spring annotations"
msgstr "Springアノテーションを使用したBeanの追加"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:63
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "それでは、さまざまなSpringアノテーションを使って、いくつかのBeanを作成してみましょう。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:65
msgid ""
"First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.\n"
"Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "まず、 `StringFunction` インターフェースを作成します。これは、いくつかのBeanがこれから実装し、後に別のBeanに注入されます。 `src/main/java/org/acme/spring/di/StringFunction.java` ファイルを作成し、以下の内容を設定します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:79
msgid ""
"With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.\n"
"It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.\n"
"Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "インターフェイスが整ったところで、SpringのJava Configスタイルを使ってBeanを定義する `AppConfiguration` クラスを追加します。これを使って、パラメータとして渡されたテキストを大文字にする `StringFunction` Beanを作成します。以下の内容で `src/main/java/org/acme/spring/di/AppConfiguration.java` ファイルを作成します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:99
msgid ""
"As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.\n"
"In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr "Springの開発者であれば、追加のBeanをスキャンする特定のパッケージを定義するために、 `@ComponentScan` アノテーションを追加したいと思うかもしれません。しかし、Quarkusは可視性の境界がない `annotated` モードでのみ xref:cdi-reference.adoc#bean_discovery[Beanディスカバリー] を行うため、 `@ComponentScan` は全く必要ないことに注意してください。さらに、QuarkusでのBeanディスカバリーはビルド時に行われることに注意してください。同じように、QuarkusはSpringの `@Import` アノテーションをサポートしていません。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:102
msgid ""
"Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.\n"
"This bean will effectively be a no-op bean that simply returns the input as is.\n"
"Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "次に、Springのステレオタイプアノテーションスタイルを使用して、 `StringFunction` を実装する別のBeanを定義します。このBeanは、事実上、入力をそのまま返すだけのno-op beanとなります。 `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` ファイルを作成し、以下の内容を設定します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:122
msgid ""
"Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.\n"
"To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "Quarkusは、Springの `@Value` アノテーションを使用して設定値を注入するサポートも提供しています。動作を確認するには、まず、以下の内容で `src/main/resources/application.properties` を編集します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:131
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "次に、 `src/main/java/org/acme/spring/di/MessageProducer.java` に以下の内容で新しいSpring Beanを作成します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:153
msgid ""
"The final bean we will create ties together all the previous beans.\n"
"Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "最後に作成するBeanは、これまでのBeanをすべて結びつけるものです。 `src/main/java/org/acme/spring/di/GreeterBean.java` ファイルを作成し、以下の内容をコピーします:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:192
msgid ""
"In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).\n"
"Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "上のコードでは、フィールドインジェクションとコンストラクタインジェクションの両方が使用されていることがわかります（コンストラクタインジェクションでは、コンストラクタが 1 つなので、 `@Autowired` のアノテーションは必要ないことに注意してください）。さらに、 `suffix` の `@Value` アノテーションには、デフォルト値も定義されています。この場合、 `application.properties` で `greeting.suffix` を定義していないので、これが使用されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/spring-di.adoc:196
msgid "Create the JAX-RS resource"
msgstr "JAX-RSリソースの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:198
msgid "Create the `src/main/java/org/acme/spring/di/GreeterResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/spring/di/GreeterResource.java` のファイルを以下の内容で作成します:"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:225
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:227
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/spring/di/GreetingResourceTest.java` ファイルを編集し、 `testHelloEndpoint` メソッドの内容を次のように変更します:"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:254
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:256
msgid "Run the application with:"
msgstr "アプリケーションを実行します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:258
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:260
msgid "Open your browser to http://localhost:8080/greeting."
msgstr "ブラウザで http://localhost:8080/greeting を開きます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:262
msgid "The result should be: `HELLO WORLD!`."
msgstr "結果は次のようになります： `HELLO WORLD!`."

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:264
msgid "Run the application as a native"
msgstr "アプリケーションをネイティブバイナリーとして実行"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:266
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr "もちろん、 xref:building-native-image.adoc[この] ガイドと同様の手順でネイティブイメージを作成することもできます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:268
msgid "Important Technical Note"
msgstr "重要な技術的注意点"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:270
msgid ""
"Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.\n"
"Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.\n"
"What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover, Spring infrastructure\n"
"classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.\n"
"Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0] specification. If you want to learn more about it, we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide]\n"
"The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr "QuarkusのSpringサポートは、Springアプリケーションコンテキストを開始せず、Springインフラストラクチャクラスも実行されないことに注意してください。Springクラスとアノテーションは、メタデータの読み取りと、ユーザーコードのメソッドの戻り値の型やパラメータの型として使用されるだけです。つまり、エンドユーザーにとっては、任意のSpringライブラリを追加しても、何の効果もないということです。また、Springのインフラストラクチャークラス（例えば、 `org.springframework.beans.factory.config.BeanPostProcessor` 、 `org.springframework.context.ApplicationContext` ）は、実行されません。依存性注入に関しては、Quarkusは link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0] 仕様に基づく依存性注入メカニズム（ArCと呼ばれます）を使用しています。CDIについて詳しく知りたい場合は、 link:cdi.html[QuarkusのCDI入門] と link:cdi-reference.html#arc-configuration-reference[CDIリファレンスガイド] を読むことをお勧めします。 Spring Bootのさまざまなテスト機能は、Quarkusではサポートされていません。テスト目的であれば、 link:getting-started-testing.html[Quarkusテストガイド] をご確認ください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:277
msgid "Conversion Table"
msgstr "変換テーブル"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:279
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "以下の表は、Spring DIのアノテーションをCDIおよび/またはMicroProfileのアノテーションに変換する方法を示しています。"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:282
msgid "Spring"
msgstr "Spring"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:282
msgid "CDI / MicroProfile"
msgstr "CDI / MicroProfile"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:282
msgid "Comments"
msgstr "Comments"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:284
msgid "@Autowired"
msgstr "@Autowired"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:285
msgid "@Inject"
msgstr "@Inject"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:288
msgid "@Qualifier"
msgstr "@Qualifier"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:289
msgid "@Named"
msgstr "@Named"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:292
msgid "@Value"
msgstr "@Value"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:293
msgid "@ConfigProperty"
msgstr "@ConfigProperty"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:294
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "ConfigurationProperty は、@Value とは違って式言語をサポートしていませんが、典型的な使用例をはるかに簡単に扱うことができます"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:296
msgid "@Component"
msgstr "@Component"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:305
msgid "@Singleton"
msgstr "@Singleton"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:306
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "デフォルトでは、SpringのステレオタイプアノテーションはシングルトンBeanです"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:300
msgid "@Service"
msgstr "@Service"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:304
msgid "@Repository"
msgstr "@Repository"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:308
msgid "@Configuration"
msgstr "@Configuration"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:309
msgid "@ApplicationScoped"
msgstr "@ApplicationScoped"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:310
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "CDIでは、プロデューサBeanはアプリケーションスコープに限定されず、@Singletonや@Dependentにすることもできます"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:312
msgid "@Bean"
msgstr "@Bean"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:313
msgid "@Produces"
msgstr "@Produces"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:316
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:318
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "CDI アノテーションへの 1 対 1 のマッピングはありません。Scope の値に応じて、@Singleton、@ApplicationScoped、@SessionScoped、@RequestScoped、@Dependent のいずれかが使用されます"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:320
msgid "@ComponentScan"
msgstr "@ComponentScan"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:322
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "CDIアノテーションへの1対1のマッピングはありません。Quarkusはビルド時にすべてのクラスパスのスキャンを行うため、Quarkusでは使用されません。"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:324
msgid "@Import"
msgstr "@Import"

#. type: Table
#: upstream/_versions/2.13/guides/spring-di.adoc:326
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "CDIアノテーションとの1対1のマッピングはありません。"

#. type: Title ==
#: upstream/_versions/2.13/guides/spring-di.adoc:329
msgid "More Spring guides"
msgstr "その他のSpringガイド"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:331
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkusには、より多くのSpring互換機能があります。詳細については、以下のガイドを参照してください:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:333
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:334
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:335
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:336
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr "xref:spring-security.adoc[Quarkus - Spring Security のエクステンション]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:337
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:338
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:339
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/spring-di.adoc:340
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
