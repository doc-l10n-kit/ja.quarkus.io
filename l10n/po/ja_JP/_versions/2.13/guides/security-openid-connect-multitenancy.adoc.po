msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:6
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "OpenID Connect (OIDC) マルチテナンシーの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "このガイドでは、OpenID Connect (OIDC) アプリケーションがマルチテナンシーをサポートして、単一のアプリケーションから複数のテナントにサービスを提供する方法を説明します。テナントは、同じ OpenID プロバイダー内の個別のレルムまたはセキュリティードメイン、あるいは個別の OpenID プロバイダーです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "同じアプリケーション (例: SaaS) から複数の顧客にサービスを提供する場合、各顧客はテナントです。アプリケーションに対してマルチテナンシーサポートを有効にすることで、Keycloak や Google などのさまざまな OpenID プロバイダーに対する認証であっても、テナントごとに異なる認証ポリシーをサポートできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "Bearer Token Authorization を使用してテナントを承認する必要がある場合は、xref:security-openid-connect.adoc[OpenID Connect によるサービスアプリケーションの保護] ガイドを参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:18
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr "OpenID Connect Authorization Code Flow を使用してテナントの認証と認可を行う必要がある場合は、 xref:security-openid-connect-web-authentication.adoc[OpenID Connect を使用したウェブアプリケーションの保護] ガイドをお読みください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:20
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:23
#, fuzzy
msgid ""
"link:{includes}/prerequisites.adoc[role=include]\n"
"* https://stedolan.github.io/jq/[jq tool]"
msgstr "{includes}/prerequisites.adoc * link:https://stedolan.github.io/jq/[jqツール]"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:26
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:28
msgid "In this example, we build a very simple application which offers a single land page:"
msgstr "この例では、単一のランディングページを提供する非常にシンプルなアプリケーションを構築しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:30
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:32
msgid "The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant."
msgstr "ランディングページはJAX-RSリソースによって提供され、認証されたユーザーと現在のテナントに関するOpenIDプロバイダから取得した情報を表示します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:34
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:36
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:41
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは、`security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:43
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:45
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:49
msgid "link:{includes}/devtools/create-app.adoc[role=include]"
msgstr "link:{includes}/devtools/create-app.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:51
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:55
msgid "link:{includes}/devtools/extension-add.adoc[role=include]"
msgstr "link:{includes}/devtools/extension-add.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:57
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:60
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:69
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:74
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:76
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:121
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface."
msgstr "受信リクエストからテナントを解決し、それを application.properties の特定の `quarkus-oidc` テナント設定にマップするには、`io.quarkus.oidc.TenantResolver` インターフェイスの実装を作成する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:150
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "上記の実装から、テナントはリクエストパスから解決されるため、テナントを推測できなかった場合は、デフォルトのテナント設定を使用する必要があることを示すために null が返されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:154
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "現在のテナントが OIDC の `web-app` アプリケーションを表す場合、カスタムテナントリゾルバーがすべてのリクエストに対して呼び出されるまでに、現在の `io.vertx.ext.web.RoutingContext` には `tenant-id` 属性が含まれ、テナント固有の状態またはセッション Cookie のいずれかがすでに存在する場合に、コード認証フローとすでに認証されたリクエストを完了します。したがって、複数の OpenID Connect プロバイダーを使用する場合、`RoutingContext` に `tenant-id` 属性が設定されていない場合にのみ、パス固有のチェックを行ってテナント ID を解決する必要があります。以下はその例です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:192
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM マルチテナンシー] も使用し、OIDC と Hibernate ORM の両方のテナント ID が同じであり、Vert.x の `RoutingContext` から抽出する必要がある場合は、OIDC テナントリゾルバーから Hibernate ORM テナントリゾルバーにテナント ID を `RoutingContext` として渡すことができます。以下はその例です。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:208
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:227
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users."
msgstr "最初の設定は、テナントをリクエストから推測できない場合に使用する必要があるデフォルトのテナント設定です。この設定では、Keycloak インスタンスを使用してユーザーを認証しています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:229
msgid "The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "2 番目の設定は、受信リクエストがテナント `tenant-a` にマップされる場合に使用される設定です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:231
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "どちらの設定でも、異なる `realms` を使用しばら、同じ Keycloak サーバーインスタンスにマップされることに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:233
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "設定ファイルで複数のテナントを定義できます。`TenantResolver` 実装からテナントを解決するときに適切にマップできるように、それらに一意のエイリアスがあることを確認してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:235
msgid "Google OpenID Provider Configuration"
msgstr "Google OpenID プロバイダーの設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:237
msgid "In order to set up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
msgstr "Google OpenID プロバイダーを使用するように `tenant-a` を設定するには、 https://developers.google.com/identity/protocols/OpenIDConnect[こちら] の説明どおりにプロジェクトを作成する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:239
msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
msgstr "プロジェクトを作成し、プロジェクトの `client_id` と `client_secret` を取得したら、次のようにテナントの設定を試みることができます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:252
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:254
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:261
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:263
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:265
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:267
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "さて、以下の手順に従って、2つのテナントのためのレルムをインポートします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:269
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] をインポートし、デフォルトのレルムを作成します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:270
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] をインポートし、テナント `tenant-a` のレルムを作成します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:272
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "詳細は、 https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新規レルムの作成] 方法に関する Keycloak ドキュメントを参照してください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:274
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:276
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:278
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスをdevモードで実行するには:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:280
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Title ===
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:282
msgid "Running in JVM Mode"
msgstr "JVMモードでの動作"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:284
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "「開発モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:286
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:288
msgid "link:{includes}/devtools/build.adoc[role=include]"
msgstr "link:{includes}/devtools/build.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:290
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:297
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:299
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:301
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:305
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。ネイティブビルドを有効にして再度ビルドしてみましょう。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:308
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:310
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:317
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:319
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:321
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:323
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "すべてが期待どおりに機能している場合は、認証のために Keycloak サーバーにリダイレクトする必要があります。リクエストされたパスは、設定ファイルにマップされていない `default` テナントを定義していることに注意してください。この場合、デフォルトの設定が使用されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:326
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:328
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:329
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:331
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:333
msgid "If you try now to access the application at the following URL:"
msgstr "次の URL でアプリケーションにアクセスを試みます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:335
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:337
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "Keycloak のログインページに再度リダイレクトされます。ただし、ここでは別の `realm` を使用して認証します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:339
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "どちらの場合も、ユーザーが正常に認証されると、ランディングページにユーザーの名前と電子メールが表示されます。ユーザー `alice` は両方のテナントに存在しますが、アプリケーションにおいて、それらは異なるレルム/テナントに属する別個のユーザーです。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:342
msgid "Resolving Tenant Identifiers with Annotations"
msgstr "アノテーション付きテナント識別子の解決"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:344
msgid ""
"You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using\n"
"`quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on\n"
"the current `RoutingContext`."
msgstr "`quarkus.oidc.TenantResolver` を使用する代わりに、アノテーションと CDI インターセプターを使用してテナント識別子を解決できます。これは、現在の `RoutingContext` のキー `OidcUtils.TENANT_ID_ATTRIBUTE` の値を設定することで実行できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:348
msgid ""
"Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one\n"
"annotation per tenant ID other than default:"
msgstr "アプリケーションが 2 つの OIDC テナント (`hr` とデフォルト) をサポートしていると仮定した場合、最初にデフォルト以外のテナント ID ごとに 1 つのアノテーションを定義する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:353
msgid ""
"Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See\n"
"xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr "そのためには、プロアクティブ HTTP 認証を無効 (`quarkus.http.auth.proactive=false`) にする必要があります。詳細については、xref:security-built-in-authentication.adoc#proactive-authentication[プロアクティブ認証] セクションを参照してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:367
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr "次に、これらのアノテーションごとに 1 つのインターセプターが必要になります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:385
msgid ""
"Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by\n"
"`quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default\n"
"OIDC provider."
msgstr "これで、`@HrTenant` を運ぶすべてのメソッドとクラスは、`quarkus.oidc.hr.auth-server-url` によって設定された OIDC プロバイダーを使用して認証されますが、他のすべてのクラスとメソッドは、デフォルトの OIDC プロバイダーを使用して認証されます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:390
msgid "Programmatically Resolving Tenants Configuration"
msgstr "テナントの設定をプログラムで解決"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:392
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、 `io.quarkus.oidc.TenantConfigResolver` が利用出来ます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:395
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:451
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "このメソッドから返される `OidcTenantConfig` は、`application.properties` から `oidc` 名前空間設定を解析するために使用されるものと同じです。`quarkus-oidc` エクステンションでサポートされている任意の設定を使用してデータを入力できます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:453
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr "OIDCの \"web-app\" アプリケーションのためのテナント解決"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:455
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` と `web-app` の両方の OIDC アプリケーションの現在の HTTP リクエストを保護するために使用する必要があるテナント設定を選択する際には、次のようないくつかのオプションを使用できます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:457
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "URL パスを確認します。たとえば、\"/service\" パスには `tenant-service` 設定を使用する必要がありますが、 \"/management\" パスには `tenant-manage` 設定を使用する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:458
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "たとえば、URL パスが常に '/service' である HTTP ヘッダーを確認します。\"Realm: service\" や \"Realm: management\" などのヘッダーは、`tenant-service` 設定や `tenant-manage` 設定のいずれかを選択する場合に役立ちます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:459
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "URL クエリーパラメーターを確認します。ヘッダーを使用してテナント設定を選択するのと同じように機能します"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:461
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "これらのオプションはすべて、OIDC `service` アプリケーションのカスタムの `TenantResolver` 実装や `TenantConfigResolver` 実装を使用して簡単に実装できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:463
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "ただし、OIDC `web-app` アプリケーションのコード認証フローを完了するために HTTP リダイレクトが必要なため、次の理由により、このリダイレクトリクエストの前後に同じテナント設定を選択するためにカスタム HTTP Cookie が必要になる場合があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:465
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "単一のリダイレクト URL が OIDC プロバイダーに登録されている場合、リダイレクトリクエスト後の URL パスは同じではない可能性があります。元のリクエストパスは復元できますが、それはテナント設定が解決された後です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:466
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "元のリクエスト中に使用された HTTP ヘッダーは、リダイレクト後に使用できなくなります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:467
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "カスタム URL クエリーパラメーターは、リダイレクト後、テナント設定が解決された後に復元されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:469
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "リダイレクトの前後に `web-app` アプリケーションのテナント設定を解決するための情報を確実に利用できるようにするための 1 つのオプションは、Cookie を使用することです。以下はその例です。"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:503
msgid "Disabling Tenant Configurations"
msgstr "テナント設定を無効にする"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:505
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "カスタムの `TenantResolver` および `TenantConfigResolver` の実装では、現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合は `null` を返すことがあります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:507
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "カスタムリゾルバが常にテナントを推論することが予想される場合、デフォルトのテナント設定は必要ありません。 `quarkus.oidc.tenant-enabled=false` の設定で無効にすることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:509
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定を無効にすることもできます。例: `quarkus.oidc.tenant-a.tenant-enabled=false`"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:511
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:513
#, fuzzy
msgid "link:{generated-dir}/config/quarkus-oidc.adoc[role=include]"
msgstr "{generated-dir}/config/quarkus-oidc.adoc"

#. type: Title ==
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:515
msgid "References"
msgstr "参照"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:517
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:518
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:519
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:520
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain Text
#: upstream/_versions/2.13/guides/security-openid-connect-multitenancy.adoc:521
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"
