msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/transaction.adoc:6
msgid "Using Transactions in Quarkus"
msgstr "Quarkusでのトランザクションの使用"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:11
msgid ""
"Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.\n"
"Each extension dealing with persistence will integrate with it for you.\n"
"And you will explicitly interact with transactions via CDI.\n"
"This guide will walk you through all that."
msgstr "QuarkusにはTransaction Managerが付属しており、これを使用してトランザクションを調整してアプリケーションに公開します。永続性を扱う各エクステンションは、これと統合されます。そして、CDIを介して明示的にトランザクションと対話することになります。このガイドでは、これらすべてについて説明します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:16
msgid "Setting it up"
msgstr "設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:18
msgid ""
"You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.\n"
"Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "これを必要とするエクステンションは単に依存関係として追加するだけなので、ほとんどの場合、設定について心配する必要はありません。例えばHibernate ORMはトランザクションマネージャーを含んでおり、適切に設定されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:21
msgid ""
"You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.\n"
"Add the following to your build file:"
msgstr "例えば、Hibernate ORMを使用せずに直接トランザクションを使用している場合は、明示的に依存関係として追加する必要があるかもしれません。以下をビルドファイルに追加します:"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:25
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:34
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:39
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "トランザクションの開始と停止:境界線の定義"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:41
msgid ""
"You can define your transaction boundaries either declaratively with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use\n"
"the JTA `UserTransaction` API directly, however this is less user-friendly than `QuarkusTransaction`."
msgstr "トランザクションの境界は、 `@Transactional` で宣言的に、または `QuarkusTransaction` でプログラム的に定義できます。 JTA `UserTransaction` API を直接使用することもできますが、これは `QuarkusTransaction` よりも使い勝手が悪くなります。"

#. type: Title ===
#: upstream/_versions/2.13/guides/transaction.adoc:44
msgid "Declarative approach"
msgstr "宣言的アプローチ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:46
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr "トランザクションの境界を定義する最も簡単な方法は、エントリーメソッド ( `javax.transaction.Transactional` ) で `@Transactional` アノテーションを使用することです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:70
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "このアノテーションは、トランザクションの境界を定義し、トランザクション内でこの呼び出しをラップします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:71
msgid "A `RuntimeException` crossing the transaction boundaries will roll back the transaction."
msgstr "`RuntimeException` がトランザクションの境界を越えると、トランザクションがロールバックされます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:73
msgid ""
"`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.\n"
"That includes REST endpoints."
msgstr "`@Transactional` は、メソッドレベルまたはクラスレベルで、すべてのメソッドがトランザクションであることを保証するために、任意の CDI Bean のトランザクション境界を制御するために使用することができます。これにはRESTエンドポイントも含まれます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:76
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "`@Transactional` のパラメーターを使用して、トランザクションを開始するかどうか、どのように開始するかを制御することができます:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:78
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (デフォルト): 何も開始されていない場合はトランザクションを開始し、そうでない場合は既存のトランザクションを維持します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:79
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` : 何も開始されていない場合はトランザクションを開始し、既存のトランザクションが開始されている場合はそれを一時停止し、そのメソッドの境界で新しいトランザクションを開始します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:80
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` : トランザクションが開始されていない場合は失敗し、そうでない場合は既存のトランザクション内で動作します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:81
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` : トランザクションが開始されている場合、それに参加します。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:82
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` : トランザクションが開始されている場合、それを一時停止し、メソッドの境界ではトランザクションなしで動作します。開始されていない場合は、トランザクションなしで動作します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:83
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` : トランザクションが開始されている場合は例外を発生させます。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:85
msgid ""
"`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.\n"
"This is how you decide whether a method is to be running within or outside a transaction.\n"
"Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` や `NOT_SUPPORTED` が最も便利なものでしょう。これは、あるメソッドがトランザクション内部で実行されるか、外部で実行されるかを決定する方法です。正確な意味については、JavaDocを確認してください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:89
msgid ""
"The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).\n"
"The transaction will commit unless a runtime exception crosses the method boundary.\n"
"You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "トランザクション・コンテキストは、予想通り `@Transactional` メソッドにネストされたすべての呼び出しに伝搬されます (この例では `childDAO.addToGiftList()` と `santaDAO.addToSantaTodoList()`)。ランタイム例外がメソッドの境界を越えない限り、トランザクションはコミットされます。例外が発生したときに強制的にロールバックするかどうかは、 `@Transactional(dontRollbackOn=SomeException.class)` (または `rollbackOn`) を使ってオーバーライドできます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:93
msgid ""
"You can also programmatically ask for a transaction to be marked for rollback.\n"
"Inject a `TransactionManager` for this."
msgstr "また、プログラムでトランザクションにロールバックのマークを付けることもできます。そのためには `TransactionManager` をインジェクトします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:119
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "`setRollbackOnly` のセマンティックを有効にするために、 `TransactionManager` をインジェクトします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:120
msgid "Programmatically decide to set the transaction for rollback."
msgstr "プログラムにより、トランザクションをロールバックするように設定します。"

#. type: Title ===
#: upstream/_versions/2.13/guides/transaction.adoc:123
msgid "Transaction Configuration"
msgstr "トランザクション設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:125
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "トランザクションの高度な設定は、エントリメソッドまたはクラスレベルで標準の `@Transactional` アノテーションに加えて設定される `@TransactionConfiguration` アノテーションを使用することで可能です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:127
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` アノテーションでは、タイムアウトのプロパティを秒単位で設定できます。それは、アノテーションされたメソッド内で作成されたトランザクションに適用されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:129
msgid ""
"This annotation may only be placed on the top level method delineating the transaction.\n"
"Annotated nested methods once a transaction has started will throw an exception."
msgstr "このアノテーションは、トランザクションを定義するトップレベルのメソッドにのみ付けることができます。アノテーションされたネストされたメソッドでトランザクションが開始されると、例外がスローされます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:132
msgid ""
"If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.\n"
"The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "クラスに定義されている場合、 `@Transactional` でマークされたクラスのすべてのメソッドに定義されているのと同じことになります。メソッドに定義された場合は、クラスに定義された設定よりも優先されます。"

#. type: Title ===
#: upstream/_versions/2.13/guides/transaction.adoc:135
msgid "Reactive extensions"
msgstr "リアクティブエクステンション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:137
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "もし, `@Transactional` アノテーション付与されたメソッドが、次のようなリアクティブな値を返す場合:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:139
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` （JDKから）"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:140
msgid "`Publisher` (from  Reactive-Streams)"
msgstr "`Publisher` (Reactive-Streamsから）"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:141
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr "リアクティブ型コンバータを使用して、前の2つの型のうちの1つに変換できる任意の型"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:143
msgid ""
"then the behaviour is a bit different, because the transaction will not be terminated until the\n"
"returned reactive value is terminated. In effect, the returned reactive value will be listened to\n"
"and if it terminates exceptionally the transaction will be marked for rollback, and will be committed\n"
"or rolled-back only at termination of the reactive value."
msgstr "これらは、動作が少し異なり、返されたリアクティブ値が終了するまで、トランザクションは終了しません。実際には、返されたリアクティブ値を聞き、それが例外的に終了した場合、トランザクションはロールバックのためにマークされ、リアクティブ値の終了時にのみコミットまたはロールバックされることになります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:148
msgid ""
"This allows your reactive methods to keep on working on the transaction asynchronously until their\n"
"work is really done, and not just until the reactive method returns."
msgstr "これにより、リアクティブメソッドは、リアクティブメソッドが戻るまでではなく、その処理が本当に終了するまで、非同期でトランザクションを処理し続けることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:151
msgid ""
"If you need to propagate your transaction context across your reactive pipeline, please see the\n"
"xref:context-propagation.adoc[Context Propagation guide]."
msgstr "トランザクションコンテキストをリアクティブパイプラインに伝播させる必要がある場合は、 link:context-propagation.html[Context Propagationガイド]を参照してください。"

#. type: Title ===
#: upstream/_versions/2.13/guides/transaction.adoc:154
msgid "Programmatic Approach"
msgstr "プログラムアプローチ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:156
msgid ""
"You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options,\n"
"a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`,\n"
"`commit` and `rollback` methods."
msgstr "`QuarkusTransaction` の静的メソッドを使用して、トランザクションの境界を定義できます。これは、トランザクションの範囲内でラムダを実行できる関数的なアプローチと、明示的な `begin`,  `commit`,  `rollback` のメソッドを使用することによる2つの異なるオプションを提供します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:200
msgid ""
"The above example shows a few different ways the API can be used. The first method simply calls begin, does some work and commits it.\n"
"This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will\n"
"be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net\n"
"against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second\n"
"example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr "上記の例では、APIをいくつかの異なる方法で使用することができます。最初の方法は、単純に begin を呼び出し、何らかの処理を行い、それをコミットするものです。この作成されたトランザクションはCDIリクエストスコープに関連付けられ、リクエストスコープが破壊されたときにまだアクティブであれば、自動的にロールバックされます。これにより、明示的に例外をキャッチしたり `rollback` を呼び出したりする必要がなくなり、 不用意なトランザクションリークに対するセーフティネットとして機能します。 しかし、これはリクエストスコープがアクティブであるときにしか使えないということになります。メソッド呼び出しの2番目の例は、タイムアウトオプションで開始し、トランザクションをロールバックします。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:206
msgid ""
"The second example shows the use of lambda scoped transactions, the first just runs a `Runnable` within a transaction, the second,\n"
"runs `Callable` with some specific options. In particular the `exceptionHandler` method can be used to control if the transaction\n"
"is rolled back or not on exception, and the `semantic` method controls the behaviour if an existing transaction is already started."
msgstr "2つ目の例は、ラムダスコープのトランザクションを使用しています。1つ目は単にトランザクション内で `Runnable` 、2つ目はいくつかの特定のオプションをつけて `Callable` を実行します。特に、 `exceptionHandler` メソッドは、例外発生時にトランザクションをロールバックするかどうかを制御するために使用され、 `semantic` メソッドは、既存のトランザクションが既に開始されている場合の動作を制御します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:210
msgid "The following semantics are supported:"
msgstr "以下のセマンティクスがサポートされています:"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:213
msgid "DISALLOW_EXISTING"
msgstr "DISALLOW_EXISTING"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:214
msgid ""
"If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown,\n"
"otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr "もしトランザクションがすでに現在のスレッドに関連していれば、 `QuarkusTransactionException` が投げられます。そうでなければ、新しいトランザクションが開始され、すべての通常のライフサイクルルールに従います。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:218
msgid "JOIN_EXISTING"
msgstr "JOIN_EXISTING"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:219
msgid ""
"If no transaction is active then a new transaction will be started, and committed when the method ends.\n"
"If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to\n"
"decide if the TX should be committed or rolled back.\n"
"If an existing transaction is active then the method is run in the context of the existing transaction. If an\n"
"exception is thrown the exception handler will be called, however\n"
"a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of\n"
"`ExceptionResult#COMMIT` will result in no action being taken."
msgstr "トランザクションがアクティブでない場合、新しいトランザクションが開始され、メソッドの終了時にコミットされます。例外が発生した場合、 `#exceptionHandler(Function)` によって登録された例外ハンドラが呼び出され、TX をコミットするかロールバックするかを決定します。既存のトランザクションがアクティブである場合、メソッドは既存のトランザクションのコンテキストで実行されます。例外が発生した場合、例外ハンドラが呼び出されますが、 `ExceptionResult#ROLLBACK` の結果は、TX がロールバックのみとマークされ、一方 `ExceptionResult#COMMIT` の結果は、何も行われないという結果になります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:228
msgid "REQUIRE_NEW"
msgstr "REQUIRE_NEW"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:229
msgid ""
"This is the default semantic.\n"
"If an existing transaction is already associated with the current thread then the transaction is suspended, and\n"
"resumed once\n"
"the current transaction is complete.\n"
"A new transaction is started after the existing transaction is suspended, and follows all the normal lifecycle rules."
msgstr "これはデフォルトのセマンティックです。もし既存のトランザクションがすでに現在のスレッドと関連している場合、そのトランザクションは中断され、現在のトランザクションが完了すると再開されます。新しいトランザクションは、既存のトランザクションが中断された後に開始され、すべての通常のライフサイクルルールに従います。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:236
msgid "SUSPEND_EXISTING"
msgstr "SUSPEND_EXISTING"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:237
msgid ""
"If no transaction is active then this semantic is basically a no-op.\n"
"If a transaction is active then it is suspended, and resumed after the task is run.\n"
"The exception handler will never be consulted when this semantic is in use, specifying both an exception handler and\n"
"this semantic is considered an error.\n"
"This semantic allows for code to easily be run outside the scope of a transaction."
msgstr "トランザクションがアクティブでない場合、このセマンティックは基本的にノー・オペレーションです。もしトランザクションがアクティブであれば、中断され、タスクの実行後に再開されます。このセマンティックが使用されている場合、例外ハンドラは決して参照されず、例外ハンドラとこのセマンティックの両方を指定することはエラーとみなされます。このセマンティックは、トランザクションの範囲外でコードを簡単に実行することを可能にします。"

#. type: Title ===
#: upstream/_versions/2.13/guides/transaction.adoc:246
msgid "Legacy API approach"
msgstr "従来のAPIアプローチ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:248
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "あまり簡単ではない方法としては、 `UserTransaction` を注入し、様々なトランザクション・デマケーションのメソッドを使用します。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:277
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "`@Transactional` によって呼び出されたトランザクションと持つメソッドでは、 `UserTransaction`  を使用できません。"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:280
msgid "Configuring the transaction timeout"
msgstr "トランザクションタイムアウトの設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:281
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "デフォルトのトランザクションタイムアウト（トランザクションマネージャが管理するすべてのトランザクションに適用されるタイムアウト）は、 `quarkus.transaction-manager.default-transaction-timeout` プロパティで設定できます（期間は指定可能です）。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:285
msgid "The default value is 60 seconds."
msgstr "デフォルト値は60秒です。"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:287
msgid "Configuring transaction node name identifier"
msgstr "トランザクションのノード名識別子の設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:289
msgid ""
"Narayana, as the underlying transaction manager, has a concept of a unique node identifier.\n"
"This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayanaは、基礎となるトランザクションマネージャーであり、一意のノード名識別子の概念を持っています。これは、複数のリソースを含む XA トランザクションの使用を検討している場合に重要です。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:292
msgid ""
"The node name identifier plays a crucial part in the identification of a transaction.\n"
"The node name identifier is forged into the transaction id when the transaction is created.\n"
"Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction\n"
"counterparts created in database or JMS broker. The identifier makes possible for the transaction manager\n"
"to roll back the transaction counterparts during recovery."
msgstr "ノード名識別子はトランザクションの識別において重要な役割を果たします。ノード名識別子は、トランザクションが作成される際に、トランザクションIDの作成に使用されます。ノード名識別子に基づいて、トランザクションマネージャーはデータベースまたはJMSブローカに作成されたXAトランザクションのカウンターパートを認識できます。この識別子により、トランザクションマネージャーは復旧時にトランザクションのカウンターパートをロールバックすることが可能になります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:298
msgid ""
"The node name identifier needs to be unique per transaction manager deployment.\n"
"And the node identifier needs to be stable over the transaction manager restarts."
msgstr "ノード名識別子は、トランザクションマネージャーのデプロイメントごとに一意である必要があります。また、ノード識別子はトランザクションマネージャーの再起動時に変化しない必要があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:301
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "ノード名識別子は、プロパティー `quarkus.transaction-manager.node-name` にて設定します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/transaction.adoc:303
msgid "Why always having a transaction manager?"
msgstr "なぜ常にトランザクションマネージャーを持っているのか?"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:305
msgid "Does it work everywhere I want to?"
msgstr "使いたいところなら、どこでも使えるのでしょうか？"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:306
msgid ""
"Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.\n"
"JTA has some bad press for some people.\n"
"I don't know why.\n"
"Let's just say that this is not your grandpa's JTA implementation.\n"
"What we have is perfectly embeddable and lean."
msgstr "はい、Quarkusアプリケーションでも、IDEでも、テストでも動作します。JTAは一部の人々にとって評判が悪いです。理由はわかりません。これは古いJTA実装ではないとは言っておきましょう。私たちが備えているものは、完全に埋め込み可能で無駄のないものです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:313
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "それは2フェーズコミットを行い、私のアプリの速度を遅くしますか?"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:314
msgid ""
"No, this is an old folk tale.\n"
"Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "いえ、それは古い昔話です。基本的にはフリーで提供され、必要に応じて複数のデータソースを含むより複雑なケースにも対応できると考えてください。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:318
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "読み込み専用の操作をするときにはトランザクションは不要で、その方が早いですよね。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:319
msgid ""
"Wrong. +\n"
"First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). +\n"
"Second, it's again fairy tale that not using transaction is faster.\n"
"The answer is, it depends on your DB and how many SQL SELECTs you are making.\n"
"No transaction means the DB does have a single operation transaction context anyway. +\n"
"Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.\n"
"Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.\n"
"By reading it in one transaction, they will be consistent.\n"
"If you read one and the other from two different transactions, then they can be inconsistent.\n"
"It can be more dramatic if you read data related to rights and access management for example."
msgstr "それは誤りです。+ まず第一に、トランザクションの境界を `@Transactional(NOT_SUPPORTED)` (または `NEVER` または `SUPPORTS` ) でマークすることで、トランザクションを無効にしてください。+ 第二に、トランザクションを使用しない方が速いというのは、またしてもおとぎ話です。答えは、それはDBとSQLのSELECT回数に依存します。トランザクションを使用しないということは、DBが単一操作のトランザクションコンテキストを持っていることを意味します。+ 第三に、複数のSELECTを実行する場合は、一つのトランザクションにまとめる方が全てのSELECTに一貫性が保たれます。DBが車のダッシュボードを表しているとすると、残りキロ数と燃料計のレベルなどを見ることができます。それを1つのトランザクションで読み取ることで、それらは整合性を保つことができます。 もし、2つの異なるトランザクションから一方と他方を読み取れば、それらは矛盾することがあります。例えば、権限やアクセス管理に関連するデータを読み取る場合は、より劇的なことが起こる可能性があります。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:331
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "Hibernateのトランザクション管理APIではなくJTAを好む理由"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:332
msgid ""
"Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.\n"
"Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "トランザクションを `entityManager.getTransaction().begin()` などで手動で管理すると、間違えやすいtry catch finallyの多い醜いコードになってしまいます。また、トランザクションは、JMSと他のデータベースアクセスにも関連しているので、1つのAPIで管理する方が理にかなっています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:336
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "私のJPA永続化ユニットが `JTA` を使っているのか `Resource-level` トランザクションを使っているのかわからないので、めちゃくちゃです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/transaction.adoc:337
#, fuzzy
msgid ""
"It's not a mess in Quarkus :)\n"
"Resource-level was introduced to support JPA in a non managed environment.\n"
"But Quarkus is both lean and a managed environment, so we can safely always assume we are in JTA mode.\n"
"The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr "Quarkusでは混乱しません :)リソースレベルは、非管理環境でJPAをサポートするために導入されました。しかし、Quarkusはリーンかつマネージドな環境であるため、常にJTAモードであると仮定しても問題ありません。結果的に、Java SEモードでHibernate ORM + CDI + トランザクションマネージャを実行することの難しさは、Quarkusによって解決されます。"
