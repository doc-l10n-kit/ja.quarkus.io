msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.13/guides/picocli.adoc:6
msgid "Command Mode with Picocli"
msgstr "Picocli を使ったコマンドモード"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:11
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr "link:https://picocli.info/[Picocliは] 、リッチなコマンドラインアプリケーションを作成するためのオープンソースツールです。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:13
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr "Quarkus では、Picocli を使用するためのサポートを提供しています。このガイドには、 `picocli` エクステンションの使用例が記載されています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:15
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr "Quarkus のコマンドモードに詳しくない場合は、まず link:command-mode-reference[コマンドモードのリファレンスガイド] を読むことを検討してください。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:17
msgid "Configuration"
msgstr "設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:19
msgid ""
"Once you have your Quarkus project configured you can add the `picocli` extension\n"
"to your project by running the following command in your project base directory."
msgstr "Quarkus プロジェクトを設定すると、プロジェクトのベースディレクトリーで次のコマンドを実行することで、 `picocli` エクステンションをプロジェクトに追加できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:27
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:37
msgid "Simple command line application"
msgstr "シンプルなコマンドラインアプリケーション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:39
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr "`Command` を 1 つだけ使ったシンプルな PicocliApplication は、以下のように作成できます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:75
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr "`picocli.CommandLine.Command` でアノテーションされたクラスが 1 つだけある場合、これは Picocli CommandLine のエントリーポイントとして使用されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:76
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr "`picocli.CommandLine.Command` でアノテーションされたクラスはすべて CDI Bean として登録されています。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:78
#, fuzzy
msgid ""
"Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)\n"
"because Picocli will not be able to set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation\n"
"using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr "`@CommandLine.Command` をもつビーンは，プロキシされたスコープを使用してはならない(例えば， `@ApplicationScope` を使用してはならない)。 なぜなら，Picocliは，そのようなビーンのフィールド値を設定できないからである。この拡張は、 `@Depended` スコープを使用して `@CommandLine.Command` アノテーションを持つクラスを登録します。プロキシされたスコープを使用する必要がある場合は、フィールドではなくセッターをアノテーションしてください："

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:96
msgid "Command line application with multiple Commands"
msgstr "複数のコマンドを使用したコマンドラインアプリケーション"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:98
msgid ""
"When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n"
"This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr "複数のクラスが `picocli.CommandLine.Command` アノテーションを持つ場合、そのうちの 1 つに `io.quarkus.picocli.runtime.annotations.TopCommand` アノテーションを付ける必要があります。これは `quarkus.picocli.top-command` プロパティーで上書きすることができます。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:132
msgid "Customizing Picocli CommandLine instance"
msgstr "Picocli CommandLine インスタンスのカスタマイズ"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:134
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr "独自の Bean インスタンスを生成することで、 `picocli` エクステンションで使用される CommandLine クラスをカスタマイズすることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:168
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr "`PicocliCommandLineFactory` は、 `TopCommand` と `CommandLine.IFactory` を注入した CommandLine のインスタンスを作成します。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:170
msgid "Different entry command for each profile"
msgstr "プロファイルごとに異なるエントリーコマンド"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:172
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr "`@IfBuildProfile` を使用して、プロファイルごとに異なるエントリーコマンドを作成することができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:195
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr "ここでは `java.lang.Class` のインスタンスを返すことができます。この場合、 `CommandLine` は `CommandLine.IFactory` を使ってこのクラスのインスタンスを作成しようとします。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:197
msgid "Configure CDI Beans with parsed arguments"
msgstr "解析された引数での CDI Beans の設定"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:199
msgid ""
"You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.\n"
"This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.\n"
"`CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr "Picocli によって解析された引数に基づいて CDI Bean を設定するために、 `Event<CommandLine.ParseResult>` 、または単に `CommandLine.ParseResult` を使用することができます。このイベントは、このエクステンションによって作成された `QuarkusApplication` クラスで生成されます。独自の `@QuarkusMain` を提供している場合、このイベントは発生しません。 `CommandLine.ParseResult` はデフォルトの `CommandLine` Bean から作成されます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:236
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr "`@ApplicationScoped` 遅延初期化に使用"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:238
msgid "Providing own QuarkusMain"
msgstr "独自の QuarkusMain の提供"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:240
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr "また、 `QuarkusMain` でアノテーションされた独自のアプリケーションのエントリーポイントを提供することもできます (link:command-mode-reference[コマンドモードのリファレンスガイド] に記載されています)。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:269
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr "`picocli` のエクステンションで作成された Quarkus 互換の `CommandLine.IFactory` Bean。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:271
msgid "Native mode support"
msgstr "ネイティブモードのサポート"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:273
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr "このエクステンションでは、Quarkus 標準のビルドステップメカニズムを使用して、GraalVM Nativeイメージをサポートしています。将来のpicocliリリースで互換性のない変更が問題を引き起こす例外的なケースでは、一時的な回避策として、以下の設定を使用してpicocliプロジェクトのアノテーションプロセッサーにフォールバックすることができます。"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:283
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr "Gradle の場合は、 `build.gradle` ファイルの `dependencies` セクションに以下を追加する必要があります。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:291
msgid "Development Mode"
msgstr "開発モード"

#. type: Plain Text
#: upstream/_versions/2.13/guides/picocli.adoc:293
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr "開発モード、つまり `mvn quarkus:dev` を実行しているときは、 `Space bar` キーが押されるたびにアプリケーションが実行され、再起動されます。また、 `quarkus.args` システムプロパティを介して、コマンドラインアプリに引数を渡すことができます。例えば、 `mvn quarkus:dev -Dquarkus.args='--help'` や `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'` です。"

#. type: Title ==
#: upstream/_versions/2.13/guides/picocli.adoc:295
msgid "Configuration Reference"
msgstr "設定リファレンス"
