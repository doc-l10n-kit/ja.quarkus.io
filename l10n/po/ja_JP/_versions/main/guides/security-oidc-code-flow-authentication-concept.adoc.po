msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:7
#, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:14
#, fuzzy
msgid "To protect your web applications, you can use the industry-standard authorization code flow mechanism provided by the Quarkus OpenID Connect (OIDC) extension."
msgstr "ウェブアプリケーションを保護するには、Quarkus OpenID Connect（OIDC）エクステンションが提供する業界標準の認可コードフローメカニズムを使用できます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:15
#, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC認可コードフローメカニズムの概要"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:18
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect（OIDC）エクステンションは、 link:https://www.keycloak.org[Keycloak] などのOIDC準拠の認可サーバーでサポートされているOIDC認可コードフローメカニズムを使用して、アプリケーションHTTPエンドポイントを保護できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:22
msgid "The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.  After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.  Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "認可コードフロー メカニズムは、Webアプリケーションのユーザーを認証し、KeycloakなどのOIDCプロバイダーにリダイレクトしてログインさせます。認証後、OIDCプロバイダーは、認証が成功したことを確認する認可コードとともに、ユーザーをアプリケーションにリダイレクトします。そして、アプリケーションはこのコードをOIDCプロバイダーに渡し、IDトークン（認証されたユーザーを表す）、アクセストークン、リフレッシュトークンと交換し、ユーザーのアプリケーションへのアクセスを認可します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:24
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "次の図は、Quarkus における認可コードフローメカニズムの概要を示しています。"

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:25
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkusにおける認可コードフローメカニズム"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:26
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Target for macro image
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:26
#, no-wrap
msgid "authorization_code_flow.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:28
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr "Quarkusユーザーが、Quarkus web-appアプリケーションへのアクセスを要求します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:29
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus Web-appは、ユーザーを認証エンドポイント、つまり認証用のOIDCプロバイダーにリダイレクトします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:30
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDCプロバイダは、ユーザーをログインと認証のプロンプトにリダイレクトします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:31
msgid "At the prompt, the user enters their user credentials."
msgstr "プロンプトで、ユーザーは自分のユーザー認証情報を入力します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:32
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDCプロバイダは、入力されたユーザーの資格情報を認証し、成功すると認可コードを発行して、クエリパラメータとしてコードが含まれるQuarkus Web-appにユーザーをリダイレクトします。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:33
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus Webアプリケーションは、この認可コードをOIDCプロバイダーと交換し、ID、アクセス、およびリフレッシュの各トークンを取得します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:36
msgid "The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.  The following tokens are issued:"
msgstr "認可コードフローが完了し、Quarkus Webアプリは発行されたトークンを使用してユーザーに関する情報にアクセスし、そのユーザーに関連するロールベースの認可を付与します。発行されるトークンは以下の通りです:"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:38
#, fuzzy
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "IDトークン：Quarkus `web-app` アプリケーションは、IDトークンのユーザー情報を使用して、認証されたユーザーが安全にログインできるようにし、Webアプリケーションにロールベースのアクセスを提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:39
#, fuzzy
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "アクセストークン：Quarkus Webアプリは、アクセストークンを使用してUserInfo APIにアクセスし、認証されたユーザーに関する追加情報を取得したり、別のエンドポイントに伝播したりすることがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:40
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "リフレッシュ トークン: (オプション) ID およびアクセス トークンの有効期限が切れた場合、Quarkus ウェブアプリはリフレッシュ トークンを使用して新しい ID およびアクセス トークンを取得できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:42
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ] のリファレンスガイドもご参照ください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:44
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr "OIDC認可コードフローメカニズムを使用してWebアプリケーションを保護する方法については、 xref:security-oidc-code-flow-authentication-tutorial.adoc[OIDC認可コードフローを使用したWebアプリケーション保護] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:47
#, fuzzy
msgid "If you want to protect your applications by using Bearer Token authentication, see xref:security-oidc-bearer-token-authentication-concept.adoc[OIDC Bearer authentication].  For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "ベアラートークン認証を使用してアプリケーションを保護する場合は、 xref:security-oidc-bearer-token-authentication-concept.adoc[OIDCベア] ラ認証を参照してください。複数のテナントをサポートする方法については、OpenID xref:security-openid-connect-multitenancy.adoc[Connect Multi-Tenancy を使用する] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:48
#, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr "認可コードフローメカニズムの利用について"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:50
#, fuzzy, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr "OIDCプロバイダー・エンドポイントへのアクセス設定"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:53
#, fuzzy
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` アプリケーションは、OIDC プロバイダーの認可、トークン、 `JsonWebKey` (JWK)セット、および場合によっては `UserInfo` 、イントロスペクション、セッション終了（RPによるログアウト）エンドポイントの URL を必要とする。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:55
#, fuzzy
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "慣例では、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで検出される。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:57
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr "あるいは、ディスカバリー・エンドポイントが利用できない場合や、ディスカバリー・エンドポイントのラウンドトリップを減らしたい場合は、エンドポイントのディスカバリーを無効にし、相対パス値などを設定することもできる："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:74
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:78
#, fuzzy
msgid "Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.  To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr "一部の OIDC プロバイダはメタデータの検出をサポートしていますが、認可コードフローを完了するため、またはユーザーログアウトなどのアプリケーション機能をサポートするために必要なすべてのエンドポイント URL 値を返しません。この制限を回避するには、次の例で説明するように、不足しているエンドポイント URL 値をローカルで構成します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:82
#, no-wrap
msgid "# Metadata is auto-discovered but it does not return an end-session endpoint URL\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:84
#, no-wrap
msgid "quarkus.oidc.auth-server-url=http://localhost:8180/oidcprovider/account\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:87
#, no-wrap
msgid ""
"# Configure the end-session URL locally, it can be an absolute or relative (to 'quarkus.oidc.auth-server-url') address\n"
"quarkus.oidc.end-session-path=logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:93
#, fuzzy
msgid "You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.  For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.  This URL will log the user out of all of the applications that the user is currently logged into.  However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr "検出されたエンドポイント URL がローカルの Quarkus エンドポイントで機能せず、より具体的な値が必要な場合は、この同じ設定を使用してオーバーライドできます。たとえば、グローバルエンドセッションエンドポイントとアプリケーション固有のエンドセッションエンドポイントの両方をサポートするプロバイダは、次のようなグローバルエンドセッションURLを返します。 `http://localhost:8180/oidcprovider/account/global-logout` .このURLは、ユーザーが現在ログインしているすべてのアプリケーションからユーザーをログアウトします。ただし、現在のアプリケーションで特定のアプリケーションのみからユーザーをログアウトさせる必要がある場合は、 `quarkus.oidc.end-session-path=logout` パラメータを設定することで、グローバル・エンド・セッション URL をオーバーライドできます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:95
#, no-wrap
msgid "OIDC provider client authentication"
msgstr "OIDCプロバイダーのクライアント認証"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:99
#, fuzzy
msgid "OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.  Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr "OIDC プロバイダは通常、アプリケーションが OIDC エンドポイントとやり取りする際に、識別と認証を必要とします。Quarkus OIDC、特に `quarkus.oidc.runtime.OidcProviderClient` クラスは、認可コードをID、アクセス、リフレッシュトークンと交換する必要がある場合、またはIDやアクセストークンをリフレッシュまたはイントロスペクトする必要がある場合に、OIDCプロバイダを認証します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:102
#, fuzzy
msgid "Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "通常、クライアント ID とクライアント・シークレットは、アプリケーションが OIDC プロバイダに登録する際に定義される。例えば、 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDCクライアント認証] オプションはすべてサポートされています："

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:103
#, fuzzy, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr "`client_secret_basic` の例："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:110
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:113
#, fuzzy
msgid "Or:"
msgstr "あるいは"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:119
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:122
#, fuzzy
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "次の例は、 xref:credentials-provider.adoc[クレデンシャル・プロバイダから] 取得した秘密を示している："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:127
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:159
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:132
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:134
#, fuzzy, no-wrap
msgid "Example of `client_secret_post`"
msgstr "例 `client_secret_post`"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:142
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:144
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr "`client_secret_jwt` の例。署名アルゴリズムはHS256："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:151
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:153
#, fuzzy, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "`client_secret_jwt` の例。この場合、秘密は xref:credentials-provider.adoc[クレデンシャル・プロバイダから] 取得される："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:164
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:167
#, fuzzy
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr "PEM鍵ファイルを使用し、署名アルゴリズムがRS256の場合の例 `private_key_jwt` ："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:173
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:202
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:175
#, fuzzy, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr "署名アルゴリズムがRS256のkeystoreファイルによる `private_key_jwt` の例："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:184
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:187
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:190
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a 'man-in-the-middle' attack."
msgstr "`client_secret_jwt` 、または `private_key_jwt` 認証方法を使用することで、クライアントの秘密がOIDCプロバイダに送信されることがないため、「中間者」攻撃によって秘密が傍受されるリスクを回避できる。"

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:191
#, no-wrap
msgid "Additional JWT authentication options"
msgstr "JWT認証の追加オプション"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:194
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt` , `private_key_jwt` の認証方式を使用する場合、または Apple の `post_jwt` 方式を使用する場合、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることができます:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:198
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:207
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:210
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:213
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:216
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:219
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:221
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:224
#, fuzzy
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr "アップルOIDCプロバイダは、 `private_key_jwt` 認証方式で生成されたJWTを秘密とする `client_secret_post` 方式を使用するが、アップルアカウント固有の発行者とサブジェクトのクレームが含まれる。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:226
#, fuzzy
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "Quarkus Securityでは、 `quarkus-oidc` 、非標準の `client_secret_post_jwt` 認証方法がサポートされています。この認証方法は、以下のように設定できます："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:231
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:236
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:239
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:241
#, fuzzy, no-wrap
msgid "mutual TLS (mTLS)"
msgstr "相互TLS (mTLS)"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:244
#, fuzzy
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS authentication process."
msgstr "OpenID Connectプロバイダによっては、相互TLS認証プロセスの一環としてクライアントの認証を要求する場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:246
#, fuzzy
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "次の例は、 `mTLS` をサポートするように `quarkus-oidc` を設定する方法を示しています："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:250
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:254
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:258
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:264
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:266
#, no-wrap
msgid "Introspection endpoint authentication"
msgstr "イントロスペクションエンドポイント認証"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:270
#, fuzzy
msgid "Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.  If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication] section, you might need to apply the additional configuration, as follows."
msgstr "OIDC プロバイダーによっては、Basic 認証を使用し、 `client_id` や `client_secret` とは異なるクレデンシャルで、イントロスペクション・エンドポイントを認証する必要があります。 xref:oidc-provider-client-authentication[OIDC プロバイダーのクライアント認証の] セクションで説明したように、`client_secret_basic` または `client_secret_post` のクライアント認証方法をサポートするようにセキュリティ認証を設定したことがある場合は、以下のように追加の設定を適用する必要があるかもしれません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:272
#, fuzzy
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr "トークンをイントロスペクションする必要があり、イントロスペクション・エンドポイン ト固有の認証メカニズムが必要な場合は、以下のように `quarkus-oidc` を設定できる："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:277
#, no-wrap
msgid ""
"quarkus.oidc.introspection-credentials.name=introspection-user-name\n"
"quarkus.oidc.introspection-credentials.secret=introspection-user-secret\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:279
#, fuzzy, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr "OIDCプロバイダーへのリダイレクトおよびOIDCプロバイダーからのリダイレクト"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:283
#, fuzzy
msgid "When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.  In our case, this is the Quarkus application."
msgstr "ユーザが認証のために OpenID Connect プロバイダにリダイレクトされるとき、リダイレクト URL には `redirect_uri` クエリパラメータが含まれ、認証が完了したときにユーザがどこにリダイレクトされるかをプロバイダに示します。私たちの場合、これはQuarkusアプリケーションです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:287
#, fuzzy
msgid "Quarkus sets this parameter to the current application request URL by default.  For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.  Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr "Quarkusは、デフォルトでこのパラメータを現在のアプリケーションリクエストURLに設定します。例えば、ユーザーがQuarkusのサービスエンドポイントにアクセスしようとしている場合、。 `http://localhost:8080/service/1` にアクセスしようとしている場合、 `redirect_uri` パラメータは `http://localhost:8080/service/1` .同様に、リクエストURLが `http://localhost:8080/service/2` である場合、 `redirect_uri` パラメータは `http://localhost:8080/service/2` ."

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:290
#, fuzzy
msgid "Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.  In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr "OIDCプロバイダーによっては、 `redirect_uri` が特定のアプリケーションで同じ値であることを要求するものもあります、 `http://localhost:8080/service/callback` このような場合、 プロパティを設定する必要があります。このような場合、 `quarkus.oidc.authentication.redirect-path` プロパティを設定する必要があります。たとえば、 `quarkus.oidc.authentication.redirect-path=/service/callback` 、Quarkusは `redirect_uri` パラメータを次のような絶対URLに設定します。 `http://localhost:8080/service/callback` これは、現在のリクエストURLに関係なく同じです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:293
#, fuzzy
msgid "If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example, `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.  This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr "`quarkus.oidc.authentication.redirect-path` が設定されているが、ユーザーが固有のコールバックURLにリダイレクトされた後、元のリクエストURLを復元する必要がある場合、例えば、 プロパティを に設定します、 `http://localhost:8080/service/callback` この場合、 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティを `true` に設定します。 これにより、次のようなリクエスト URL が復元されます。 `http://localhost:8080/service/1` ."

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:294
#, no-wrap
msgid "Customizing authentication requests"
msgstr "認証リクエストのカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:297
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、ユーザーが認証のために OpenID Connect プロバイダーにリダイレクトした際に、`response_type` (`code` に設定)、`scope` ('openid' に設定)、`client_id`、`redirect_uri` および `state` プロパティーのみが HTTP クエリーパメータとして渡されています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:301
#, fuzzy
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`.  For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.  The following example shows how you can work around this issue:"
msgstr "`quarkus.oidc.authentication.extra-params` で、さらにプロパティを追加できる。例えば、OIDCプロバイダによっては、認可コードをリダイレクトURIのフラグメントの一部として返すことを選択するかもしれない。次の例は、この問題を回避する方法を示しています："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:305
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:307
#, no-wrap
msgid "Customizing the authentication error response"
msgstr "認証エラーレスポンスのカスタマイズ"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:311
#, fuzzy
msgid "If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.  For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "OIDC認可エンドポイントでユーザー認証が失敗した場合、プロバイダは、 `code` の代わりに、 `error` と `error_description` パラメータを使用して、ユーザーをQuarkusにリダイレクトします。例えば、プロバイダへのリダイレクトに無効なスコープやその他の無効なパラメータが含まれている場合に、このようなことが起こる可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:315
#, fuzzy
msgid "In such cases, an HTTP `401`error will be returned by default.  However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.  To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr "このような場合、以下の例に示すように、HTTP `401`error will be returned by default. However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page. To do this, set the `quarkus.oidc.authentication.error-path` ："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:319
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:323
#, fuzzy
msgid "Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.  For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "プロパティがフォワードスラッシュ（/）文字で始まり、パスが現在のエンドポイントのベースURIからの相対パスであることを確認してください。例えば、'/error' と設定され、現在のリクエスト URI が `https://localhost:8080/callback?error=invalid_scope` である場合、最終的なリダイレクト先は `https://localhost:8080/error?error=invalid_scope` ."

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:325
#, fuzzy
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr "このエラーエンドポイントがパブリックリソースであることを確認することは、ユーザーが再度認証を受けるためにこのページにリダイレクトされるのを防ぐために重要である。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:326
#, fuzzy, no-wrap
msgid "Accessing authorization data"
msgstr "認可データへのアクセス"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:329
#, fuzzy
msgid "Let's first discuss how to access information around authorization."
msgstr "まずは認可にまつわる情報にアクセスする方法について説明しよう。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:331
#, no-wrap
msgid "Accessing ID and access tokens"
msgstr "IDやアクセストークンへのアクセス"

#. SJ: new concept topic to describe the different token types and usage proposed in next iteration
#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:334
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr "OIDCコード認証メカニズムは、認可コードフローの中で3つのトークンを取得します: link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] 、Access Token、Refresh Tokenです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:338
#, fuzzy
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID Tokenは常にJWTトークンであり、JWTクレームでユーザー認証を表すために使用される。これを使用して、発行元のOIDCエンドポイント、ユーザー名、および _クレームと_ 呼ばれるその他の情報を取得できます。 `JsonWebToken` に `IdToken` という修飾子をつけることで、ID Token claim にアクセスすることができる："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:345
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:349
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:373
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:353
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:359
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:362
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr "アクセストークンは通常、OIDC `web-app` アプリケーションが、現在ログインしているユーザーの代わりに他のエンドポイントにアクセスするために使用されます。生のアクセストークンは以下のようにアクセスすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:369
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:376
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:380
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:386
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:391
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:394
#, fuzzy
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "Quarkus `web-app` アプリケーションに発行されたアクセストークンが不透明（バイナリ）で、 `JsonWebToken` にパースできない場合や、アプリケーションに内部コンテンツが必要な場合に、 `AccessTokenCredential` が使用されることに注意してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:396
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:398
#, fuzzy
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr "RefreshTokenは、Quarkusn OIDCの xref:session-management[セッション管理] プロセスの一環として、現在のIDおよびアクセストークンを更新するために使用されます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:400
#, no-wrap
msgid "User info"
msgstr "User info"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:404
#, fuzzy
msgid "If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.  Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr "ID トークンで現在認証されているユーザに関する十分な情報が得られない場合は、 `UserInfo` エンドポイントから詳細な情報を取得できます。要求する OIDC `UserInfo` エンドポイントからの link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON オブジェクトの `quarkus.oidc.authentication.user-info-required=true` プロパティを設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:406
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "認可コードグラントのレスポンスで返されるアクセストークンを使ってOpenID Provider UserInfoエンドポイントにリクエストが送られ、 `io.quarkus.oidc.UserInfo` （シンプルな `jakarta.json.JsonObject` ラッパー）オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` はSecurityIdentity `userinfo` attributeとして注入またはアクセスすることができます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:408
#, fuzzy, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr "OIDCコンフィギュレーション情報へのアクセス"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:411
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが検出した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、`SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスが可能です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:413
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:415
#, fuzzy, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "トークン請求と `SecurityIdentity` ロールのマッピング"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:418
#, fuzzy
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication-concept.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "検証済みトークンからロールが SecurityIdentity ロールにマッピングされる方法は、 xref:security-oidc-bearer-token-authentication-concept.adoc[ベアラートークンに対する] 方法と同じである。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:423
#, fuzzy
msgid "If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.  For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr "Keycloakを使用する場合は、IDトークンに `microprofile_jwt` クライアントスコープを設定し、 `groups` クレームを含めます。詳細については、『 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイド] 』を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:426
#, fuzzy
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "しかし、OIDCプロバイダーによっては、ロールがアクセストークンやユーザー情報に格納されている場合がある。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:428
#, fuzzy
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンにロールが含まれており、このアクセストークンが下流のエンドポイントに伝搬されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` を設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:430
#, fuzzy
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:432
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr "さらに、カスタム `SecurityIdentityAugmentor` をロールの追加に使用することもできます。詳しくは、 xref:security-customization.adoc#security-identity-customization[SecurityIdentityのカスタマイズ] を参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:433
#, fuzzy, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr "トークンと認証データの有効性の確保"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:437
#, fuzzy
msgid "A core part of the authentication process is ensuring the chain of trust and validity of the information.  This is done by ensuring tokens are trustable."
msgstr "認証プロセスの核心部分は、信頼の連鎖と情報の妥当性を確保することである。これは、トークンが信頼できることを保証することによって行われる。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:439
#, no-wrap
msgid "Token verification and introspection"
msgstr "トークン検証・イントロスペクション"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:442
#, fuzzy
msgid "The verification process of OIDC authorization code flow tokens follows the bearer authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication-concept.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer authentication\" guide."
msgstr "OIDC認可コードフロー トークンの検証プロセスは、ベアラー認証トークンの検証およびイントロスペクションのロジックに従います。詳細については、\"Quarkus OpenID Connect (OIDC) Bearer authentication \"ガイドの xref:security-oidc-bearer-token-authentication-concept.adoc#token-verification-introspection[Token Verification And Introspection] セクションを参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:447
#, fuzzy
msgid "With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.  If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "Quarkus `web-app` アプリケーションでは、アクセストークンは現在のQuarkus `web-app` エンドポイントへのアクセスには使用されず、このアクセストークンを期待するサービスに伝播することを目的としているため、デフォルトでは `IdToken` のみが検証されます。アクセストークンに現在のQuarkusエンドポイント（ `quarkus.oidc.roles.source=accesstoken` ）へのアクセスに必要なロールが含まれている場合は、そのロールの検証も行われます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:450
#, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr "トークンのイントロスペクションとUserInfoのキャッシュ"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:455
#, fuzzy
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles.  They will however be used to get `UserInfo`.  There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "コードフロー・アクセストークンは、それがロールのソースであると予想されない限り、イントロスペ クトされない。しかし、それらは `UserInfo` を取得するために使用される。トークンのイントロスペクションおよび/または `UserInfo` が必要な場合、コードフローアクセストークンを使用したリモートコールが1～2回発生する。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:457
#, fuzzy
msgid "Please see xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "デフォルトのトークン・キャッシュの使用またはカスタム・キャッシュ実装の登録に関する詳細については、 xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token IntrospectionおよびUserInfo cacheを] 参照してください。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:459
#, no-wrap
msgid "JSON web token claim verification"
msgstr "JSONウェブトークンのクレーム検証"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:463
#, fuzzy
msgid "Please see xref:security-oidc-bearer-token-authentication-concept.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "`iss` （発行者）の主張を含む主張の検証については、 xref:security-oidc-bearer-token-authentication-concept.adoc#jwt-claim-verification[JSON Web Token Claim verificationの] 項を参照。これは ID トークンに適用されますが、 `web-app` アプリケーションがアクセストークンの検証を要求した場合は、JWT 形式のアクセストークンにも適用されます。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:464
#, fuzzy, no-wrap
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr "コード交換のための証明鍵（PKCE）によるさらなる安全性"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:467
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[コード交換用プルーフ・キー] （ link:https://datatracker.ietf.org/doc/html/rfc7636[PKCE] ）は認可コード傍受のリスクを最小限に抑える。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:470
#, fuzzy
msgid "While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.  With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "PKCEは、ブラウザで実行されるSPAスクリプトなどのパブリックなOpenID Connectクライアントにとって最も重要ですが、Quarkus OIDC `web-app` アプリケーションに対しても、特別な保護レベルを提供することができます。PKCEを使用すると、Quarkus OIDC `web-app` アプリケーションは機密性の高いOpenID Connectクライアントとなり、クライアントシークレットを安全に保存し、トークンのコード交換に使用することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:472
#, fuzzy
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret, as shown in the following example:"
msgstr "次の例に示すように、 `quarkus.oidc.authentication.pkce-required` プロパティと 32 文字のシークレットを使用して、OIDC `web-app` エンドポイントで `PKCE` を有効にできます："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:477
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.pkce-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:480
#, fuzzy
msgid "If you already have a 32-characters client secret then you do not need to set the `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key."
msgstr "すでに32文字のクライアント・シークレットを持っている場合、別のシークレット・キーを使用するのでなければ、 `quarkus.oidc.authentication.pkce-secret` プロパティを設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:484
#, fuzzy
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.  The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.  The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr "秘密鍵は、ユーザーが認証のためにOIDCプロバイダに `code_challenge` クエリパラメータでリダイレクトされている間に、ランダムに生成された `PKCE` `code_verifier` を暗号化するために必要です。この `code_verifier` は、ユーザーがQuarkusにリダイレクトされて戻ってきたときに復号化され、 `code` 、クライアントシークレット、その他のパラメータと一緒にトークンエンドポイントに送信され、コード交換が完了します。プロバイダは、 `code_verifier` の `SHA256` ダイジェストが、認証リクエスト中に提供された `code_challenge` と一致しない場合、コード交換に失敗します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:486
#, fuzzy, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr "認証のライフタイムの処理と制御"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:491
#, fuzzy
msgid "Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.  There are also situations where a logout event is explicitly requested.  Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr "認証のもう1つの重要な要件は、ユーザーがリクエストのたびに認証することを 要求することなく、セッションが基づいているデータが最新であることを保証する ことである。また、ログアウトイベントが明示的に要求される状況もあります。以下のポイントを参考に、Quarkusアプリケーションのセキュリティを確保するための適切なバランスを見つけましょう："

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:493
#, no-wrap
msgid "Cookies"
msgstr "クッキー"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:497
#, fuzzy
msgid "The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.  This state is a key element controlling the lifetime of authentication data."
msgstr "OIDC アダプタは、セッション、コードフロー、ログアウト後の状態を保持するためにクッキーを使用する。この状態は、認証データの寿命を制御する重要な要素です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:499
#, fuzzy
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr "`quarkus.oidc.authentication.cookie-path` プロパティを使用すると、保護されたリソースにアクセスする際に、重複するルートや異なるルートで同じクッキーが表示されるようになります："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:501
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:502
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:503
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:505
#, fuzzy
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "デフォルトでは、 `quarkus.oidc.authentication.cookie-path` は `/` に設定されていますが、必要に応じてより具体的なパス、例えば `/web-app` に変更することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:509
#, fuzzy
msgid "To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.  Set the `quarkus.oidc.authentication.cookie-path-header` property.  For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr "クッキーのパスを動的に設定するには、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定します。 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定します。例えば、HTTPヘッダ`X-Forwarded-Prefix`の値を使用してクッキーのパスを動的に設定するには、プロパティを `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` に設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:511
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストで設定された HTTP ヘッダーが利用できない場合は、`quarkus.oidc.authentication.cookie-path` がチェックされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:514
#, fuzzy
msgid "If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.  For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr "アプリケーションが複数のドメインにまたがって展開されている場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティを設定して、保護されているすべてのQuarkusサービスからセッションCookieが見えるようにします。たとえば、次の2つのドメインにQuarkusサービスが展開されている場合、 `quarkus.oidc.authentication.cookie-domain` プロパティを `company.net` に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:516
#, fuzzy
msgid "\\https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:517
#, fuzzy
msgid "\\https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:520
#, fuzzy, no-wrap
msgid "Customizing the cookie with TokenStateManager"
msgstr "TokenStateManagerでクッキーをカスタマイズする"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:524
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or to refresh grant responses in a session cookie.  This makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` は、デフォルトの `io.quarkus.oidc.TokenStateManager` インターフェース実装を使用して、認可コードで返された ID、アクセス、およびリフレッシュトークンを保持したり、グラントレスポンスをセッションクッキーでリフレッシュしたりします。これにより、QuarkusのOIDCエンドポイントは完全にステートレスになります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:526
#, fuzzy
msgid "An access token is only required if the endpoint needs to:"
msgstr "アクセストークンは、エンドポイントが必要とする場合にのみ必要です："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:528
#, fuzzy
msgid "Retrieve `UserInfo`"
msgstr "検索 `UserInfo`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:529
#, fuzzy
msgid "Access the downstream service with this access token"
msgstr "このアクセストークンを使ってダウンストリームサービスにアクセスする"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:530
#, fuzzy
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "アクセストークンに関連付けられているロールを使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:532
#, fuzzy
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "そのような場合は、 `quarkus.oidc.token-state-manager.strategy` プロパティを使用して、以下のようにトークン状態戦略を設定する："

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:534
#, fuzzy, no-wrap
msgid "To..."
msgstr "に..."

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:536
#, fuzzy, no-wrap
msgid "Set the property to ..."
msgstr "プロパティを ..."

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:537
#, fuzzy, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr "IDとリフレッシュ・トークンのみを保持"

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:539
#, fuzzy, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:540
#, fuzzy, no-wrap
msgid "Keep the ID token only"
msgstr "IDトークンのみを保持"

#. type: Table
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:542
#, fuzzy, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-token`"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:548
#, fuzzy
msgid "If your chosen cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.  This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.  To workaround this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token."
msgstr "選択したクッキー戦略がトークンを組み合わせ、4KB を超える大きなセッション・クッキー値を生成する場合、ブラウザによってはそのようなクッキー・サイズを扱えないかもしれません。この問題は、ID、アクセス、およびリフレッシュ・トークンが JWT トークンで、選択された戦略が `keep-all-tokens` であるとき、あるいは戦略が `id-refresh-token` であるときに ID とリフレッシュ・トークンで発生する可能性があります。この問題を回避するには、トークンごとに一意のセッショントークンを作成するように `quarkus.oidc.token-state-manager.split-tokens=true` を設定します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:551
#, fuzzy
msgid "`TokenStateManager` encrypts the tokens before storing them in the session cookie.  The following example shows how you configure `TokenStateManager` to split the tokens and encrypt them:"
msgstr "`TokenStateManager` はトークンを暗号化してからセッション・クッキーに保存します。次の例は、トークンを分割して暗号化するために を設定する方法を示しています： `TokenStateManager` "

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:560
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:564
msgid "The token encryption secret must be at least 32 characters long.  If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr "トークンの暗号化シークレットは少なくとも32文字以上でなければなりません。このキーが設定されていない場合、 `quarkus.oidc.credentials.secret` または `quarkus.oidc.credentials.jwt.secret` のいずれかがハッシュ化されて暗号化キーが作成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:567
#, fuzzy
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr "Quarkus が以下の認証方法のいずれかを使用して OpenID Connect Provider を認証する場合は、 `quarkus.oidc.token-state-manager.encryption-secret` プロパティを設定します："

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:569
#, fuzzy
msgid "mTLS"
msgstr "エムティーエルエス"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:570
#, fuzzy
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr "`private_key_jwt` JWTトークンの署名にRSAまたはECの秘密鍵が使われる。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:572
#, fuzzy
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "そうでない場合、ランダムなキーが生成されます。これは、Quarkusアプリケーションがクラウドで実行されており、複数のポッドがリクエストを管理している場合に問題となる可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:574
#, fuzzy
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "`quarkus.oidc.token-state-manager.encryption-required=false` を設定することで、セッション・クッキーのトークン暗号化を無効にすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:578
#, fuzzy
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie.  For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie.  Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr "トークンをセッション・クッキーに関連付ける方法をカスタマイズする必要がある場合は、独自の `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI Bean を登録します。例えば、トークンをデータベースに保持し、データベースポインタだけをセッションクッキーに保存させたい場合があります。トークンを複数のマイクロサービスノードで利用できるようにする必要がある場合、このアプローチにはいくつかの課題が生じる可能性があることに注意してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:580
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:584
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:589
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Alternative;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:596
#, no-wrap
msgid ""
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:601
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:604
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:611
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:621
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:632
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:635
#, fuzzy, no-wrap
msgid "Logout and expiration"
msgstr "ログアウトと有効期限"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:638
#, fuzzy
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "トークンの有効期限が切れて更新されなかったか、明示的なログアウト操作がトリガーされたかである。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:640
#, fuzzy
msgid "Let's start with explicit logout operations."
msgstr "まず、明示的なログアウト操作から始めよう。"

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:643
#, no-wrap
msgid "User-initiated logout"
msgstr "ユーザー主導のログアウト"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:647
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:649
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求により、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] が開始され、ユーザーは OpenID Connect Provider にリダイレクトされ、そこでログアウトできます。ログアウトが実際に意図されていることを確認するように求められます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:651
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "`quarkus.oidc.logout.post-logout-path` プロパティーが設定されている場合、ログアウトが完了すると、ユーザーはエンドポイントのログアウト後ページに戻ります。たとえば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が \"/signin\" に設定されている場合、ユーザーは `https://application.com/webapp/signin` (この URI は OpenID Connect プロバイダーに有効な `post_logout_redirect_uri` として登録されている必要があることに注意してください)。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:653
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` Cookie が作成され、それに一致する `state` クエリパラメータがログアウトリダイレクト URI に追加され、ログアウトが完了すると OpenID Connect プロバイダはこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` クエリパラメータが `q_post_logout` Cookie の値と一致するかどうかを確認することが推奨されます。これは、例えば Jakarta REST フィルタで実行できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:655
#, fuzzy
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr "OpenID Connect xref:security-openid-connect-multitenancy.adoc[マルチテナントを] 使用する場合、Cookie名は異なることに注意してください。例えば、 `tenant_1` IDを持つテナントの場合、 `q_post_logout_tenant_1` という名前になります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:657
#, fuzzy
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr "Quarkusアプリによって開始されるログアウトフローの設定例を示します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:664
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:727
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:752
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:668
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"# Logged-out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:672
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:676
#, no-wrap
msgid ""
"# All users can see the welcome page:\n"
"quarkus.http.auth.permission.public.paths=/welcome.html\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:680
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.  For more information, see the xref:oidc-cookies[Cookies] section."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` に、すべてのアプリケーションリソースに共通するパス値（この例では `/` ）を設定する必要がある場合があります。詳しくは、 xref:oidc-cookies[Cookie] の項を参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:685
#, fuzzy
msgid "Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.  However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr "OIDCプロバイダの中には、 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RPによるログアウト] 仕様に対応しておらず、OpenID Connectのよく知られた `end_session_endpoint` メタデータプロパティを返さないものもあります。しかし、そのようなOIDCプロバイダの特定のログアウトメカニズムは、ログアウトURLクエリパラメータの名前の付け方が異なるだけなので、これはQuarkusにとって問題ではありません。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:687
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiatedログアウト] 仕様によると、 `quarkus.oidc.logout.post-logout-path` プロパティは、 `post_logout_redirect_uri` クエリパラメータとして表現されるが、この仕様をサポートしていない プロバイダでは認識されない。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:689
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "この問題を回避するには、 `quarkus.oidc.logout.post-logout-url-param` を使用できます。 `quarkus.oidc.logout.extra-params` で追加されたログアウトクエリーパラメーターをさらにリクエストすることもできます。たとえば、 `Auth0` でログアウトをサポートする方法は次のとおりです。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:696
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:699
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:704
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configure it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:708
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:712
#, no-wrap
msgid "Back-channel logout"
msgstr "バックチャネルログアウト"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:716
#, fuzzy
msgid "The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.  In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr "OIDC プロバイダは、認証データを使ってすべてのアプリケーションを強制的にログアウトさせることができる。この場合、OIDCは各アプリケーションから特定のURLを呼び出し、ログアウトをトリガーする。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:718
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[バックチャンネルログアウト] は、OpenID Connect プロバイダーが、このユーザーが現在ログインしているすべてのアプリケーションから、ユーザーエージェントをバイパスして、現在のユーザーをログアウトするために使用されます。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:720
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "次のように、バックチャネルログアウトをサポートするように Quarkus を設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:729
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:733
#, fuzzy
msgid "The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.  You will need to configure this URL in the admin console of your OIDC provider."
msgstr "絶対 `back-channel logout` URLは、現在のエンドポイントURLに `quarkus.oidc.back-channel-logout.path` を追加することで計算される、 `http://localhost:8080/back-channel-logout` .このURLは、OIDCプロバイダーの管理コンソールで設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:736
#, fuzzy
msgid "You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.  For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr "また、OpenID Connectプロバイダが現在のログアウトトークンに有効期限を設定していない場合、ログアウトトークンの検証を成功させるためにトークン年齢プロパティを設定する必要があります。例えば、 `quarkus.oidc.token.age=10S` を設定して、ログアウトトークンの `iat` （発行時刻）から10秒以上経過しないようにします。"

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:738
#, no-wrap
msgid "Front-channel logout"
msgstr "フロントチャンネルログアウト"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:743
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).  It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.  This option is rarely used."
msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[フロントチャネルログアウトは] 、ユーザエージェント（ブラウザなど）から現在のユーザを直接ログアウトするために使用できます。これは xref:back-channel-logout[バックチャネルログアウトの] ようなものですが、ログアウトステップはOIDPプロバイダによってバックグラウンドで実行されるのではなく、ブラウザのようなユーザーエージェントによって実行されます。このオプションはほとんど使用されません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:745
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr "次のように、フロントチャネルログアウトをサポートするように Quarkus を設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:754
#, no-wrap
msgid "quarkus.oidc.logout.frontchannel.path=/front-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:757
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr "このパスは現在のリクエストのパスと比較され、これらのパスが一致する場合、ユーザーはログアウトされます。"

#. type: Title =====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:759
#, no-wrap
msgid "Local logout"
msgstr "ローカルログアウト"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:765
#, fuzzy
msgid "xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.  If, for example, your OIDC provider is Google, you will be logged out from Google and its services.  Instead the user might just want to log out of that specific application.  Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr "xref:user-initiated-logout[ユーザーによるログアウトは] 、ユーザーをOIDCプロバイダーからログアウトさせますが、シングルサインオンとして使用されている場合、それはあなたが必要とするものではないかもしれません。例えば、あなたのOIDCプロバイダーがGoogleの場合、あなたはGoogleとそのサービスからログアウトすることになります。その代わり、ユーザーは特定のアプリケーションからログアウトしたいだけかもしれない。もう一つのユースケースは、OIDCプロバイダーがログアウトエンドポイントを持っていない場合です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:767
#, fuzzy
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "xref:oidc-session[OidcSessionを] 使うことで、次の例に示すように、ローカル・セッション・クッキーだけがクリアされるローカル・ログアウトをサポートすることができます："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:773
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:775
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:778
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:781
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:788
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:792
#, fuzzy
msgid "====== Using `OidcSession` for local logout"
msgstr "`OidcSession` をローカル・ログアウトに使用する"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:795
#, fuzzy
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.  More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` は現在の のラッパーです。 `IdToken` xref:local-logout[ローカルログアウトの] 実行、現在のセッションのテナント識別子の取得、セッションの期限切れの確認などに役立ちます。このメソッドには、さらに便利なメソッドが追加される予定です。"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:797
#, no-wrap
msgid "Session management"
msgstr "セッション管理"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:801
#, fuzzy
msgid "By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.  If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr "デフォルトでは、ログアウトはOIDCプロバイダによって発行されたIDトークンの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OIDCプロバイダーにリダイレクトされます。OIDCプロバイダのセッションがまだ有効な場合、ユーザーは再度クレデンシャルを入力することなく、自動的に再認証されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:804
#, fuzzy
msgid "The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.  If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr "`quarkus.oidc.token.refresh-expired` プロパティを有効にすると、現在のユーザー・セッションを自動的に延長できる。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークン付与が使用され、ID トークンがリフレッシュされるだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:808
#, fuzzy
msgid "If you have a xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr "`keycloak.js` のようなOIDCプロバイダスクリプトが認可コードフローを管理している xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[サービスアプリケーション用のシングルページアプリケーションが] ある場合、そのスクリプトはSPA認証セッションの寿命も制御します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:811
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションを使用している場合、ユーザーセッションの寿命を管理しているのは、Quarkus OIDCコード認証メカニズムです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:814
#, fuzzy
msgid "To use the refresh token, you should carefully configure the session cookie age.  The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr "リフレッシュ・トークンを使用するには、セッション・クッキーの年齢を慎重に設定する必要があります。セッション年齢はIDトークンの寿命より長く、リフレッシュ・トークンの寿命に近いか等しくなければなりません。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:816
#, fuzzy
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "現在のIDトークンの寿命値と、 `quarkus.oidc.authentication.session-age-extension` 、 `quarkus.oidc.token.lifespan-grace` プロパティの値を足すことで、セッション年齢を計算する。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:820
#, fuzzy
msgid "You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.  You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr "必要であれば、 `quarkus.oidc.authentication.session-age-extension` プロパティのみを使用して、セッションの寿命を大幅に延ばします。 `quarkus.oidc.token.lifespan-grace` プロパティは、わずかなクロック・スキューを考慮するためだけに使用します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:824
#, fuzzy
msgid "When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.  The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr "現在の認証済みユーザーが保護されたQuarkusエンドポイントに戻り、セッションクッキーに関連付けられたIDトークンの有効期限が切れた場合、デフォルトでは、ユーザーは自動的にOIDC認可エンドポイントにリダイレクトされ、再認証が行われます。OIDCプロバイダは、ユーザとこのOIDCプロバイダ間のセッションがまだアクティブな場合、再度ユーザに認証を要求する可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:828
#, fuzzy
msgid "If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.  This refresh token might also be recycled (refreshed) itself as part of this process.  As a result, the new session cookie is created and the session is extended."
msgstr "`quarkus.oidc.token.refresh-expired` が `true` に設定されている場合、最初の認可コード付与レスポンスとともに返されたリフレッシュトークンを使用することで、（アクセストークンと同様に）期限切れの ID トークンがリフレッシュされる。このリフレッシュ・トークンは、このプロセスの一部として、それ自体も再利用(リフレッシュ)されるかもしれません。その結果、新しいセッションクッキーが作成され、セッションが拡張される。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:835
#, fuzzy
msgid "In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.  If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.  Quarkus assumes that this request is the first authentication request.  Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr "ユーザーがあまりアクティブでない場合、 `quarkus.oidc.authentication.session-age-extension` プロパティを使用して、期限切れの ID トークンを処理することができます。IDトークンの有効期限が切れると、次のユーザーリクエストの際にセッションクッキーがQuarkusエンドポイントに返されない可能性があります。Quarkusは、このリクエストが最初の認証リクエストであると想定しています。 `quarkus.oidc.authentication.session-age-extension` は、ほとんどアクティブでないユーザーにとって _適度な_ 長さに設定し、セキュリティポリシーに従ってください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:839
#, fuzzy
msgid "You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.  Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "さらに一歩進んで、有効期限が切れそうなIDトークンやアクセストークンを積極的にリフレッシュすることができます。 `quarkus.oidc.token.refresh-token-time-skew` 、リフレッシュを予期したい値に設定します。現在のユーザー・リクエストの間に、現在のIDトークンがこの `quarkus.oidc.token.refresh-token-time-skew` の間に期限切れになると計算された場合、IDトークンはリフレッシュされ、新しいセッション・クッキーが作成されます。このプロパティには、IDトークンの寿命よりも短い値を設定する必要があります。この寿命の値に近ければ近いほど、IDトークンはより頻繁にリフレッシュされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:841
#, fuzzy
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "シンプルなJavaScript関数でQuarkusエンドポイントにpingを送信し、定期的にユーザーアクティビティをエミュレートすることで、このプロセスをさらに最適化できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:846
#, fuzzy
msgid "You cannot extend the user session indefinitely.  The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "ユーザーセッションを無期限に延長することはできません。有効期限が切れたIDトークンを持つ復帰ユーザは、リフレッシュトークンの有効期限が切れると、OIDCプロバイダエンドポイントで再認証する必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:849
#, fuzzy, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "GitHubおよびOIDC以外のOAuth2プロバイダーとの統合"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:853
#, fuzzy
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].  Remember, OIDC is built on top of OAuth2."
msgstr "GitHubやLinkedInのような有名なプロバイダはOpenID Connectではなく、OAuth2プロバイダであり、 `authorization code flow` 、例えば link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2や] link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth] 2をサポートしています。OIDCはOAuth2の上に構築されていることを忘れないでください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:855
#, fuzzy
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OpenID Connect プロバイダと OAuth2 プロバイダの主な違いは、OpenID Connect プロバイダが、 `OAuth2` プロバイダが返す標準認可コードフロー `access` と `refresh` トークンに加えて、ユーザ認証を表す `ID Token` を返すことです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:857
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "GitHub のような OAuth2 プロバイダーは `IdToken` を返しません。ユーザー認証の事実は暗黙の了解で、認証済みユーザーの代わりに現在の Quarkus `web-app` アプリケーションがデータにアクセスすることを許可する `access` トークンで間接的に表現されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:861
#, fuzzy
msgid "For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.  This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.  This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr "OIDCの場合は、認証の有効性の証明としてIDトークンを検証しますが、OAuth2の場合はアクセストークンを検証します。これは、アクセストークンを必要とし、通常ユーザー情報を返すエンドポイントを呼び出すことで行われます。このアプローチはOIDC xref:user-info[UserInfo] アプローチに似ており、Quarkus OIDCがユーザーに代わって `UserInfo` 。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:863
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "例えば、GitHubと連携する場合、Quarkusエンドポイントは `access` トークンを取得することができます。これにより、Quarkusエンドポイントは現在のユーザーのGitHubプロファイルを要求することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:865
#, fuzzy
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "このようなOAuth2サーバーとの統合をサポートするために、 `quarkus-oidc` は、 `IdToken` : `quarkus.oidc.authentication.id-token-required=false` を使用せずに認可コードフローのレスポンスを許可するように、少し異なる設定が必要です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:871
#, fuzzy
msgid "Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.  You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider, such as GitHub, on every request.  In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr "`IdToken` なしで認可コードフローをサポートするようにエクステンションを設定しても、 `quarkus-oidc` の動作方法を標準化するために内部で `IdToken` が生成されます。 `IdToken` を使うのは、認証セッションをサポートするためと、リクエストのたびにユーザーを GitHub などのプロバイダーにリダイレクトさせないためです。この場合、セッションの有効期限は5分に設定されています。 xref:session-management[セッション管理の] セクションで説明するように、この有効期限をさらに延長することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:873
#, fuzzy
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "これにより、複数のOIDCプロバイダーをサポートするアプリケーションの取り扱いが簡単になる。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:882
#, fuzzy
msgid "The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.  The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.  In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.  If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.  To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.  You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).  For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr "次のステップは、返されたアクセストークンが有用であり、現在のQuarkusエンドポイントに対して有効であることを確認することです。最初の方法は、プロバイダがそのようなエンドポイントを提供している場合、 `quarkus.oidc.introspection-path` を設定して OAuth2 プロバイダのイントロスペクションエンドポイントを呼び出すことです。この場合、 `quarkus.oidc.roles.source=accesstoken` を使用して、ロールのソースとしてアクセストークンを使用できます。イントロスペクション・エンドポイントが存在しない場合、少なくともアクセストークンの検証は行われるため、代わりにプロバイダに xref:user-info[UserInfoを] 要求することができます。そのためには、 `quarkus.oidc.token.verify-access-token-with-user-info=true` を指定してください。また、 `quarkus.oidc.user-info-path` プロパティに、ユーザー情報を取得する URL エンドポイント（またはアクセストークンで保護されたエンドポイント）を設定する必要があります。GitHubの場合は、introspectionエンドポイントがないので、UserInfoをリクエストする必要があります。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:888
#, fuzzy
msgid "Requiring xref:user-info[UserInfo] involves making a remote call on every request.  Therefore, you might want to consider caching `UserInfo` data.  For more information, see the xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer authentication\" guide."
msgstr "xref:user-info[UserInfoを] 要求することは、リクエストのたびにリモートコールを行うことになる。そのため、 `UserInfo` データのキャッシュを検討するとよいでしょう。詳細については、\"OpenID Connect (OIDC) ベアラー認証\" ガイドの xref:security-oidc-bearer-token-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection および UserInfo キャッシュの] セクションを参照してください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:890
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr "あるいは、 `UserInfo` が `quarkus.oidc.cache-user-info-in-idtoken=true` プロパティで内部生成された `IdToken` に埋め込まれるように要求することもできます。このアプローチの利点は、デフォルトではキャッシュされた `UserInfo` の状態がエンドポイントに保持されないことです。代わりに、セッション Cookie に保存されます。また、 `UserInfo` に機密データが含まれている場合、このケースで `IdToken` を暗号化することを検討するとよいでしょう。詳細については、 xref:token-state-manager[TokenStateManagerでトークンを暗号化] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:894
#, fuzzy
msgid "OAuth2 servers might not support a well-known configuration endpoint.  In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr "OAuth2 サーバーは、よく知られた設定エンドポイントをサポートしていないかもしれません。この場合はディスカバリを無効にし、認可、トークン、イントロスペクション、userinfo エンドポイントのパスを手動で設定する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:897
#, fuzzy
msgid "For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.  Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "Apple、Facebook、GitHub、Google、Microsoft、Spotify、Twitterのような有名なOIDCまたはOAuth2プロバイダーの場合、Quarkusを使用すると、 `quarkus.oidc.provider` プロパティを使用してアプリケーションの設定を大幅に簡素化できます。ここでは、 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuthアプリケーションを作成] した後に、 `quarkus-oidc` をGitHubと統合する方法を説明します。Quarkusのエンドポイントを次のように設定します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:903
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:906
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request different scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:913
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache\n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:916
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "その他のよく知られたプロバイダーの設定については、 xref:security-openid-connect-providers.adoc[OpenID Connectのプロバイダー] を参照してください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:918
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "このようなエンドポイントに対して必要なのは、現在認証されているユーザーのプロファイルを `GET http://localhost:8080/github/userinfo` で返却し、個々の `UserInfo` のプロパティとしてアクセスすることです:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:925
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:996
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:928
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:932
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:935
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:943
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:946
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシー] の利用で複数のソーシャルプロバイダーをサポートしている場合、例えば OpenID Connect プロバイダーである Google が `IdToken` を返し、OAuth2 プロバイダーである GitHub が `IdToken` を返さず `UserInfo` のみアクセスを許可していれば、エンドポイントには Google と GitHub 両フロー用の `SecurityIdentity` しか入れられないようにすることができます。GiHub フローがアクティブになると、内部で生成された `IdToken` で作成されたプリンシパルが `UserInfo` ベースのプリンシパルに置き換えられるので、`SecurityIdentity` を単純に拡張する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:950
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:952
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:954
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:962
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:965
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:973
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:978
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:984
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:986
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:989
#, fuzzy
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "次のコードは、ユーザーがGoogleやGitHubを使ってアプリケーションにサインインしたときに動作します："

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:999
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1003
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1006
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1013
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1021
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1024
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr "`@IdToken JsonWebToken` と `UserInfo` の両方をインジェクトし、 `IdToken` を返すプロバイダーに対応する場合は `JsonWebToken` を使用し、 `IdToken` を返さないプロバイダーには `UserInfo` を使用する、というシンプルな方法もある。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1026
#, fuzzy
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "GitHub OAuth アプリケーションの設定で入力するコールバックパスは、GitHub 認証とアプリケーションの認可に成功した後にユーザーをリダイレクトさせたいエンドポイントパスと一致するようにしなければなりません。この場合は、 `http:localhost:8080/github/userinfo` に設定しなければなりません。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1028
#, no-wrap
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1034
#, fuzzy
msgid "You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.  When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.  In the future, more events might be reported.  For example:"
msgstr "重要な OIDC 認証イベントを監視する `@ApplicationScoped` Bean を登録できます。ユーザーが初めてログインしたり、再認証したり、セッションをリフレッシュしたりすると、リスナーが更新されます。将来的には、さらに多くのイベントが報告されるようになるかもしれません。例えば"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1039
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1044
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1047
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1054
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getAttribute(RoutingContext.class.getName());\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1056
#, fuzzy, no-wrap
msgid "Propagating tokens to downstream services"
msgstr "下流サービスへのトークンの伝播"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1059
#, fuzzy
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr "認可コードフローから下流のサービスへのアクセストークンの伝播については、「 xref:security-openid-connect-client-reference.adoc#token-propagation[トークンの伝播] 」のセクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1061
#, fuzzy, no-wrap
msgid "Integration considerations"
msgstr "統合に関する考慮事項"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1064
#, fuzzy
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr "OIDCによって保護されたアプリケーションは、シングルページのアプリケーションから呼び出されるような環境に統合され、よく知られたOIDCプロバイダーと連携する必要があり、HTTPリバースプロキシの背後で実行され、外部および内部アクセスが必要であるなど。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1066
#, fuzzy
msgid "This section discusses these considerations."
msgstr "このセクションでは、これらの考慮事項について説明する。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1067
#, no-wrap
msgid "Single-page applications"
msgstr "シングルページ・アプリケーション"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1070
#, fuzzy
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer authentication\" guide meets your requirements."
msgstr "OpenID Connect (OIDC)ベアラー認証」ガイドの「 xref:security-oidc-bearer-token-authentication-concept.adoc#single-page-applications[シングルページアプリケーション] 」のセクションで提案されている方法でシングルページアプリケーション(SPA)を実装することが要件に合っているかどうかを確認することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1073
#, fuzzy
msgid "If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.  This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr "SPAやJavaScript API（ `Fetch` 、 `XMLHttpRequest` (XHR)など）をQuarkusウェブアプリケーションで使用する場合は、OpenID Connectプロバイダが、Quarkusからのリダイレクト後にユーザーが認証される認可エンドポイントに対して、クロスオリジンリソース共有（CORS）をサポートしていない可能性があることに注意してください。QuarkusアプリケーションとOpenID Connectプロバイダーが異なるHTTPドメイン、ポート、またはその両方でホストされている場合、認証に失敗する可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1077
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value.  You must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code.  For example:"
msgstr "このような場合、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティを `false` に設定します。これにより、Quarkusは `499` ステータスコードと `WWW-Authenticate` ヘッダーを `OIDC` 値で返すように指示します。また、ブラウザスクリプトを更新して、 `X-Requested-With` ヘッダーに `JavaScript` 値を設定し、 `499` ステータスコードの場合に最後に要求されたページを再読み込みする必要があります。例えば"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1082
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1091
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1093
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1097
#, fuzzy
msgid "If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information, see the xref:http-reference.adoc#cors-filter[CORS filter] section of the \"HTTP reference\" guide."
msgstr "別のドメインで動作する単一ページ・アプリケーションからこのアプリケーションを利用する場合は、CORS（cross-origin resource sharing）を設定する必要があります。詳細については、\"HTTPリファレンス \"ガイドの xref:http-reference.adoc#cors-filter[CORSフィルターの] セクションを参照してください。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1098
#, fuzzy, no-wrap
msgid "Calling Cloud provider services"
msgstr "クラウド・プロバイダーのサービスを呼び出す"

#. type: Title ====
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1100
#, no-wrap
msgid "Google Cloud"
msgstr "Google Cloud"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1103
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr "Quarkus OIDC `web-app` アプリケーションが、Google開発者コンソールでそのようなサービスに対するOpenID Connect（認可コードフロー）許可を有効にしている、現在認証されているユーザーに代わって、 *BigQueryなどの* *Google Cloudサービスに* アクセスできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1106
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverse] の link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services] で行うのは超簡単で、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] のサービスの依存関係を追加するだけです。例:"

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1108
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1170
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1203
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1323
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1115
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1118
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1191
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1213
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1333
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1121
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1124
msgid "and configure Google OIDC properties:"
msgstr "そしてGoogle OIDCプロパティーを設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1131
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1133
#, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr "Quarkusアプリケーションをリバースプロキシの背後で実行"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1136
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "Quarkusアプリケーションがリバースプロキシー/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、認可コードフロー `redirect_uri` パラメーターが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1138
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr "このような場合、プロキシによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、 xref:http-reference.adoc#reverse-proxy[リバースプロキシの背後で実行] Vert.xのドキュメントセクションをご覧ください。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1140
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例えば、Quarkus のエンドポイントが Kubernetes Ingress の背後にあるクラスターで実行されている場合、計算された `redirect_uri` パラメーターが内部のエンドポイントアドレスを指している可能性があるので、OpenID Connect Provider からこのエンドポイントへのリダイレクトは機能しないかもしれません。この問題は、以下のような設定で解決することができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1147
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1150
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "ここで、 `X-ORIGINAL-HOST` は、外部エンドポイントアドレスを表すために Kubernetes Ingress によって設定されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1152
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、QuarkusアプリケーションがSSL終端リバースプロキシーの後ろで実行されている場合にも使用できます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1153
#, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr "OIDCプロバイダーへの外部・内部アクセスについて"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1157
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "OpenID Connect Provider の外部アクセス可能な認証、ログアウト、その他のエンドポイントは、自動検出された URL や内部 URL `quarkus.oidc.auth-server-url` に対して設定された URL とは異なる HTTP(S) URL を持つ場合があることに注意してください。このような場合、エンドポイントから発行者確認の失敗が報告され、外部からアクセス可能な接続プロバイダーのエンドポイントへのリダイレクトに失敗する可能性があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1160
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloak を使用する場合は、外部からアクセス可能なベース URL に設定された `KEYCLOAK_FRONTEND_URL` システムプロパティーで起動してください。他の Openid Connect プロバイダーと連携している場合は、プロバイダーのドキュメントを確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1162
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1166
#, fuzzy
msgid "Testing is often tricky when it comes to authentification to a separate OIDC like server.  Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr "別のOIDCのようなサーバーへの認証となると、テストはしばしば厄介です。Quarkusは、モッキングからOIDCプロバイダのローカル実行まで、いくつかのオプションを提供しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1168
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1188
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1195
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1198
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1201
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1210
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1216
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1219
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、 `application.properties` を以下のように設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1227
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1230
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1234
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1236
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1241
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1245
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1249
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1255
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1260
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1262
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1266
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1273
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1276
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は `alice` と `admin` ユーザーを認識します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1278
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、`OidcWiremockTestResource` はトークン発行者と視聴者を `https://service.example.com` に設定します。これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` システムのプロパティーでカスタマイズすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1280
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr "`OidcWiremockTestResource` は、すべての OpenID Connect プロバイダーをエミュレートするために使用することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1282
#, no-wrap
msgid "Dev services for Keycloak"
msgstr "Dev services for Keycloak"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1286
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloak に対する統合テストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用することをお勧めします。`Dev Services for Keycloak` は、テストコンテナーを起動して初期化します。これにより、`quarkus` レルム、`quarkus-app` クライアント (`secret` シークレット) が作成され、`alice` (`admin` および `user` ロール) および `bob` (`user` ロール) ユーザーが追加されます。これらのプロパティーはすべてカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1288
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "まず、 `application.properties` を準備します。 `Dev Services for Keycloak` が実行中のテストコンテナを指す `quarkus.oidc.auth-server-url` を登録し、 `quarkus.oidc.client-id=quarkus-app` と `quarkus.oidc.credentials.secret=secret` も登録するので、完全に空の `application.properties` で始めることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1290
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "ただし、必要なすべての `quarkus-oidc` プロパティーがすでに設定されている場合は、`quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` の `prod` プロファイルに関連付けるだけでコンテナーを起動できます。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1294
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1297
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定できます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1302
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1306
msgid "Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最後に、 xref:integration-testing-wiremock[Wiremock] のセクションで説明したのと同じ方法でテストコードを書きます。唯一の違いは、 `@QuarkusTestResource` が不要になったことです:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1312
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1315
#, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "KeecycloakTestResourceLifecycleManagerの使用"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1319
msgid "Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.  If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr "`Dev Services for Keycloak` を使用しない正当な理由がある場合のみ、テストに `KeycloakTestResourceLifecycleManager` を使用してください。Keycloakに対する統合テストを行う必要がある場合は、 xref:integration-testing-keycloak-devservices[Dev services For Keycloak] で行うことが推奨されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1321
msgid "Start with adding the following dependency:"
msgstr "以下の依存関係を追加することから始めます。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1330
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1336
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1339
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを開始する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1341
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefire プラグインを次のように設定します。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1357
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1360
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(ネイティブイメージでテストする場合は同様に Maven Failsafe プラグインを使用します)。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1363
msgid "And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is the name of `QuarkusTestResource`:"
msgstr "そして、 xref:integration-testing-wiremock[Wiremock] のセクションで説明したのと同じように設定を行い、テストコードを記述します。唯一違うのは、 `QuarkusTestResource` の名前です:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1367
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1372
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1375
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、`keycloak.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、`keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1378
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、`KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化しますが、`keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` で、クライアント ID `quarkus-web-app` は、必要に応じて値をカスタマイズするために `keycloak.realm` および `keycloak.web-app.client` システムプロパティーを設定します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1380
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1383
#, fuzzy
msgid "See xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "注入された ID とアクセス `JsonWebToken` に依存する `web-app` アプリケーションエンドポイントコードをテストするために、 `@TestSecurity` と `@OidcSecurity` のアノテーションを使用する詳細については、 xref:security-oidc-bearer-token-authentication-concept.adoc#integration-testing-security-annotation[注入された JsonWebToken で TestingSecurity を使用] するセクションを参照してください `UserInfo` と `OidcConfigurationMetadata` 。"

#. type: Title ===
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1384
#, no-wrap
msgid "Checking errors in the logs"
msgstr "ログでエラー確認"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1387
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` の `TRACE` レベルのロギングを有効にする必要があります:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1392
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1395
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "OidcProviderクライアントの初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` の `TRACE` レベルのロギングを有効にしてください:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1400
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1403
#, fuzzy
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr "また、 `quarkus dev` コンソールから `j` を押して、アプリケーションのグローバル・ログ・レベルを変更することもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1404
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1407
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1408
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr "xref:security-openid-connect-providers.adoc[よく知られたOpenID Connectプロバイダの設定]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1409
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1410
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1411
msgid "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2の認証メカニズムの選択]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1412
msgid "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms-concept.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1413
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1414
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1415
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_versions/main/guides/security-oidc-code-flow-authentication-concept.adoc:1416
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#~ msgid "To protect your web applications, you can use the authorization code flow mechanism provided by the Quarkus OpenID Connect (OIDC) extension."
#~ msgstr "Webアプリケーションを保護するために、Quarkus OpenID Connect（OIDC）エクステンションで提供される認可コードフローメカニズムを使用することができます。"

#~ msgid "ID token: The Quarkus web-app uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web-app."
#~ msgstr "ID トークン: Quarkus ウェブアプリは ID トークン内のユーザー情報を使用して、認証されたユーザーが安全にログインできるようにし、ウェブアプリへのロールベースのアクセスを提供します。"

#~ msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or propagate it to another endpoint."
#~ msgstr "アクセス トークン: Quarkus ウェブアプリは、アクセス トークンを使用して UserInfo API にアクセスし、認証されたユーザーに関する追加情報を取得したり、別のエンドポイントに伝達したりします。"

#~ msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
#~ msgstr "ID トークン は常に JWT トークンであり、JWT クレームでユーザー認証を表現するために使用されます。`JsonWebToken` に `IdToken` という修飾子をつけて注入することで、ID トークンクレームにアクセスすることができます。"

#~ msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
#~ msgstr "Quarkus `web-app` アプリケーションに発行された Access Token が Opaque (バイナリー) で、`JsonWebToken` にパースできない場合は、`AccessTokenCredential` を使用しなければならないことに注意してください。"

#~ msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
#~ msgstr "RefreshToken は、その xref:session-management[セッション管理] プロセスの一部として、現在の IDトークン とアクセストークンをリフレッシュするためにのみ使用されます。"

#~ msgid "If the ID token does not provide enough information about the currently-authenticated user, then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
#~ msgstr "IDトークンで現在認証されているユーザーに関する十分な情報が得られない場合は、OIDC userinfoエンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSONオブジェクトを要求するために、 `quarkus.oidc.authentication.user-info-required=true` プロパティを設定することができます。"

#~ msgid "Configuration metadata"
#~ msgstr "設定メタデータ"

#~ msgid "Token claims and SecurityIdentity roles"
#~ msgstr "トークン・クレームとSecurityIdentityロール"

#~ msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
#~ msgstr "アクセストークンのみがロールを含み、このアクセストークンが下流のエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` をセットします。"

#~ msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, and so on. However, if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
#~ msgstr "`web-app` アプリケーションの場合、デフォルトでは `IdToken` のみが検証されます。なぜなら、アクセストークンはデフォルトでは現在のQuarkus `web-app` エンドポイントにアクセスするために使用されず、このアクセストークンを期待するサービス（例えば、OpenID Connect ProviderのUserInfoエンドポイントなど）に伝搬するように意図されているからです。ただし、アクセストークンに現在のQuarkusエンドポイント（ `quarkus.oidc.roles.source=accesstoken` ）へのアクセスに必要なロールが含まれていると予想される場合は、それも検証されます。"

#~ msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
#~ msgstr "コードフローアクセストークンは、ロールのソースであることが期待されない限り、イントロスペクトされませんが、`UserInfo` を取得するために使用されます。したがって、トークンのイントロスペクションや `UserInfo` が必要な場合は、コードフローアクセストークンを使用して 1 つまたは 2 つのリモート呼び出しが行われます。"

#~ msgid "Redirection"
#~ msgstr "リダイレクト"

#~ msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the provider where the user has to be redirected to once the authentication has been completed."
#~ msgstr "OpenID Connect Providerにリダイレクトして認証を行う場合、リダイレクトURLには、認証完了後にユーザーをどこにリダイレクトさせるかをプロバイダに示す `redirect_uri` クエリパラメータが含まれます。"

#~ msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
#~ msgstr "Quarkus は、デフォルトでこのパラメーターを現在のリクエスト URL に設定します。たとえば、ユーザーが `http://localhost:8080/service/1` で Quarkus サービスエンドポイントにアクセスしようとしている場合、 `redirect_uri` パラメーターは`http://localhost:8080/service/1` に設定されます。同様に、リクエスト URL が `http://localhost:8080/service/2` の場合、`redirect_uri` パラメーターは `http://localhost:8080/service/2` などに設定されます。"

#~ msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (e.g. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
#~ msgstr "OpenID Connectプロバイダは、すべてのリダイレクトURLに対して、 `redirect_uri` パラメータに同じ値（例: `http://localhost:8080/service/callback` ）を要求するように設定されている場合があります。このような場合、 `quarkus.oidc.authentication.redirect-path` プロパティを設定する必要があります。例えば、 `quarkus.oidc.authentication.redirect-path=/service/callback` とすると、Quarkusは `redirect_uri` パラメータを`http://localhost:8080/service/callback` のような絶対URLに設定します。 これは、現在のリクエスト URL に関係なく同じになります。"

#~ msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, and so on."
#~ msgstr "`quarkus.oidc.authentication.redirect-path` が設定されているが、ユーザーが `http://localhost:8080/service/callback` のようなコールバックURLにリダイレクトされた後、元のリクエストURLを復元する必要がある場合、 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティを `true` に設定する必要があり、`http://localhost:8080/service/1` 等々、リクエスト URL が復元されます。"

#~ msgid "The OIDC adapter uses cookies to keep the session, code flow, and post-logout state."
#~ msgstr "OIDCアダプターは、セッション、コードフロー、ログアウト後の状態を保持するためにCookieを使用します。"

#~ msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
#~ msgstr "`quarkus.oidc.authentication.cookie-path` プロパティーは、特にルートが重複または異なる保護されたリソースにアクセスするときに Cookie が表示されるようにするために使用されます。次に例を示します。"

#~ msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
#~ msgstr "`quarkus.oidc.authentication.cookie-path` は、デフォルトでは `/` に設定されていますが、 `/web-app` のように、より具体的なルートパスに絞り込むことができます。"

#~ msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
#~ msgstr "クッキーパスを動的に設定する必要がある場合は、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定することもできます。例えば、 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` を設定すると、HTTP `X-Forwarded-Prefix` ヘッダーの値がクッキーパスを設定するために使用されることを意味します。"

#~ msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
#~ msgstr "アプリケーションが複数のドメインにデプロイされている場合は、セッション Cookie の `quarkus.oidc.authentication.cookie-domain` プロパティーを設定して、保護されているすべての Quarkus サービスに表示されるようにしてください。たとえば、次の場所に 2 つのサービスがデプロイされている場合です。"

#~ msgid "https://whatever.wherever.company.net/"
#~ msgstr "https://whatever.wherever.company.net/"

#~ msgid "https://another.address.company.net/"
#~ msgstr "https://another.address.company.net/"

#~ msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
#~ msgstr "次に、`quarkus.oidc.authentication.cookie-domain` プロパティーを `company.net` に設定する必要があります。"

#~ msgid "Logout"
#~ msgstr "ログアウト"

#~ msgid "By default, the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
#~ msgstr "デフォルトでは、ログアウトはOpenID Connect Providerが発行したID Tokenの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OpenID Connect Providerにリダイレクトされます。OpenID Connect Providerでのセッションがまだアクティブな場合は、ユーザーは再び資格情報を提供することなく自動的に再認証されます。"

#~ msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
#~ msgstr "現在のユーザーセッションは、 `quarkus.oidc.token.refresh-expired` プロパティーを有効にすることで自動的に拡張される場合があります。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークンの付与が使用され、ID トークンだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#~ msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
#~ msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy] を使用する場合、Cookie の名前が異なることに注意してください。例えば、 `tenant_1` のIDを持つテナントに対しては、 `q_post_logout_tenant_1` という名前になる、といった具合です。"

#~ msgid "Here is an example of how to configure an RP initiated logout flow:"
#~ msgstr "RP によって開始されるログアウトフローを設定する方法の例を次に示します。"

#~ msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However, it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
#~ msgstr "OpenID Connect プロバイダーの中には、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] 仕様をサポートしておらず (おそらく技術的にまだドラフトであるため)、OpenID Connect がよく知る `end_session_endpoint` メタデータプロパティーを返さないものがあることに注意してください。しかし、これらのプロバイダー特有のログアウトメカニズムは、ログアウト URL クエリーパラメーターの命名方法が異なるだけなので、問題にはなりません。"

#~ msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
#~ msgstr "https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] 仕様によると、`quarkus.oidc.logout.post-logout-path` プロパティ－は `post_logout_redirect_uri` クエリパラメータとして表され、この仕様をサポートしていないプロバイダ－では認識されません。"

#~ msgid "Absolute `Back-Channel Logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`. You will need to configure this URL in the Admin Console of your OpenID Connect Provider."
#~ msgstr "絶対的な `Back-Channel Logout` URL は、現在のエンドポイント URL に `quarkus.oidc.back-channel-logout.path` を追加することで算出されます (例: `http://localhost:8080/back-channel-logout`)。この URL は、OpenID Connect Provider の Admin Console で設定する必要があります。"

#~ msgid "Note that you will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token, for example, `quarkus.oidc.token.age=10S` sets a number of seconds that must not elapse since the logout token's `iat` (issued at) time to 10."
#~ msgstr "なお、OpenID Connect Providerが現在のログアウトトークンに有効期限を設定していない場合、ログアウトトークンの検証を成功させるためには、token ageプロパティも設定する必要があります。例えば、 `quarkus.oidc.token.age=10S` では、ログアウトトークンの `iat` (issued at) 時から経過してはならない秒数を10に設定します。"

#~ msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent."
#~ msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[フロントチャネルログアウト]は、ユーザーエージェントから直接、現在のユーザーをログアウトするために使用することができます。"

#~ msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the xref:user-initiated-logout[User-initiated logout] which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the xref:oidc-session[OidcSession] which only clears the local session cookie, for example:"
#~ msgstr "Googleのようなソーシャルプロバイダーと連携し、ユーザーをプロバイダーのログアウトエンドポイントにリダイレクトする xref:user-initiated-logout[ユーザー主導のログアウト] で、ユーザーがすべてのGoogleアプリケーションからログアウトできることを懸念する場合、例えば、ローカルセッションクッキーのみをクリアする xref:oidc-session[OidcSessionの] 助けを借りて、ローカルログアウトに対応できます:"

#~ msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
#~ msgstr "Quarkus OIDC `web-app` アプリケーションで作業している場合、ユーザーセッションの寿命を管理しているのはQuarkus OIDCコード認証メカニズムです。"

#~ msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
#~ msgstr "セッション年齢は、現在のIDTokenの寿命値と、 `quarkus.oidc.authentication.session-age-extension` と `quarkus.oidc.token.lifespan-grace` プロパティーの値を加算して計算されます。最後の2つのプロパティーのうち、 `quarkus.oidc.authentication.session-age-extension` だけは、必要に応じてセッションの寿命を大幅に延ばすために使用すべきです。 `quarkus.oidc.token.lifespan-grace` は小さなクロックスキューを考慮することだけを目的としている為です。"

#~ msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
#~ msgstr "現在認証されているユーザーが保護された Quarkus エンドポイントに戻り、セッションクッキーに関連付けられた ID トークンの有効期限が切れた場合、デフォルトでは、再認証のために OIDC 認証エンドポイントに自動でリダイレクトされます。OIDC プロバイダーは、ユーザーとこの OIDC プロバイダーとのセッションがまだ有効であれば、必ずしも再チャレンジする必要はありませんが、ID トークンよりも長くセッションが持続するように設定されている場合は、そのようになる可能性があります。"

#~ msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
#~ msgstr "`quarkus.oidc.token.refresh-expired` を指定すると、認可コード付与応答で返されたリフレッシュトークンを使用して、期限切れの ID トークン (アクセストークンも含む) がリフレッシュされます。このリフレッシュトークンは、このプロセスの一部としてリサイクル (リフレッシュ) されることもあります。その結果、新しいセッションクッキーが作成され、セッションが延長されます。"

#~ msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore, using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
#~ msgstr "`quarkus.oidc.authentication.session-age-extension` は、ユーザーがあまりアクティブでないときに、期限切れの ID トークンを処理するときに重要になる可能性があることに注意してください。このような場合、ID トークンの有効期限が切れると、セッション Cookie は次のユーザーリクエスト中に Quarkus エンドポイントに戻されない可能性があり、Quarkus はそれが最初の認証リクエストであると見なします。したがって、期限切れの ID トークンを更新する必要がある場合は、 `quarkus.oidc.authentication.session-age-extension` を使用することが重要です。"

#~ msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
#~ msgstr "また、`quarkus.oidc.token.refresh-token-time-skew` の値内で期限が切れそうな有効な ID トークンを積極的にリフレッシュして、期限切れの ID トークンを補完することも可能です。現在のユーザーリクエストの間に、現在の ID トークンがこの `quarkus.oidc.token.refresh-token-time-skew` 値の範囲内で期限切れとなることが計算されると、リフレッシュされて新しいセッションクッキーが作成されます。このプロパティーには、ID トークンの寿命よりも短い値を設定する必要があります。この寿命の値に近いほど、ID トークンはより頻繁にリフレッシュされます。"

#~ msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
#~ msgstr "シンプルな JavaScript 関数が、Quarkus エンドポイントへの ping 送信によってユーザーの活動を定期的にエミュレートし、ユーザーが再認証されるウィンドウを最小限に抑えることで、このプロセスをさらに最適化することができます。"

#~ msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
#~ msgstr "このユーザーセッションは永久に延長されるわけではありません。リフレッシュトークンの有効期限が切れると、ID トークンを持つ復帰ユーザーは OIDC プロバイダーのエンドポイントで再認証を行う必要があります。"

#~ msgid "OidcSession"
#~ msgstr "OidcSession"

#~ msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
#~ msgstr "`io.quarkus.oidc.OidcSession` は、現在の の `IdToken` ラッパーです。これは、xref:local-logout[ローカル・ログアウト] の実行、現在のセッションのテナント識別子の取得、セッションの期限切れの確認に役立ちます。今後、より便利なメソッドを追加していく予定です。"

#~ msgid "TokenStateManager"
#~ msgstr "TokenStateManager"

#~ msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
#~ msgstr "OIDC `CodeAuthenticationMechanism` は、デフォルトの `io.quarkus.oidc.TokenStateManager` インターフェイス実装を使用して、認可コードで返された ID、アクセス、更新トークンを保持するか、セッション Cookie の付与応答を更新します。これにより、Quarkus OIDC エンドポイントは完全にステートレスになります。"

#~ msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
#~ msgstr "エンドポイントによっては、アクセストークンを必要としないものもあることに注意しましょう。アクセストークンが必要なのは、エンドポイントが `UserInfo` を取得したり、このアクセストークンを使って下流のサービスにアクセスしたり、アクセストークンに関連付けられたロール (デフォルトでは ID トークンのロールがチェックされます) を使用する必要がある場合のみです。このような場合は、`quarkus.oidc.token-state-manager.strategy=id-refresh-token` (ID およびリフレッシュトークンのみを保持) または `quarkus.oidc.token-state-manager.strategy=id-token` (ID トークンだけを保持) を設定できます。"

#~ msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
#~ msgstr "ID、アクセス、リフレッシュの各トークンが JWT トークンの場合、それらすべてを組み合わせたり (ストラテジーがデフォルトの `keep-all-tokens` の場合)、ID およびリフレッシュトークンのみ (ストラテジーが `id-refresh-token` の場合)、セッションクッキーの値が 4KB 以上になり、ブラウザーがこのクッキーを保持できない可能性があります。このような場合、`quarkus.oidc.token-state-manager.split-tokens=true` を使用して、これらのトークンごとに一意のセッショントークンを持たせることができます。"

#~ msgid "Note that `TokenStateManager` will encrypt the tokens before storing them in the session cookie.  For example, here is how you configure it to split the tokens and encrypt them:"
#~ msgstr "`TokenStateManager` はトークンをセッション・クッキーに保存する前に暗号化することに注意してください。例えば、トークンを分割して暗号化するように設定する方法を以下に示します："

#~ msgid "The token encryption secret must be at least 32 characters long. If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
#~ msgstr "トークンの暗号化シークレットは少なくとも32文字以上でなければなりません。このキーが設定されていない場合、 `quarkus.oidc.credentials.secret` または `quarkus.oidc.credentials.jwt.secret` のいずれかがハッシュ化されて暗号化キーが作成されます。"

#~ msgid "`quarkus.oidc.token-state-manager.encryption-secret` should be configured if Quarkus authenticates to OpenId Connect Provider using either mTLS or `private_key_jwt` (where a private RSA or EC key is used to sign a JWT token) authentication methods, otherwise a random key will be generated which will be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
#~ msgstr "QuarkusがmTLSまたは （JWTトークンに署名するためにRSAまたはECの秘密鍵が使用される） `private_key_jwt` 認証方法を使用してOpenID Connect Providerを認証する場合、 `quarkus.oidc.token-state-manager.encryption-secret` を設定する必要があります。そうでない場合、ランダムな鍵が生成されるため、Quarkusアプリケーションが複数のポッドでリクエストを管理しているクラウドで実行されている場合に問題となります。"

#~ msgid "If you need you can disable encrypting the tokens in the session cookie with `quarkus.oidc.token-state-manager.encryption-required=false`."
#~ msgstr "必要であれば、 `quarkus.oidc.token-state-manager.encryption-required=false` を使ってセッション・クッキー内のトークンの暗号化を無効にすることができます。"

#~ msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
#~ msgstr "トークンがセッションクッキーと関連付けられる方法をカスタマイズする必要がある場合は、独自の `io.quarkus.oidc.TokenStateManager` 実装を `@ApplicationScoped` CDI Bean として登録します。例えば、トークンをデータベースに保存し、セッションクッキーにはデータベースポインターだけを保存させたいと思うかもしれません。しかし、複数のマイクロサービスノードでトークンを利用できるようにするには、いくつかの課題が生じる可能性があることに注意してください。"

#~ msgid "Proof key for code exchange (PKCE)"
#~ msgstr "Proof key for code exchange (PKCE)"

#~ msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of the authorization code interception."
#~ msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] （PKCE）は、認可コード傍受のリスクを最小限に抑えます。"

#~ msgid "While `PKCE` is of primary importance to the public OpenID Connect clients (such as the SPA scripts running in a browser), it can also provide an extra level of protection to Quarkus OIDC `web-app` applications which are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
#~ msgstr "`PKCE` は公開 OpenID Connect クライアント (ブラウザーで動作する SPA スクリプトなど) にとって最も重要ですが、クライアントシークレットを安全に保存し、トークンのコード交換に使用できる機密 OpenID Connect クライアントである Quarkus OIDC `web-app` アプリケーションにも追加レベルの保護を提供することが可能です。"

#~ msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32 characters long secret, for example:"
#~ msgstr "OIDC の `web-app` エンドポイントで `PKCE` を有効にするには、例えば `quarkus.oidc.authentication.pkce-required` プロパティーと 32 文字の長さのシークレットを指定することができます。"

#~ msgid "If you already have a 32 characters long client secret then `quarkus.oidc.authentication.pkce-secret` does not have to be set unless you prefer to use a different secret key."
#~ msgstr "32文字長のクライアントシークレットをすでにお持ちの場合は、別のシークレットキーを使用する場合を除き、 `quarkus.oidc.authentication.pkce-secret` を設定する必要はありません。"

#~ msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to OpenID Connect Provider to authenticate. The `code_verifier` will be decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret and other parameters to complete the code exchange. The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` provided during the authentication request."
#~ msgstr "秘密鍵は、ユーザーが認証のために OpenID Connect Provider に `code_challenge` クエリーパラメーターでリダイレクトされている間に、ランダムに生成される `PKCE` `code_verifier` を暗号化するために必要となります。Code_verifier` は、ユーザーが Quarkus にリダイレクトされる際に復号化され、`code` やクライアントシークレットなどのパラメーターと一緒にトークンエンドポイントに送信され、コード交換を完了させることができます。プロバイダーは `code_verifier` の `SHA256` ダイジェストが認証リクエストで指定された `code_challenge` と一致しない場合、コード交換に失敗します。"

#~ msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
#~ msgstr "重要な OIDC 認証イベントを監視する `@ApplicationScoped` Bean を登録できます。リスナーは、ユーザーが初めてログインしたとき、または再認証されたとき、およびセッションが更新されたときに更新されます。今後、さらに多くのイベントが報告される可能性があります。例えば:"

#~ msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
#~ msgstr "QuarkusのWebアプリケーションでSPAやJavaScript API（ `Fetch` ）または `XMLHttpRequest` （XHR）を使用したい場合、OpenID Connectプロバイダーは、Quarkusからのリダイレクト後にユーザーが認証される認可エンドポイントのCORSをサポートしない場合があることに注意してください。QuarkusアプリケーションとOpenID Connect Providerが異なるHTTPドメイン/ポートでホストされている場合、認証に失敗する可能性があります。"

#~ msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
#~ msgstr "この場合、`Quarkus.oidc.authentication.java-script-auto-redirect` プロパティーを `false` に設定すると、ステータスコード `499` と `OIDC` 値を持つ `WWW-Authenticate` ヘッダーを返すように Quarkus に指示が出されます。ブラウザースクリプトも更新して、`X-Requested-With` ヘッダーに `JavaScript` 値を設定し、`499` の場合は最後にリクエストしたページを再読み込みするなどの処理が必要になります。"

#~ msgid "If you plan to consume this application from a Single-page application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). For more information, see the xref:http-reference.adoc#cors-filter[HTTP CORS documentation]."
#~ msgstr "別のドメインで動作するSingle-pageアプリケーションからこのアプリケーションを利用する場合は、CORS（Cross-Origin Resource Sharing）を設定する必要があります。詳細については、 xref:http-reference.adoc#cors-filter[HTTP CORSのドキュメント] を参照してください。"

#~ msgid "Integration with GitHub and other OAuth2 providers"
#~ msgstr "GitHub およびその他の OAuth2 プロバイダーとの統合"

#~ msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
#~ msgstr "GitHub や LinkedIn といった有名なプロバイダーのいくつかは、 OpenID Connect ではなく、OAuth2 `authorization code flow` をサポートするプロバイダーです。例えば、link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2]や link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] などです。"

#~ msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers, by building on top of OAuth2, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
#~ msgstr "OpenID Connect プロバイダーと OAuth2 プロバイダーの主な違いは、OAuth2 の上に構築された OpenID Connect プロバイダーは、`OAuth2` プロバイダーが返す標準の認可コードフロー `access` と `refresh` トークンに加えて、ユーザー認証を表す `ID トークン` を返すという点です。"

#~ msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which will allow it to request a GitHub profile of the current user.  In fact this is exactly how a standard OpenID Connect `UserInfo` acquisition also works - by authenticating into your OpenID Connect provider you also give a permission to Quarkus application to acquire your xref:user-info[UserInfo] on your behalf - and it also shows what is meant by OpenID Connect being built on top of OAuth2."
#~ msgstr "例えば、GitHub で作業する場合、Quarkus のエンドポイントは `access` トークンを取得し、現在のユーザーの GitHub プロファイルを要求することができます。実際、標準的な OpenID Connect の `UserInfo` の取得も、このように動作します。OpenID Connect プロバイダーを認証することで、Quarkus アプリケーションに、ユーザーの代わりに xref:user-info[UserInfo] を取得する許可を与えることになります。また、これは、OpenID Connect が OAuth2 の上に構築されていることの意味も示しています。"

#~ msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
#~ msgstr "このようなOAuth2サーバーとの統合をサポートするために、 認可コードフローのレスポンスを `IdToken` : `quarkus.oidc.authentication.id-token-required=false` なしで許可するように `quarkus-oidc` を設定する必要があります。"

#~ msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
#~ msgstr "これは `quarkus-oidc` が、認可コードフローが完了したら `access` と `refresh` トークンだけでなく `IdToken` も返すことを想定しているためです。"

#~ msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as GitHub on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the xref:session-management[session management] section."
#~ msgstr "`IdToken` を使わずに認可コードフローをサポートするようにエクステンションを設定しても、 `quarkus-oidc` の動作をサポートするために内部で `IdToken` が生成されます。 `IdToken` は認証セッションをサポートし、リクエストごとに GitHub などのプロバイダーにユーザーをリダイレクトさせないために使われます。この場合、セッションの期限は5分に設定されていますが、 xref:session-management[セッション管理] のセクションで説明するように、さらに延長することが出来ます。"

#~ msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the OAuth2 provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request xref:user-info[UserInfo] from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with GitHub."
#~ msgstr "次のステップは、返されたアクセストークンが現在のQuarkusエンドポイントに有用であることを確認することです。 OAuth2プロバイダがintrospectionエンドポイントをサポートしている場合は、 `quarkus.oidc.roles.source=accesstoken` を指定することで、このアクセストークンをロールのソースとして使用することも出来ます。introspectionエンドポイントがない場合は、 `quarkus.oidc.authentication.user-info-required` を指定することで少なくともこのプロバイダに xref:user-info[UserInfo] を要求できるはずです。"

#~ msgid "Configuring the endpoint to request xref:user-info[UserInfo] is the only way `quarkus-oidc` can be integrated with the providers such as GitHub."
#~ msgstr "エンドポイントに xref:user-info[UserInfo] を要求するように設定することが、 `quarkus-oidc` が、GitHubなどのプロバイダーと統合する唯一の方法です。"

#~ msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
#~ msgstr "また、OAuth2 サーバーは、よく知られた設定エンドポイントをサポートしていない場合があります。その場合は、検出を無効にして、認証、トークン、イントロスペクション、および/またはユーザー情報のエンドポイントパスを手動で設定する必要があります。"

#~ msgid "Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
#~ msgstr "link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuth アプリケーションを作成した] 後に、 `quarkus-oidc` を GitHub と統合する方法を説明します。Quarkus のエンドポイントをこのように設定します。"

#~ msgid "Now, the following code will work when the user is signing in into your application with both Google or GitHub:"
#~ msgstr "これで、ユーザーが Google または GitHub の両方を使用してアプリケーションにサインインしているときに、次のコードが機能します。"

#~ msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
#~ msgstr "よりシンプルな方法としては、`@IdToken JsonWebToken` と `UserInfo` の両方をインジェクトして、`IdToken` と `UserInfo` を返すプロバイダーを扱うときには `JsonWebToken` を使用します。`IdToken` を返さないプロバイダーでは、`UserInfo` を使用します。"

#~ msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
#~ msgstr "最後の重要なポイントは、GitHub OAuth アプリケーション設定に入力するコールバックパスが、GitHub 認証とアプリケーション承認が成功した後にユーザーをリダイレクトするエンドポイントパスと一致することを確認することです。この場合は、`http:localhost:8080/github/userinfo` に設定する必要があります。"

#~ msgid "Cloud services"
#~ msgstr "クラウドサービス"

#~ msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
#~ msgstr "Quarkus OIDC `web-app` アプリケーションは、Google Developer Consolesで *BigQuery* などのサービスに対するOpendId Connect(Authorization Code Flow)パーミッションを有効にしている現在認証されたユーザーに代わって、 *BigQuery* などの *Google Cloudサービスに* アクセスすることができます。"

#~ msgid "Provider endpoint configuration"
#~ msgstr "プロバイダエンドポイントの設定"

#~ msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
#~ msgstr "OIDC `web-app` アプリケーションは OpenID Connect プロバイダーの認証、トークン、`JsonWebKey` (JWK) セット、そしておそらく `UserInfo`、イントロスペクション、エンドポイント (RP が起動するログアウト) アドレスを知っている必要があります。"

#~ msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
#~ msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#~ msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
#~ msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#~ msgid "Sometimes, your OpenId Connect provider supports a metadata discovery but does not return all the endpoint URLs required for the authorization code flow to complete or for the application to support the additional functions such as a user logout. In such cases, you can simply configure a missing endpoint URL locally:"
#~ msgstr "OpenID Connect プロバイダがメタデータの検出をサポートしていても、認可コードフローを完了させたり、アプリケーションがユーザーログアウトなどの追加機能をサポートするために必要なすべてのエンドポイント URL を返さないことがあります。このような場合、不足しているエンドポイント URL を単にローカルに設定することが出来ます:"

#~ msgid "Exactly the same configuration can be used to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required. For example, one can imagine that in the above example, a provider which supports both global and application specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout` which will logout the user from all the applications this user is currently logged in, while the current application only wants to get this user logged out from this application, therefore, `quarkus.oidc.end-session-path=logout` is used to override the global end-session URL."
#~ msgstr "検出されたエンドポイントURLがローカルのQuarkusエンドポイントで機能せず、より具体的な値が必要な場合、まったく同じ設定を使用して上書きすることができます。例えば、上記の例で、グローバルエンドセッションとアプリケーション固有のエンドポイントの両方をサポートするプロバイダが、グローバルエンドセッションURL（ `http://localhost:8180/oidcprovider/account/global-logout` など）を返すと、このユーザーが現在ログインしているすべてのアプリケーションからユーザーがログアウトしますが、現在のアプリケーションはこのアプリケーションからユーザーのログアウトを取得したいだけだと想像できます。したがって、グローバルエンドセッションURLをオーバーライドするには `quarkus.oidc.end-session-path=logout` が使用されます。"

#~ msgid "Token propagation"
#~ msgstr "トークン伝搬"

#~ msgid "For information about Authorization Code Flow access token propagation to the downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
#~ msgstr "認可コードフローから下流サービスへのアクセストークンの伝搬については、 xref:security-openid-connect-client-reference.adoc#token-propagation[トークンの伝搬] セクションを参照してください。"

#~ msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
#~ msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect プロバイダーへのリモートリクエストが必要なときに使用されます。ID、アクセス、リフレッシュトークンに対して認可コードを交換するとき、ID やアクセストークンをリフレッシュしたりイントロスペクトするときに、OpenID Connect プロバイダーを認証する必要があります。"

#~ msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
#~ msgstr "すべての https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションがサポートされています。次に例を示します。"

#~ msgid "`client_secret_basic`:"
#~ msgstr "`client_secret_basic` ."

#~ msgid "or"
#~ msgstr "or"

#~ msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
#~ msgstr "または、xref:credentials-provider.adoc[CredentialsProvider]: から取得したシークレットを使用します。"

#~ msgid "`client_secret_post`:"
#~ msgstr "`client_secret_post`:"

#~ msgid "`client_secret_jwt`, signature algorithm is HS256:"
#~ msgstr "`client_secret_jwt`、署名アルゴリズムは HS256 です。"

#~ msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
#~ msgstr "PEM キーファイルを使用した `private_key_jwt` 、署名アルゴリズムは RS256 です。"

#~ msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
#~ msgstr "キーストアファイルを使用した `private_key_jwt` 、署名アルゴリズムは RS256 です。"

#~ msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
#~ msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#~ msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
#~ msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティークレームを使用します。"

#~ msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
#~ msgstr "`quarkus-oidc` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#~ msgid "Mutual TLS (mTLS)"
#~ msgstr "相互TLS (mTLS)"

#~ msgid "Some OpenID Connect providers may require that a client is authenticated as part of the `Mutual TLS` authentication process."
#~ msgstr "OpenID Connectプロバイダーによっては、 `Mutual TLS` 認証プロセスの一部として、クライアントの認証が必要な場合があります。"

#~ msgid "`quarkus-oidc` can be configured as follows to support `mTLS`:"
#~ msgstr "`quarkus-oidc` は、`mTLS` をサポートするように次のように設定できます。"

#~ msgid "Some OpenID Connect Providers may require authenticating to its introspection endpoint using Basic authentication with the credentials different to `client_id` and `client_secret` which may have already been configured to support `client_secret_basic` or `client_secret_post` client authentication methods described in the xref:oidc-provider-client-authentication[OIDC provider client authentication] section."
#~ msgstr "OpenID Connect プロバイダによっては、 xref:oidc-provider-client-authentication[OIDC プロバイダ クライアント認証] セクションで説明した `client_secret_basic` または `client_secret_post` クライアント認証方法をサポートするように既に設定されている `client_id` および `client_secret` とは異なるクレデンシャルを使用して、その introspection エンドポイントに Basic 認証を使用することを要求する場合があります。"

#~ msgid "If the tokens have to be introspected and the introspection endpoint specific authentication mechanism is required, then you can configure `quarkus-oidc` like this:"
#~ msgstr "トークンをイントロスペクションする必要があり、イントロスペクション・エンドポイント固有の認証メカニズムが必要な場合、 `quarkus-oidc` を次のように設定します:"

#~ msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
#~ msgstr "`quarkus.oidc.authentication.extra-params` を使用すると、さらに多くのプロパティーを追加することができます。例えば、OpenID Connect プロバイダーによっては、認可コードをリダイレクト URI のフラグメントの一部として返すことを選択する場合があり、認証プロセスを壊してしまいます。これは以下のように修正することができます。"

#~ msgid "If the user authentication has failed at the OpenID Connect Authorization endpoint, for example, due to an invalid scope or other invalid parameters included in the redirect to the provider, then the provider will redirect the user back to Quarkus not with the `code` but `error` and `error_description` parameters."
#~ msgstr "OpenID Connect Authorization のエンドポイントでユーザー認証が失敗した場合、例えば、プロバイダーへのリダイレクトに含まれる無効なスコープやその他の無効なパラメーターが原因で、プロバイダーは `code` ではなく `error` で `error_description` パラメーターでユーザーを Quarkus にリダイレクトし直します。"

#~ msgid "In such cases HTTP `401` will be returned by default. However, you can instead request that a custom public error endpoint is called in order to return a user-friendly HTML error page. Use `quarkus.oidc.authentication.error-path`, for example:"
#~ msgstr "このような場合、デフォルトでは HTTP `401` が返されます。しかし、ユーザーにわかりやすいエラーメッセージを返すために、カスタムのパブリックエラーエンドポイントを呼び出すように要求することができます。例えば、`quarkus.oidc.authentication.error-path` を使用します。"

#~ msgid "It has to start from a forward slash and be relative to the base URI of the current endpoint.  For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
#~ msgstr "これは、フォワードスラッシュから始まり、現在のエンドポイントのベースURIに対する相対的なものでなければなりません。例えば、 '/error' と設定されている場合、現在のリクエストURIが `https://localhost:8080/callback?error=invalid_scope` なら、 `https://localhost:8080/error?error=invalid_scope` に最終的にリダイレクトされます。"

#~ msgid "It is important that this error endpoint is a public resource to avoid the user redirected to this page be authenticated again."
#~ msgstr "このエラーエンドポイントは、このページにリダイレクトされたユーザーが再び認証されることを避けるために、パブリックリソースであることが重要です。"

#~ msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
#~ msgstr "Keycloakを使用する場合は、IDトークン用のMicroprofile JWTクライアントスコープに `groups` クレームを含めるように設定する必要があることに注意してください。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイド] を参照してください。"

#~ msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
#~ msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#~ msgid "xref:security-openid-connect-providers.adoc[OpenID Connect providers]"
#~ msgstr "xref:security-openid-connect-providers.adoc[OpenID Connectプロバイダー]"

#~ msgid "If you want to protect your applications by using Bearer Token authentication, see xref:security-oidc-bearer-authentication-concept.adoc[OIDC Bearer authentication].  For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
#~ msgstr "ベアラートークン認証を使用してアプリケーションを保護したい場合は、 xref:security-oidc-bearer-authentication-concept.adoc[OIDCベアラー認証] を参照してください。複数のテナントをサポートする方法については、 xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy の使用] を参照してください。"

#~ msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-authentication-concept.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
#~ msgstr "検証済みトークンからSecurityIdentityロールにロールをマッピングする方法は、 xref:security-oidc-bearer-authentication-concept.adoc[ベアラートークン] に対して行う方法と同じで、唯一の違いは、 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン] がデフォルトでロールのソースとして使用されることです。"

#~ msgid "Please see xref:security-oidc-bearer-authentication-concept.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
#~ msgstr "トークンの検証およびイントロスペクションの方法の詳細については、 xref:security-oidc-bearer-authentication-concept.adoc#token-verification-introspection[トークンの検証およびイントロスペクション] を参照してください。"

#~ msgid "Please see xref:security-oidc-bearer-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
#~ msgstr "デフォルトのトークンキャッシュの使用やカスタムキャッシュの実装の登録については、 xref:security-oidc-bearer-authentication-concept.adoc#token-introspection-userinfo-cache[トークンイントロスペクションとUserInfoキャッシュ] を参照してください。"

#~ msgid "Please see xref:security-oidc-bearer-authentication-concept.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
#~ msgstr "`iss` (発行者) クレームを含むクレームの検証については、 xref:security-oidc-bearer-authentication-concept.adoc#jwt-claim-verification[JSON Web Token クレーム検証] の項を参照してください。これはIDトークンに適用されますが、 `web-app` アプリケーションがアクセストークンの検証を要求した場合、JWT形式のアクセストークンにも適用されます。"

#~ msgid "If you have a xref:security-oidc-bearer-authentication-concept.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
#~ msgstr "xref:security-oidc-bearer-authentication-concept.adoc#single-page-applications[サービスアプリケーション用のシングルページアプリケーション] で、 `keycloak.js` などの OpenID Connect Provider スクリプトが認可コードフローを管理している場合、そのスクリプトは SPA 認証セッションの寿命も制御することになります。"

#~ msgid "Check if implementing SPAs the way it is suggested in the xref:security-oidc-bearer-authentication-concept.adoc#single-page-applications[Single-page Applications for Service Applications] section can meet your requirements."
#~ msgstr "xref:security-oidc-bearer-authentication-concept.adoc#single-page-applications[サービスアプリケーションのための単一ページアプリケーション] のセクションで推奨されている方法でSPAを実装することで、要件を満たすことができるかどうかを確認してください。"

#~ msgid "Note that requiring xref:user-info[UserInfo] involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see xref:security-oidc-bearer-authentication-concept.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more details."
#~ msgstr "xref:user-info[UserInfo] を要求することは、リクエスト毎にリモートコールを行うことになることに注意してください。そのため、 `UserInfo` データのキャッシュを検討したくなるかもしれません。詳細については、 xref:security-oidc-bearer-authentication-concept.adoc#token-introspection-userinfo-cache[トークンイントロスペクションとUserInfoキャッシュ] を参照してください。"

#~ msgid "See xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
#~ msgstr "`@TestSecurity` 注入されたIDに依存する `web-app` アプリケーションエンドポイントコードをテストするために `JsonWebToken` 、 `UserInfo` と `OidcConfigurationMetadata` と同様にアクセスする `@OidcSecurity` アノテーションの使用に関する詳細については、 xref:security-oidc-bearer-authentication-concept.adoc#integration-testing-security-annotation[注入されたJsonWebTokenでTestingSecurityを使用] セクションをご覧ください。"
