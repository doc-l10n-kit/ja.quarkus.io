msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/aws-lambda.adoc:6
#, fuzzy
msgid "AWS Lambda"
msgstr "AWSラムダ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:11
msgid ""
"The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.\n"
"Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr "`quarkus-amazon-lambda` エクステンションを使うと、Quarkusを使ってAWS Lambda を構築することができます。Lambda では、CDIやSpringからのインジェクションアノテーションや、必要に応じてQuarkusの他の機能を使用することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:14
msgid ""
"Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use\n"
"Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Quarkus の Lambda は、Amazon Java ランタイムを使用してデプロイすることもできますが、より小さなメモリーフットプリントとより高速なコールドブート起動時間が必要な場合は、ネイティブ実行可能ファイルをビルドして Amazon のカスタムランタイムを使用することもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:17
msgid ""
"Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You can\n"
"bring up your Quarkus lambda project in dev or test mode and code on your project live."
msgstr "Quarkus と Lambda の統合は、Quarkus のライブコーディング開発サイクルもサポートします。Quarkus Lambda プロジェクトを開発モードまたはテストモードで起動し、プロジェクトのコードをライブで作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:20
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:23
#, fuzzy
msgid ""
"link:{includes}/prerequisites.adoc[role=include]\n"
"* https://aws.amazon.com[An Amazon AWS account]\n"
"* https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]\n"
"* https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "{includes}/prerequisites.adoc * link:https://aws.amazon.com[Amazon AWS アカウント] * link:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI] * link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] （ローカルテスト用"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:28
msgid "For Gradle projects please xref:gradle[see below], or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "Gradleプロジェクトについては、 xref:gradle[以下を参照] するか、 xref:gradle-tooling.adoc[Gradleセットアップページ] のガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:30
msgid "Getting Started"
msgstr "入門"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:32
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr "このガイドでは、maven の Archetype を使用して Java プロジェクトのサンプルを生成し、AWS にデプロイする方法を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:34
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:36
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:39
msgid "Creating the Maven Deployment Project"
msgstr "Maven デプロイメントプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:41
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "Maven Archetypeを使用してQuarkus AWS Lambda mavenプロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:54
msgid ""
"If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io]\n"
"adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr "Gradleを使いたい場合は、 link:https://code.quarkus.io/[code.quarkus.io] を使って、 `quarkus-amazon-lambda` エクステンションを依存関係として追加することで、素早く簡単にGradleプロジェクトを生成することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:57
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above-generated Maven archetype project, to follow along with this guide."
msgstr "このガイドと揃えるために、build.gradle、gradle.properties、settings.gradleを上記の生成されたMaven archetypeプロジェクトにコピーしてください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:59
msgid "Execute: gradle wrapper to set up the gradle wrapper (recommended)."
msgstr "Execute: gradle wrapper を実行して gradle wrapper を設定します (推奨)。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:61
msgid "For full Gradle details, see the xref:gradle[Gradle build] section below."
msgstr "Gradleの詳細については、以下の xref:gradle[Gradleビルド] のセクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:65
msgid "Choose Your Lambda"
msgstr "使用する Lambda の選択"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:67
msgid ""
"The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.\n"
"It must find a class in your project that implements this interface, or it will throw a build time failure.\n"
"If it finds more than one handler class, a build time exception will also be thrown."
msgstr "`quarkus-amazon-lambda` エクステンションは、Amazon `RequestHandler<?, ?>` または `RequestStreamHandler` インターフェースを直接実装しているクラスがないか、プロジェクトをスキャンします。このインターフェイスを実装しているクラスがプロジェクト内で見つからなければ、ビルド時の失敗がスローされます。複数のハンドラクラスが見つかった場合も、ビルド時の例外がスローされます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:71
msgid ""
"Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just\n"
"an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one\n"
"project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr "しかし、時にはコードを共有するいくつかの関連する Lambda があって、複数の maven モジュールを作成することは、やりたくないオーバーヘッドに過ぎないことがあるかもしれません。 `quarkus-amazon-lambda` エクステンションを使用すると、1 つのプロジェクトに複数のラムダをバンドルし、設定または環境変数を使用してデプロイしたいハンドラーを選択することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:75
msgid ""
"The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up\n"
"`src/main/resources/application.properties` you'll see this:"
msgstr "生成されたプロジェクトは、その中に3つの Lambda を持っています。`RequestHandler<?, ?>` インターフェイスを実装したものが 2 つ、`RequestStreamHandler` インターフェイスを実装したものが 1 つ。1つは使用され、2つは未使用です。 `src/main/resources/application.properties` を開くと、このようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:83
msgid ""
"The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden\n"
"with an environment variable too."
msgstr "`quarkus.lambda.handler` プロパティーは、デプロイする Lambda ハンドラーをQuarkusに伝えます。これは環境変数でオーバーライドすることもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:86
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr "プロジェクト内で生成された3つのハンドラークラスを見てみると、異なる `@Named` が指定されていることがわかります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:103
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr "ハンドラークラスのCDI名は、 `quarkus.lambda.handler` プロパティー内で指定された値と一致しなければなりません。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:106
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "AWS Lambda の Java ランタイムにデプロイする"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:108
msgid ""
"There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to\n"
"create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr "Lambda をAWS上で動作させるには、いくつかのステップがあります。生成されたmavenプロジェクトには、pure Java とネイティブデプロイメント用の Lambda を作成、更新、削除、呼び出しするための便利なスクリプトが含まれています。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:111
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:113
msgid "Build the project:"
msgstr "プロジェクトをビルドします。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:115
msgid "link:{includes}/devtools/build.adoc[role=include]"
msgstr "link:{includes}/devtools/build.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:117
msgid "This will compile and package your code."
msgstr "これでコードがコンパイルされ、パッケージ化されます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:119
msgid "Create an Execution Role"
msgstr "実行ロールの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:121
#, fuzzy
msgid ""
"View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying\n"
"a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define\n"
"a `LAMBDA_ROLE_ARN` environment variable in your profile or console window,  Alternatively, you can edit\n"
"the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "AWS CLIでラムダをデプロイするための link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guideを] 参照してください。具体的には、 `Execution Role` を作成していることを確認してください。プロファイルまたはコンソールウィンドウで `LAMBDA_ROLE_ARN` 環境変数を定義する必要があります。あるいは、ビルドによって生成される `manage.sh` スクリプトを編集して、role 値を直接そこに置くこともできます："

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:131
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:133
#, fuzzy
msgid ""
"After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files\n"
"are in the build directory:  `target/` for maven, `build/` for gradle."
msgstr "ビルドを実行した後、 `quarkus-amazon-lambda` 拡張機能によって生成された余分なファイルがいくつかあります。これらのファイルはビルドディレクトリにあります: mavenの場合は `target/` 、gradleの場合は `build/` 。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:136
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:137
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr "`manage.sh` - aws Lambda CLI の呼び出しのラッパー"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:138
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr "`bootstrap-example.sh` - ネイティブデプロイメント用のブートストラップスクリプトの例"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:139
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr "`sam.jvm.yaml` - (オプション) sam cliやローカル・テストで使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:140
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr "`sam.native.yaml` - (オプション) sam cliやネイティブ・ローカル・テストで使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:142
msgid "Create the function"
msgstr "関数を作成する"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:144
msgid ""
"The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for\n"
"your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr "`target/manage.sh` スクリプトは、AWS Lambda Java ランタイムを使用して Lambda を管理するためのものです。このスクリプトは利便性のためだけに提供されています。Lambda の作成、削除、更新のためにどのようなawsコマンドが実行されるかを知りたい場合は、 `manage.sh` スクリプトの出力を確認してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:148
#, fuzzy
msgid "`manage.sh` supports four operation:  `create`, `delete`, `update`, and `invoke`."
msgstr "`manage.sh` は4つの操作をサポートしている： 、 、 。 `create` `delete` `update` `invoke`"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:150
msgid ""
"To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys,\n"
"and set up the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.\n"
"A usage statement will be printed to guide you accordingly."
msgstr "AWS CLIがインストールされていること、AWSアクセスキーのためのaws configureを実行していること、 `LAMBDA_ROLE_ARN` 環境変数を設定していること(上記の通り)を確認するには、 `manage.sh` をパラメーターなしで実行してください。それに応じて利用方法のガイドが表示されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:154
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr "Gradleを使用している場合、 `manage.sh` のバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:156
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "`usage` を参照したり、AWS の設定を検証するためには次のようにします。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:162
msgid "You can `create` your function using the following command:"
msgstr "次のコマンドを使って、 Function を `create` します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:169
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "または、このシェルで既に `LAMBDA_ROLE_ARN` が定義されていない場合にはこうです。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:176
msgid ""
"Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This\n"
"handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr "ハンドラースイッチを変更しないでください。これは、 `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest` にハードコードする必要があります。このハンドラは、Quarkusをブートストラップし、インジェクションを実行できるように実際のハンドラをラップします。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:179
msgid ""
"If there are any problems creating the function, you must delete it with the `delete` function before re-running\n"
"the `create` command."
msgstr "Function の作成に問題がある場合は、 `delete` で Function を削除してから `create` コマンドを再実行する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:187
msgid "Commands may also be stacked:"
msgstr "コマンドはスタックすることもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:193
msgid "Invoke the Lambda"
msgstr "Lambda の呼び出し"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:195
msgid "Use the `invoke` command to invoke your function."
msgstr "関数を呼び出すには `invoke` コマンドを使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:202
msgid ""
"The example lambda takes input passed in via the `--payload` switch which points to a json file\n"
"in the root directory of the project."
msgstr "サンプルの Lambda は、プロジェクトのルートディレクトリーにある json ファイルを指す `--payload` スイッチを介して渡された入力を受け取ります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:205
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr "Lambda は、以下のようにSAM CLI によってローカルで呼び出すこともできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:212
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "ネイティブイメージのビルドで作業している場合は、テンプレート名をネイティブバージョンに置き換えてください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:219
msgid "Update the Lambda"
msgstr "Lambda の更新"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:221
msgid ""
"You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the\n"
"`update` command."
msgstr "お好きなように Java コードを更新することができます。リビルドしたら、 `update` コマンドを実行することで、Lambda を再配備できます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:229
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "AWS Lambda カスタム (ネイティブ) ランタイムへのデプロイ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:231
msgid ""
"If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java\n"
"code to a native executable.  Just make sure to rebuild your project with the `-Dnative` switch."
msgstr "ラムダのメモリフットプリントを小さくし、初期化時間を短縮したい場合は、Javaコードをネイティブ実行可能ファイルにコンパイルできます。 `-Dnative` ・スイッチでプロジェクトをリビルドしてください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:234
msgid "For Linux hosts, execute:"
msgstr "Linux ホストの場合は以下を実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:236
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:238
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon\n"
"Lambda requires linux binaries.  You can do this by passing this property to your build:\n"
"`-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however."
msgstr "Linux 以外のシステムでビルドしている場合は、Amazon Lambda が Linux バイナリーを必要とするため、Docker ビルドを使用するように Quarkus に指示するプロパティーも渡す必要があります。これを行うには、`-Dquarkus.native.container-build=true` プロパティーをビルドに渡します。ただし、これには Docker をローカルにインストールする必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:242
msgid "link:{includes}/devtools/build-native-container.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native-container.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:244
msgid ""
"Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.\n"
"This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda\n"
"Custom (Provided) Runtime."
msgstr "これらのコマンドのいずれかがコンパイルされ、ネイティブの実行イメージが作成されます。また、zip ファイル `target/function.zip` も生成されます。このzipファイルには、 `bootstrap` にリネームされたネイティブ実行イメージが含まれています。これはAWS Lambda Custom (Provided) Runtimeの要件です。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:248
#, fuzzy
msgid ""
"The instructions here are exactly as above with one change:  you'll need to add `native` as the first parameter to the\n"
"`manage.sh` script:"
msgstr "`manage.sh` スクリプトの最初のパラメーターとして `native` を追加する必要があります："

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:256
msgid ""
"As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish\n"
"to work with native image builds.  The script will take care of the rest of the details necessary to manage your native\n"
"image function deployments."
msgstr "上記のように、コマンドはスタックすることができます。唯一の要件は、ネイティブイメージビルドで作業したい場合、最初のパラメーターとして `native` を指定することです。このスクリプトは、ネイティブイメージ関数のデプロイメントを管理するために必要な残りの詳細を処理します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:260
msgid ""
"Examine the output of the `manage.sh` script if you want to learn what aws commands are executed\n"
"to create, delete, and update your lambdas."
msgstr "Lambda を作成、削除、更新するためにどのようなawsコマンドが実行されるかを知りたい場合は、 `manage.sh` スクリプトの出力を調べてください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:263
msgid ""
"One thing to note about the create command for native is that the `aws lambda create-function`\n"
"call must set a specific environment variable:"
msgstr "ネイティブ用のcreateコマンドについて注意すべき点は、 `aws lambda create-function` 呼び出しで特定の環境変数を設定しなければならないということです。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:271
msgid "Examine the POM and Gradle build"
msgstr "POM と Gradle のビルドの検証"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:273
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension\n"
"as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr "POM には `quarkus-amazon-lambda-http` エクステンションが依存関係として含まれている以外に特別なことは何もありません。このエクステンションは Lambda のデプロイに必要なものをすべて自動的に生成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:276
msgid ""
"In previous versions of this extension, you had to set up your pom or gradle\n"
"to zip up your executable for native deployments, but this is not the case anymore."
msgstr "このエクステンションの以前のバージョンでは、ネイティブなデプロイをするためには、pomやgradleで実行可能ファイルをZIP圧縮するように設定する必要がありましたが、現在はそのようなことはなくなりました。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:280
msgid "Gradle build"
msgstr "Gradle ビルド"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:282
msgid ""
"Similarly, for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need\n"
"for your lambda deployment."
msgstr "同様に、Gradle プロジェクトの場合も、`quarkus-amazon-lambda` 依存関係を追加する必要があります。エクステンションは、Lambda デプロイメントに必要なすべてのものを自動的に生成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:285
msgid "Example Gradle dependencies:"
msgstr "Gradle の依存関係の例。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:300
msgid "Live Coding and Unit/Integration Testing"
msgstr "ライブコーディングおよび単体/統合テスト"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:301
#, fuzzy
msgid ""
"To mirror the AWS Lambda environment as closely as possible in a dev environment,\n"
"the Quarkus AWS Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.\n"
"This mock event server simulates a true AWS Lambda environment."
msgstr "開発環境でAWS Lambda環境をできるだけ忠実にミラーリングするために、Quarkus AWS Lambdaエクステンションは、Quarkus Dev and TestモードでAWS Lambdaイベントサーバーのモックを起動します。このモックイベントサーバーは、真のAWS Lambda環境をシミュレートします。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:305
msgid ""
"While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.\n"
"The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda\n"
"and changes will automatically be recompiled and available the next invocation you make.  Here's an example:"
msgstr "Quarkus Dev モードで実行しているときに、`http://localhost:8080` に HTTP POST を実行することで、イベントをフィードできます。模擬イベントサーバーがイベントを受信し、ラムダが呼び出されます。Lambda でライブコーディングを実行すると、変更が自動的に再コンパイルされ、次に行う呼び出しで利用できるようになります。次に例を示します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:309
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:316
msgid ""
"For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example\n"
"using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.\n"
"The default port for Rest Assured is automatically set to 8081 by Quarkus, so you can invoke\n"
"on this endpoint."
msgstr "単体テストでは、必要な HTTP クライアントを使用して模擬イベントサーバーで呼び出すこともできます。これは、rest-assured を使用した例です。Quarkus は、ポート 8081 で別の Mock Event サーバーを起動します。Rest Assured のデフォルトポートは、Quarkus により自動的に 8081 に設定されるため、このエンドポイントで呼び出すことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:351
msgid ""
"The mock event server is also started for `@QuarkusIntegrationTest` tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr "モックイベントサーバは `@QuarkusIntegrationTest` のテストでも起動されるので、ネイティブバイナリでも動作します。このように、SAM CLI のローカルテストと同様の機能を、Docker のオーバーヘッドなしに提供します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:354
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr "最後に、ポート 8080 またはポート 8081 がコンピューターで使用できない場合は、application.properties を使用して開発モードとテストモードのポートを変更できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:363
msgid "A port value of zero will result in a randomly assigned port."
msgstr "ポート値がゼロの場合、ポートはランダムに割り当てられます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:365
#, fuzzy
msgid "To turn off the mock event server:"
msgstr "モック・イベント・サーバーをオフにするには"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:372
msgid "Testing with the SAM CLI"
msgstr "SAM CLI を使用したテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:373
msgid "If you do not want to use the mock event server, you can test your lambdas with SAM CLI."
msgstr "模擬イベントサーバーを使用しない場合は、SAM CLI を使用して Lambda をテストできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:375
msgid ""
"The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]\n"
"allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires\n"
"https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose\n"
"to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] を利用すると、Lambda をシミュレートした環境でラップトップ上のローカルで Lambda を実行することができます。これには link:https://www.docker.com/products/docker-desktop[docker] のインストールが必要です。これは、利用することを選択した場合のオプションのアプローチです。それ以外の場合は、Quarkus JUnitの統合でほとんどのニーズを満たすことができるはずです。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:380
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "JVMとネイティブ実行モードの両方に対応したスターターテンプレートが生成されています。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:382
msgid ""
"Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.\n"
"The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "以下の SAM CLI コマンドを実行して、適切な SAM `template` を渡して Lambda Function をローカルでテストします。 `event` パラメーターには任意の JSON ファイルを指定します。この場合はサンプル `payload.json` を指定しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:385
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr "Gradle を使用している場合、YAML テンプレートのバイナリーへのパスを `target` から `build` に変更しなければなりません。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:392
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "ネイティブイメージは、 `sam.native.yaml` テンプレートを使ってローカルでテストすることもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:399
msgid "Modifying `function.zip`"
msgstr "`function.zip` の修正"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:401
msgid ""
"There are times when you may have to add some additions to the `function.zip` lambda deployment that is generated\n"
"by the build.  To do this, create a `zip.jvm` or `zip.native` directory within `src/main`.\n"
"Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr "ビルドによって生成された `function.zip` Lambda デプロイメントにいくつかの追加を加えなければならない場合があります。これを行うには、 `src/main` 内に `zip.jvm` または `zip.native` ディレクトリーを作成します。Pure Java Lambda を実行している場合は `zip.jvm/` を、ネイティブディプロイメントを実行している場合は `zip.native/` を作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:405
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "zipディレクトリーの下に作成したファイルやディレクトリーは、すべて `function.zip` に含まれます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:407
msgid "Custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:409
msgid ""
"There are times you may want to set a specific system properties or other arguments when lambda invokes\n"
"your native quarkus lambda deployment.  If you include a `bootstrap` script file within\n"
"`zip.native`, the quarkus extension will automatically rename the executable to `runner` within\n"
"`function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "ラムダがネイティブの quarkus ラムダデプロイメントを起動する際に、特定のシステムプロパティーやその他の引数を設定したい場合があるかもしれません。 `zip.native` 内に `bootstrap` スクリプトファイルを含めると、Quarkus エクステンションは自動的に実行可能ファイルの名前を `function.zip` 内の `runner` に変更し、 `bootstrap` スクリプトの unix モードを実行可能ファイルに設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:414
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr "カスタム `bootstrap` スクリプトを含む場合は、ネイティブ実行可能ファイルを `runner` として参照する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:416
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr "このエクステンションは、サンプルのスクリプト `target/bootstrap-example.sh` を生成します。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:418
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay および GraalVM を使用したトレース"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:420
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:424
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr "さらに、 `manage.sh` の `cmd_create()` 関数で AWS X-Ray tracing パラメーターを有効にすることを忘れないでください。これはAWSマネジメントコンソールでも設定できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:430
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr "SAM テンプレートファイルの場合は、YAML の Function Properties に以下を追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:436
msgid ""
"AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.\n"
"This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr "AWS X-Ray はディストリビューションに多くのクラスを追加しますが、最低でも256MBのAWS Lambdaメモリーサイズを使用していることを確認してください。これは `manage.sh` `cmd_create()` で明示的に設定されています。ネイティブイメージは常により低いメモリー設定を使用できる可能性がありますが、特にパフォーマンスを比較するためには同じ設定にしておくことをお勧めします。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:440
msgid "Using HTTPS or SSL/TLS"
msgstr "HTTPS または SSL/TLS の使用"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:442
msgid ""
"If your code makes HTTPS calls (e.g. to a microservice, to an AWS service), you will need to add configuration to the native image,\n"
"as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.\n"
"For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]"
msgstr "コードが hHTTPS (マイクロサービスや AWS サービスなど) を呼び出す場合、GraalVM は明示的に宣言された場合にのみ依存関係を含むため、ネイティブイメージに設定を追加する必要があります。Quarkus は、デフォルトでは、この機能を暗黙的に必要とするエクステンションでこの機能を有効にします。詳細については、xref:native-and-ssl.adoc[Quarkus SSLガイド] を参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:446
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr "src/main/resources/application.properties を開き、以下の行を追加してネイティブイメージでSSLを有効にします。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:454
msgid "Using the AWS Java SDK v2"
msgstr "AWS Java SDK v2 の使用"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:456
msgid ""
"Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).\n"
"Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr "QuarkusにはDynamoDB、S3、SNS、SQS (他にも追加中) のエクステンションが追加されました。以下のように手動でワイヤリングするのではなく、Quarkusを使って様々なAWSサービスを利用する方法については、 link:{amazon-services-guide}[これらのガイド] を確認してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:459
msgid ""
"With minimal integration, it is possible to leverage the AWS Java SDK v2,\n"
"which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr "最小限のインテグレーションで、AWSのJava SDK v2を活用し、SQS、SNS、S3、DynamoDBなどのサービスを呼び出すことが可能です。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:462
msgid ""
"For native image, however, the URL Connection client must be preferred over the Apache HTTP Client\n"
"when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr "ただし、ネイティブイメージの場合、（現時点では）GraalVMのコンパイルに問題があるため、同期モードを使用する場合は、Apache HTTP ClientよりもURL Connectionクライアントを優先する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:465
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr "`quarkus-jaxb` を依存関係として Maven `pom.xml` または Gradle `build.gradle` ファイルに追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:467
msgid ""
"You must also force your AWS service client for SQS, SNS, S3 et al., to use the URL Connection client,\n"
"which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the xref:https[Using HTTPS or SSL/TLS] section above."
msgstr "また、SQS、SNS、S3などのAWSサービスクライアントは、HTTPSでAWSサービスに接続するURL Connectionクライアントを使用するように強制する必要があり、そのため、上記の xref:https[HTTPSまたはSSL/TLSの使用] セクションで説明したように、SSL enabledプロパティが含まれています。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:477
msgid "For Maven, add the following to your `pom.xml`."
msgstr "Mavenの場合は、 `pom.xml` に以下を追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:545
msgid ""
"if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM,\n"
"there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide]."
msgstr "もし、 `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` 、または同様のSSLエラーが表示された場合、GraalVMの現状のため、 `function.zip` 、以下のようにバンドルするための追加作業があります。詳しくは、xref:native-and-ssl.adoc[Quarkus Native SSL ガイド] をご覧ください。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:548
msgid "Additional requirements for client SSL"
msgstr "クライアントSSLの追加要件"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:550
msgid "The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need."
msgstr "ネイティブ実行可能ファイルは、S3 や他の aws ライブラリーが必要とするクライアント SSL を有効にするために、いくつかの追加の手順が必要です。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:552
msgid "A custom `bootstrap` script"
msgstr "カスタム `bootstrap` スクリプト"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:553
msgid "`libsunec.so` must be added to `function.zip`"
msgstr "`function.zip` に `libsunec.so` を追加する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:554
msgid "`cacerts` must be added to `function.zip`"
msgstr "`function.zip` に `cacerts` を追加する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:556
msgid ""
"To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap`\n"
"within `src/main/zip.native/`, like below. An example is created automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr "これを行うには、まず、ビルドでディレクトリー `src/main/zip.native/` を作成します。次に `src/main/zip.native/` 内に `bootstrap` という名前のシェルスクリプトファイルを作成します。サンプル `bootstrap-example.sh` がビルドフォルダー(ターゲットまたはビルド)内に自動的に作成されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:566
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr "`cacerts` ファイルがパスワードで保護されている場合は、追加で `-Djavax.net.ssl.trustStorePassword=changeit` を設定してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:568
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr "次に、GraalVM ディストリビューションから `src/main/zip.native/` にいくつかのファイルをコピーする必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:570
msgid "GraalVM versions can have different paths for these files whether you are using the Java 8 or 11 version. Adjust accordingly."
msgstr "GraalVM のバージョンは、使用しているバージョンが Java 8 か 11 かによりファイルへのパスが異なるため、適宜調整してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:578
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr "ネイティブビルドを実行すると、これらのファイルはすべて `function.zip` に含まれます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:580
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr "Dockerイメージを使ってビルドする場合は、このイメージからこれらのファイルを抽出する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:582
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr "必要な SSL を抽出するには、バックグラウンドでDockerコンテナを起動し、そのコンテナにアタッチしてアーティファクトをコピーする必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:584
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr "まず、GraalVMコンテナを起動して、コンテナIDの出力に注目してみましょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:593
msgid "First, `libsunec.so`, the C library used for the SSL implementation:"
msgstr "まず、SSLの実装に使用するC言語のライブラリである `libsunec.so` です。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:600
msgid "Second, `cacerts`, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr "2つ目は、`cacerts` (証明書ストア)です。また、定期的に更新されたコピーを取得する必要があるかもしれません。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:606
msgid "Your final archive will look like this:"
msgstr "最終的なアーカイブは以下のようになります。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:617
msgid "Deploy to AWS Lambda using a Container Image"
msgstr "コンテナイメージを使用して AWS Lambda にデプロイする"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:619
msgid "AWS Lambda supports creating your lambdas by referencing https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[container images] rather than uploading ZIP files. This can have some benefits such as bypassing the size limit of the uploaded ZIP files. You can define lambda functions for both native builds and regular JVM builds."
msgstr "AWS Lambda は、ZIP ファイルをアップロードするのではなく、 https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[コンテナイメージ] を参照してラムダを作成することをサポートしています。これは、アップロードされた ZIP ファイルのサイズ制限を回避できるなどの利点があります。ネイティブビルドと通常の JVM ビルドの両方でラムダ関数を定義できます。"

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda.adoc:621
msgid "JVM container image"
msgstr "JVM コンテナイメージ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:623
msgid "For a regular JVM distribution you need to base your image off the official AWS Java base images. Below is an example of a Dockerfile that would create a container image from your Quarkus Lambda project. It assumes that `mvn package` has been executed and binaries are available in the `target/` directory:"
msgstr "通常の JVM ディストリビューションの場合は、公式の AWS Java ベースイメージに基づいてイメージを作成する必要があります。以下は、Quarkus Lambda プロジェクトからコンテナイメージを作成する Dockerfile の例です。`mvn package` が実行され、バイナリーが `target/` ディレクトリーで利用可能であることを想定しています。"

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda.adoc:635
msgid "Native executable container image"
msgstr "ネイティブ実行可能コンテナイメージ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:637
msgid "To create a lambda container image that uses the native executable we'll need to do things a little differently. In this case, we won't need to use the `java:11` base image from AWS, but instead we'll use a special image that assumes that the runtime environment for the lambda is provided. The example below creates such a container. It assumes that a Maven build has been executed (such as `mvn package -Dnative=true`) and has generated the native binary into the `target/` directory. The binary needs to be named `bootstrap` and be placed in `/var/runtime/`:"
msgstr "ネイティブ実行可能ファイルを使用するラムダコンテナイメージを作成するには、少し異なる方法を用いる必要があります。この場合、AWS の `java:11` ベースイメージを使用する必要はなく、代わりにラムダの実行環境が提供されていることを前提とした特別なイメージを使うことになります。以下の例では、そのようなコンテナを作成しています。Maven のビルドが実行され (`mvn package -Dnative=true` など)、ネイティブバイナリーが `target/` ディレクトリーに生成されたと仮定しています。バイナリーは `bootstrap` という名前で、`/var/runtime/` に配置する必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/aws-lambda.adoc:649
msgid "Deploying a container image lambda"
msgstr "コンテナイメージ Lambda のデプロイ"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:651
msgid "Below, you can see how the container images created above can be built and deployed to AWS using the `docker` and `aws` command line tools. These instructions work for both native and jvm container images and assume that the `aws` command line tool has been logged in."
msgstr "以下に、`docker` および `aws` コマンドラインツールを使用して、上記で作成したコンテナイメージをビルドして AWS にデプロイする方法を示します。これらの手順は、ネイティブコンテナイメージと jvm コンテナイメージの両方で機能し、`aws` コマンドラインツールがログインしていることを前提としています。"

#. type: Title ====
#: upstream/_versions/main/guides/aws-lambda.adoc:653
msgid "Build the Docker image"
msgstr "Docker イメージのビルド"

#. type: Title ====
#: upstream/_versions/main/guides/aws-lambda.adoc:665
msgid "Create an ECR repository in the users AWS account"
msgstr "ユーザーの AWS アカウントへの ECR リポジトリーの作成"

#. type: Title ====
#: upstream/_versions/main/guides/aws-lambda.adoc:672
msgid "Tag the image using your ECR registry information"
msgstr "ECR の登録情報を使用したイメージへのタグ付け"

#. type: Title ====
#: upstream/_versions/main/guides/aws-lambda.adoc:679
msgid "Log Docker into your ECR registry and push the Docker image to it"
msgstr "Docker を ECR レジストリーへの Docker のログインと Docker イメージのプッシュ"

#. type: Title ====
#: upstream/_versions/main/guides/aws-lambda.adoc:687
msgid "Create the AWS lambda function with the AWS CLI tool"
msgstr "AWS CLI ツールを使用した AWS ラムダ関数の作成"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:689
msgid "Make sure you reference the image you uploaded previously (assumes that a role exists that can be used to run the lambda). Please note that it is not unlikely that for the JVM lambda function, the default memory limit of `128Mb` will not be enough to run the function. In that case, you can increase the memory limit when creating the function by providing the `--memory-size 256` parameter to your `aws lambda create-function` command. You can also adjust the function in the AWS console after you've created it."
msgstr "アップロードしておいたイメージを参照していることを確認してください (Lambda の実行に使用できるロールが存在することを前提としています)。JVM Lambda 関数の場合、デフォルトのメモリー制限である `128Mb` が関数を実行するのに十分である可能性が高いことに注意してください。その場合は、`aws lambda create-function` コマンドに `--memory-size 256` パラメーターを指定することで、関数を作成するときにメモリー制限を増やすことができます。関数を作成した後、AWS コンソールで関数を調整することもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:696
msgid "Now you can use the AWS console to view and test your new lambda function."
msgstr "これで、AWS コンソールを使用して、新しいラムダ関数を表示およびテストできます。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:698
msgid "Amazon Alexa Integration"
msgstr "Amazon Alexa 統合"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:700
msgid "To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub]."
msgstr "Quarkus ネイティブで Alexa を使用するには、 https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkiverse Hub でホストされている Quarkus Amazon Alexa エクステンション] を使用する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:710
msgid "Define the latest version of the extension in your POM file."
msgstr "POM ファイルでエクステンションの最新バージョンを定義します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:712
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr "通常通り、抽象クラス `com.amazon.ask.SkillStreamHandler` をサブクラス化して Alexa ハンドラーを作成し、リクエストハンドラーの実装を追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:714
msgid "That's all there is to it!"
msgstr "これで、必要な作業は終了です。"

#. type: Title ==
#: upstream/_versions/main/guides/aws-lambda.adoc:716
msgid "SnapStart"
msgstr "SnapStart"

#. type: Plain Text
#: upstream/_versions/main/guides/aws-lambda.adoc:718
msgid "To optimize your application for Lambda SnapStart, check xref:amazon-snapstart.adoc[the SnapStart Configuration Documentation]."
msgstr "Lambda SnapStartにアプリケーションを最適化するためには、 link:amazon-snapstart.html[SnapStart 設定ドキュメント] を確認してください。"
