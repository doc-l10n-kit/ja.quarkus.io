msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:6
msgid "Using OpenID Connect (OIDC) and Keycloak to Centralize Authorization"
msgstr "OpenID Connect（OIDC）とKeycloakを使った認可の中央管理"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:11
msgid "This guide demonstrates how your Quarkus application can authorize a bearer token access to protected resources using https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services]."
msgstr "このガイドでは、Quarkusアプリケーションが link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services] を使用して保護されたリソースへのベアラートークンアクセスを認証する方法を説明します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:13
#, fuzzy
msgid "The `quarkus-keycloak-authorization` extension is based on `quarkus-oidc` and provides a policy enforcer that enforces access to protected resources based on permissions managed by Keycloak and currently can only be used with the Quarkus xref:security-oidc-bearer-token-authentication.adoc[OIDC service applications]."
msgstr "`quarkus-keycloak-authorization` エクステンションは、 `quarkus-oidc` に基づいており、Keycloakによって管理されるパーミッションに基づいて、保護されたリソースへのアクセスを強制するポリシーエンフォーサーを提供します。現在のところ、Quarkus xref:security-oidc-bearer-token-authentication.adoc[OIDCサービスアプリケーションでのみ] 使用できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:15
msgid "It provides a flexible and dynamic authorization capability based on Resource-Based Access Control."
msgstr "リソースベースアクセスコントロール(RBAC)に基づく柔軟でダイナミックな認可機能を提供します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:17
msgid "Instead of explicitly enforcing access based on some specific access control mechanism such as Role-Based Access Control(RBAC), `quarkus-keycloak-authorization` checks whether a request is allowed to access a resource based on its name, identifier or URI by sending a bearer access token verified by `quarkus-oidc` to Keycloak Authorization Services where an authorization decision is made."
msgstr "RBAC（Role-Based Access Control）のような特定のアクセス制御メカニズムに基づいて明示的にアクセス強制する代わりに、 `quarkus-keycloak-authorization` は、認可判断をするKeycloak Authorization Servicesに`quarkus-oidc` で検証されたベアラアクセストークンを送信してリクエストの名前、識別子、URIに基づいてリソースへのアクセスが許可されているかどうかをチェックします。 "

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:19
msgid "Use `quarkus-keycloak-authorization` only if you work with Keycloak and have Keycloak Authorization Services enabled to make authorization decisions. Use `quarkus-oidc` if you do not work with Keycloak or work with Keycloak but do not have its Keycloak Authorization Services enabled to make authorization decisions."
msgstr "Keycloakと連携し、Keycloak Authorization Servicesを有効にして認可の決定を行う場合のみ、 `quarkus-keycloak-authorization` を使用してください。Keycloakと連携していない場合、またはKeycloakと連携しているが、そのKeycloak Authorization Servicesが認可の決定を行うことを有効にしていない場合は、 `quarkus-oidc` を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:21
msgid "By externalizing authorization from your application, you are allowed to protect your applications using different access control mechanisms as well as avoid re-deploying your application every time your security requirements change, where Keycloak will be acting as a centralized authorization service from where your protected resources and their associated permissions are managed."
msgstr "アプリケーションから認証を外部化することで、異なるアクセス制御メカニズムを使用してアプリケーションを保護することができ、セキュリティー要件が変更されるたびにアプリケーションを再デプロイする必要がなくなります。Keycloakは、保護されたリソースおよび関連する権限が管理される一元化された認可サービスとして機能します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:23
#, fuzzy
msgid "See the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide for more information about `Bearer Token` authentication mechanism. It is important to realize that it is the `Bearer Token` authentication mechanism which does the authentication and creates a security identity - while the `quarkus-keycloak-authorization` extension is responsible for applying a Keycloak Authorization Policy to this identity based on the current request path and other policy settings."
msgstr "`Bearer Token` 認証メカニズムの詳細については、 xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証] ガイドを参照。認証を行い、セキュリティIDを作成するのは `Bearer Token` 認証メカニズムである一方、 `quarkus-keycloak-authorization` エクステンションは、現在のリクエストパスとその他のポリシー設定に基づいて、このIDにKeycloak認可ポリシーを適用する責任があることを理解することが重要です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:25
msgid "Please see https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[Keycloak Authorization Services documentation] for more information."
msgstr "詳しくは https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_overview[Keycloak認可サービスのドキュメント] を参照下さい。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:27
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:31
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:32
msgid "https://www.keycloak.org/docs/latest/server_installation/index.html[Keycloak]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:34
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:36
msgid "In this example, we build a very simple microservice which offers two endpoints:"
msgstr "この例では、2つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:38
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:39
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:41
msgid "These endpoints are protected and can only be accessed if a client is sending a bearer token along with the request, which must be valid (e.g.: signature, expiration and audience) and trusted by the microservice."
msgstr "これらのエンドポイントは保護されており、クライアントがリクエストと一緒にベアラートークンを送信している場合にのみアクセスすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:43
msgid ""
"The bearer token is issued by a Keycloak Server and represents the subject to which the token was issued for.\n"
"For being an OAuth 2.0 Authorization Server, the token also references the client acting on behalf of the user."
msgstr "ベアラートークンは、Keycloakサーバーによって発行され、トークンが発行された対象を表します。OAuth 2.0 認可サーバーであるため、トークンはユーザーの代わりに動作するクライアントも参照します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:46
msgid ""
"The `/api/users/me` endpoint can be accessed by any user with a valid token.\n"
"As a response, it returns a JSON document with details about the user where these details are obtained from the information carried on the token.\n"
"This endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `user` role can access this endpoint."
msgstr "`/api/users/me` エンドポイントは、有効なトークンを持つ任意のユーザーがアクセスできます。応答として、ユーザーに関する詳細が記載された JSON ドキュメントを返却します。このエンドポイントは RBAC (Role-Based Access Control) で保護されており、 `user` のロールで許可されたユーザーのみがこのエンドポイントにアクセスできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:50
msgid "The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) and only users granted with the `admin` role can access it."
msgstr "`/api/admin` エンドポイントは RBAC (役割ベースのアクセス制御) で保護されており、 `admin` の役割を付与されたユーザーのみがアクセスできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:52
msgid ""
"This is a very simple example using RBAC policies to govern access to your resources.\n"
"However, Keycloak supports other types of policies that you can use to perform even more fine-grained access control.\n"
"By using this example, you'll see that your application is completely decoupled from your authorization policies with enforcement being purely based on the accessed resource."
msgstr "これは、RBACポリシーを使用してリソースへのアクセスを制御する非常にシンプルな例です。しかし、Keycloakは他のタイプのポリシーをサポートしており、より詳細なアクセス制御を行うために使用することができます。この例を使用すると、アプリケーションが認可ポリシーから完全に切り離されており、エンフォースメントは純粋にアクセスされたリソースに基づいていることがわかるでしょう。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:56
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:58
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:61
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:63
#, fuzzy
msgid "The solution is located in the `security-keycloak-authorization-quickstart` link:{quickstarts-tree-url}/security-keycloak-authorization-quickstart[directory]."
msgstr "ソリューションは `security-keycloak-authorization-quickstart` link:{quickstarts-tree-url}/security-keycloak-authorization-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:65
msgid "Creating the Project"
msgstr "プロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:67
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:74
msgid "This command generates a project, importing the `keycloak-authorization` extension which is an implementation of a Keycloak Adapter for Quarkus applications and provides all the necessary capabilities to integrate with a Keycloak Server and perform bearer token authorization."
msgstr "このコマンドはプロジェクトを生成し、`keycloak-authorization` エクステンションをインポートします。これはQuarkusアプリケーション用のKeycloakアダプターの実装で、Keycloakサーバーと統合してベアラートークンの認可を実行するのに必要なすべての機能を提供します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:76
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` and `keycloak-authorization` extensions\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで次のコマンドを実行することで、 `oidc` と `keycloak-authorization` のエクステンションをプロジェクトに追加できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:82
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:85
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:98
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:104
msgid ""
"Let's start by implementing the `/api/users/me` endpoint.\n"
"As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "まず、 `/api/users/me` のエンドポイントを実装することから始めましょう。以下のソースコードからわかるように、これは通常の Jakarta REST リソースです:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:147
msgid "The source code for the `/api/admin` endpoint is also very simple:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:172
msgid ""
"Note that we did not define any annotation such as `@RolesAllowed` to explicitly enforce access to a resource.\n"
"The extension will be responsible to map the URIs of the protected resources you have in Keycloak and evaluate the permissions accordingly, granting or denying access depending on the permissions that will be granted by Keycloak."
msgstr "リソースへのアクセスを明示的に強制するために、 `@RolesAllowed` のようなアノテーションを定義していないことに注意してください。エクステンションは、Keycloakにある保護されたリソースのURIをマッピングし、それに応じて許可を評価し、Keycloakによって付与される許可に応じてアクセスを許可または拒否する責任を負います。"

#. type: Title ===
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:175
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:177
msgid "The OpenID Connect extension allows you to define the adapter configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、`src/main/resources` ディレクトリーに配置される `application.properties` ファイルを使用してアダプター設定を定義することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:195
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in a dev mode. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイルプレフィックスを追加することで、アプリケーションを dev モードで実行する際に `Dev Services for Keycloak` がコンテナを起動するようになります。詳しくは、以下の xref:keycloak-dev-mode[Devモードでアプリケーションを実行] セクションを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:197
msgid "By default, applications using the `quarkus-oidc` extension are marked as a `service` type application (see `quarkus.oidc.application-type`). This extension also supports only  `web-app` type applications but only if the access token returned as part of the authorization code grant response is marked as a source of roles: `quarkus.oidc.roles.source=accesstoken` (`web-app` type applications check ID token roles by default)."
msgstr "デフォルトでは、 `quarkus-oidc` エクステンションを使用するアプリケーションは、 `service` タイプのアプリケーションとしてマークされます（ `quarkus.oidc.application-type` 参照）。また、このエクステンションは、 `web-app` タイプのアプリケーションのみをサポートしますが、認可コード付与応答の一部として返されたアクセストークンが、ロールのソースとしてマークされている場合に限ります： `quarkus.oidc.roles.source=accesstoken` ( `web-app` タイプのアプリケーションは、デフォルトでIDトークンのロールをチェックします)。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:199
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:201
msgid "Do not start the Keycloak server when you run the application in a dev mode - `Dev Services for Keycloak` will launch a container. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr "アプリケーションをdevモードで実行するときは、Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` はコンテナを起動します。詳細は、以下の xref:keycloak-dev-mode[Devモードでアプリケーションを実行] セクションを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:203
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:210
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:212
msgid "You should be able to access your Keycloak Server at https://localhost:8543[localhost:8543]."
msgstr "Keycloakサーバーには、 link:https://localhost:8543/auth[localhost:8543/auth] でアクセスできるはずです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:214
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"Username should be `admin` and password `admin`."
msgstr "Keycloak 管理 Consoleにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:217
#, fuzzy
msgid ""
"Import the link:{quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "link:{quickstarts-tree-url}/security-keycloak-authorization-quickstart/config/quarkus-realm.json[レルム設定] ファイルをインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいrealmを作成] する方法についてKeycloakのドキュメントを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:220
msgid "After importing the realm you can see the resource permissions:"
msgstr "レルムをインポートすると、リソースのパーミッションが表示されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:224
msgid "It explains why the endpoint has no `@RolesAllowed` annotations - the resource access permissions are set directly in Keycloak."
msgstr "これは、エンドポイントに `@RolesAllowed` のアノテーションがない理由を説明しています。リソースのアクセス許可は、Keycloakで直接設定されます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:227
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:229
msgid "To run the application in dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:233
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:235
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-v1[/q/dev-v1] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "link:http://localhost:8080/q/dev-v1[q/dev-v1] で利用できる xref:dev-ui.adoc[Dev UI] を開き、 `OpenID Connect` `Dev UI` カードの `Provider: Keycloak` リンクをクリックします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:237
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:239
msgid "Login as `alice` (password: `alice`) who only has a `User Permission` to access the `/api/users/me` resource"
msgstr "`/api/users/me` リソースへのアクセス `User Permission` のみを持つ `alice` (パスワード: `alice`) としてログインします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:240
msgid "accessing `/api/admin` will return `403`"
msgstr "`/api/admin` にアクセスすると、`403` が返されます"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:244
msgid "accessing `/api/users/me` will return `200`"
msgstr "`/api/users/me` にアクセスすると、`200` が返されます"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:242
msgid "Logout and login as `admin` (password: `admin`) who has both `Admin Permission` to access the `/api/admin` resource and `User Permission` to access the `/api/users/me` resource"
msgstr "`/api/admin` リソースにアクセスするための `Admin Permission` と `/api/users/me` リソースにアクセスするための `User Permission` の両方を持っている `admin` (パスワード: `admin`)としてログアウトし、ログインします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:243
msgid "accessing `/api/admin` will return `200`"
msgstr "`/api/admin` にアクセスすると、`200` が返されます"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:246
msgid "Running the Application in JVM mode"
msgstr "JVM モードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:248
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:250
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:254
msgid "Then run it:"
msgstr "そして、以下のように実行します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:261
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:263
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:265
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:267
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:271
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:278
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:280
msgid "See xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in a dev mode."
msgstr "devモードでのアプリケーションのテストについては、上記の xref:keycloak-dev-mode[開発モードでアプリケーションを実行] のセクションを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:282
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:284
msgid "The application is using bearer token authorization and the first thing to do is obtain an access token from the Keycloak Server in order to access the application resources:"
msgstr "アプリケーションはベアラートークン認可を使用しており、まず最初に行うべきことは、アプリケーションのリソースにアクセスするためにKeycloak サーバーからアクセストークンを取得することです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:296
msgid "The example above obtains an access token for user `alice`."
msgstr "上記の例では、ユーザー `alice` のアクセストークンを取得しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:298
msgid ""
"Any user is allowed to access the\n"
"`http://localhost:8080/api/users/me` endpoint\n"
"which basically returns a JSON payload with details about the user."
msgstr "どのユーザーでも `http://localhost:8080/api/users/me` エンドポイントで、基本的にはユーザーに関する詳細な情報を含む JSON ペイロードを返します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:309
msgid ""
"The `http://localhost:8080/api/admin` endpoint can only be accessed by users with the `admin` role.\n"
"If you try to access this endpoint with the previously issued access token, you should get a `403` response from the server."
msgstr "`http://localhost:8080/api/admin` エンドポイントは、 `admin` ロールを持つユーザーのみがアクセスできます。先程発行されたアクセストークンを使用してこのエンドポイントにアクセスしようとすると、サーバーから `403` 応答が返ってくるはずです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:319
msgid "In order to access the admin endpoint you should obtain a token for the `admin` user:"
msgstr "admin エンドポイントにアクセスするには、 `admin` ユーザーのトークンを取得する必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:331
msgid "Injecting the Authorization Client"
msgstr "認可クライアントのインジェクション"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:333
msgid ""
"In some cases, you may want to use the https://www.keycloak.org/docs/latest/authorization_services/#_service_client_api[Keycloak Authorization Client Java API] to perform\n"
"specific operations like managing resources and obtaining permissions directly from Keycloak. For that, you can inject a\n"
"`AuthzClient` instance into your beans as follows:"
msgstr "場合によっては、 link:https://www.keycloak.org/docs/latest/authorization_services/#_service_client_api[Keycloak Authorization Client Java API]を使用して、Keycloakから直接リソースの管理や権限の取得などの特定の操作を行いたいこともあるでしょう。そのためには、以下のように `AuthzClient` インスタンスをBeanに注入します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:345
msgid "Note: If you want to use the `AuthzClient` directly make sure to set `quarkus.keycloak.policy-enforcer.enable=true` otherwise there is no Bean available for injection."
msgstr "Note: `AuthzClient` を直接使用する場合は、必ず `quarkus.keycloak.policy-enforcer.enable=true` を設定してください。そうしないと、インジェクションに使用できる Bean がありません。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:347
msgid "Mapping Protected Resources"
msgstr "保護リソースのマッピング"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:349
msgid "By default, the extension is going to fetch resources on-demand from Keycloak where their `URI` are used to map the resources in your application that should be protected."
msgstr "デフォルトでは、エクステンションは Keycloak からオンデマンドでリソースを取得します。 `URI` は、保護されるべきアプリケーション内のリソースをマップするために使用されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:351
msgid "If you want to disable this behavior and fetch resources during startup, you can use the following configuration:"
msgstr "この動作を無効にして、起動時にリソースをフェッチしたい場合は、以下の設定を使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:358
msgid "Note that, depending on how many resources you have in Keycloak the time taken to fetch them may impact your application startup time."
msgstr "Keycloakにあるリソースの数によっては、それらを取得するのにかかる時間がアプリケーションの起動時間に影響することに注意してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:360
msgid "More About Configuring Protected Resources"
msgstr "保護されたリソースの設定についての詳細"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:362
msgid "In the default configuration, Keycloak is responsible for managing the roles and deciding who can access which routes."
msgstr "デフォルトの構成では、Keycloakはロールを管理し、誰がどのルートにアクセスできるかを決定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:364
#, fuzzy
msgid "To configure the protected routes using the `@RolesAllowed` annotation or the `application.properties` file, check the xref:security-oidc-bearer-token-authentication.adoc[Using OpenID Connect Adapter to Protect Jakarta REST Applications] and xref:security-authorize-web-endpoints-reference.adoc[Security Authorization] guides. For more details, check the xref:security-overview.adoc[Security guide]."
msgstr "`@RolesAllowed` アノテーションまたは `application.properties` ファイルを使用して保護ルートを設定するには、『 xref:security-oidc-bearer-token-authentication.adoc[Using Open] ID xref:security-oidc-bearer-token-authentication.adoc[Connect Adapter to Protect] Jakarta xref:security-oidc-bearer-token-authentication.adoc[REST Applications] 』および『 xref:security-authorize-web-endpoints-reference.adoc[Security Authorization] 』ガイドを参照してください。詳細については、「 xref:security-overview.adoc[セキュリティ] 」ガイドを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:366
msgid "Access to Public Resources"
msgstr "パブリックリソースへのアクセス"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:368
msgid "If you'd like to access a public resource without `quarkus-keycloak-authorization` trying to apply its policies to it then you need to create a `permit` HTTP Policy configuration in `application.properties` as documented in the xref:security-authorize-web-endpoints-reference.adoc[Security Authorization] guide."
msgstr "`quarkus-keycloak-authorization` のポリシーを適用せずにパブリックリソースにアクセスしたい場合は、 link:security-authorization.html[Security 認可] ガイドで説明されているように、 `application.properties` で `permit` HTTP Policy の設定を作成する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:370
msgid "Disabling a policy check using a Keycloak Authorization Policy such as:"
msgstr "以下のようなKeycloak Authorization Policyを使ったポリシーチェックを無効にします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:378
msgid "is no longer required."
msgstr "これはもう必要ありません。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:380
msgid "If you'd like to block access to the public resource to anonymous users then you can create an enforcing Keycloak Authorization Policy:"
msgstr "匿名ユーザのパブリックリソースへのアクセスをブロックしたい場合は、強制力のあるKeycloak Authorization Policyを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:388
msgid "Note only the default tenant configuration applies when controlling anonymous access to the public resource is required."
msgstr "なお、パブリックリソースへの匿名のアクセスを制御する必要がある場合は、デフォルトのテナント設定のみが適用されます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:390
msgid "Checking Permission Scopes Programmatically"
msgstr "プログラムによるパーミッションスコープのチェック"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:392
#, fuzzy
msgid ""
"In addition to resource permissions, you may want to specify method scopes. The scope usually represents an action that\n"
"can be performed on a resource. You can create an enforcing Keycloak Authorization Policy with method scope like this:"
msgstr "リソースのパーミッションに加えて、メソッドのスコープを指定したい場合があります。スコープは通常、リソースに対して実行可能なアクションを表します。このようにメソッドスコープを指定して、強制的なKeycloak認可ポリシーを作成することができます："

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:409
msgid "User must have resource permission 'Scope Permission Resource' and scope 'read'"
msgstr "ユーザーはリソースパーミッション 'Scope Permission Resource' とスコープ 'read' を持っている必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:411
#, fuzzy
msgid ""
"Request path `/api/protected/standard-way` is now secured by the Keycloak Policy Enforcer and does not require\n"
"any additions (such as `@RolesAllowed` annotation). In some cases, you may want to perform the same check programmatically.\n"
"You are allowed to do that by injecting a `SecurityIdentity` instance in your beans, as demonstrated in the example below.\n"
"Alternatively, if you annotate resource method with the `@PermissionsAllowed` annotation, you can achieve the same effect.\n"
"The following example shows three resource method that all requires same 'read' scope:"
msgstr "リクエストパス `/api/protected/standard-way` は、Keycloak Policy Enforcerによって保護されるようになり、追加（ `@RolesAllowed` アノテーションなど）は不要になりました。場合によっては、同じチェックをプログラム的に実行したいこともあるでしょう。以下の例で示すように、Beanに `SecurityIdentity` インスタンスを注入することで、それを行うことが許可されています。また、リソースメソッドに `@PermissionsAllowed` というアノテーションを付けると、同じ効果を得ることができます。以下の例では、3つのリソースメソッドが同じ「read」スコープを要求しています："

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:471
#, fuzzy
msgid "Request sub-path `/standard-way` requires both resource permission and scope `read` according to the configuration properties we set in the `application.properties` before."
msgstr "リクエストサブパス `/standard-way` は、以前 `application.properties` で設定した設定プロパティに従って、リソース許可とスコープ `read` の両方が必要です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:472
#, fuzzy
msgid "Request sub-path `/programmatic-way` only requires permission `Scope Permission Resource`, but we can enforce scope with `SecurityIdentity#checkPermission`."
msgstr "リクエストサブパス `/programmatic-way` はパーミッション `Scope Permission Resource` だけが必要ですが、 `SecurityIdentity#checkPermission` でスコープを強制することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:473
#, fuzzy
msgid ""
"The `@PermissionsAllowed` annotation only grants access to the requests with permission `Scope Permission Resource` and scope `read`.\n"
"For more information, see the section xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[Authorization using annotations] of the Security Authorization guide."
msgstr "`@PermissionsAllowed` アノテーションは、パーミッション `Scope Permission Resource` およびスコープ `read` を持つリクエストにのみアクセスを許可します。詳細については、「セキュリティ認可」ガイドの「アノテーションを xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[使用した] 認可」のセクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:476
msgid "Multi-Tenancy"
msgstr "マルチテナンシー"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:478
msgid "It is possible to configure multiple policy enforcer configurations, one per each tenant, similarly to how it can be done for xref:security-openid-connect-multitenancy.adoc[Multi-Tenant OpenID Connect Service Applications]."
msgstr "xref:security-openid-connect-multitenancy.adoc[マルチテナントOpenID Connectサービスアプリケーション] の場合と同様に、各テナントごとに複数のポリシーエンフォースメント構成を設定することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:480
msgid "For example:"
msgstr "例えば、以下のようになります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:522
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:524
msgid "The configuration is based on the official https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer Configuration]. If you are looking for more details about the different configuration options, please take a look at this documentation,"
msgstr "この設定は、 link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_enforcer_filter[Keycloak Policy Enforcer] の公式設定に基づいています。異なる設定オプションについての詳細をお探しの方は、こちらのドキュメントをご覧ください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:528
msgid "References"
msgstr "リファレンス"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:530
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:531
msgid "https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak Authorization Services Documentation]"
msgstr "link:https://www.keycloak.org/docs/latest/authorization_services/index.html[Keycloak認可サービスのドキュメント]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:532
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:533
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:534
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-keycloak-authorization.adoc:535
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Adminクライアント]"
