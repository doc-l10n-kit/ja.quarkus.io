msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/security-webauthn.adoc:7
msgid "Using Security with WebAuthn"
msgstr "WebAuthnと共にSecurityを使用"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:12
msgid ""
"This guide demonstrates how your Quarkus application can use WebAuthn authentication instead of\n"
"passwords."
msgstr "このガイドでは、Quarkus アプリケーションで、パスワードの代わりに WebAuthn 認証を使用する方法を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:17
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:21
msgid "Introduction to WebAuthn"
msgstr "WebAuthnの紹介"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:23
msgid ""
"https://webauthn.guide/[WebAuthn] is an authentication mechanism designed to replace passwords. In short, every\n"
"time you write a service for registering new users, or logging them in, instead of asking for a password, you\n"
"use WebAuthn, which will replace the password."
msgstr "link:https://webauthn.guide/[WebAuthn] は、パスワードを置き換えるために設計された認証メカニズムです。つまり、新しいユーザーを登録したり、ログインしたりするサービスを書くたびに、パスワードを要求する代わりに、WebAuthn を使って、パスワードを置き換えるのです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:27
msgid ""
"WebAuthn replaces the password with a proof of identity. In practice, users, instead of having to invent a password,\n"
"store it or remember it, will use a hardware token that will generate a proof of identity specifically for your\n"
"service or website. This can be done by asking users to press their thumb on their phone, or pressing a button\n"
"on a https://www.yubico.com[YubiKey] on a computer."
msgstr "WebAuthnは、パスワードをIDの証明に置き換えます。実際には、ユーザーは、パスワードを考案したり、保存したり、記憶したりする代わりに、あなたのサービスやウェブサイトのために特別に身元証明を生成するハードウェアトークンを使用することになります。これは、ユーザーに携帯電話で親指を押してもらったり、パソコンで link:https://www.yubico.com[YubiKey] のボタンを押したりすることで実現可能です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:32
#, fuzzy
msgid ""
"So, when you register your user, you use your browser to enter your user information (username, your name, etc…)\n"
"and instead of typing a password to identify yourself, you click a button which will invoke the WebAuthn browser\n"
"API which will ask you to do something (press a button, use your fingerprint). Then, your browser will generate\n"
"a proof of identity which you can send to your service instead of a password."
msgstr "ユーザーを登録する際、ブラウザーでユーザー情報（ユーザー名、名前など）を入力し、本人確認のためにパスワードを入力する代わりに、WebAuthnブラウザーAPIを起動するボタンをクリックします。すると、ブラウザが身元証明を生成し、パスワードの代わりにサービスに送信することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:37
msgid ""
"This proof of identity, when you register, consists mostly in a public key. Actually there's a lot of stuff in\n"
"there but the most interesting is the public key. This public key is not stored on your device, or your browser.\n"
"It is generated especially for the target service (tied to its URI), and derived from the hardware authenticator.\n"
"So the association of the hardware authenticator and the target service will always derive the same private and\n"
"public key pair, none of which are stored anywhere. You can for example, take your YubiKey to another computer\n"
"and it will keep generating the same private/public keys for the same target service."
msgstr "この登録時のID証明は、ほとんどが公開鍵で構成されています。実際にはいろいろなものがありますが、最も興味深いのは公開鍵です。この公開鍵は、あなたのデバイスやブラウザに保存されているわけではありません。この公開鍵は、対象となるサービスのために特別に生成され（そのURIに関連付けられます）、ハードウェア認証デバイスから導出されたものです。したがって、ハードウェア認証デバイスとターゲットサービスの関連付けは、常に同じ秘密鍵と公開鍵のペアを導き出すことになります。例えば、YubiKeyを別のコンピュータに持ち出しても、同じターゲットサービスに対して同じ秘密鍵と公開鍵を生成し続けることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:44
msgid ""
"So, when you register, you send (mostly) a public key instead of a password, and the service stores that information\n"
"as WebAuthn credentials for your new user account, and this is what will identify you later."
msgstr "そのため、登録時にはパスワードの代わりに（主に）公開鍵を送信し、サービスはその情報を新しいユーザーアカウントのWebAuthnクレデンシャルとして保存し、これが後にあなたを識別することになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:47
msgid ""
"Then, when you need to log in to that service, instead of typing your password (which doesn't exist, remember?),\n"
"you press a button on the login form, and the browser will ask you to do something, and then it will send\n"
"a signature to your service instead of a password. That signature requires the private key that is derived from\n"
"your authenticator hardware and the target service, and so when your service receives it, it can verify that it\n"
"corresponds to the signature of the public key you stored as credentials."
msgstr "そして、そのサービスにログインする必要があるとき、パスワードを入力する代わりに（これは存在しませんよ）、ログインフォームのボタンを押すと、ブラウザーが何かを尋ねてきて、パスワードの代わりに署名をサービスに送信してくれます。その署名にはあなたの認証ハードウェアと対象サービスから得られる秘密鍵が必要なので、あなたのサービスがそれを受け取ると、それがあなたがクレデンシャルとして保存した公開鍵の署名と一致するかどうかを検証することができるのです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:53
msgid ""
"So, to recap: registration sends a generated public key instead of a password, and login sends a signature for\n"
"that public key, allowing you to verify that the user is who they were when they registered."
msgstr "つまり、まとめると、登録時にはパスワードの代わりに生成した公開鍵を送信し、ログイン時にはその公開鍵に対する署名を送信することで、ユーザーが登録時の人物であることを確認することができるのです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:56
msgid ""
"In practice, it's a little more complex, because there needs to be a handshake with the server before you\n"
"can use the hardware authenticator (ask for a challenge and other things), so there are always two calls to your\n"
"service: one before login or registration, before calling the hardware authenticator, and then the normal\n"
"login or registration."
msgstr "実際にはもう少し複雑で、ハードウェア認証機能を使う前にサーバーとハンドシェイクする必要があるため（チャレンジを求めるなど）、サービスには常に2つの呼び出しがあります。1つはログインや登録の一つ前のハードウェア認証デバイスを呼び出す前、そしてもう1つは通常のログインや登録の時です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:61
msgid "And also there are a lot more fields to store than just a public key, but we will help you with that."
msgstr "また、公開鍵以外にも保存するフィールドはたくさんありますが、それについては私たちがお手伝いします。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:63
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:65
msgid "In this example, we build a very simple microservice which offers four endpoints:"
msgstr "この例では、4つのエンドポイントを提供する、非常にシンプルなマイクロサービスを構築します:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:67
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:68
msgid "`/api/public/me`"
msgstr "`/api/public/me`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:69
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:70
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:72
msgid ""
"The `/api/public` endpoint can be accessed anonymously.\n"
"The `/api/public/me` endpoint can be accessed anonymously and returns the current username if there is one, or `<not logged in>` if not.\n"
"The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n"
"The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr "`/api/public` エンドポイントは匿名でアクセスすることができます。 `/api/public/me` エンドポイントは匿名でアクセスでき、現在のユーザー名がある場合はそのユーザー名を、ない場合は `<not logged in>` を返します。 `/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` のロールを与えられたユーザーのみがアクセスすることができます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に適用しています。 `/api/users/me` のエンドポイントも RBAC (Role-Based Access Control) で保護されており， `user` のロールが付与されたユーザのみがアクセスできるようになっています．レスポンスとして、ユーザーに関する詳細情報を含むJSONドキュメントが返されます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:77
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:79
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:82
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:84
#, fuzzy
msgid "The solution is located in the `security-webauthn-quickstart` link:{quickstarts-tree-url}/security-webauthn-quickstart[directory]."
msgstr "ソリューションは `security-webauthn-quickstart` link:{quickstarts-tree-url}/security-webauthn-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:86
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:88
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:96
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "選択したデータベースコネクタライブラリを追加することを忘れないでください。ここでは、PostgreSQLをIDストアとして使用しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:99
msgid ""
"This command generates a Maven project, importing the `security-webauthn` extension\n"
"which allows you to use WebAuthn to authenticate users."
msgstr "このコマンドは Maven プロジェクトを生成し、WebAuthn を使ってユーザー認証を行うための `security-webauthn` エクステンションをインポートします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:102
msgid ""
"If you already have your Quarkus project configured, you can add the `security-webauthn` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトをすでに設定している場合は、プロジェクトのベースディレクトリで次のコマンドを実行することで、 `security-webauthn` エクステンションをプロジェクトに追加できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:108
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1066
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1075
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:125
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:127
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr "まず、 `/api/public` のエンドポイントを実装することから始めましょう。以下のソースコードからわかるように、これは通常のJakarta RESTリソースに過ぎません:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:161
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:186
msgid ""
"Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.\n"
"We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr "最後に、 `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように、 `user` の役割を持つユーザのみを信頼しています。現在認証されているプリンシパルへのアクセスを得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:211
msgid "Storing our WebAuthn credentials"
msgstr "WebAuthnのクレデンシャルの保存"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:213
msgid ""
"We can now describe how our WebAuthn credentials are stored in our database with three entities. Note that we've\n"
"simplified the model in order to only store one credential per user (who could actually have more than one WebAuthn credential\n"
"and other data such as roles):"
msgstr "これで、WebAuthn クレデンシャルがデータベースにどのように保存されるかを、3 つのエンティティで説明できるようになりました。ユーザー (実際には複数の WebAuthn クレデンシャルとロールなどの他のデータを持つことができます) あたり 1 つのクレデンシャルしか保存しないように、モデルを簡略化したことに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:334
msgid "We also need a second entity for the credentials:"
msgstr "また、クレデンシャルのための第二のエンティティが必要です:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:359
msgid "And last but not least, our user entity:"
msgstr "そして最後に、私たちのユーザー・エンティティーです:"

#. type: Title ====
#: upstream/_versions/main/guides/security-webauthn.adoc:390
msgid "A note about usernames and credential IDs"
msgstr "ユーザー名とクレデンシャルIDに関する注意点"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:392
msgid "WebAuthn relies on a combination of usernames (unique per user) and credential IDs (unique per authenticator device)."
msgstr "WebAuthnは、ユーザー名（ユーザーごとにユニーク）とクレデンシャルID（認証デバイスごとにユニーク）の組み合わせに依存します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:394
msgid "The reasons why there are two such identifiers, and why they are not unique keys for the credentials themselves are:"
msgstr "このように識別子が2つ存在する理由、およびそれらがクレデンシャル自体のユニークキーでない理由は次のとおりです:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:396
msgid ""
"A single user can have more than one authenticator device, which means a single username can map to multiple credential IDs,\n"
"all of which identify the same user."
msgstr "1人のユーザーが複数の認証デバイスを持つことができるため、1つのユーザー名が複数のクレデンシャルIDに対応し、そのすべてが同じユーザーを識別することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:398
msgid ""
"An authenticator device may be shared by multiple users, because a single person may want multiple user accounts with different\n"
"usernames, all of which having the same authenticator device. So a single credential ID may be used by multiple different users."
msgstr "一人の人が異なるユーザー名で複数のユーザーアカウントを持ち、その全員が同じ認証デバイスを持つことができるため、認証デバイスは複数のユーザーで共有されることがあります。そのため、1つのクレデンシャルIDを複数の異なるユーザーが使用することがあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:401
msgid "The combination of username and credential ID should be a unicity constraint for your credentials table, though."
msgstr "ただし、ユーザー名とクレデンシャルIDの組み合わせは、クレデンシャルテーブルのユニーク制約である必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:403
msgid "Exposing your entities to Quarkus WebAuthn"
msgstr "Quarkus WebAuthnにエンティティを公開する"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:405
msgid ""
"You need to define a bean implementing the `WebAuthnUserProvider` in order to allow the Quarkus WebAuthn\n"
"extension to load and store credentials. This is where you tell Quarkus how to turn your data model into the\n"
"WebAuthn security model:"
msgstr "Quarkus WebAuthn エクステンションでクレデンシャルをロードおよび保存できるようにするには、 `WebAuthnUserProvider` を実装する bean を定義する必要があります。ここで、データモデルを WebAuthn セキュリティモデルに変換する方法を Quarkus に指示します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:511
msgid "Writing the HTML application"
msgstr "HTMLアプリケーションの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:513
msgid ""
"We now need to write a web page with links to all our APIs, as well as a way to register a new user, login, and logout,\n"
"in `src/main/resources/META-INF/resources/index.html`:"
msgstr "次に、すべてのAPIへのリンクと、新規ユーザー登録、ログイン、ログアウトを行うためのWebページを `src/main/resources/META-INF/resources/index.html` に記述する必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:640
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:642
msgid "The application is now protected and the identities are provided by our database."
msgstr "アプリケーションは保護され、IDは私たちのデータベースから提供されるようになりました。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:644
msgid "Run your application in dev mode with:"
msgstr "次のようにdevモードでアプリケーションを実行します:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:648
msgid ""
"which will start a PostgreSQL Dev Service container,\n"
"and open http://localhost:8080 in your browser."
msgstr "これで、PostgreSQL Dev Service コンテナが起動します。ブラウザで http://localhost:8080 を開いてください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:651
msgid "Initially, you will have no credentials registered, and no current user:"
msgstr "初期状態では、クレデンシャルが登録されておらず、現在のユーザーもいない状態です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:655
msgid ""
"The current user is displayed on the left, and you can use the top menu to try accessing the public API, which\n"
"should work, while the user and admin APIs will fail and redirect you to the current page."
msgstr "左側に現在のユーザーが表示され、上部メニューで公開APIにアクセスしてみると、うまくいくはずですが、ユーザーAPIとadmin APIは失敗して現在のページにリダイレクトされます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:658
msgid ""
"Start by registering your WebAuthn credentials by entering a username, first and last names on the `Register`\n"
"form on the right, then pressing the `Register` button:"
msgstr "まず、右側の `Register` フォームにユーザー名、氏名を入力し、 `Register` ボタンを押して、WebAuthn のクレデンシャルを登録します:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:663
msgid "Your browser will ask you to activate your WebAuthn authenticator:"
msgstr "ブラウザがWebAuthn認証デバイスを有効にするよう要求します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:667
msgid "You will then be logged in, and can check that the user API is now accessible:"
msgstr "その後、ログインし、ユーザーAPIにアクセスできるようになったことを確認できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:671
msgid "At this stage you can `Logout` and enter your username in the `Login` form:"
msgstr "この段階で、 `Logout` し、 `Login` のフォームにユーザー名を入力することができます:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:675
msgid "Then press the `Login` button, and you will be logged in:"
msgstr "その後、 `Login` ボタンを押せば、ログイン状態になります:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:679
msgid "The admin API is only accessible if you register with the `admin` user name."
msgstr "admin APIは、 `admin` のユーザー名で登録した場合のみアクセス可能です。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:681
msgid "WebAuthn endpoints"
msgstr "WebAuthnのエンドポイント"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:683
msgid "The Quarkus WebAuthn extension comes out of the box with these REST endpoints pre-defined:"
msgstr "Quarkus WebAuthnエクステンションには、これらのRESTエンドポイントがあらかじめ定義されています:"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:685
msgid "Obtain a registration challenge"
msgstr "登録チャレンジの取得"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:687
msgid "`POST /q/webauthn/register`: Set up and obtain a registration challenge"
msgstr "`POST /q/webauthn/register` :登録チャレンジの設定と取得"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:795
msgid "Request"
msgstr "リクエスト"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:746
msgid "Response"
msgstr "レスポンス"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:733
msgid "Obtain a login challenge"
msgstr "ログインチャレンジの取得"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:735
msgid "`POST /q/webauthn/login`: Set up and obtain a login challenge"
msgstr "`POST /q/webauthn/login` :ログインチャレンジのセットアップと取得"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:770
msgid "Trigger a registration"
msgstr "登録をトリガーする"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:772
msgid "`POST /q/webauthn/callback`: Trigger a registration"
msgstr "`POST /q/webauthn/callback` :登録をトリガーします"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:810
msgid "This returns a 204 with no body."
msgstr "これは、ボディを持たない204を返却します"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:790
msgid "Trigger a login"
msgstr "ログインをトリガーする"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:792
msgid "`POST /q/webauthn/callback`: Trigger a login"
msgstr "`POST /q/webauthn/callback` :ログインをトリガーします"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:812
msgid "Logout"
msgstr "ログアウト"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:814
msgid "`GET /q/webauthn/logout`: Logs you out"
msgstr "`GET /q/webauthn/logout` :ログアウトします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:816
msgid "This returns a 302 redirect to the root URI of your application."
msgstr "これは、アプリケーションのルートURIへの302リダイレクトを返します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:818
msgid "WebAuthn JavaScript library"
msgstr "WebAuthn JavaScript ライブラリ"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:820
msgid ""
"Because there's so much JavaScript needed to set WebAuthn up in the browser, the Quarkus WebAuthn extension ships with\n"
"a JavaScript library to help you talk to the WebAuthn endpoints, at `/q/webauthn/webauthn.js`. You can set it up like this:"
msgstr "ブラウザでWebAuthnを設定するには多くのJavaScriptが必要なため、Quarkus WebAuthnエクステンションには、WebAuthnのエンドポイントとの対話を支援するJavaScriptライブラリが同梱されています（ `/q/webauthn/webauthn.js` ）。このように設定することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:837
msgid "Invoke registration"
msgstr "登録の呼出"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:839
msgid ""
"The `webAuthn.register` method invokes the registration challenge endpoint, then calls the authenticator and invokes the callback endpoint\n"
"for that registration, and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object]:"
msgstr "`webAuthn.register` メソッドは、登録チャレンジエンドポイントを呼び出し、次に認証デバイスを呼び出してその登録のためのコールバックエンドポイントを呼び出し、 link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise オブジェクト] を返します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:853
msgid "Invoke login"
msgstr "ログインの呼出"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:855
msgid ""
"The `webAuthn.login` method invokes the login challenge endpoint, then calls the authenticator and invokes the callback endpoint\n"
"for that login, and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object]:"
msgstr "`webAuthn.login` メソッドは、ログインチャレンジのエンドポイントを呼び出し、次に認証デバイスを呼び出してそのログインのコールバックエンドポイントを呼び出し、 link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promiseオブジェクト] を返します。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:869
msgid "Only invoke the registration challenge and authenticator"
msgstr "登録チャレンジと認証デバイスのみを呼出"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:871
msgid ""
"The `webAuthn.registerOnly` method invokes the registration challenge endpoint, then calls the authenticator and returns\n"
"a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object] containing a\n"
"JSON object suitable for being sent to the callback endpoint. You can use that JSON object in order to store the credentials\n"
"in hidden form `input` elements, for example, and send it as part of a regular HTML form:"
msgstr "`webAuthn.registerOnly` メソッドは登録チャレンジのエンドポイントを呼び出し、次に認証ツールを呼び出して、コールバックエンドポイントに送信するのに適した JSON オブジェクトを含む link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise オブジェクトを] 返します。その JSON オブジェクトを使用して、たとえば隠しフォーム `input` 要素にクレデンシャルを格納し、通常の HTML フォームの一部として送信することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/security-webauthn.adoc:892
msgid "Only invoke the login challenge and authenticator"
msgstr "ログインチャレンジと認証デバイスのみを呼出"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:894
msgid ""
"The `webAuthn.loginOnly` method invokes the login challenge endpoint, then calls the authenticator and returns\n"
"a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object] containing a\n"
"JSON object suitable for being sent to the callback endpoint. You can use that JSON object in order to store the credentials\n"
"in hidden form `input` elements, for example, and send it as part of a regular HTML form:"
msgstr "`webAuthn.loginOnly` メソッドはログインチャレンジのエンドポイントを呼び出し、次にオーセンティケータを呼び出して、コールバックエンドポイントに送信するのに適した JSON オブジェクトを含む link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise オブジェクトを] 返します。その JSON オブジェクトを使用して、たとえば隠しフォーム `input` 要素にクレデンシャルを格納したり、通常の HTML フォームの一部として送信したりすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:917
msgid "Handling login and registration endpoints yourself"
msgstr "ログインと登録のエンドポイントを自分でハンドリングする"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:919
msgid ""
"Sometimes, you will want to ask for more data than just a username in order to register a user,\n"
"or you want to deal with login and registration with custom validation, and so the WebAuthn callback\n"
"endpoint is not enough."
msgstr "時には、ユーザーを登録するためにユーザー名以外のデータを要求したり、カスタムバリデーションでログインや登録を処理したいので、WebAuthnコールバックエンドポイントでは十分でないことがあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:923
msgid ""
"In this case, you can use the `WebAuthn.loginOnly` and `WebAuthn.registerOnly` methods from the JavaScript\n"
"library, store the authenticator data in hidden form elements, and send them as part of your form payload\n"
"to the server to your custom login or registration endpoints."
msgstr "この場合、JavaScript ライブラリの `WebAuthn.loginOnly` と `WebAuthn.registerOnly` メソッドを使用し、認証データを hidden フォーム要素に格納し、フォームペイロードの一部としてサーバーに送信し、カスタムログインまたは登録エンドポイントに送信することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:927
msgid ""
"If you are storing them in form input elements, you can then use the `WebAuthnLoginResponse` and\n"
"`WebAuthnRegistrationResponse` classes, mark them as `@BeanParam` and then use the `WebAuthnSecurity.login`\n"
"and `WebAuthnSecurity.register` methods. For example, here's how you can handle a custom login and register:"
msgstr "フォームの入力要素に格納する場合は、 `WebAuthnLoginResponse` と `WebAuthnRegistrationResponse` クラスを使用し、 `@BeanParam` としてマークし、 `WebAuthnSecurity.login` と `WebAuthnSecurity.register` のメソッドを使用します。例えば、カスタムログインとカスタム登録を処理する方法は以下のとおりです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1046
msgid ""
"The `WebAuthnSecurity` methods do not set or read the user cookie, so you will have to take care\n"
"of it yourself, but it allows you to use other means of storing the user, such as JWT. You can use the\n"
"`rememberUser(String userName, RoutingContext ctx)` and `logout(RoutingContext ctx)` methods on the same\n"
"`WebAuthnSecurity` class if you want to manually set up login cookies."
msgstr " `WebAuthnSecurity` のメソッドはユーザークッキーを設定したり読み込んだりしないので、自分で対処する必要がありますが、JWT などのユーザーを保存する他の手段を使用することができます。手動でログインクッキーを設定したい場合は、同じ `WebAuthnSecurity` クラスの `rememberUser(String userName, RoutingContext ctx)` と `logout(RoutingContext ctx)` のメソッドを使用することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1051
msgid "Blocking version"
msgstr "ブロッキング版"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1053
msgid ""
"If you're using a blocking data access to the database, you can safely block on the `WebAuthnSecurity` methods,\n"
"with `.await().indefinitely()`, because nothing is async in the `register` and `login` methods, besides the\n"
"data access with your `WebAuthnUserProvider`."
msgstr "`WebAuthnSecurity` データベースへのデータアクセスにブロックを使っている場合、 `register` と `login` のメソッドでは、 `WebAuthnUserProvider` のデータアクセス以外に非同期なものはないので、 `.await().indefinitely()` のメソッドで、安全にブロックをすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1057
msgid ""
"You will have to add the `@Blocking` annotation on your `WebAuthnUserProvider` class in order to tell the\n"
"Quarkus WebAuthn endpoints to defer those calls to the worker pool."
msgstr "Quarkus WebAuthnエンドポイントに、これらの呼び出しをワーカープールに委ねるように指示するために、 `@Blocking` アノテーションを `WebAuthnUserProvider` クラスに追加する必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1060
msgid "Testing WebAuthn"
msgstr "WebAuthnのテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1062
msgid ""
"Testing WebAuthn can be complicated because normally you need a hardware token, which is why we've made the\n"
"`quarkus-test-security-webauthn` helper library:"
msgstr "通常、ハードウェアトークンが必要なため、WebAuthn のテストは複雑です。そのため、私たちは `quarkus-test-security-webauthn` というヘルパーライブラリを作りました。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1080
msgid ""
"With this, you can use `WebAuthnHardware` to emulate an authenticator token, as well as the\n"
"`WebAuthnEndpointHelper` helper methods in order to invoke the WebAuthn endpoints, or even fill your form\n"
"data for custom endpoints:"
msgstr "これを使うと、 `WebAuthnHardware` を使って認証トークンをエミュレートしたり、WebAuthn のエンドポイントを呼び出すために `WebAuthnEndpointHelper` ヘルパーメソッドを使ったり、カスタムエンドポイントのためにフォームデータを埋めたりすることができるようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1271
msgid ""
"For this test, since we're testing both the provided callback endpoint, which updates users\n"
"in its `WebAuthnUserProvider` and the manual `LoginResource` endpoint, which deals with users\n"
"manually, we need to override the `WebAuthnUserProvider` with one that doesn't update the\n"
"`scooby` user:"
msgstr "このテストでは、その `WebAuthnUserProvider` のユーザーを更新する提供されたコールバックエンドポイントと、ユーザーを処理する自作した `LoginResource` エンドポイントの両方をテストしているので、 `WebAuthnUserProvider` を `scooby` ユーザーを更新しないものに上書きする必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1303
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_versions/main/guides/security-webauthn.adoc:1307
msgid "References"
msgstr "参照"

#. type: Plain Text
#: upstream/_versions/main/guides/security-webauthn.adoc:1309
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
