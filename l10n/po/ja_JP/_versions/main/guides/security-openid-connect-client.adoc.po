msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:6
msgid "OpenID Connect Client and Token Propagation Quickstart"
msgstr "OpenID Connect Client と Token Propagation のクイックスタート"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:11
msgid "This quickstart demonstrates how to use `OpenID Connect Client Reactive Filter` to acquire and propagate access tokens as `HTTP Authorization Bearer` access tokens, alongside `OpenID Token Propagation Reactive Filter` which propagates the incoming `HTTP Authorization Bearer` access tokens."
msgstr "このクイックスタートでは、`OpenID Connect Client Reactive Filter` を使用して、アクセストークンを `HTTP Authorization Bearer` アクセストークンとして取得および伝播する方法と、受信した `HTTP Authorization Bearer` アクセストークンを伝播する `OpenID Token Propagation Reactive Filter` を使用する方法を示します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:13
msgid "Please check xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide] for all the information related to `Oidc Client` and `Token Propagation` support in Quarkus."
msgstr "Quarkus の `Oidc Client` および `Token Propagation` のサポートに関する詳細は、xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド] を参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:15
msgid "Please also read xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、 xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン] 認証ガイドもお読みください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:17
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:20
#, fuzzy
msgid ""
"link:{includes}/prerequisites.adoc[role=include]\n"
"* https://stedolan.github.io/jq/[jq tool]"
msgstr "{includes}/prerequisites.adoc * link:https://stedolan.github.io/jq/[jqツール]"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:23
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:25
msgid "In this example, we will build an application which consists of two Jakarta REST resources, `FrontendResource` and `ProtectedResource`. `FrontendResource` propagates access tokens to `ProtectedResource` and uses either `OpenID Connect Client Reactive Filter` to acquire a token first before propagating it or `OpenID Token Propagation Reactive Filter` to propagate the incoming, already existing access token."
msgstr "この例では、 `FrontendResource` と `ProtectedResource` という2つの Jakarta REST リソースからなるアプリケーションを構築します。 `FrontendResource` はアクセストークンを `ProtectedResource` に伝播し、伝播前にまずトークンを取得するために `OpenID Connect Client Reactive Filter` を使用するか、受信した既に存在するアクセストークンを伝播するために `OpenID Token Propagation Reactive Filter` のいずれかを使用しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:27
msgid "`FrontendResource` has 4 endpoints:"
msgstr "`FrontendResource` には 4 つのエンドポイントがあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:29
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr "`/frontend/user-name-with-oidc-client-token`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:30
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr "`/frontend/admin-name-with-oidc-client-token`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:31
msgid "`/frontend/user-name-with-propagated-token`"
msgstr "`/frontend/user-name-with-propagated-token`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:32
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr "`/frontend/admin-name-with-propagated-token`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:267
msgid "`FrontendResource` will use REST Client with `OpenID Connect Client Reactive Filter` to acquire and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called. And it will use REST Client with `OpenID Connect Token Propagation Reactive Filter` to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr "`FrontendResource` は、`/frontend/user-name-with-oidc-client` または `/frontend/admin-name-with-oidc-client` が呼び出された場合、REST Client と `OpenID Connect Client Reactive Filter` を使用して、`ProtectedResource` へのアクセストークンを取得および伝播します。また、`/frontend/user-name-with-propagated-token` もしくは `/frontend/admin-name-with-propagated-token` が呼び出されると、REST Client と `OpenID Connect Token Propagation Reactive Filter` を使用して、`ProtectedResource` への現在の受信アクセストークンを伝播します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:36
msgid "`ProtecedResource` has 2 endpoints:"
msgstr "`ProtecedResource` には 2 つのエンドポイントがあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:38
msgid "`/protected/user-name`"
msgstr "`/protected/user-name`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:39
msgid "`/protected/admin-name`"
msgstr "`/protected/admin-name`"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:41
msgid "Both of these endpoints return the username extracted from the incoming access token which was propagated to `ProtectedResource` from `FrontendResource`. The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr "これらのエンドポイントはどちらも、`FrontendResource` から `ProtectedResource` に伝搬された受信アクセストークンから抽出したユーザー名を返します。これらのエンドポイントの唯一の違いは、`/protected/user-name` の呼び出しは、現在のアクセストークンが `user` ロールを持つ場合にのみ許可され、`/protected/admin-name` の呼び出しは、現在のアクセストークンが `admin` ロールを持つ場合のみ許可されることです。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:43
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:45
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:48
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:50
#, fuzzy
msgid "The solution is located in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:52
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:54
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:58
msgid "link:{includes}/devtools/create-app.adoc[role=include]"
msgstr "link:{includes}/devtools/create-app.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:60
msgid "This command generates a Maven project, importing the `oidc`, `oidc-client-reactive-filter`, `oidc-token-propagation-reactive-filter` and `resteasy-reactive` extensions."
msgstr "このコマンドは、`oidc`、`oidc-client-reactive-filter`、`oidc-token-propagation-reactive-filter` 、`resteasy-reactive` エクステンションをインポートして Maven プロジェクトを生成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:62
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトにこれらのエクステンションを追加できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:65
msgid "link:{includes}/devtools/extension-add.adoc[role=include]"
msgstr "link:{includes}/devtools/extension-add.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:67
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:70
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:91
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:96
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:98
msgid "Let's start by implementing `ProtectedResource`:"
msgstr "まずは `ProtectedResource` を実装することから始めましょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:140
msgid "As you can see `ProtectedResource` returns a name from both `userName()` and `adminName()` methods. The name is extracted from the current `JsonWebToken`."
msgstr "ご覧のとおり、`ProtectedResource` は `userName()` と `adminName()` の両方のメソッドから名前を返します。この名前は、現在の `JsonWebToken` から抽出されたものです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:142
msgid "Next let's add a REST Client with `OidcClientRequestReactiveFilter` and another REST Client with `AccessTokenRequestReactiveFilter`. `FrontendResource` will use these two clients to call `ProtectedResource`:"
msgstr "次に、 `OidcClientRequestReactiveFilter` のRESTクライアントと、 `AccessTokenRequestReactiveFilter` のRESTクライアントを追加しましょう。 `FrontendResource` は、この2つのクライアントを使用して、 `ProtectedResource` を呼び出します："

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:175
msgid "where `RestClientWithOidcClientFilter` will depend on `OidcClientRequestReactiveFilter` to acquire and propagate the tokens and"
msgstr "`RestClientWithOidcClientFilter` では、 `OidcClientRequestReactiveFilter` に依存して、トークンを獲得し、伝播させ、"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:208
msgid "where `RestClientWithTokenPropagationFilter` will depend on `AccessTokenRequestReactiveFilter` to propagate the incoming, already existing tokens."
msgstr "`RestClientWithTokenPropagationFilter` では `AccessTokenRequestReactiveFilter` に依存して、着信した、すでに存在するトークンを伝播させることになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:210
msgid "Note that both `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces are identical - the reason behind it is that combining `OidcClientRequestReactiveFilter` and `AccessTokenRequestReactiveFilter` on the same REST Client will cause side effects as both filters can interfere with other, for example, `OidcClientRequestReactiveFilter` may override the token propagated by `AccessTokenRequestReactiveFilter` or `AccessTokenRequestReactiveFilter` can fail if it is called when no token is available to propagate and `OidcClientRequestReactiveFilter` is expected to acquire a new token instead."
msgstr "`RestClientWithOidcClientFilter` と `RestClientWithTokenPropagationFilter` の両方のインターフェースが同一であることに注意してください。その理由は、同じ REST Client で `OidcClientRequestReactiveFilter` と `AccessTokenRequestReactiveFilter` を組み合わせると、両方のフィルターが互いに干渉し合って副作用が発生するからです、 例えば、 `OidcClientRequestReactiveFilter` は `AccessTokenRequestReactiveFilter` によって伝播されたトークンを上書きするかもしれませんし、 `AccessTokenRequestReactiveFilter` は伝播できるトークンがないときに呼ばれると失敗するかもしれませんが、代わりに `OidcClientRequestReactiveFilter` には新しいトークンを取得することが期待されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:212
msgid "Now let's complete creating the application with adding `FrontendResource`:"
msgstr "それでは、`FrontendResource` を追加して、アプリケーションの作成を完了しましょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:269
msgid "Finally, let's add a Jakarta REST `ExceptionMapper`:"
msgstr "最後に、Jakarta REST `ExceptionMapper` を追加しましょう:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:292
msgid "This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role. Without this mapper `RESTEasy Reactive` will correctly convert the exceptions which will escape from REST Client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource` but in the tests it will not be possible to assert that `500` is in fact caused by an authorization exception as opposed to some internal error."
msgstr "この例外マッパーは、トークンに期待されるロールがない場合に `ProtectedResource` が 403 を返すことをテスト中に検証するためにのみ追加されます。このマッパーがないと、`RESTEasy Reactive` は、REST クライアント呼び出しからエスケープされる例外を `500` に正しく変換して、`ProtectedResource` などのダウンストリームリソースからの情報漏えいを回避しますが、テストでは `500` が実際は内部エラーではなく、認可例外が原因であることをアサートすることはできません。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:294
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:296
msgid "We have prepared the code, and now let's configure the application:"
msgstr "コードの準備ができたので、次はアプリケーションを設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:330
msgid "This configuration references Keycloak which will be used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` using a `password` grant. Both RESTClients point to `ProtectedResource`'s HTTP address."
msgstr "この設定は Keycloak を参照します。この Keycloak は、受信アクセストークンを検証するために `ProtectedResource` によって使用され、`password` グラントを使用してユーザー `alice` のトークンを取得するために `OidcClient` によって使用されます。どちらの RESTClient も `ProtectedResource` の HTTP アドレスを指しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:332
msgid "Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` will launch a container for you when the application is run in dev or test modes. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information."
msgstr "`quarkus.oidc.auth-server-url` に `%prod.` プロファイルプレフィックスを追加することで、アプリケーションを dev または test モードで実行する際に、 `Dev Services for Keycloak` がコンテナを起動するようになります。詳しくは、以下の xref:keycloak-dev-mode[Devモードでアプリケーションを実行] セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:334
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:336
#, fuzzy
msgid "Do not start the Keycloak server when you run the application in dev mode or test modes - `Dev Services for Keycloak` will launch a container. See xref:keycloak-dev-mode[Running the Application in Dev mode] section below for more information. Make sure to put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath (`target/classes` directory) so that it gets imported automatically when running in dev mode - unless you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution] in which case this realm file will be added to the classpath during the build."
msgstr "開発モードまたはテストモードでアプリケーションを実行するときは、Keycloakサーバーを起動しないでください - `Dev Services for Keycloak` はコンテナを起動します。詳細については、以下の「開発モードでアプリケーションを xref:keycloak-dev-mode[実行] する」のセクションを参照してください。開発モードで実行するときに自動的にインポートされるように、 link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm設定ファイルを] クラスパス( `target/classes` ディレクトリ)に置くようにしてください - すでに link:{quickstarts-tree-url}/security-openid-connect-quickstart[完全なソリューションを] ビルドしている場合を除き、このrealmファイルはビルド中にクラスパスに追加されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:338
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:345
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、`keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:347
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:349
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:351
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[レルム設定] ファイルをインポートして新しいレルムを作成します。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいrealmを作成] する方法についてKeycloakのドキュメントを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:353
msgid "This `quarkus` realm file will add a `frontend` client, and `alice` and `admin` users. `alice` has a `user` role, `admin` - both `user` and `admin` roles."
msgstr "この `quarkus` レルムファイルでは、`frontend` クライアントと、`alice` および `admin` ユーザーが追加されます。`alice` は `user` ロールを持ち、`admin` は `user` と `admin` の両方のロールを持ちます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:356
msgid "Running the Application in Dev mode"
msgstr "開発モードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:358
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:360
msgid "link:{includes}/devtools/dev.adoc[role=include]"
msgstr "link:{includes}/devtools/dev.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:362
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] will launch a Keycloak container and import a `quarkus-realm.json`."
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] は、Keycloak コンテナーを起動し、`quarkus-realm.json` をインポートします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:364
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-v1[/q/dev-v1] and click on a `Provider: Keycloak` link in an `OpenID Connect` `Dev UI` card."
msgstr "link:http://localhost:8080/q/dev-v1[q/dev-v1] で利用できる xref:dev-ui.adoc[Dev UI] を開き、 `OpenID Connect` `Dev UI` カードの `Provider: Keycloak` リンクをクリックします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:366
msgid "You will be asked to log in into a `Single Page Application` provided by `OpenID Connect Dev UI`:"
msgstr "`OpenID Connect Dev UI` が提供する `Single Page Application` へのログインを求められます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:368
msgid "Login as `alice` (password: `alice`) who has a `user` role"
msgstr "`user` のロールを持つ `alice` (パスワード: `alice`) としてログインします"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:372
msgid "accessing `/frontend/user-name-with-propagated-token` will return `200`"
msgstr "`/frontend/user-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:370
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `403`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `403` が返されます"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:371
msgid "Logout and login as `admin` (password: `admin`) who has both `admin` and `user` roles"
msgstr "ログアウトし、`admin` と `user` ロールの両方を持つ `admin` (パスワード: `admin`) としててログインします"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:373
msgid "accessing `/frontend/admin-name-with-propagated-token` will return `200`"
msgstr "`/frontend/admin-name-with-propagated-token` にアクセスすると `200` が返されます"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:375
msgid "In this case you are testing that `FrontendResource` can propagate the access tokens acquired by `OpenID Connect Dev UI`."
msgstr "この場合、`FrontendResource` が `OpenID Connect Dev UI` により取得されたアクセストークンを伝搬できるかどうかをテストしています。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:377
msgid "Running the Application in JVM mode"
msgstr "JVM モードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:379
msgid "When you're done playing with the `dev` mode\" you can run it as a standard Java application."
msgstr "「`dev` モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:381
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:383
msgid "link:{includes}/devtools/build.adoc[role=include]"
msgstr "link:{includes}/devtools/build.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:385
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:392
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:394
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:396
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:400
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the `native` profile:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:403
msgid "link:{includes}/devtools/build-native.adoc[role=include]"
msgstr "link:{includes}/devtools/build-native.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:405
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:412
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:414
msgid "See xref:keycloak-dev-mode[Running the Application in Dev mode] section above about testing your application in dev mode."
msgstr "devモードでのアプリケーションのテストについては、上記の xref:keycloak-dev-mode[Devモードでのアプリケーションの実行] セクションを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:416
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr "`curl` を使用して、JVM またはネイティブモードで起動したアプリケーションをテストできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:418
msgid "Obtain an access token for `alice`:"
msgstr "`alice` のアクセストークンを取得します:"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:430
msgid "Now use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:439
msgid "will return `200` status code and the name `alice` while"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:448
msgid "will return `403` - recall that `alice` only has a `user` role."
msgstr "`403` を返します - `alice` には `user` ロールしかないことを思い出してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:450
msgid "Next obtain an access token for `admin`:"
msgstr "次に `admin` 用のアクセストークンを取得します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:462
msgid "and use this token to call `/frontend/user-name-with-propagated-token` and `/frontend/admin-name-with-propagated-token`:"
msgstr "このトークンを使用して、`/frontend/user-name-with-propagated-token` と `/frontend/admin-name-with-propagated-token` を呼び出します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:471
msgid "will return `200` status code and the name `admin`, and"
msgstr "ステータスコード `200` と名前 `alice` を返します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:480
msgid "will also return `200` status code and the name `admin`, as `admin` has both `user` and `admin` roles."
msgstr "`admin` には `user` ロールと `admin` ロールの両方があるため、`200` ステータスコードと名前 `admin` を返します。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:483
msgid "Now let's check `FrontendResource` methods which do not propagate the existing tokens but use `OidcClient` to acquire and propagate the tokens. You have seen that `OidcClient` is configured to acquire the tokens for the `alice` user, so:"
msgstr "ここで、既存のトークンは伝播しないが、`OidcClient` を使用してトークンを取得および伝播する `FrontendResource` メソッドを見てみましょう。`OidcClient` は `alice` ユーザーのトークンを取得するように設定されています。"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:491
msgid "will return `200` status code and the name `alice`, but"
msgstr "ステータスコード `200` と名前 `alice` を返します"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:499
msgid "will return `403` status code."
msgstr "ステータスコード `403` を返します。"

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:501
msgid "References"
msgstr "リファレンス"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:503
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client と Token Propagation のリファレンスガイド]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:504
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#. type: Plain Text
#: upstream/_versions/main/guides/security-openid-connect-client.adoc:505
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
