msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/rest-client-reactive.adoc:6
msgid "Using the REST Client"
msgstr "REST クライアントの利用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:11
msgid ""
"This guide explains how to use the REST Client Reactive in order to interact with REST APIs.\n"
"REST Client Reactive is the REST Client implementation compatible with RESTEasy Reactive."
msgstr "このガイドでは、REST Client Reactiveを使用して REST API と対話する方法について説明します。REST Client Reactiveは、RESTEasy Reactive と互換性のある REST クライアント実装です。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:14
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive]\n"
"for the server part."
msgstr "アプリケーションがクライアントを使用し、REST エンドポイントを公開する場合は、サーバー部分に xref:resteasy-reactive.adoc[RESTEasy Reactive] を使用してください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:17
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:21
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:23
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:26
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:28
#, fuzzy
msgid "The solution is located in the `rest-client-reactive-quickstart` link:{quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr "ソリューションは `rest-client-reactive-quickstart` link:{quickstarts-tree-url}/rest-client-reactive-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:30
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:32
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:38
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:40
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr "REST サーバーサポート用の `resteasy-reactive-jackson` エクステンション。ジャクソンを使用したくない場合は、代わりに `resteasy-reactive` を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:41
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr "REST クライアントサポート用の `rest-client-reactive-jackson` エクステンション。Jackson を使用したくない場合は、代わりに `rest-client-reactive` を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:43
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `rest-client-reactive-jackson` エクステンションを追加することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:49
msgid "This will add the following to your build file:"
msgstr "これにより、`pom.xml` に以下が追加されます:"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1506
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1516
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:66
msgid "Setting up the model"
msgstr "モデルの設定"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:68
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供する REST API の一部を利用する方法をデモします。まず最初に、使用するモデルを `Extension` POJO の形式でセットアップします。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:71
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:89
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:91
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:93
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "REST Client Reactive の使用方法は、適切な Jakarta REST と MicroProfile アノテーションを使用してインターフェースを作成するだけで十分です。この場合、インターフェースは `src/main/java/org/acme/rest/client/ExtensionsService.java` で作成し、以下の内容を持つ必要があります:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:115
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:117
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:119
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:121
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr "`@Path` と `@GET` 、 `@QueryParam` は、サービスへのアクセス方法を定義するために使用される標準的な Jakarta REST アノテーションです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:125
msgid ""
"When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr "`quarkus-rest-client-reactive-jackson` エクステンションがインストールされている場合、メディアタイプが `@Produces` または `@Consumes` アノテーションによって明示的に設定されていない限り、Quarkus はデフォルトでほとんどの戻り値に `application/json` メディアタイプを使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:128
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr "JSONのデフォルトに依存しない場合は、エンドポイントに `@Produces` と `@Consumes` のアノテーションを付けて、期待されるcontent-typesを正確に定義することが強く推奨されています。これにより、ネイティブ実行可能ファイルに含まれる Jakarta REST プロバイダー（コンバーターと見なすことができます）の数を減らすことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:134
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The xref:async-support[Async Support] section describes how to make non-blocking calls."
msgstr "上記の `getById` メソッドは、ブロッキング呼び出しです。イベントループ上で呼び出してはいけません。 xref:async-support[非同期サポート] の項では、ノンブロッキング呼び出しの方法について説明しています。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:138
msgid "Query Parameters"
msgstr "クエリーパラメーター"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:140
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr "クエリーパラメーターを指定する最も簡単な方法は、クライアントメソッドのパラメーターに `@QueryParam` または `@RestQuery` というアノテーションを付けることです。 `@RestQuery` は `@QueryParam` と同等ですが、名前を省略することができます。さらに、クエリーパラメーターを `Map` として渡すこともでき、事前にパラメーターがわからない場合に便利です。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:176
msgid "Request query will include parameter with key `name`"
msgstr "リクエストクエリーには `name` をキーとするパラメーターが含まれます"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:177
msgid "Each `Map` entry represents exactly one query parameter"
msgstr "各 `Map` エントリは、ちょうど 1 つのクエリーパラメーターを表します"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:178
msgid "`MultivaluedMap` allows you to send array values"
msgstr "`MultivaluedMap` は配列の値を送信することができます"

#. type: Title ====
#: upstream/_versions/main/guides/rest-client-reactive.adoc:180
msgid "Using @ClientQueryParam"
msgstr "@ClientQueryParam を使用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:182
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr "リクエストにクエリパラメータを追加するもうひとつの方法は、 REST クライアントインターフェースあるいはそのインターフェースの特定のメソッドに `@io.quarkus.rest.client.reactive.ClientQueryParam` を使用することです。アノテーションではクエリパラメータ名を指定し、 値は定数や設定プロパティ、あるいはメソッドの起動時に決定できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:185
msgid "The following example shows the various possible usages:"
msgstr "次の例では、さまざまな使い方を紹介します："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:211
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr " `@ClientQueryParam` をインターフェイスに付与することで、クライアントのすべてのリクエストに `my-param` が追加されることを保証しています。 なぜなら、`${…​}` 構文を使用したため、パラメータの実際の値は `my.property-value` 設定プロパティを使用して取得されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:213
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr "`getWithOtherParam` を呼び出すと、クエリーパラメータ `my-param` に加え、 `some-other-param` に `other` の値が追加されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:214
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr "`getFromMethod` を呼び出すと、 `my-param` のクエリパラメータに加えて、 `param-from-method` に `test` の値 ( `withParam` のメソッドが `param-from-method` と呼び出されたときに返すため) が追加されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:218
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr "インターフェースメソッドに `@QueryParam` のアノテーションが付いた引数がある場合、その引数は `@ClientQueryParam` のアノテーションで指定されたものよりも優先されることに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:222
#, fuzzy
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`]."
msgstr "このアノテーションについての詳細は link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[@ClientQueryParam] ."

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:224
#, fuzzy
msgid "Form Parameters"
msgstr "フォームパラメータ"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:226
#, fuzzy
msgid "Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:"
msgstr "フォーム・パラメータは、 `@RestForm` （または `@FormParam` ）アノテーションを使って指定することができます："

#. type: Title ====
#: upstream/_versions/main/guides/rest-client-reactive.adoc:266
#, fuzzy
msgid "Using @ClientFormParam"
msgstr "ClientFormParamの使用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:268
#, fuzzy
msgid "Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:"
msgstr "フォーム・パラメータは `@ClientQueryParam` と同様に `@ClientFormParam` を使って指定することもできる："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:297
#, fuzzy
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`]."
msgstr "このアノテーションについての詳細は link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[@ClientFormParam] ."

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:299
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:301
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr "GET リクエストにパスパラメーターが必要な場合は、`@QueryParam` の代わりに (あるいは加えて) `@PathParam (\"parameter-name\")` アノテーションを使用することができます。パスパラメーターとクエリーパラメーターは、必要に応じて以下の例のように組み合わせることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:327
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:329
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:338
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr "この設定を行うと、`org.acme.rest.client.ExtensionsService` を使用して実行されるすべてのリクエストは、ベース URL として `https://stage.code.quarkus.io/api` を使用することを意味します。上記の設定を使用すると、`ExtensionsService` の `getById` メソッドを `io.quarkus:quarkus-rest-client-reactive` という値で呼び出すと、`https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive` に HTTP GET リクエストが行われることになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:341
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:343
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、`@RegisterRestClient` `configKey` プロパティーを使用して、インターフェイスの完全修飾名とは別の設定ルートを使用することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:361
msgid "Disabling Hostname Verification"
msgstr "ホスト名の検証の無効化"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:363
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "特定の REST クライアントの SSL ホスト名検証を無効にするには、以下の内容を設定に追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:371
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "この設定は、SSLホスト名検証を無効にするため、本番運用では使用しないでください。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:374
msgid "HTTP/2 Support"
msgstr "HTTP/2 サポート"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:376
msgid "HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:"
msgstr "REST Clientでは、HTTP/2はデフォルトで無効になっています。有効にしたい場合は、次のように設定することができます:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:386
msgid "Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:"
msgstr "または、Application-Layer Protocol Negotiation (alpn) TLSエクステンションを有効にすると、クライアントは、サーバーが互換性のあるものよりも、どのHTTPバージョンを使用するかをネゴシエートすることができます。デフォルトでは、まずHTTP/2を使用しようとし、有効になっていない場合はHTTP/1.1を使用します。有効にしたい場合は、以下のように設定します:"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:395
msgid "Create the Jakarta REST resource"
msgstr "Jakarta RESTリソースの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:397
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを作成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:425
msgid "There are two interesting parts in this listing:"
msgstr "このリストには 2 つの興味深い部分があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:427
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "クライアントスタブには、通常の CDI `@Inject` ではなく、`@RestClient` アノテーションが挿入されます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:429
msgid "Programmatic client creation with QuarkusRestClientBuilder"
msgstr "QuarkusRestClientBuilderを使用したプログラムによるクライアントの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:431
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with the `QuarkusRestClientBuilder`."
msgstr "クライアントに `@RegisterRestClient` アノテーションを付け、クライアントを `@RestClient` で注入する代わりに、プログラムで REST クライアントを作成することもできます。これは `RestClientBuilder` で行います。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:435
msgid "With this approach the client interface could look as follows:"
msgstr "このアプローチでは、クライアントインターフェイスは次のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:454
msgid "And the service as follows:"
msgstr "そして、次のようなサービス:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:487
#, fuzzy
msgid "The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:"
msgstr "`QuarkusRestClientBuilder` インターフェースは、追加の設定オプションを持つクライアントをプログラムで作成するための Quarkus 固有の API です。それ以外の場合は、Microprofile APIから `RestClientBuilder` インターフェースを使用することもできます："

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:517
msgid "Use Custom HTTP Options"
msgstr "カスタムHTTPオプションの使用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:519
msgid "The REST Client Reactive internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client Reactive extensions allows configuring some settings via properties, for example:"
msgstr "REST Client Reactive は、内部的に https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[Vert.x HTTP クライアント] を使用して、ネットワーク接続をします。REST Client Reactiveのエクステンションでは、プロパティを使っていくつか設定できます。例えば、"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:521
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr "`quarkus.rest-client.client-prefix.connect-timeout` で、接続タイムアウトをミリ秒単位で設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:522
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr "`quarkus.rest-client.client-prefix.max-redirects`でリダイレクトの回数を制限できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:524
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr "しかし、Vert.x HTTP Client 内には、接続を設定するための多くのオプションがあります。 https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[このリンク] のVert.x HTTP Client Options API ですべてのオプションを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:526
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client Reactive is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr "REST Client Reactive が内部で使用している Vert.x HTTP Client インスタンスを完全にカスタマイズするには、 カスタム HTTP Client Options インスタンスを CDI 経由またはプログラムによるクライアント作成時に変更できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:528
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr "ここでは、CDIを使用してHTTPクライアントオプションを提供する方法について、例を挙げて説明します："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:552
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr "これで、すべてのRESTクライアントが、あなたのカスタムHTTPクライアントオプションを使用するようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:554
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr "もう一つの方法は、コードを用いてでクライアントを作成する際に、カスタムHTTPクライアントオプションを提供することです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:588
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr "クライアントはCDI経由で提供されたHTTPクライアントオプションよりも、登録されたHTTPクライアントオプションを使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:591
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:593
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the \"follow-redirects\" property:"
msgstr "HTTPサーバーは、ステータスコードが \"3 \"で始まるレスポンスと、リダイレクト先のURLを保持するHTTPヘッダー \"Location\" を送信することで、レスポンスを別の場所にリダイレクトできます。RESTクライアントがHTTPサーバーからリダイレクトレスポンスを受信しても、新しい場所への再リクエストを自動的に実行することはありません。\"follow-redirects\"プロパティを追加することで、REST Clientで自動リダイレクトを有効にすることができます:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:595
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr "`quarkus.rest-client.follow-redirects` で、すべてのRESTクライアントに対してリダイレクトが有効になります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:596
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr "`quarkus.rest-client.<client-prefix>.follow-redirects` で、特定のRESTクライアントに対するリダイレクトを有効にすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:598
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr "このプロパティがtrueの場合、REST Clientは、HTTPサーバーからリダイレクトレスポンスを受信すると、新しいリクエストを実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:600
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr "さらに、プロパティ \"max-redirects\" を使って、リダイレクトの回数を制限することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:602
#, fuzzy
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client."
msgstr "link:https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616の] 仕様によると、デフォルトではGETまたはHEADメソッドに対してのみリダイレクトが行われることに注意してください。しかし、REST Clientでは、 `@ClientRedirectHandler` アノテーション、CDI、またはクライアント作成時のプログラムによって、POSTやPUTメソッドのリダイレクトを有効にしたり、より複雑なロジックに従ったりするためのカスタムリダイレクトハンドラを提供することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:604
#, fuzzy
msgid "Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:"
msgstr "`@ClientRedirectHandler` アノテーションを使用して、独自のリダイレクトハンドラを登録する方法を例として見てみましょう："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:625
#, fuzzy
msgid "The \"alwaysRedirect\" redirect handler will only be used by the specified REST Client which in this example is the \"ExtensionsService\" client."
msgstr "alwaysRedirect」リダイレクトハンドラーは、指定したRESTクライアント（この例では「ExtensionsService」クライアント）のみで使用されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:627
#, fuzzy
msgid "Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:"
msgstr "また、CDI経由ですべてのRESTクライアントにカスタムリダイレクトハンドラを提供することも可能です："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:653
#, fuzzy
msgid "Now, all the REST Clients will be using your custom redirect handler."
msgstr "これで、すべてのRESTクライアントが、カスタムリダイレクトハンドラを使用するようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:655
#, fuzzy
msgid "Another approach is to provide it programmatically when creating the client:"
msgstr "また、クライアントを作成する際にプログラムで提供する方法もあります："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:675
#, fuzzy
msgid "the client will use the registered redirect handler over the redirect handler provided via CDI if any."
msgstr "の場合、クライアントはCDI経由で提供されたリダイレクトハンドラーよりも登録されたリダイレクトハンドラーを使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:677
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:679
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr "次に、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。`src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、テストの内容を以下のように変更します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:714
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上記のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:718
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:720
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "クライアントのリアクティブな性質を最大限に活用するには、REST Client Reactive エクステンションのノンブロッキングフレーバーを使用するとよいでしょう。このエクステンションは `CompletionStage` と `Uni` をサポートしています。それでは、実際に `ExtensionsService` REST インターフェイスに `getByIdAsync` メソッドを追加して、この動きを見てみましょう。コードは以下のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:748
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:782
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:resteasy-reactive.adoc#execution-model[Resteasy reactive execution model] for more details."
msgstr "呼び出しがノンブロッキングになったので、 `idAsync` メソッドがイベントループで呼び出されることに注意してください。つまり、ワーカープールのスレッドにオフロードされないので、ハードウェアリソースの使用量を減らすことができます。詳細は xref:resteasy-reactive.adoc#実行モデルブロッキング非ブロッキング[Resteasy reactive 実行モデル、ブロッキング、非ブロッキング] を参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:787
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:804
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:829
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:860
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:862
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:866
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:880
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、再試行のためにサービスのメソッドを呼び出す必要があります。この違いは、 Mutiny とそのサブスクリプションプロトコルの lazy (遅延) 性の側面から来ています。これについての詳細は link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[Mutiny の ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:884
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:886
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "REST 呼び出しのカスタムヘッダーを指定する方法はいくつかあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:888
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "`@RegisterClientHeaders` アノテーションを用いて `ClientHeadersFactory` または `ReactiveClientHeadersFactory` を登録する。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:889
#, fuzzy
msgid "by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method"
msgstr "`ClientHeadersFactory` または `ReactiveClientHeadersFactory` を `QuarkusRestClientBuilder.clientHeadersFactory(factory)` メソッドでプログラム的に登録することで"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:890
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "`@ClientHeaderParam` でヘッダーの値を指定する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:891
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "`@HeaderParam` でヘッダーの値を指定する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:893
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "以下のコードは、これらの各手法の使用方法を示しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:924
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "クラスごとに存在できる `ClientHeadersFactory` は 1 つだけです。これを使用すると、カスタムヘッダーを追加できるだけでなく、既存のヘッダーを変換することもできます。ファクトリーの例については、以下の `RequestUUIDHeaderFactory` クラスを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:925
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` は、クライアントインターフェイスとメソッドで使用できます。一定のヘッダー値を指定できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:926
#, fuzzy
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`)."
msgstr "と、ヘッダの値を計算すべきメソッドの名前を指定する。このメソッドは、このインターフェイスの静的メソッドまたはデフォルトメソッドとすることができます。このメソッドは、パラメータなし、単一のStringパラメータ、または単一の `io.quarkus.rest.client.reactive.ComputedParamContext` パラメータ（これは、メソッドパラメータに基づいてヘッダーを計算する必要があるコードに非常に便利で、自然に `@io.quarkus.rest.client.reactive.NotBody` ）を補完することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:927
msgid "... as well as a value from your application's configuration"
msgstr "また、アプリケーションの設定値も使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:928
#, fuzzy
msgid "... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)"
msgstr "あるいは、逐語的なテキスト、メソッドパラメータ（名前で参照）、設定値（前述の通り）、メソッド呼び出し（前述の通り）の任意の混合物でもよい。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:929
#, fuzzy
msgid "... or as a normal Jakarta REST `@HeaderParam` annotated argument"
msgstr "または、通常のJakarta REST `@HeaderParam` のアノテーション引数のように"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:933
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr "Kotlin を使用するときにデフォルトのメソッドを利用する場合は、Java のデフォルトのインターフェイス機能を使用するように Kotlin コンパイラーを設定する必要があります。詳細は、link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[こちら] を参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:937
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` は次のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:962
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:965
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "`${header.value}` に値を指定するには、`application.properties` に以下のように記述するだけです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:972
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "また、ブロッキング操作を実行できる `ClientHeadersFactory` のリアクティブフレーバーがあります。例えば:"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1007
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1009
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr "`@RegisterClientHeaders` アノテーションは、カスタムファクトリーを指定せずに使用することもできます。その場合、`DefaultClientHeadersFactoryImpl` ファクトリーが使用されます。REST リソースから REST クライアント呼び出しを行う場合、このファクトリーは、`org.eclipse.microprofile.rest.client.propagateHeaders` 設定プロパティーにリストされているすべてのヘッダーをリソースリクエストからクライアントリクエストに伝播させます。個々のヘッダー名はコンマで区切られます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1031
msgid "Customizing the request"
msgstr "リクエストのカスタマイズ"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1033
#, fuzzy
msgid "The REST Client Reactive supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`."
msgstr "RESTクライアントReactiveは、フィルターを通してサーバーに送る最終リクエストのさらなるカスタマイズをサポートする。フィルターはインターフェース `ClientRequestFilter` か `ResteasyReactiveClientRequestFilter` を実装しなければならない。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1035
#, fuzzy
msgid "A simple example of customizing the request would be to add a custom header:"
msgstr "リクエストをカスタマイズする簡単な例は、カスタムヘッダを追加することです："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1049
#, fuzzy
msgid "Next, you can register your filter using the `@RegisterProvider` annotation:"
msgstr "次に、 `@RegisterProvider` アノテーションを使ってフィルターを登録します："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1061
#, fuzzy
msgid "Or programmatically using the `.register()` method:"
msgstr "または、 `.register()` メソッドを使ってプログラム的に："

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1070
msgid "Injecting the `jakarta.ws.rs.ext.Providers` instance in filters"
msgstr "`jakarta.ws.rs.ext.Providers` インスタンスをフィルターに注入する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1072
msgid "The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client."
msgstr "`jakarta.ws.rs.ext.Providers` は、現在のクライアントのプロバイダー・インスタンスを検索する必要がある場合に便利です。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1074
#, fuzzy
msgid "We can get the `Providers` instance in our filters from the request context as follows:"
msgstr "`Providers` 、リクエストコンテキストからインスタンスを取得する："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1089
#, fuzzy
msgid "Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:"
msgstr "あるいは、 `ResteasyReactiveClientRequestContext` コンテキストを直接提供する `ClientRequestFilter` インターフェイスの代わりに、 `ResteasyReactiveClientRequestFilter` インターフェイスを実装することもできる："

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1104
#, fuzzy
msgid "Customizing the ObjectMapper in REST Client Reactive Jackson"
msgstr "RESTクライアントのリアクティブ・ジャクソンにおけるObjectMapperのカスタマイズ"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1106
#, fuzzy
msgid "The REST Client Reactive supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`."
msgstr "REST Client Reactive は、 `@ClientObjectMapper` というアノテーションを使用して、クライアントのみで使用するカスタム ObjectMapper の追加をサポートしています。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1108
#, fuzzy
msgid "A simple example is to provide a custom ObjectMapper to the REST Client Reactive Jackson extension by doing:"
msgstr "単純な例としては、REST Client Reactive Jackson 拡張機能にカスタム ObjectMapper を提供する方法がある："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1128
#, fuzzy
msgid "The method must be annotated with `@ClientObjectMapper`."
msgstr "メソッドには `@ClientObjectMapper` のアノテーションが必要です。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1129
#, fuzzy
msgid "It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime."
msgstr "これは静的メソッドでなければならない。また、パラメータ `defaultObjectMapper` は CDI を介して解決される。見つからない場合は、実行時に例外がスローされます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1130
#, fuzzy
msgid "In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead."
msgstr "この例では、デフォルトのオブジェクトマッパーのコピーを作成します。デフォルトのオブジェクトマッパーを変更するべきでは *ありません* 。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1132
msgid "Exception handling"
msgstr "例外処理"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1134
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST クライアント仕様では、HTTP 応答を例外に変換することを目的とした `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` が導入されています。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1136
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "上記の `ExtensionsService` にこのような `ResponseExceptionMapper` を実装する簡単な例は、次のとおりです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1152
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr "`ResponseExceptionMapper` は、`ResponseExceptionMapper` 実装が呼び出される優先度を決定するために使用される `getPriority` メソッドも定義します (`getPriority` の値が小さい実装が最初に呼び出されます)。`toThrowable` が例外を返す場合、その例外が出力されます。`null` が返された場合、チェーン内の `ResponseExceptionMapper` の次の実装が呼び出されます (存在する場合)。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1155
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr "上記のクラスは、REST クライアントによって自動的に使用されることはありません。アプリケーションのすべての REST クライアントで使用できるようにするには、クラスに `@Provider` アノテーションを付ける必要があります (`quarkus.rest-client-reactive.provider-autodiscovery` が `false` に設定されていない場合)。または、例外処理クラスを特定の REST クライアントインターフェイスにのみ適用する必要がある場合は、インターフェイスに `@RegisterProvider(MyResponseExceptionMapper.class)` でアノテーションを付けるか、適切な `quarkus.rest-client` 設定グループの `providers` プロパティー設定を使用して登録できます。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1158
msgid "Using @ClientExceptionMapper"
msgstr "@ClientExceptionMapper を使用する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1160
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "400 以上の HTTP 応答コードを変換する簡単な方法は、`@ClientExceptionMapper` アノテーションを使用することです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1162
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "上記で定義された `ExtensionsService` REST クライアントインターフェイスの場合、`@ClientExceptionMapper` の使用例は次のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1186
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "当然、この処理は REST クライアントごとに行われます。`@ClientExceptionMapper` は、`priority` 属性が設定されておらず、すべてのハンドラーを呼び出す通常のルールが適用される場合、デフォルトの優先度を使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1188
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr "`@ClientExceptionMapper` でアノテーションされたメソッドは、 `java.lang.reflect.Method` パラメータを取れます。これは、例外対応のコードは、呼び出されて例外を発生したREST Client メソッドを知る場合に便利です。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1190
msgid "Using @Blocking annotation in exception mappers"
msgstr "例外マッパーでの@Blockingアノテーションの使用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1192
#, fuzzy
msgid "In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):"
msgstr "RESTクライアントメソッドのリターンタイプとして `InputStream` を使用する必要がある場合（大量のデータを読み取る必要がある場合など）："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1205
#, fuzzy
msgid "This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations."
msgstr "これは期待通りに動作しますが、このInputStreamオブジェクトをカスタム例外マッパーで読もうとすると、 `BlockingNotAllowedException` 例外を受け取ります。これは、 `ResponseExceptionMapper` クラスがデフォルトで Event Loop スレッドエグゼキュータ上で実行されるため、IO 操作を実行することができないからです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1207
#, fuzzy
msgid "To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:"
msgstr "例外マッパーをブロック化するためには、例外マッパーに `@Blocking` のアノテーションを付けることができます："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1226
msgid "With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool."
msgstr "`@Blocking` アノテーションにより、MyResponseExceptionMapper例外マッパーはワーカースレッドプールで実行されることになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1227
msgid "Reading the entity is now allowed because we're executing the mapper on the worker thread pool."
msgstr "ワーカースレッドプールでマッパーを実行しているため、エンティティの読み取りが許可されるようになりました。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1229
msgid "Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:"
msgstr "なお、@ClientExceptionMapperを使用する場合は、 `@Blocking` アノテーションを使用することも可能です:"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1253
msgid "Multipart Form support"
msgstr "マルチパートフォームのサポート"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1255
msgid "REST Client Reactive support multipart messages."
msgstr "REST Client Reactive はマルチパートメッセージをサポートします。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1257
msgid "Sending Multipart messages"
msgstr "マルチパートメッセージの送信"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1259
msgid ""
"REST Client Reactive allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr "REST Client Reactive を使用すると、データをマルチパート形式で送信できます。このようにして、たとえばファイルを効率的に送信できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1262
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr "データをマルチパートフォームとして送信するには、通常の `@RestForm` (または `@FormParam` ) アノテーションを使用します："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1271
msgid ""
"Parameters specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr "`File` , `Path` , `byte[]` , `Buffer` として指定されたパラメータは、ファイルとして送信され、デフォルトで `application/octet-stream` MIME タイプになります。その他の `@RestForm` パラメータ型のデフォルトは、 `text/plain` MIMEタイプです。これらのデフォルトを上書きするには、 `@PartType` アノテーションを使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1275
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr "当然ながら、これらのパラメータを含むクラスにまとめられます："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1292
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]` or `Buffer`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr "`File` , `Path` , `byte[]` , `Buffer` , および `@PartType` のアノテーションが付いた `@RestForm` パラメータは、 `@Consumes` が存在しない場合、そのメソッドが `@Consumes(MediaType.MULTIPART_FORM_DATA)` を自動的に意味します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1296
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr "マルチパートではない `@RestForm` パラメータがある場合、 その時は `@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` になります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1299
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"Rest Client Reactive uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr "フォームデータのエンコードには、いくつかのモードがあります。デフォルトでは、Rest Client Reactive は RFC1738 を使用します。クライアントレベルで、`io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder プロパティーを `HttpPostRequestEncoder.EncoderMode` の選択した値に設定するか、`application.properties` で `quarkus.rest-client.multipart-post-encoder-mode` を指定して、モードを上書きすることができます。後者は `@RegisterRestClient` アノテーションで作成されたクライアントに対してのみ機能することに注意してください。利用可能なすべてのモードは、link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation] に記載されています。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1309
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr "また、 `@PartType` アノテーションを指定することで、JSON のマルチパートも送信できます。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1323
msgid "Receiving Multipart Messages"
msgstr "マルチパートメッセージの受信"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1324
msgid ""
"REST Client Reactive also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr "REST Client Reactive は、マルチパートメッセージの受信もサポートしています。送信と同様に、マルチパートレスポンスを解析するには、レスポンスデータを記述するクラスを作成する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1339
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "省略形の `@RestForm` アノテーションを使用して、マルチパートフォームの一部としてフィールドを作成します"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1340
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "標準の `@FormParam` も使用できます。マルチパートパートの名前を上書きできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1342
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "次に、呼び出しに対応するインターフェイスメソッドを作成し、`FormDto` を返すようにします。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1351
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "現時点では、マルチパート応答のサポートには次の制限があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1353
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "マルチパート応答で送信されたファイルは、`File`、`Path`、および `FileDownload` にのみ解析できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1354
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "応答タイプの各フィールドには `@PartType` アノテーションを付ける必要があります - このアノテーションのないフィールドは無視されます"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1356
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "REST Client Reactive は、マルチパートリターンタイプとして使用されるクラスを事前に知っている必要があります。 `multipart/form-data` を生成するインターフェイスメソッドがある場合、戻り型は自動的に検出されます。ただし、`ClientBuilder` API を使用して応答をマルチパートとして解析する場合は、DTO クラスに `@MultipartForm` のアノテーションを付ける必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1358
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "ダウンロードしたファイルは自動的に削除されず、多くのディスク領域を占有する可能性があります。作業が終わったら、ファイルを削除することを検討してください。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1360
#, fuzzy
msgid "Multipart mixed / OData usage"
msgstr "マルチパート混合／ODataの利用"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1362
#, fuzzy
msgid ""
"It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].\n"
"This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help)."
msgstr "アプリケーションは、 link:https://www.odata.org/documentation/odata-version-3-0/batch-processing/[ODataと] 呼ばれる特別なプロトコルを使用して、企業システム（CRMシステムなど）と対話する必要があることが珍しくありません。このプロトコルは、基本的にカスタムHTTP `Content-Type` を使用し、RESTクライアントと連携するためのグルーコードが必要です（ボディの作成は完全にアプリケーション次第で、RESTクライアントはあまり手助けができません）。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1365
msgid "An example looks like the following:"
msgstr "例は次のようになります:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1383
#, fuzzy
msgid "The code uses the following pieces:"
msgstr "コードは以下の駒を使用します："

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1385
#, fuzzy
msgid "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method."
msgstr "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` これは、インターフェイスの デフォルトメソッドを呼び出すことで、 ヘッダーが作成されることを保証するものです。 `calculateContentType` `Content-Type` "

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1386
#, fuzzy
msgid "The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers."
msgstr "前述のパラメータは、HTTPヘッダの構築を補助するためにのみ使用されるため、 `@NotBody` のアノテーションを付ける必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1387
#, fuzzy
msgid "`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method."
msgstr "`context.methodParameters().get(1).value()` これは、 メソッドが REST Client メソッドに渡される適切なメソッドパラメータを取得することを可能にします。 `calculateContentType` "

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1390
#, fuzzy
msgid "As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements."
msgstr "前述のように、bodyパラメータは、サービスの要件に適合するようにアプリケーションコードによって適切に作成される必要があります。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1392
msgid "Receiving compressed messages"
msgstr "圧縮メッセージの受信"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1393
msgid ""
"REST Client Reactive also supports receiving compressed messages using GZIP. You can enable the HTTP compression support by adding the property `quarkus.http.enable-compression=true`.\n"
"When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client Reactive will automatically decode the content and proceed with the message handling."
msgstr "REST Client Reactiveは、GZIPを使用した圧縮メッセージの受信もサポートしています。HTTP 圧縮サポートを有効にするには、プロパティ `quarkus.http.enable-compression=true` を追加します。この機能が有効で、サーバーがヘッダー `Content-Encoding: gzip` を含む応答を返すと、REST Client Reactive は自動的にコンテンツをデコードし、メッセージ処理を続行します。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1396
msgid "Proxy support"
msgstr "プロキシーサポート"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1397
msgid ""
"REST Client Reactive supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr "REST Client Reactive は、プロキシーを介したリクエストの送信をサポートしています。JVM 設定を尊重しますが、次の両方を指定することもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1400
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "グローバルクライアントプロキシー設定、 `quarkus.rest-client.proxy-address`、`quarkus.rest-client.proxy-user`、`quarkus.rest-client.proxy-password`、`quarkus.rest-client.non-proxy-hosts`"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1402
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` などのクライアントごとのプロキシー設定です。これらは、CDI で挿入されたクライアント、つまり `@RegisterRestClient` で作成されたクライアントに対してのみ適用されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1404
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "`proxy-address` がクライアントレベルで設定されている場合、クライアントは特定のプロキシー設定を使用します。プロキシー設定は、グローバル設定または JVM プロパティーから伝播されません。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1406
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr "クライアントに `proxy-address` が設定されていないが、グローバルレベルで設定されている場合、クライアントはグローバル設定を使用します。それ以外の場合、クライアントは JVM 設定を使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1410
msgid "An example configuration for setting proxy:"
msgstr "プロキシーを設定するための設定例:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1427
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST クライアント仕様では、プロキシー資格情報の設定は許可されていません。プログラムでプロキシーユーザーとプロキシーパスワードを指定するには、`RestClientBuilder` を `RestClientBuilderImpl` にキャストする必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1429
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1431
msgid "Run the application with:"
msgstr "次のコマンドでアプリケーションを実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1435
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive を開きます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1437
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "このエクステンションに関する基本的な情報を含む JSON オブジェクトが表示されるはずです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1439
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1443
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1445
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1449
msgid "Logging traffic"
msgstr "トラフィックの記録"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1450
msgid ""
"REST Client Reactive can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr "REST Client Reactive は、送信するリクエストと受信する応答をログに記録できます。ロギングを有効にするには、`quarkus.rest-client.logging.scope` プロパティーを `quarkus.rest-client.logging.scope` に追加し、次のように設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1453
msgid "`request-response` to log the request and response contents, or"
msgstr "リクエストと応答の内容をログに記録する `request-response` 、または"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1454
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` は、基礎となるライブラリーの低レベルのロギングも有効にします。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1456
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "HTTP メッセージには大きな本文が含まれる可能性があるため、ログに記録される本文の文字数を制限します。デフォルトの制限は `100` ですが、`quarkus.rest-client.logging.body-limit` を指定することで変更できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1458
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST Client Reactive は、レベル DEBUG でトラフィックをログに記録しており、ロガーのプロパティーを変更しません。この機能を使用するには、ロガー設定を調整する必要がある場合があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1460
msgid "An example logging configuration:"
msgstr "ロギング設定の例:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1470
#, fuzzy
msgid "REST Client Reactive uses a default `ClientLogger` implementation. You can change it by providing a custom `ClientLogger` instance through CDI or when programmatically creating your client."
msgstr "REST Client Reactive は、デフォルトの `ClientLogger` 実装を使用します。これを変更するには、CDI を使ってカスタム `ClientLogger` インスタンスを指定するか、 プログラムでクライアントを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1472
msgid "Mocking the client for tests"
msgstr "テストのためのクライアントのモッキング"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1473
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr "`@RestClient` アノテーションが挿入されたクライアントを使用する場合は、テスト用に簡単にモックすることができます。Mockito の `@InjectMock`　または `QuarkusMock` でそれを行うことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1476
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr "このセクションでは、クライアントをモックに置き換える方法を示します。Quarkus でモッキングがどのように機能するかをより深く理解したい場合は、 https://quarkus.io/blog/mocking/[Mocking CDI beans] のブログ投稿を参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1478
msgid "Mocking does not work when using `@QuarkusIntegrationTest`."
msgstr "`@QuarkusIntegrationTest` を使用した場合、モッキングは動作しません。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1480
msgid "Let's assume you have the following client:"
msgstr "次のクライアントがあると仮定します。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1500
msgid "Mocking with InjectMock"
msgstr "InjectMock でモックする"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1501
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr "テスト用にクライアントをモックする最も簡単な方法は、Mockito と `@InjectMock` を使用することです。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1503
msgid "First, add the following dependency to your application:"
msgstr "まず、以下の依存関係をアプリケーションに追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1521
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr "次に、テストで `@InjectMock` を使用して、モックを作成して挿入できます。"

#. type: Title ===
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1555
msgid "Mocking with QuarkusMock"
msgstr "QuarkusMock でモックする"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1556
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr "Mockito がニーズを満たさない場合は、`QuarkusMock` を使用してプログラムでモックを作成できます。例:"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1589
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr "ここでは、手動で作成したクライアントインターフェイスの実装を使用して、実際のクライアントを置き換えます"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1590
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr "`RestClient.LITERAL` は `installMockForType` メソッドの最後の引数として渡される必要があることに注意してください"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1593
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1594
msgid ""
"In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.\n"
"This may be especially useful for native tests, or for programmatically created clients."
msgstr "場合によっては、クライアント自体をモックするのではなく、リモートエンドポイント (HTTP サーバー) をモックしたい場合があります。これは、ネイティブテスト、またはプログラムで作成されたクライアントに特に役立つ場合があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1597
msgid ""
"You can easily mock an HTTP Server with Wiremock.\n"
"The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]\n"
"describes how to set it up in detail."
msgstr "Wiremock を使用して HTTP サーバーを簡単にモックできます。xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] では、セットアップ方法について詳しく説明しています。"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1601
msgid "Known limitations"
msgstr "既知の制限"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1602
msgid ""
"While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences\n"
"and limitations:"
msgstr "REST Client Reactive エクステンションは、REST Client エクステンションをそのまま置き換えることを目的としていますが、いくつかの相違点と制限があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1605
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr "新しいエクステンションのクライアントのデフォルトスコープは `@ApplicationScoped` ですが、`quarkus-rest-client` のデフォルトは `@Dependent` です。この動作を変更するには、`quarkus.rest-client-reactive.scope` プロパティーを完全修飾形式のスコープ名に設定します。"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1607
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr "`HostnameVerifier` または `SSLContext` を設定することができない"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1608
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "`ExecutorService` の設定など、非ブロッキング実装には意味をなさないいくつかのことが機能しません"

#. type: Title ==
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1612
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain Text
#: upstream/_versions/main/guides/rest-client-reactive.adoc:1614
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
