msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:6
msgid "Implementing a gRPC Service"
msgstr "gRPCサービスの実装"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:11
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "CDI Beanとして公開されたgRPCサービスの実装は、quarkus-grpcによって自動的に登録、提供されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:13
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "gRPC サービスを実装するには、gRPC クラスを生成する必要があります。 `proto` ファイルを `src/main/proto` に置き、 `mvn compile` を実行します。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:16
msgid "Generated Code"
msgstr "生成されたコード"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:18
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkusは、 `proto` ファイルで宣言されたサービスに対して、いくつかの実装クラスを生成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:20
msgid "A _service interface_ using the Mutiny API"
msgstr "Mutiny APIを使用した _サービスインターフェース_"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:21
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "クラス名は `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}` "

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:22
msgid "An _implementation base_ class using the gRPC API"
msgstr "gRPC APIを利用した _実装のベース_ のクラス"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:23
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "クラス名は以下のように構成されています。 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:25
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例えば、以下の `proto` ファイルスニペットを使用した場合は、"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:35
msgid "`hello` is the java package for the generated classes."
msgstr "`hello` は、生成されたクラスのjavaパッケージです。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:36
msgid "`Greeter` is the service name."
msgstr "`Greeter` はサービス名です。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:38
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "サービス・インターフェースは `hello.Greeter` であり、実装ベースは `hello.GreeterGrpc.GreeterImplBase` という抽象的な静的ネストクラスです。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:40
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "以下のセクションで説明するように、 _サービスインターフェース_ を実装するか、 _ベースクラス_ をサービス実装Beanで拡張する必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:42
msgid "Implementing a Service with the Mutiny API"
msgstr "Mutiny APIによるサービスの実装"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:44
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "Mutiny APIを使ってgRPCサービスを実装するには、サービスインターフェースを実装したクラスを作成します。そして、サービスインターフェースで定義されているメソッドを実装します。サービスメソッドを実装したくない場合は、メソッドボディから `java.lang.UnsupportedOperationException` を投げてください（例外は適切な gRPCの例外に自動的に変換されます）。最後に、サービスを実装し、 `@GrpcService` アノテーションを追加します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:65
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPCサービス実装Beanは、 `@GrpcService` アノテーションを付けなければならず、他のCDI修飾子を宣言してはいけません。すべてのgRPCサービスは、 `jakarta.inject.Singleton` のスコープを持ちます。さらに、サービス呼び出しの間、リクエストコンテキストが有効になります。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:66
msgid "`hello.Greeter` is the generated service interface."
msgstr "`hello.Greeter` は、生成されたサービスインターフェースです。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:68
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "サービス実装Beanは、Mutinyの実装ベースを拡張することもでき、その場合、クラス名は以下のように構成されます。 `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:70
msgid "Implementing a Service with the default gRPC API"
msgstr "デフォルトのgRPC APIでのサービス実装"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:72
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "デフォルトのgRPC APIを使ってgRPCサービスを実装するには、デフォルトの実装ベースを拡張したクラスを作成します。次に、サービス・インターフェースで定義されているメソッドを上書きします。最後に、サービスを実装し、 `@GrpcService` アノテーションを追加します。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:93
msgid "Blocking Service Implementation"
msgstr "ブロッキングサービスの実装"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:95
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr "デフォルトでは、gRPCサービスからのすべてのメソッドはイベントループ上で実行されます。そのため、ブロックしては *いけません* 。サービスロジックをブロックする必要がある場合は、メソッドに `io.smallrye.common.annotation.Blocking` アノテーションを追加します。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:108
msgid "Handling Streams"
msgstr "ストリームの処理"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:110
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPCでは、ストリームを受信して返すことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:121
msgid "Using Mutiny, you can implement these as follows:"
msgstr "Mutinyを使うと、以下のように実装できます。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:162
msgid "Health Check"
msgstr "ヘルスチェック"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:163
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "実装されたサービスでは、Quarkus gRPCは以下の形式でヘルスチェックを公開しています。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:190
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr "クライアントは、特定のサービスのヘルス状態を取得するために完全修飾されたサービス名を指定したり、gRPCサーバーの一般的な状態を取得するためにサービス名の指定を省略することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:193
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "詳細については、 link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPCのドキュメント] を確認してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:196
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr "さらに、Quarkus SmallRye Healthがアプリケーションに追加された場合、gRPCサービスの状態に関するレディネスチェックがMicroProfile Healthエンドポイントレスポンスに追加されます( `/q/health` )。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:199
msgid "Reflection Service"
msgstr "リフレクションサービス"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:201
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "Quarkus gRPC Serverは、 link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[リフレクションサービス] を実装しています。このサービスを使用すると、 link:https://github.com/fullstorydev/grpcurl[grpcurl] や link:https://github.com/gusaul/grpcox[grpcox] などのツールがサービスと対話できるようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:204
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "リフレクションサービスは、 _開発_ モードではデフォルトで有効になっています。テストモードやプロダクションモードでは、 `quarkus.grpc.server.enable-reflection-service` を `true` に設定して明示的に有効にする必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:207
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr "Quarkusは、リフレクションサービス `v1` と `v1alpha` の両方を公開しています。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:209
msgid "Scaling"
msgstr "スケーリング"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:210
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "デフォルトでは、quarkus-grpcは単一のイベントループ上で動作する単一のgRPCサーバーを起動します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:212
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "サーバーをスケールさせたい場合は、 `quarkus.grpc.server.instances` を設定することで、サーバーのインスタンス数をセットできます。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:214
msgid "Server Configuration"
msgstr "サーバー構成"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:218
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr "`quarkus.grpc.server.use-separate-server` を無効にすると、既存の HTTP サーバーを使用する新しい Vert.x gRPC サーバー実装が使用されます。つまり、サーバーのポートが `8080` (または `quarkus.http.port` で設定されたポート) になることを意味します。また、すでに適切に設定されているはずの HTTP サーバーであるため、他のほとんどの設定プロパティは適用されなくなります。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:222
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr "`quarkus.grpc.server.xds.enabled` を有効にすると、上記の設定のほとんどを処理するのはxDSになります。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:224
msgid "Example of Configuration"
msgstr "構成の例"

#. type: Title ===
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:226
msgid "Enabling TLS"
msgstr "TLSを有効にする"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:228
msgid "To enable TLS, use the following configuration."
msgstr "TLSを有効にするには、以下の設定を使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:230
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr "設定のすべてのパスは、クラスパス上のリソース (通常は `src/main/resources` やそのサブフォルダーから) か外部ファイルを指定することに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:239
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#. type: Title ===
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:241
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:243
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:254
msgid "Server Interceptors"
msgstr "サーバーインターセプター"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:256
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPCサーバーのインターセプターでは、サービスが呼び出される前に、認証などのロジックを実行することができるようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:258
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "`io.grpc.ServerInterceptor` を実装した `@ApplicationScoped` Beanを作成することで、gRPC サーバーのインターセプターを実装できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:274
#, fuzzy
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr "プロデューサー・メソッドをグローバル・インターセプターとしてアノテーションすることも可能だ："

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:291
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] をチェックして、インターセプターを適切に実装してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:293
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr "公開されているすべてのサービスにインターセプターを適用するには、 `@io.quarkus.grpc.GlobalInterceptor` でアノテーションを付けます。インターセプターを単一のサービスに適用するには、 `@io.quarkus.grpc.RegisterInterceptor` でそのサービスに登録します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:307
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr "複数のサーバーインターセプターがある場合、 `jakarta.enterprise.inject.spi.Prioritized` インターフェースを実装することで、それらを順番に並べることができます。すべてのグローバルインターセプターは、サービス固有のインターセプターの前に起動されることに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:328
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "最高の優先度を持つインターセプターが最初に呼び出されます。インターセプターが `Prioritized` インターフェイスを実装していない場合に使用されるデフォルトの優先度は `0` です。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:332
msgid "Testing your services"
msgstr "サービスのテスト"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:334
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr "gRPCサービスをテストする最も簡単な方法は、 xref:grpc-service-consumption.adoc[gRPCサービスの使用] で説明したように、gRPCクライアントを使用することです。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:337
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr "なお、TLS を使用していない公開サービスのテストにクライアントを使用する場合は、設定を行う必要はありませんのでご注意ください。例えば、上記で定義した `HelloService` をテストするには、次のようなテストを作成します。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:358
msgid "Trying out your services manually"
msgstr "手動でサービスを試す"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:359
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-v1 and click on _Services_ under the gRPC tile."
msgstr "開発モードでは、Quarkus Dev UIでgRPCサービスを試すことができます。 http://localhost:8080/q/dev-v1 に遷移し、gRPCタイルの下にある _Services_ をクリックします。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:362
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "Dev UIにアクセスするには、アプリケーションが ”通常の” HTTPポートを公開する必要があることに注意してください。アプリケーションがHTTPエンドポイントを公開していない場合は、 `quarkus-vertx-http` に依存する専用のプロファイルを作成することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:377
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "これがあれば、次のようにしてDevモードを実行できます： `mvn quarkus:dev -Pdevelopment` "

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:379
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "Gradleを使用している場合は、 `quarkusDev` タスクの依存関係を追加するだけです。"

#. type: Title ==
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:388
msgid "gRPC Server metrics"
msgstr "gRPCサーバーのメトリクス"

#. type: Title ===
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:390
msgid "Enabling metrics collection"
msgstr "メトリクス収集の有効化"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:392
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr "アプリケーションが xref:telemetry-micrometer.adoc[`quarkus-micrometer`] エクステンションも使用している場合、gRPCサーバーのメトリクスは自動的に有効になります。 Micrometerは、アプリケーションが実装するすべてのgRPCサービスのメトリクスを収集します。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:395
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例えば、メトリクスをPrometheusにエクスポートすると、以下のように取得できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:414
msgid "The service name, method and type can be found in the _tags_."
msgstr "サービス名、メソッド、タイプは _tags_ で確認できます。"

#. type: Title ===
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:416
msgid "Disabling metrics collection"
msgstr "メトリクス収集の無効化"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:418
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "`quarkus-micrometer` を使用しているときに gRPC サーバーメトリクスを無効にするには、アプリケーションの設定に以下のプロパティを追加します。"

#. type: Title ===
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:425
#, fuzzy
msgid "Use virtual threads"
msgstr "仮想スレッドを使用する"

#. type: Plain Text
#: upstream/_versions/main/guides/grpc-service-implementation.adoc:427
#, fuzzy
msgid "To use virtual threads in your gRPC service implementation, check the dedicated xref:./grpc-virtual-threads.adoc[guide]."
msgstr "gRPCサービスの実装で仮想スレッドを使用するには、専用の xref:./grpc-virtual-threads.adoc[ガイドを] 参照してください。"
