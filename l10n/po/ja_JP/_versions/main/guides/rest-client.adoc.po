msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _versions/main/guides/rest-client.adoc
msgid "Using the REST Client"
msgstr "REST クライアントの利用"

#: _versions/main/guides/rest-client.adoc
msgid ""
"This guide explains how to use the REST Client in order to interact with REST APIs.\n"
"REST Client is the REST Client implementation compatible with Quarkus REST (formerly RESTEasy Reactive)."
msgstr ""
"このガイドでは、REST APIと対話するためのREST Clientの使用方法について説明します。\n"
"RESTクライアントは、Quarkus REST（旧RESTEasy Reactive）と互換性のあるRESTクライアントの実装です。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:rest.adoc[Quarkus REST]\n"
"for the server part."
msgstr "アプリケーションでクライアントを使用し、RESTエンドポイントを公開する場合は、サーバー部分に xref:rest.adoc[Quarkus REST] を使用してください。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/main/guides/rest-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The solution is located in the `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "ソリューションは `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#: _versions/main/guides/rest-client.adoc
msgid "the `rest-jackson` extension for the REST server support. Use `rest` instead if you do not wish to use Jackson;"
msgstr "REST サーバーのサポートには、 `rest-jackson` エクステンションを使用してください。Jackson を使用したくない場合は、代わりに `rest` を使用してください；"

#: _versions/main/guides/rest-client.adoc
msgid "the `rest-client-jackson` extension for the REST client support. Use `rest-client` instead if you do not wish to use Jackson"
msgstr "REST クライアントのサポートには `rest-client-jackson` エクステンションを使用してください。Jackson を使用したくない場合は、代わりに `rest-client` を使用してください。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトがすでに設定されている場合は、プロジェクトのベースディレクトリで次のコマンドを実行することで、 `rest-client-jackson` エクステンションをプロジェクトに追加できます："

#: _versions/main/guides/rest-client.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、以下がビルドファイルに追加されます。"

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Setting up the model"
msgstr "モデルの設定"

#: _versions/main/guides/rest-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供する REST API の一部を利用する方法をデモします。まず最初に、使用するモデルを `Extension` POJO の形式でセットアップします。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#: _versions/main/guides/rest-client.adoc
msgid "Using the REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "REST クライアントの使用は、適切な Jakarta REST および MicroProfile アノテーションを使用してインターフェースを作成するのと同じくらい簡単です。今回の場合、インターフェースは `src/main/java/org/acme/rest/client/ExtensionsService.java` で作成し、以下の内容を持つ必要があります："

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr "`@Path` と `@GET` 、 `@QueryParam` は、サービスへのアクセス方法を定義するために使用される標準的な Jakarta REST アノテーションです。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"When the `quarkus-rest-client-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr "`quarkus-rest-client-jackson` エクステンションがインストールされている場合、メディアタイプが `@Produces` または `@Consumes` アノテーションによって明示的に設定されていない限り、Quarkusはほとんどの返り値に対してデフォルトで `application/json` メディアタイプを使用します。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr "JSONのデフォルトに依存しない場合は、エンドポイントに `@Produces` と `@Consumes` のアノテーションを付けて、期待されるcontent-typesを正確に定義することが強く推奨されています。これにより、ネイティブ実行可能ファイルに含まれる Jakarta REST プロバイダー（コンバーターと見なすことができます）の数を減らすことができます。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr "上記の `getById` メソッドはブロッキング呼び出しです。イベントループで呼び出さないでください。<<async-support>> セクションでは、非ブロッキング呼び出しを行う方法について説明します。"

#: _versions/main/guides/rest-client.adoc
msgid "Query Parameters"
msgstr "クエリーパラメーター"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr "クエリーパラメーターを指定する最も簡単な方法は、クライアントメソッドのパラメーターに `@QueryParam` または `@RestQuery` というアノテーションを付けることです。 `@RestQuery` は `@QueryParam` と同等ですが、名前を省略することができます。さらに、クエリーパラメーターを `Map` として渡すこともでき、事前にパラメーターがわからない場合に便利です。"

#: _versions/main/guides/rest-client.adoc
msgid "Request query will include parameter with key `name`"
msgstr "リクエストクエリーには `name` をキーとするパラメーターが含まれます"

#: _versions/main/guides/rest-client.adoc
msgid "Each `Map` entry represents exactly one query parameter"
msgstr "各 `Map` エントリは、ちょうど 1 つのクエリーパラメーターを表します"

#: _versions/main/guides/rest-client.adoc
msgid "`MultivaluedMap` allows you to send array values"
msgstr "`MultivaluedMap` は配列の値を送信することができます"

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientQueryParam"
msgstr "@ClientQueryParam を使用"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr "リクエストにクエリパラメータを追加するもうひとつの方法は、 REST クライアントインターフェースあるいはそのインターフェースの特定のメソッドに `@io.quarkus.rest.client.reactive.ClientQueryParam` を使用することです。アノテーションではクエリパラメータ名を指定し、 値は定数や設定プロパティ、あるいはメソッドの起動時に決定できます。"

#: _versions/main/guides/rest-client.adoc
msgid "The following example shows the various possible usages:"
msgstr "次の例では、さまざまな使い方を紹介します:"

#: _versions/main/guides/rest-client.adoc
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr " `@ClientQueryParam` をインターフェイスに付与することで、クライアントのすべてのリクエストに `my-param` が追加されることを保証しています。 なぜなら、`${…​}` 構文を使用したため、パラメータの実際の値は `my.property-value` 設定プロパティを使用して取得されます。"

#: _versions/main/guides/rest-client.adoc
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr "`getWithOtherParam` を呼び出すと、クエリーパラメータ `my-param` に加え、 `some-other-param` に `other` の値が追加されます。"

#: _versions/main/guides/rest-client.adoc
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr "`getFromMethod` を呼び出すと、 `my-param` のクエリパラメータに加えて、 `param-from-method` に `test` の値 ( `withParam` のメソッドが `param-from-method` と呼び出されたときに返すため) が追加されます。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr "インターフェースメソッドに `@QueryParam` のアノテーションが付いた引数がある場合、その引数は `@ClientQueryParam` のアノテーションで指定されたものよりも優先されることに注意してください。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`]."
msgstr "このアノテーションの詳細は link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[@ClientQueryParam] ."

#: _versions/main/guides/rest-client.adoc
msgid "Form Parameters"
msgstr "フォームパラメータ"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:"
msgstr "フォームパラメータは `@RestForm` （または `@FormParam` ）アノテーションで指定できます："

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientFormParam"
msgstr "@ClientFormParamの使用"

#: _versions/main/guides/rest-client.adoc
msgid "Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:"
msgstr "フォームパラメータは、 `@ClientQueryParam` と同様に `@ClientFormParam` を使用して指定することもできます："

#: _versions/main/guides/rest-client.adoc
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`]."
msgstr "このアノテーションの詳細は link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[@ClientFormParam] のjavadocで確認できます。"

#. type: Title ===
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr "GET リクエストにパスパラメーターが必要な場合は、`@QueryParam` の代わりに (あるいは加えて) `@PathParam (\"parameter-name\")` アノテーションを使用することができます。パスパラメーターとクエリーパラメーターは、必要に応じて以下の例のように組み合わせることができます。"

#: _versions/main/guides/rest-client.adoc
msgid "Dynamic base URLs"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The REST client allows for a per invocation override of the base URL using the `io.quarkus.rest.client.reactive.Url` annotation."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#: _versions/main/guides/rest-client.adoc
msgid "When the `url` parameter is non-null, it will override the base URL that is configured for the client (the default base URL configuration is still mandatory)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Sending large payloads"
msgstr "大きなペイロードの送信"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The REST Client is capable of sending arbitrarily large HTTP bodies without buffering the contents in memory, if one of the following types is used:"
msgstr "REST Client は、以下のタイプのいずれかを使用する場合、メモリにコンテンツをバッファリングすることなく、任意のサイズの HTTP ボディを送信できます："

#: _versions/main/guides/rest-client.adoc
msgid "`InputStream`"
msgstr "`InputStream`"

#: _versions/main/guides/rest-client.adoc
msgid "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"
msgstr "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Furthermore, the client can also send arbitrarily large files if one of the following types is used:"
msgstr "さらに、以下のタイプのいずれかを使用する場合、クライアントは任意のサイズのファイルを送信することもできます："

#: _versions/main/guides/rest-client.adoc
msgid "`File`"
msgstr "`File`"

#: _versions/main/guides/rest-client.adoc
msgid "`Path`"
msgstr "`Path`"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Getting other response properties"
msgstr "その他のレスポンス・プロパティの取得"

#: _versions/main/guides/rest-client.adoc
msgid "Using RestResponse"
msgstr "RestResponseの使用"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"If you need to get more properties of the HTTP response than just the body, such as the status code\n"
"or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a method.\n"
"An example of this could look like:"
msgstr "ステータスコードやヘッダなど、HTTP レスポンスのボディ以外のプロパティも取得したい場合は、メソッドから `org.jboss.resteasy.reactive.RestResponse` を返すようにします。この例は次のようになります："

#: _versions/main/guides/rest-client.adoc
msgid ""
"You can also use the Jakarta REST type link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] but it is\n"
"not strongly typed to your entity."
msgstr "また、Jakarta REST型 link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[Response] を使用することが出来ますが、それはあなたのエンティティに強く型付けされていません。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "Jakarta RESTリソースの作成"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを作成します。"

#: _versions/main/guides/rest-client.adoc
msgid "There are two interesting parts in this listing:"
msgstr "このリストには 2 つの興味深い部分があります。"

#: _versions/main/guides/rest-client.adoc
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "クライアントスタブには、通常の CDI `@Inject` ではなく、`@RestClient` アノテーションが挿入されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"`org.jboss.resteasy.reactive.RestResponse` used as effective way of getting response properties via RestResponse directly from RestClient,\n"
"as described in <<Using RestResponse>>"
msgstr "`org.jboss.resteasy.reactive.RestResponse` で説明されているように、RestClientから直接RestResponseを介してレスポンスプロパティを取得する効果的な方法として使用されます。 <<Using RestResponse>>"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#: _versions/main/guides/rest-client.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr "この設定をすると、 `org.acme.rest.client.ExtensionsService` を使って実行されるすべてのリクエストは、ベースURLとして `https://stage.code.quarkus.io/api` をベース URL として使用することを意味します。上記の設定を使うと、 `io.quarkus:quarkus-rest-client` の値で `ExtensionsService` の `getById` メソッドを呼び出すと、HTTP GET リクエストは次のようになります。 `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client` ."

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#: _versions/main/guides/rest-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、`@RegisterRestClient` `configKey` プロパティーを使用して、インターフェイスの完全修飾名とは別の設定ルートを使用することができます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Setting the base URL of the client is **mandatory**, however the REST Client supports per-invocation overrides of the base URL using the `@io.quarkus.rest.client.reactive.Url` annotation."
msgstr "クライアントのベースURLの設定は *必須* ですが、RESTクライアントは `@io.quarkus.rest.client.reactive.Url` アノテーションを使用してベースURLの割り当てごとのオーバーライドをサポートしています。"

#: _versions/main/guides/rest-client.adoc
msgid "Trusting all certificates and Disabling SSL hostname verification"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "This properties set should not be used in production."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"You can configure TLS connection of specific REST client to trust all certificates and disable the hostname verification using tls extension.\n"
"First of all, you should configure tls configuration bucket."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "To trust all certificates:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "To disable SSL hostname verification:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Finally, lets configure our REST client with apropriate tls configuration name:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "HTTP/2 Support"
msgstr "HTTP/2 サポート"

#: _versions/main/guides/rest-client.adoc
msgid "HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:"
msgstr "REST Clientでは、HTTP/2はデフォルトで無効になっています。有効にしたい場合は、次のように設定することができます:"

#: _versions/main/guides/rest-client.adoc
msgid "Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:"
msgstr "または、Application-Layer Protocol Negotiation (alpn) TLSエクステンションを有効にすると、クライアントは、サーバーが互換性のあるものよりも、どのHTTPバージョンを使用するかをネゴシエートすることができます。デフォルトでは、まずHTTP/2を使用しようとし、有効になっていない場合はHTTP/1.1を使用します。有効にしたい場合は、以下のように設定します:"

#: _versions/main/guides/rest-client.adoc
msgid "Programmatic client creation with QuarkusRestClientBuilder"
msgstr "QuarkusRestClientBuilderを使用したプログラムによるクライアントの作成"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with the `QuarkusRestClientBuilder`."
msgstr "クライアントに `@RegisterRestClient` アノテーションを付け、クライアントを `@RestClient` で注入する代わりに、プログラムで REST クライアントを作成することもできます。これは `RestClientBuilder` で行います。"

#: _versions/main/guides/rest-client.adoc
msgid "With this approach the client interface could look as follows:"
msgstr "このアプローチでは、クライアントインターフェイスは次のようになります。"

#: _versions/main/guides/rest-client.adoc
msgid "And the service as follows:"
msgstr "そして、次のようなサービス:"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:"
msgstr "`QuarkusRestClientBuilder` インターフェースは、追加設定オプションを持つクライアントをプログラムで作成するための Quarkus 固有の API です。それ以外の場合は、Microprofile APIから `RestClientBuilder` ："

#: _versions/main/guides/rest-client.adoc
msgid "Use Custom HTTP Options"
msgstr "カスタムHTTPオプションの使用"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The REST Client internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client extensions allows configuring some settings via properties, for example:"
msgstr "REST Client は内部的に、 link:https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[Vert.x HTTP Client] を使用してネットワーク接続を行います。REST クライアントの拡張機能では、プロパティを使用していくつかの設定を構成できます："

#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr "`quarkus.rest-client.client-prefix.connect-timeout` で、接続タイムアウトをミリ秒単位で設定します。"

#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr "`quarkus.rest-client.client-prefix.max-redirects`でリダイレクトの回数を制限できます。"

#: _versions/main/guides/rest-client.adoc
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr "しかし、Vert.x HTTP Client 内には、接続を設定するための多くのオプションがあります。 https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[このリンク] のVert.x HTTP Client Options API ですべてのオプションを参照してください。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr "REST クライアントが内部的に使用している Vert.x HTTP クライアントインスタンスを完全にカスタマイズするには、CDI を介して、またはプログラムでクライアントを作成するときに、カスタム HTTP クライアントオプションインスタンスを提供します。"

#: _versions/main/guides/rest-client.adoc
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr "ここでは、CDIを使用してHTTPクライアントオプションを提供する方法について、例を挙げて説明します:"

#: _versions/main/guides/rest-client.adoc
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr "これで、すべてのRESTクライアントが、あなたのカスタムHTTPクライアントオプションを使用するようになります。"

#: _versions/main/guides/rest-client.adoc
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr "もう一つの方法は、コードを用いてでクライアントを作成する際に、カスタムHTTPクライアントオプションを提供することです。"

#: _versions/main/guides/rest-client.adoc
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr "クライアントはCDI経由で提供されたHTTPクライアントオプションよりも、登録されたHTTPクライアントオプションを使用します。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Redirection"
msgstr "リダイレクト"

#: _versions/main/guides/rest-client.adoc
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the \"follow-redirects\" property:"
msgstr "HTTPサーバーは、ステータスコードが \"3 \"で始まるレスポンスと、リダイレクト先のURLを保持するHTTPヘッダー \"Location\" を送信することで、レスポンスを別の場所にリダイレクトできます。RESTクライアントがHTTPサーバーからリダイレクトレスポンスを受信しても、新しい場所への再リクエストを自動的に実行することはありません。\"follow-redirects\"プロパティを追加することで、REST Clientで自動リダイレクトを有効にすることができます:"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr "`quarkus.rest-client.follow-redirects` で、すべてのRESTクライアントに対してリダイレクトが有効になります。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr "`quarkus.rest-client.<client-prefix>.follow-redirects` で、特定のRESTクライアントに対するリダイレクトを有効にすることができます。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr "このプロパティがtrueの場合、REST Clientは、HTTPサーバーからリダイレクトレスポンスを受信すると、新しいリクエストを実行します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr "さらに、プロパティ \"max-redirects\" を使って、リダイレクトの回数を制限することができます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client."
msgstr "重要な注意点として、 link:https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] の仕様ではデフォルトでは GET あるいは HEAD メソッドに対してのみリダイレクトが行われます。しかし、REST Client では、 `@ClientRedirectHandler` アノテーションや CDI、あるいはクライアントを作成する際にプログラムによって、 POST や PUT メソッドでのリダイレクトを有効にしたり、より複雑なロジックに従ったりするためのカスタムリダイレクトハンドラを提供することができます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:"
msgstr "`@ClientRedirectHandler` アノテーションを使って独自のリダイレクトハンドラを登録する例を見てみましょう："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The \"alwaysRedirect\" redirect handler will only be used by the specified REST Client which in this example is the \"ExtensionsService\" client."
msgstr "alwaysRedirect\" リダイレクトハンドラは、指定した REST クライアント (この例では \"ExtensionsService\" クライアント) でのみ使用されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:"
msgstr "あるいは、CDI 経由ですべての REST クライアントに対してカスタムリダイレクトハンドラを提供することもできます："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Now, all the REST Clients will be using your custom redirect handler."
msgstr "これで、すべての REST クライアントがあなたのカスタムリダイレクトハンドラを使うようになります。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Another approach is to provide it programmatically when creating the client:"
msgstr "もう一つの方法は、クライアントの作成時にプログラムで提供することです："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "the client will use the registered redirect handler over the redirect handler provided via CDI if any."
msgstr "CDI経由で提供されたリダイレクトハンドラがある場合、クライアントは登録されたリダイレクトハンドラを使用します。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr "次に、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。`src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、テストの内容を以下のように変更します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上記のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "クライアントのリアクティブな性質をフルに活用するには、 `CompletionStage` と `Uni` をサポートしたノンブロッキングの REST Client 拡張機能を使用します。 `ExtensionsService` REST インターフェイスに `getByIdAsync` メソッドを追加してみましょう。コードは次のようになります："

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:rest.adoc#execution-model[Quarkus REST execution model] for more details."
msgstr "呼び出しがノンブロッキングになったため、 `idAsync` メソッドはイベントループで呼び出され、ワーカープールスレッドにオフロードされないため、ハードウェアリソースの使用率が下がることに注意してください。詳細は xref:rest.adoc#execution-model[Quarkus REST実行] モデルを参照してください。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、再試行のためにサービスのメソッドを呼び出す必要があります。この違いは、 Mutiny とそのサブスクリプションプロトコルの lazy (遅延) 性の側面から来ています。これについての詳細は link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[Mutiny の ドキュメント] を参照してください。"

#: _versions/main/guides/rest-client.adoc
msgid "Server-Sent Event (SSE) support"
msgstr "サーバー送信イベント (SSE) のサポート"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Consuming SSE events is possible simply by declaring the result type as a `io.smallrye.mutiny.Multi`."
msgstr "SSE イベントを消費するには、結果の型を `io.smallrye.mutiny.Multi` として宣言します。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The simplest example is:"
msgstr "一番簡単な例はこうです："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "All the IO involved in streaming the SSE results is done in a non-blocking manner."
msgstr "SSE結果のストリーミングに関わるすべてのIOは、ノンブロッキングで行われます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Results are not limited to strings - for example when the server returns JSON payload for each event, Quarkus automatically deserializes it into the generic type used in the `Multi`."
msgstr "例えば、サーバーが各イベントのJSONペイロードを返す場合、Quarkusは自動的にそれを `Multi` で使用される汎用タイプにデシリアライズします。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Users can also access the entire SSE event by using the `org.jboss.resteasy.reactive.client.SseEvent` type."
msgstr "ユーザーは、 `org.jboss.resteasy.reactive.client.SseEvent` タイプを使用して、SSE イベント全体にアクセスすることもできます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A simple example where the event payloads are `Long` values is the following:"
msgstr "イベントペイロードが `Long` 値である簡単な例を以下に示します："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Filtering out events"
msgstr "イベントのフィルタリング"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"On occasion, the stream of SSE events may contain some events that should not be returned by the client - an example of this is having the server send heartbeat events in order to keep the underlying TCP connection open.\n"
"The REST Client supports filtering out such events by providing the `@org.jboss.resteasy.reactive.client.SseEventFilter`."
msgstr "SSE イベントのストリームには、クライアントが返すべきでないイベントが含まれることがあります。この例として、基盤となる TCP 接続を開いたままにするために、サーバがハートビート・イベントを送信することがあります。REST Client は、 `@org.jboss.resteasy.reactive.client.SseEventFilter` を提供することで、そのようなイベントのフィルタリングをサポートしています。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Here is an example of filtering out heartbeat events:"
msgstr "ハートビート・イベントをフィルタリングする例を示します："

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#: _versions/main/guides/rest-client.adoc
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "REST 呼び出しのカスタムヘッダーを指定する方法はいくつかあります。"

#: _versions/main/guides/rest-client.adoc
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "`@RegisterClientHeaders` アノテーションを用いて `ClientHeadersFactory` または `ReactiveClientHeadersFactory` を登録する。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method"
msgstr "`ClientHeadersFactory` または `ReactiveClientHeadersFactory` を `QuarkusRestClientBuilder.clientHeadersFactory(factory)` メソッドでプログラム的に登録することによって。"

#: _versions/main/guides/rest-client.adoc
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "`@ClientHeaderParam` でヘッダーの値を指定する"

#: _versions/main/guides/rest-client.adoc
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "`@HeaderParam` でヘッダーの値を指定する"

#: _versions/main/guides/rest-client.adoc
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "以下のコードは、これらの各手法の使用方法を示しています。"

#: _versions/main/guides/rest-client.adoc
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "クラスごとに存在できる `ClientHeadersFactory` は 1 つだけです。これを使用すると、カスタムヘッダーを追加できるだけでなく、既存のヘッダーを変換することもできます。ファクトリーの例については、以下の `RequestUUIDHeaderFactory` クラスを参照してください。"

#: _versions/main/guides/rest-client.adoc
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` は、クライアントインターフェイスとメソッドで使用できます。一定のヘッダー値を指定できます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`)."
msgstr ""
"\n"
" と、ヘッダーの値を計算するメソッドの名前を指定します。これは、このインターフェイスの静的メソッドまたはデフォルトメソッドになります。このメソッドは、パラメータを受け取らないか、String パラメータを 1 つだけ受け取るか、 `io.quarkus.rest.client.reactive.ComputedParamContext` パラメータを 1 つだけ受け取ります (これは、メソッドのパラメータに基づいてヘッダを計算する必要があるコードで非常に便利で、 `@io.quarkus.rest.client.reactive.NotBody` を自然に補完します)。"

#: _versions/main/guides/rest-client.adoc
msgid "... as well as a value from your application's configuration"
msgstr "また、アプリケーションの設定値も使用します。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)"
msgstr ""
"\n"
" あるいは、逐語的なテキスト、(名前で参照される) メソッドパラメータ、(前述したように) 設定値、(前述したように) メソッド呼び出しが混在していてもかまいません。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "... or as a normal Jakarta REST `@HeaderParam` annotated argument"
msgstr ""
"\n"
" あるいは、通常の Jakarta REST `@HeaderParam` のアノテーション引数としても使用できます。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr "Kotlin を使用するときにデフォルトのメソッドを利用する場合は、Java のデフォルトのインターフェイス機能を使用するように Kotlin コンパイラーを設定する必要があります。詳細は、link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[こちら] を参照してください。"

#: _versions/main/guides/rest-client.adoc
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` は次のようになります。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#: _versions/main/guides/rest-client.adoc
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "`${header.value}` に値を指定するには、`application.properties` に以下のように記述するだけです。"

#: _versions/main/guides/rest-client.adoc
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "また、ブロッキング操作を実行できる `ClientHeadersFactory` のリアクティブフレーバーがあります。例えば:"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"When using HTTP Basic Auth, the `@io.quarkus.rest.client.reactive.ClientBasicAuth` annotation provides a much simpler way of configuring\n"
"the necessary `Authorization` header."
msgstr "HTTP Basic Authを使用する場合、 `@io.quarkus.rest.client.reactive.ClientBasicAuth` アノテーションは、必要な `Authorization` ヘッダーを設定する、よりシンプルな方法を提供します。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A very simple example is:"
msgstr "簡単な例を挙げましょう："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "where `service.username` and `service.password` are configuration properties that must be set at runtime to the username and password that allow access to the service being called."
msgstr "ここで、 `service.username` と `service.password` は、呼び出されるサービスへのアクセスを許可するユーザー名とパスワードを実行時に設定しなければならない設定プロパティです。"

#. type: Title ===
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr "`@RegisterClientHeaders` アノテーションは、カスタムファクトリーを指定せずに使用することもできます。その場合、`DefaultClientHeadersFactoryImpl` ファクトリーが使用されます。REST リソースから REST クライアント呼び出しを行う場合、このファクトリーは、`org.eclipse.microprofile.rest.client.propagateHeaders` 設定プロパティーにリストされているすべてのヘッダーをリソースリクエストからクライアントリクエストに伝播させます。個々のヘッダー名はコンマで区切られます。"

#: _versions/main/guides/rest-client.adoc
msgid "Customizing the request"
msgstr "リクエストのカスタマイズ"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The REST Client supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`."
msgstr "RESTクライアントは、フィルターを使ってサーバーに送る最終リクエストのさらなるカスタマイズをサポートしています。フィルタは `ClientRequestFilter` あるいは `ResteasyReactiveClientRequestFilter` のどちらかのインターフェイスを実装しなければなりません。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A simple example of customizing the request would be to add a custom header:"
msgstr "リクエストをカスタマイズする簡単な例は、カスタムヘッダを追加することです："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Next, you can register your filter using the `@RegisterProvider` annotation:"
msgstr "次に、 `@RegisterProvider` アノテーションを使ってフィルタを登録します："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Or programmatically using the `.register()` method:"
msgstr "または、 `.register()` メソッドを使ってプログラム的に："

#: _versions/main/guides/rest-client.adoc
msgid "Injecting the `jakarta.ws.rs.ext.Providers` instance in filters"
msgstr "`jakarta.ws.rs.ext.Providers` インスタンスをフィルターに注入する"

#: _versions/main/guides/rest-client.adoc
msgid "The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client."
msgstr "`jakarta.ws.rs.ext.Providers` は、現在のクライアントのプロバイダー・インスタンスを検索する必要がある場合に便利です。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "We can get the `Providers` instance in our filters from the request context as follows:"
msgstr "リクエストコンテキストから、 `Providers` インスタンスを取得します："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:"
msgstr "あるいは、 `ResteasyReactiveClientRequestContext` コンテキストを直接提供する `ClientRequestFilter` インターフェイスの代わりに、 `ResteasyReactiveClientRequestFilter` インターフェイスを実装することもできます："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Customizing the ObjectMapper in REST Client Jackson"
msgstr "RESTクライアントJacksonにおけるObjectMapperのカスタマイズ"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The REST Client supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`."
msgstr "REST クライアントは、 `@ClientObjectMapper` というアノテーションを使用して、クライアントのみで使用するカスタム ObjectMapper の追加をサポートしています。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A simple example is to provide a custom ObjectMapper to the REST Client Jackson extension by doing:"
msgstr "簡単な例としては、REST Client Jackson 拡張機能にカスタム ObjectMapper を提供する方法があります："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The method must be annotated with `@ClientObjectMapper`."
msgstr "メソッドには `@ClientObjectMapper` のアノテーションが必要です。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime."
msgstr "静的メソッドでなければなりません。また、パラメータ `defaultObjectMapper` は CDI 経由で解決されます。見つからない場合は、実行時に例外がスローされます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead."
msgstr "この例では、デフォルトのオブジェクトマッパーのコピーを作成しています。デフォルトのオブジェクトマッパーを変更するべきでは *ありません* 。"

#: _versions/main/guides/rest-client.adoc
msgid "Exception handling"
msgstr "例外処理"

#: _versions/main/guides/rest-client.adoc
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST クライアント仕様では、HTTP 応答を例外に変換することを目的とした `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` が導入されています。"

#: _versions/main/guides/rest-client.adoc
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "上記の `ExtensionsService` にこのような `ResponseExceptionMapper` を実装する簡単な例は、次のとおりです。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr "`ResponseExceptionMapper` は、`ResponseExceptionMapper` 実装が呼び出される優先度を決定するために使用される `getPriority` メソッドも定義します (`getPriority` の値が小さい実装が最初に呼び出されます)。`toThrowable` が例外を返す場合、その例外が出力されます。`null` が返された場合、チェーン内の `ResponseExceptionMapper` の次の実装が呼び出されます (存在する場合)。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientExceptionMapper"
msgstr "@ClientExceptionMapper を使用する"

#: _versions/main/guides/rest-client.adoc
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "400 以上の HTTP 応答コードを変換する簡単な方法は、`@ClientExceptionMapper` アノテーションを使用することです。"

#: _versions/main/guides/rest-client.adoc
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "上記で定義された `ExtensionsService` REST クライアントインターフェイスの場合、`@ClientExceptionMapper` の使用例は次のようになります。"

#: _versions/main/guides/rest-client.adoc
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "当然、この処理は REST クライアントごとに行われます。`@ClientExceptionMapper` は、`priority` 属性が設定されておらず、すべてのハンドラーを呼び出す通常のルールが適用される場合、デフォルトの優先度を使用します。"

#: _versions/main/guides/rest-client.adoc
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr "`@ClientExceptionMapper` でアノテーションされたメソッドは、 `java.lang.reflect.Method` パラメータを取れます。これは、例外対応のコードは、呼び出されて例外を発生したREST Client メソッドを知る場合に便利です。"

#: _versions/main/guides/rest-client.adoc
msgid "Using @Blocking annotation in exception mappers"
msgstr "例外マッパーでの@Blockingアノテーションの使用"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):"
msgstr "RESTクライアントメソッドの戻り値型として `InputStream` を使用する必要がある場合（大量のデータを読み込む必要がある場合など）："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations."
msgstr "これは期待通りに動作しますが、カスタム例外マッパーでこのInputStreamオブジェクトを読もうとすると、 `BlockingNotAllowedException` 例外が発生します。これは `ResponseExceptionMapper` クラスがデフォルトでイベントループのスレッド実行系で実行されるためです。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:"
msgstr "例外マッパーをブロッキングさせるには、例外マッパーに `@Blocking` アノテーションをつけます："

#: _versions/main/guides/rest-client.adoc
msgid "With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool."
msgstr "`@Blocking` アノテーションにより、MyResponseExceptionMapper例外マッパーはワーカースレッドプールで実行されることになります。"

#: _versions/main/guides/rest-client.adoc
msgid "Reading the entity is now allowed because we're executing the mapper on the worker thread pool."
msgstr "ワーカースレッドプールでマッパーを実行しているため、エンティティの読み取りが許可されるようになりました。"

#: _versions/main/guides/rest-client.adoc
msgid "Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:"
msgstr "なお、@ClientExceptionMapperを使用する場合は、 `@Blocking` アノテーションを使用することも可能です:"

#: _versions/main/guides/rest-client.adoc
msgid "Disabling the default mapper"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"As mandated by the REST Client specification, a default exception mapper is included, that throws an exception when HTTP status code is higher than 400.\n"
"While this behavior is fine when the client returns a regular object, it is however very unintuitive when the client needs to return a `jakarta.ws.rs.core.Response`\n"
"(with the intention of allowing the caller to decide how to handle the HTTP status code)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "For this reason, the REST Client includes a property named `disable-default-mapper` which can be used to disable the default mapper when using a REST client in a declarative manner."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "For example, with a client like so:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The default exception mapper can be disabled by setting `quarkus.rest-client.bar.disable-default-mapper=true` to disable the exception mapper for the REST Client configured with the key `bar`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"When using the programmatic approach for creating a REST Client, `QuarkusRestClientBuilder` provides a method named `disableDefaultMapper`\n"
"that provides the same feature."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Multipart Form support"
msgstr "マルチパートフォームのサポート"

#: _versions/main/guides/rest-client.adoc
msgid "Sending Multipart messages"
msgstr "マルチパートメッセージの送信"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr "RESTクライアントでは、データをマルチパートフォームとして送信することができます。これにより、例えばファイルを効率的に送信することができます。"

#: _versions/main/guides/rest-client.adoc
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr "データをマルチパートフォームとして送信するには、通常の `@RestForm` (または `@FormParam` ) アノテーションを使用します:"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"Parameters specified as `File`, `Path`, `byte[]`, `Buffer` or `FileUpload` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr "`File` , `Path` , `byte[]` , `Buffer` または `FileUpload` として指定されたパラメータはファイルとして送信され、デフォルトで `application/octet-stream` MIME タイプになります。その他の `@RestForm` パラメータ・タイプのデフォルトは `text/plain` MIME タイプです。これらのデフォルトは、 `@PartType` アノテーションでオーバーライドできます。"

#: _versions/main/guides/rest-client.adoc
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr "当然ながら、これらのパラメータを含むクラスにまとめられます:"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]`, `Buffer` or `FileUpload`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr "`File` 、 `Path` 、 `byte[]` 、 `Buffer` 、 `FileUpload` 、 `@PartType` でアノテーションされたすべての `@RestForm` パラメータは、 `@Consumes` が存在しない場合、自動的にメソッドに `@Consumes(MediaType.MULTIPART_FORM_DATA)` を意味します。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr "マルチパートではない `@RestForm` パラメータがある場合、 その時は `@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` になります。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"REST Client uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr "フォームデータのエンコードにはいくつかのモードがあります。デフォルトでは、RESTクライアントはRFC1738を使用します。 `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder プロパティを `HttpPostRequestEncoder.EncoderMode` の選択された値に設定するか、 `application.properties` で `quarkus.rest-client.multipart-post-encoder-mode` を指定することで、クライアントレベルでモードを指定して上書きすることができます。後者は `@RegisterRestClient` アノテーションで作成されたクライアントにのみ機能することに注意してください。利用可能なモードはすべて link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Nettyのドキュメントに] 記載されています。"

#: _versions/main/guides/rest-client.adoc
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr "また、 `@PartType` アノテーションを指定することで、JSON のマルチパートも送信できます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Programmatically creating the Multipart form"
msgstr "プログラムでマルチパートフォームを作成"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "In cases where the multipart content needs to be built up programmatically, the REST Client provides `ClientMultipartForm` which can be used in the REST Client like so:"
msgstr "マルチパートコンテンツをプログラムで作成する必要がある場合、REST Clientは `ClientMultipartForm` ："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "More information about this class and supported methods can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[`ClientMultipartForm`]."
msgstr "このクラスとサポートされているメソッドについての詳細は link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[ClientMultipartForm] ."

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Converting a received multipart object into a client request"
msgstr "受信したマルチパートオブジェクトをクライアントリクエストに変換"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A good example of creating `ClientMultipartForm` is one where it is created from the server's `MultipartFormDataInput` (which represents a multipart request received by xref:rest.adoc#multipart[Quarkus REST]) - the purpose being to propagate the request downstream while allowing for arbitrary modifications:"
msgstr "`ClientMultipartForm` を作成する良い例として、サーバーの `MultipartFormDataInput` xref:rest.adoc#multipart[（Quarkus REST] が受信したマルチパートリクエストを表します）から作成されるものがあります："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`MultipartFormDataInput` is a Quarkus REST (Server) type representing a received multipart request."
msgstr "`MultipartFormDataInput` は、受信したマルチパートリクエストを表すQuarkus REST（Server）タイプです。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A `ClientMultipartForm` is created."
msgstr "`ClientMultipartForm` 。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`FileItem` attribute is created for the request attribute that represented an in memory file attribute"
msgstr "`FileItem` 属性が作成されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`FileItem` attribute is created for the request attribute that represented a file attribute saved on the file system"
msgstr "`FileItem` 属性は、ファイルシステム上に保存されたファイル属性を表すリクエスト属性に対して作成されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Non-file attributes added directly to `ClientMultipartForm` if not `FileItem`."
msgstr "`FileItem` でない場合は、 `ClientMultipartForm` に直接追加されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "In a similar fashion if the received server multipart request is known and looks something like:"
msgstr "同様に、受信したサーバーのマルチパートリクエストが既知で、以下のようなものであった場合："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "the `ClientMultipartForm` can be created easily as follows:"
msgstr "`ClientMultipartForm` は以下のように簡単に作成できます："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`Request` representing the request the server parts accepts"
msgstr "`Request` サーバが受け付けるリクエストを表します。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A `jsonPayload` attribute is added directly to `ClientMultipartForm`"
msgstr "`jsonPayload` 属性は `ClientMultipartForm`"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "A `fileUpload` is created from the request's `FileUpload`"
msgstr "`fileUpload` リクエストの `FileUpload`"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"When sending multipart data that uses the same name, problems can arise if the client and server do not use the same multipart encoder mode.\n"
"By default, the REST Client uses `RFC1738`, but depending on the situation, clients may need to be configured with `HTML5` or `RFC3986` mode."
msgstr "同じ名前を使用するマルチパート・データを送信する場合、クライアントとサーバーが同じマルチパート・エンコーダ・モードを使用しないと、問題が発生する可能性があります。デフォルトでは、RESTクライアントは `RFC1738` を使用しますが、状況によってはクライアントを `HTML5` または `RFC3986` モードで設定する必要があります。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "This configuration can be achieved via the `quarkus.rest-client.multipart-post-encoder-mode` property."
msgstr "この設定は、 `quarkus.rest-client.multipart-post-encoder-mode` プロパティで行うことができます。"

#: _versions/main/guides/rest-client.adoc
msgid "Receiving Multipart Messages"
msgstr "マルチパートメッセージの受信"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr "REST Client は、マルチパートメッセージの受信もサポートしています。送信時と同様、マルチパート応答を解析するには、応答データを記述するクラスを作成する必要があります。"

#: _versions/main/guides/rest-client.adoc
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "省略形の `@RestForm` アノテーションを使用して、マルチパートフォームの一部としてフィールドを作成します"

#: _versions/main/guides/rest-client.adoc
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "標準の `@FormParam` も使用できます。マルチパートパートの名前を上書きできます。"

#: _versions/main/guides/rest-client.adoc
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "次に、呼び出しに対応するインターフェイスメソッドを作成し、`FormDto` を返すようにします。"

#: _versions/main/guides/rest-client.adoc
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "現時点では、マルチパート応答のサポートには次の制限があります。"

#: _versions/main/guides/rest-client.adoc
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "マルチパート応答で送信されたファイルは、`File`、`Path`、および `FileDownload` にのみ解析できます。"

#: _versions/main/guides/rest-client.adoc
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "応答タイプの各フィールドには `@PartType` アノテーションを付ける必要があります - このアノテーションのないフィールドは無視されます"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "REST Client needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "REST Client は、マルチパートの返り値として使用されるクラスを前もって知っておく必要があります。 `multipart/form-data` を生成するインターフェース・メソッドがある場合、戻り値の型は自動的に検出されます。ただし、 `ClientBuilder` API を使用してレスポンスをマルチパートとして解析する場合は、DTO クラスに `@MultipartForm` のアノテーションを付ける必要があります。"

#: _versions/main/guides/rest-client.adoc
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "ダウンロードしたファイルは自動的に削除されず、多くのディスク領域を占有する可能性があります。作業が終わったら、ファイルを削除することを検討してください。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Multipart mixed / OData usage"
msgstr "マルチパート混合 / ODataの使用"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].\n"
"This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help)."
msgstr "アプリケーションは、 link:https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData] と呼ばれる特別なプロトコルを使用して、企業システム (CRM システムなど) とやり取りする必要があります。このプロトコルは、基本的にカスタム HTTP `Content-Type` を使用し、REST Client と連携するためのグルーコードを必要とします (ボディの作成は、すべてアプリケーションに任されており、REST Client はあまり手助けできません)。"

#: _versions/main/guides/rest-client.adoc
msgid "An example looks like the following:"
msgstr "例は次のようになります:"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The code uses the following pieces:"
msgstr "このコードには以下の部分が使われています："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method."
msgstr "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` これは、インターフェイスの デフォルトメソッドを呼び出すことで ヘッダが作成されるようにします。 `calculateContentType` `Content-Type` "

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers."
msgstr "前述のパラメータは、HTTPヘッダの構築を補助するためだけに使用されるため、 `@NotBody` のアノテーションが必要です。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method."
msgstr "`context.methodParameters().get(1).value()` これは、 メソッドが REST クライアントメソッドに渡された適切なメソッドパラメータを取得できるようにするものです。 `calculateContentType` "

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements."
msgstr "前述したように、ボディパラメータは、サービスの要件に適合するように、アプリケーションコードによって適切に作成される必要があります。"

#: _versions/main/guides/rest-client.adoc
msgid "Receiving compressed messages"
msgstr "圧縮メッセージの受信"

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client also supports receiving compressed messages using GZIP. You can enable the HTTP compression support by adding the property `quarkus.http.enable-compression=true`.\n"
"When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client will automatically decode the content and proceed with the message handling."
msgstr ""
"REST Client は、GZIP を使用した圧縮メッセージの受信もサポートしています。HTTP 圧縮のサポートを有効にするには、プロパティ `quarkus.http.enable-compression=true` を追加します。こ\n"
"の機能が有効で、サーバがヘッダ `Content-Encoding: gzip` を含む応答を返すと、REST Client は自動的にコンテンツをデコードし、メッセージの処理を続行します。"

#: _versions/main/guides/rest-client.adoc
msgid "Proxy support"
msgstr "プロキシーサポート"

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr ""
"REST Client はプロキシ経由でのリクエスト送信をサポートしています。\n"
"JVMの設定を尊重しますが、両方を指定することもできます："

#: _versions/main/guides/rest-client.adoc
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "グローバルクライアントプロキシー設定、 `quarkus.rest-client.proxy-address`、`quarkus.rest-client.proxy-user`、`quarkus.rest-client.proxy-password`、`quarkus.rest-client.non-proxy-hosts`"

#: _versions/main/guides/rest-client.adoc
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` などのクライアントごとのプロキシー設定です。これらは、CDI で挿入されたクライアント、つまり `@RegisterRestClient` で作成されたクライアントに対してのみ適用されます。"

#: _versions/main/guides/rest-client.adoc
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "`proxy-address` がクライアントレベルで設定されている場合、クライアントは特定のプロキシー設定を使用します。プロキシー設定は、グローバル設定または JVM プロパティーから伝播されません。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr "クライアントに `proxy-address` が設定されていないが、グローバルレベルで設定されている場合、クライアントはグローバル設定を使用します。それ以外の場合、クライアントは JVM 設定を使用します。"

#: _versions/main/guides/rest-client.adoc
msgid "An example configuration for setting proxy:"
msgstr "プロキシーを設定するための設定例:"

#: _versions/main/guides/rest-client.adoc
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST クライアント仕様では、プロキシー資格情報の設定は許可されていません。プログラムでプロキシーユーザーとプロキシーパスワードを指定するには、`RestClientBuilder` を `RestClientBuilderImpl` にキャストする必要があります。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Local proxy for dev mode"
msgstr "dev モードのローカルプロキシ"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"When using the REST Client in dev mode, Quarkus has the ability to stand up a pass-through proxy which can be used as a target for Wireshark (or similar tools)\n"
"in order to capture all the traffic originating from the REST Client (this really makes sense when the REST Client is used against HTTPS services)"
msgstr "RESTクライアントを開発モードで使用する場合、Quarkusにはパススループロキシを立ち上げる機能があり、これをWireshark（または同様のツール）のターゲットとして使用することで、RESTクライアントから発信されるすべてのトラフィックをキャプチャできます（これは、RESTクライアントがHTTPSサービスに対して使用される場合に非常に理にかなっています）。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"To enable this feature, all that needs to be done is set the `enable-local-proxy` configuration option for the configKey corresponding to the client for which proxying is desired.\n"
"For example:"
msgstr "この機能を有効にするには、プロキシ処理を行いたいクライアントに対応する configKey に `enable-local-proxy` コンフィグレーション・オプションを設定するだけです。例えば"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"When a REST Client does not use a config key (for example when it is created programmatically via `QuarkusRestClientBuilder`) then the class name can be used instead.\n"
"For example:"
msgstr "RESTクライアントがコンフィグキーを使用しない場合(例えば、 `QuarkusRestClientBuilder` を介してプログラムで作成された場合)、代わりにクラス名を使用することができます。例えば"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The port the proxy is listening can be found in startup logs. An example entry is:"
msgstr "プロキシがリッスンしているポートは起動ログで見つけることができます。エントリの例は"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Run the application with:"
msgstr "次のコマンドでアプリケーションを実行します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client を開きます。"

#: _versions/main/guides/rest-client.adoc
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "このエクステンションに関する基本的な情報を含む JSON オブジェクトが表示されるはずです。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#: _versions/main/guides/rest-client.adoc
msgid "Logging traffic"
msgstr "トラフィックの記録"

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""
"REST Client は、送信したリクエストと受信したレスポンスをログに記録できます。\n"
"ロギングを有効にするには、 `application.properties` に `quarkus.rest-client.logging.scope` プロパティを追加し、次のように設定します："

#: _versions/main/guides/rest-client.adoc
msgid "`request-response` to log the request and response contents, or"
msgstr "リクエストと応答の内容をログに記録する `request-response` 、または"

#: _versions/main/guides/rest-client.adoc
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` は、基礎となるライブラリーの低レベルのロギングも有効にします。"

#: _versions/main/guides/rest-client.adoc
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "HTTP メッセージには大きな本文が含まれる可能性があるため、ログに記録される本文の文字数を制限します。デフォルトの制限は `100` ですが、`quarkus.rest-client.logging.body-limit` を指定することで変更できます。"

#: _versions/main/guides/rest-client.adoc
msgid "REST Client is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST クライアントは、レベル DEBUG でトラフィックをロギングし、ロガー プロパティを変更しません。この機能を使用するには、ロガー設定を調整する必要があります。"

#: _versions/main/guides/rest-client.adoc
msgid "An example logging configuration:"
msgstr "ロギング設定の例:"

#: _versions/main/guides/rest-client.adoc
msgid "REST Client uses a default `ClientLogger` implementation, which can be swapped out for a custom implementation."
msgstr "REST Client はデフォルトの `ClientLogger` 実装を使用します。この実装は、カスタム実装に置き換えることができます。"

#: _versions/main/guides/rest-client.adoc
msgid "When setting up the client programmatically using the `QuarkusRestClientBuilder`, the `ClientLogger` is set via the `clientLogger` method."
msgstr "`QuarkusRestClientBuilder` を使用してプログラムでクライアントを設定する場合、 `ClientLogger` は `clientLogger` メソッドで設定されます。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "For declarative clients using `@RegisterRestClient`, simply providing a CDI bean that implements `ClientLogger` is enough for that logger to be used by said clients."
msgstr "`@RegisterRestClient` を使用する宣言型クライアントの場合、 `ClientLogger` を実装する CDI Bean を提供するだけで、そのロガーがクライアントによって使用されるのに十分です。"

#: _versions/main/guides/rest-client.adoc
msgid "Mocking the client for tests"
msgstr "テストのためのクライアントのモッキング"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr "`@RestClient` アノテーションが挿入されたクライアントを使用する場合は、テスト用に簡単にモックすることができます。Mockito の `@InjectMock`　または `QuarkusMock` でそれを行うことができます。"

#: _versions/main/guides/rest-client.adoc
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr "このセクションでは、クライアントをモックに置き換える方法を示します。Quarkus でモッキングがどのように機能するかをより深く理解したい場合は、 https://quarkus.io/blog/mocking/[Mocking CDI beans] のブログ投稿を参照してください。"

#: _versions/main/guides/rest-client.adoc
msgid "Mocking does not work when using `@QuarkusIntegrationTest`."
msgstr "`@QuarkusIntegrationTest` を使用した場合、モッキングは動作しません。"

#: _versions/main/guides/rest-client.adoc
msgid "Let's assume you have the following client:"
msgstr "次のクライアントがあると仮定します。"

#: _versions/main/guides/rest-client.adoc
msgid "Mocking with InjectMock"
msgstr "InjectMock でモックする"

#: _versions/main/guides/rest-client.adoc
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr "テスト用にクライアントをモックする最も簡単な方法は、Mockito と `@InjectMock` を使用することです。"

#: _versions/main/guides/rest-client.adoc
msgid "First, add the following dependency to your application:"
msgstr "まず、以下の依存関係をアプリケーションに追加します。"

#: _versions/main/guides/rest-client.adoc
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr "次に、テストで `@InjectMock` を使用して、モックを作成して挿入できます。"

#: _versions/main/guides/rest-client.adoc
msgid "Mocking with QuarkusMock"
msgstr "QuarkusMock でモックする"

#: _versions/main/guides/rest-client.adoc
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr "Mockito がニーズを満たさない場合は、`QuarkusMock` を使用してプログラムでモックを作成できます。例:"

#: _versions/main/guides/rest-client.adoc
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr "ここでは、手動で作成したクライアントインターフェイスの実装を使用して、実際のクライアントを置き換えます"

#: _versions/main/guides/rest-client.adoc
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr "`RestClient.LITERAL` は `installMockForType` メソッドの最後の引数として渡される必要があることに注意してください"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n"
"Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n"
"In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "テストを実行する際にモック HTTP サーバーを設定することは、一般的なテストパターンです。そのようなサーバーの例としては、 link:http://wiremock.org/[Wiremock] や link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] があります。このセクションでは、ここまでで開発した `ExtensionsService` をテストするために Wiremock を活用する方法を示します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "最初に、 Wiremock をテストの依存関係として追加する必要があります。 Maven プロジェクトの場合は以下のようになります。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr "適切なWiremockバージョンを使用してください。利用可能なすべてのバージョンは、 link:https://search.maven.org/artifact/org.wiremock/wiremock[こちら] をご覧ください。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr "Quarkusのテストを実行する前にサービスを開始する必要がある場合、Quarkusのテストでは、 `@io.quarkus.test.common.QuarkusTestResource` アノテーションを利用して、サービスを開始できる `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を指定し、Quarkusが使用する設定値を提供します。"

#: _versions/main/guides/rest-client.adoc
msgid "For more details about `@QuarkusTestResource` refer to  xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "`@QuarkusTestResource` の詳細については、 xref:getting-started-testing.adoc#quarkus-test-resource[ドキュメントの当該箇所] を参照してください。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "このように `QuarkusTestResourceLifecycleManager` の実装である `WiremockExtensions` を作成してみましょう。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "Wiremockパッケージのメソッドを静的にインポートすると、テストを読みやすくなります。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr "`start` メソッドは、テストを実行する前にQuarkusによって呼び出され、テスト実行中に適用される設定プロパティーの `Map` を返します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Launch Wiremock."
msgstr "Wiremockを起動します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "特定の定型文を返すことで、 Wiremockが `/extensions?id=io.quarkus:quarkus-rest-client` への呼び出しをスタブするように設定します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "スタブ化されていないすべての HTTP 呼び出しは、実際のサービスを呼び出すことで処理されます。これは、実際のテストでは通常発生しないことなので、デモンストレーションのために行われています。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n"
"of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "`start` メソッドはテストに適用される設定を返すので、 `ExtensionsResource` の実装で使用されるベースURLを制御する rest-client プロパティーを、Wiremock がリクエストの着信をリッスンするベースURLに設定します。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "When all tests have finished, shutdown Wiremock."
msgstr "すべてのテストが終了したら、Wiremockをシャットダウンします。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr "`ExtensionsResourceTest` テストクラスには、このようなアノテーションが必要です。"

#: _versions/main/guides/rest-client.adoc
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr "`@QuarkusTestResource` は `ExtensionsResourceTest` だけでなく、すべてのテストに適用されます。"

#: _versions/main/guides/rest-client.adoc
msgid "Known limitations"
msgstr "既知の制限"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"While the REST Client extension aims to be a drop-in replacement for the RESTEasy Client extension, there are some differences\n"
"and limitations:"
msgstr "REST Client エクステンションは、RESTEasy Client エクステンションをそのまま置き換えることを目的としていますが、いくつかの相違点と制限があります："

#: _versions/main/guides/rest-client.adoc
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-resteasy-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client.scope` property to the fully qualified scope name."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "it is not possible to set `SSLContext`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "`ExecutorService` の設定など、非ブロッキング実装には意味をなさないいくつかのことが機能しません"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"

#: _versions/main/guides/rest-client.adoc
msgid "Configuration Reference"
msgstr "設定リファレンス"

#: _versions/main/guides/rest-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/main/guides/rest-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
