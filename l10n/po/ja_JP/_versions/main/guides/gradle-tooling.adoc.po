msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/gradle-tooling.adoc:7
#, fuzzy
msgid "Quarkus and Gradle"
msgstr "QuarkusとGradle"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:13
#, fuzzy
msgid "Use Gradle to create a new project, add or remove extensions, launch development mode, debug your application, and build your application into a jar, native executable, or container-friendly executable. Import your project into your favorite IDE using Gradle project metadata."
msgstr "Gradleを使用して、新しいプロジェクトを作成し、エクステンションを追加または削除し、開発モードを起動し、アプリケーションをデバッグし、アプリケーションをjar、ネイティブ実行ファイル、またはコンテナフレンドリーな実行ファイルにビルドします。Gradleプロジェクトのメタデータを使用して、お気に入りのIDEにプロジェクトをインポートします。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:16
msgid "Creating a new project"
msgstr "新規プロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:18
msgid "To scaffold a Gradle project you can either use the xref:cli-tooling.adoc[Quarkus CLI] or the Quarkus Maven plugin:"
msgstr "Gradleプロジェクトを生成するには、 link:cli-tooling.html[Quarkus CLI]またはQuarkus Mavenプラグインを使用できます:"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:111
msgid "CLI"
msgstr "コマンドラインインタフェース"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:30
msgid "_For more information about how to install the Quarkus CLI and use it, please refer to xref:cli-tooling.adoc[the Quarkus CLI guide]._"
msgstr "_Quarkus CLIのインストール方法や使用方法については、 xref:cli-tooling.adoc[Quarkus CLIガイド] を参照してください。_"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:34
msgid "Maven"
msgstr "Maven"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:45
#, fuzzy
msgid ""
"If you just launch `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create` the Maven plugin asks\n"
"for user inputs. You can disable this interactive mode (and use default values) by passing `-B` to the Maven command."
msgstr "`mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create` 、Mavenプラグインはユーザー入力を要求します。Mavenコマンドに `-B` を渡すことで、この対話型モードを無効にする（デフォルト値を使用する）ことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:49
msgid "If you prefer using the Kotlin DSL, use `gradle-kotlin-dsl` instead of `gradle`."
msgstr "Kotlin DSLを使用したい場合は、 `gradle` の代わりに `gradle-kotlin-dsl` を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:53
msgid "Quarkus project scaffolding automatically installs the Gradle wrapper (`./gradlew`) in your project."
msgstr "Quarkusプロジェクトのスキャフォールドは、プロジェクトにGradleラッパー( `./gradlew` )を自動的にインストールします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:55
msgid "If you prefer to use a standalone Gradle installation, please use Gradle {gradle-version}."
msgstr "スタンドアロンのGradleを使用したい場合は、Gradle {gradle-version} を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:58
msgid "The project is generated in a directory named after the passed artifactId."
msgstr "プロジェクトは、渡されたartifactIdにちなんだ名前のディレクトリに生成されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:60
msgid ""
"A pair of Dockerfiles for native and JVM modes are also generated in `src/main/docker`.\n"
"Instructions to build the image and run the container are written in those Dockerfiles."
msgstr "ネイティブモードとJVMモード用の一対のDockerfilesも `src/main/docker` で生成されます。これらのDockerfileには、イメージをビルドしてコンテナを実行する手順が書かれています。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:64
msgid "Custom test configuration profile in JVM mode"
msgstr "JVMモードでのカスタムテスト構成プロファイル"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:66
msgid ""
"By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus\n"
"configuration profiles, everything you need to know is explained in the\n"
"xref:config-reference.adoc#profiles[Configuration Profiles Documentation]."
msgstr "デフォルトでは、JVMモードのQuarkusテストは、 `test` 設定プロファイルを使用して実行されます。Quarkusの設定プロファイルに慣れていない場合は、 link:config.html#configuration-profiles[設定プロファイル] のドキュメントで必要な情報がすべて説明されていますので、そちらを参照してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:70
msgid ""
"It is however possible to use a custom configuration profile for your tests with the Gradle build configuration shown below.\n"
"This can be useful if you need for example to run some tests using a specific database which is not your default testing\n"
"database."
msgstr "しかし、以下に示す Gradle ビルド設定でテスト用のカスタム設定プロファイルを使用することは可能です。これは例えば、デフォルトのテストデータベースではない特定のデータベースを使ってテストを実行する必要がある場合に便利です。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:689
msgid "Groovy DSL"
msgstr "Groovy DSL"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:97
msgid "The `foo` configuration profile will be used to run the tests."
msgstr "`foo`  設定プロファイルがテストの実行に使用されます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:710
msgid "Kotlin DSL"
msgstr "Kotlin DSL"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:102
msgid ""
"It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the\n"
"`prod` profile."
msgstr "今のところ、ネイティブモードでカスタムテスト設定プロファイルを使用することはできません。ネイティブテストは常に `prod`  プロファイルを使用して実行されます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:106
msgid "Dealing with extensions"
msgstr "エクステンションへの対応"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:108
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr "Quarkusプロジェクトの内部から、利用可能なエクステンションのリストを取得することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:117
msgid "Gradle"
msgstr "Gradle"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:122
msgid "You can enable an extension using:"
msgstr "以下を使ってエクステンションを有効化できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:127
msgid "Extensions are passed using a comma-separated list."
msgstr "エクステンションは、カンマ区切りのリストを使用して渡されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:129
msgid ""
"The extension name is the GAV name of the extension: e.g. `io.quarkus:quarkus-agroal`.\n"
"But you can pass a partial name and Quarkus will do its best to find the right extension.\n"
"For example, `agroal`, `Agroal` or `agro`  will expand to `io.quarkus:quarkus-agroal`.\n"
"If no extension is found or if more than one extensions match, you will see a red check mark  ❌ in the command result."
msgstr "`io.quarkus:quarkus-agroal` エクステンション名は、エクステンションのGAV名です。しかし、部分的な名前を渡すことができ、Quarkusは適切なエクステンションを見つけるために最善を尽くします。例えば、 `agroal`  、 `Agroal`  、 `agro`  は `io.quarkus:quarkus-agroal`  に展開されます。エクステンションが見つからなかったり、複数のエクステンションが一致した場合は、コマンドの結果に赤いチェックマーク❌が表示されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:148
msgid "You can install all extensions which match a globbing pattern:"
msgstr "グロブパターンに一致するエクステンションをすべてインストールすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:154
msgid "Development mode"
msgstr "開発モード"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:156
msgid ""
"Quarkus comes with a built-in development mode.\n"
"You can start it with:"
msgstr "Quarkusには開発モードが組み込まれています。以下のコマンドで起動することができます:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:161
msgid ""
"Note that if you run it this way the continuous testing experience will not be as nice, as gradle runs as a daemon\n"
"Quarkus can't draw the 'pretty' test output so falls back to just logging the output."
msgstr "この方法で実行する場合、継続的テストの使い勝手は同じにはなりません。gradleはデーモンとして実行されるため、Quarkusは「きれいな」テスト出力を描くことができず、出力のログを取るだけになってしまうからです。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:164
msgid ""
"You can then update the application sources, resources and configurations.\n"
"The changes are automatically reflected in your running application.\n"
"This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr "その後、アプリケーションのソース、リソース、および設定を更新することができます。変更は実行中のアプリケーションに自動的に反映されます。変更がすぐに反映されるので、UIやデータベースにまたがった開発をするのに最適です。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:168
msgid ""
"`quarkusDev` enables hot deployment with background compilation, which means that when you modify\n"
"your Java files or your resource files and refresh your browser these changes will automatically take effect.\n"
"This works too for resource files like the configuration property file.\n"
"The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the\n"
"Java files are compiled, and the application is redeployed, then your request is serviced by the\n"
"redeployed application. If there are any issues with compilation or deployment an error page will let you know."
msgstr "`quarkusDev`  は、バックグラウンドでのコンパイルによるホットデプロイを可能にします。つまり、Java ファイルやリソースファイルを変更してブラウザを更新すると、これらの変更が自動的に有効になります。これは、設定プロパティーファイルのようなリソースファイルにも適用されます。ブラウザをリフレッシュする行為は、ワークスペースのスキャンをトリガし、変更が検出された場合、Javaファイルがコンパイルされ、アプリケーションが再配置されると、あなたの要求は再配置されたアプリケーションによって処理されます。コンパイルやデプロイに問題がある場合は、エラーページでお知らせします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:175
msgid "Hit `CTRL+C` to stop the application."
msgstr "`CTRL+C`  を叩いてアプリケーションを停止させます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:177
msgid "You can change the working directory the development environment runs on:"
msgstr "開発環境が動作する作業ディレクトリーを変更することができます:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:203
msgid "By default, the `quarkusDev` task uses `compileJava` compiler options. These can be overridden by setting the `compilerArgs` property in the task."
msgstr "デフォルトでは、 `quarkusDev`  タスクは `compileJava`  コンパイラ・オプションを使用します。これらは、タスクの `compilerArgs`  プロパティーを設定することで上書きすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:208
msgid "By default, `quarkusDev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr "デフォルトでは、 `quarkusDev` はデバッグホストを `localhost` に設定します (セキュリティー上の理由から)。これを変更する必要がある場合、例えばすべてのホストでデバッグを有効にしたい場合は、 `-DdebugHost` オプションを次のように使用します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:215
msgid "You also can add environment variables to the development environment:"
msgstr "また、開発環境に環境変数を追加することもできます："

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:239
msgid ""
"The plugin also exposes a `quarkusDev` configuration. Using this configuration to declare a dependency will restrict the usage of that dependency to development mode.\n"
"The `quarkusDev` configuration can be used as following:"
msgstr "このプラグインは `quarkusDev` の設定も公開しています。この設定を使って依存関係を宣言すると、その依存関係の使用が開発モードに制限されます。 `quarkusDev` の設定は以下のように使用できます。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:264
msgid "Remote Development Mode"
msgstr "リモート開発モード"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:266
msgid ""
"It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)\n"
"and have changes made to your local files become immediately visible."
msgstr "開発モードをリモートで使用することができるので、コンテナー環境(OpenShiftなど)でQuarkusを実行して、ローカルファイルに加えられた変更をすぐに確認できるようにすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:269
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr "これにより、実際にアプリを実行するのと同じ環境で、同じサービスにアクセスしながら開発することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:271
msgid "Do not use this in production. This should only be used in a development environment. You should not run production applications in dev mode."
msgstr "本番環境では使用しないでください。開発環境でのみ使用してください。本番環境のアプリケーションを開発モードで実行してはいけません。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:273
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr "これを行うには、 `mutable-jar` 形式を使用して、ミュータブルアプリケーションをビルドする必要があります。 `application.xml` で以下のプロパティーを設定してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:281
msgid ""
"This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus,\n"
"so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application,\n"
"however they can also be started in dev mode."
msgstr "これは、QuarkusにMutable-jar形式を使用するように指示します。ミュータブルアプリケーションには、Quarkusのデプロイメント時間の部分も含まれているため、より多くのディスクスペースを占有します。普通に実行した場合は、イミュータブルアプリケーションと同じ速度で起動し、同じメモリーを使用しますが、devモードで起動することもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:284
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr "リモート側とローカル側の通信を安全に保つためのパスワードです。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:285
msgid ""
"The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you\n"
"may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr "アプリがdevモードで実行されるURL。これはローカル側でのみ必要なので、プロパティー ファイルから除外して、コマンド ラインでシステム プロパティーとして指定するとよいでしょう。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:288
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr "`mutable-jar` は、通常のQuarkus jarをビルドするのと同じ方法で発行することでビルドされます。つまり以下のように発行できます:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:292
msgid ""
"Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are\n"
"on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr "リモートホストでQuarkusを起動する前に、環境変数 `QUARKUS_LAUNCH_DEVMODE=true`  を設定します。ベアメタルを使用している場合は、 `export QUARKUS_LAUNCH_DEVMODE=true`  コマンドで設定し、適切に `java -jar ...` コマンドでアプリケーションを実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:295
msgid ""
"If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.\n"
"When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`."
msgstr "アプリケーションをdocker経由で実行する場合は、 `docker run` コマンドに `-e QUARKUS_LAUNCH_DEVMODE=true` を追加してイメージを起動します。アプリケーションが起動すると、ログに次のような行が表示されるはずです: `Profile dev activated. Live Coding activated` ."

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:299
msgid ""
"The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile\n"
"that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner\n"
"jar, do not attempt to run normal dev mode."
msgstr "リモート側にはMavenなどの開発ツールを入れる必要はありません。新しいQuarkusアプリケーションで生成される通常の `fast-jar` Dockerfileがあれば大丈夫です。ベアメタルのQuarkus runner jarを起動している場合は、通常のdevmodeを実行しようとしないでください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:303
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr "ここで、 `remote-dev`  コマンドを使用して、ローカルエージェントをリモートホストに接続する必要があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:310
msgid ""
"Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote\n"
"app."
msgstr "これでブラウザを更新するたびに、ローカルで行った変更がリモートアプリにすぐに表示されるようになりました。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:313
msgid "All the config options are shown below:"
msgstr "全ての設定オプションは以下の通りです:"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:317
msgid "Debugging"
msgstr "デバッグ"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:319
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr "開発モードでは、Quarkusはデフォルトでデバッグモードを有効にして起動し、JVMをサスペンドせずにポート `5005`  をリッスンします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:321
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr "この動作は、 `debug` システム・プロパティーに以下の値のいずれかを与えることで変更できます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:323
msgid "`false` - the JVM will start with debug mode disabled"
msgstr "`false`  - JVMはデバッグモードを無効にして起動します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:324
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr "`true`  - JVM はデバッグモードで起動され、 `5005`ポートをリッスンします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:325
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr "`client`  - JVM はクライアントモードで起動し、 `localhost:5005`に接続を試みます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:326
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr "`{port}` - JVM はデバッグモードで起動されています。 `{port}`"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:328
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr "追加のシステム・プロパティー `suspend` は、デバッグ・モードで起動されたときに JVM をサスペンドするために使用できます。 `suspend` は以下の値をサポートしています。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:330
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr "`y` または `true` - デバッグモードの JVM 起動が中断されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:331
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr "`n` または `false` - デバッグモードの JVM をサスペンドせずに起動します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:335
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr "また、JVMをサスペンドした状態で、デバッグモードでQuarkusアプリケーションを実行することもできます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:341
msgid "Then, attach your debugger to `localhost:5005`."
msgstr "次に、デバッガーを `localhost:5005`  にアタッチします。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:344
msgid "Import in your IDE"
msgstr "IDEでのインポート"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:346
msgid ""
"Once you have a xref:project-creation[project generated], you can import it in your favorite IDE.\n"
"The only requirement is the ability to import a Gradle project."
msgstr "xref:project-creation[プロジェクトが生成されたら] 、お気に入りのIDEでインポートすることができます。唯一の条件は、Gradleプロジェクトをインポートできることです。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:349
msgid "**Eclipse**"
msgstr "**Eclipse**"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:351
msgid ""
"In Eclipse, click on: `File -> Import`.\n"
"In the wizard, select: `Gradle -> Existing Gradle Project`.\n"
"On the next screen, select the root location of the project.\n"
"The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr "Eclipse で、 `File → Import`  をクリックします。ウィザードで、 `Gradle → Existing Gradle Project`  を選択します。次の画面で、プロジェクトのルートの場所を選択します。次の画面では、見つかったモジュールのリストが表示されるので、生成されたプロジェクトを選択して `Finish`  をクリックします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:356
msgid "In a separated terminal, run:"
msgstr "別のターミナルで、以下を実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:360
msgid "and enjoy a highly productive environment."
msgstr "では、生産性の高い環境を楽しんで下さい。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:362
msgid "**IntelliJ IDEA**"
msgstr "**IntelliJ IDEA**"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:364
msgid "In IntelliJ IDEA:"
msgstr "IntelliJ IDEAの場合:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:366
msgid "From inside IntelliJ IDEA select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr "IntelliJ IDEAの内部から `File → New → Project From Existing Sources…​` を選択するか、ウェルカム・ダイアログからであれば、 `Import project` を選択してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:383
msgid "Select the project root"
msgstr "プロジェクトのルートを選択します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:368
msgid "Select `Import project from external model` and `Gradle`"
msgstr "`Import project from external model`  を選択して `Gradle`"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:369
msgid "Next a few times (review the different options if needed)"
msgstr "Next を数回クリックします (必要に応じてさまざまなオプションを確認してください)。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:370
msgid "On the last screen click on Finish"
msgstr "最後の画面でFinishをクリックします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:372
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr "別のターミナルや組込ターミナルで、以下を実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:390
msgid "Enjoy!"
msgstr "楽しんで!"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:378
msgid "**Apache NetBeans**"
msgstr "**Apache NetBeans**"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:380
msgid "In NetBeans:"
msgstr "NetBeansの場合:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:382
msgid "Select `File -> Open Project`"
msgstr "`File → Open Project` を選択"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:384
msgid "Click on `Open Project`"
msgstr "`Open Project` をクリックしてください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:386
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr "別のターミナルまたは組込ターミナルで、プロジェクトのルートに移動して次を実行します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:392
msgid "**Visual Studio Code**"
msgstr "**Visual Studio Code**"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:394
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Gradle project."
msgstr "VS Codeでプロジェクトディレクトリーを開きます。Java Extension Pack(Javaエクステンションのセットをグループ化したもの)をインストールしている場合、プロジェクトはGradleプロジェクトとして読み込まれます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:396
msgid "Downloading dependencies for offline development and testing"
msgstr "オフラインでの開発やテストのための依存ファイルのダウンロード"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:398
msgid ""
"Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime\n"
"classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create\n"
"the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions."
msgstr "Quarkusのエクステンションの依存関係は、アプリケーションの実行時クラスパス上で終わる実行時エクステンションの依存関係と、ビルドクラスパスを作成するためにアプリケーションのビルド時にQuarkusによってのみ解決されるデプロイメント（またはビルド時）エクステンションの依存関係に分けられます。アプリケーション開発者は、Quarkusのエクステンションの実行時アーティファクトにのみ依存関係を表現することが期待されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:402
msgid "To enable the use-case of building and testing a Quarkus application offline, the plugin includes the `quarkusGoOffline` task that could be called from the command line like this:"
msgstr "オフラインでQuarkusアプリケーションを構築してテストするというユースケースを可能にするために、プラグインには `quarkusGoOffline` タスクが含まれており、コマンドラインから次のように呼び出すことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:409
msgid ""
"This task will resolve all the runtime, build time, test and dev mode dependencies of the application to the Gradle cache.\n"
"Once executed, you will be able to safely run quarkus task with `--offline` flag."
msgstr "このタスクは、アプリケーションの実行時、ビルド時、テスト、開発モードのすべての依存関係をGradleのキャッシュに解決します。実行すると、 `--offline` フラグを付けて quarkus タスクを安全に実行できるようになります。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:412
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:414
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr "ネイティブ実行可能ファイルにより、Quarkusアプリケーションはコンテナーやサーバーレスのワークロードに最適です。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:416
msgid "Make sure to have `GRAALVM_HOME` configured and pointing to the latest release of GraalVM version {graalvm-version}."
msgstr "`GRAALVM_HOME` がGraalVMのバージョン{graalvm-version}の最新リリースを指すように設定されているようにして下さい。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:418
msgid "Create a native executable using:"
msgstr "次のようにネイティブ実行可能ファイルの作成"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:422
msgid "A native executable will be present in `build/`."
msgstr "ネイティブ実行可能ファイルは、 `build/` に存在します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:424
msgid ""
"Native related properties can either be added in `application.properties` file, as command line arguments or in the `quarkusBuild` task.\n"
"Configuring the `quarkusBuild` task can be done as following:"
msgstr "ネイティブ関連のプロパティーは、 `application.properties`  ファイルにコマンドライン引数として追加するか、 `quarkusBuild`  タスクに追加することができます。 `quarkusBuild`  タスクの設定は以下のように行います:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:457
msgid "Set `quarkus.native.container-build` property to `true`"
msgstr "`quarkus.native.container-build` プロパティーを `true`"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:458
msgid "Set `quarkus.native.builder-image` property to `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"
msgstr "`quarkus.native.builder-image` プロパティに `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` をセット"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:463
msgid ""
"When using the Gradle Groovy DSL, property keys must follow lower camel case notation.\n"
"e.g. `container-build` is not valid, and should be replaced by `containerBuild`.\n"
"This limitation does not apply to the Gradle Kotlin DSL."
msgstr "Gradle Groovy DSL を使用する場合、プロパティーキーは小文字のキャメルケース表記に従わなければなりません。例: `container-build` は無効なので、 `containerBuild` で置き換えてください。この制限は Gradle Kotlin DSL には適用されません。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:468
msgid "Build a container friendly executable"
msgstr "コンテナーフレンドリーな実行ファイルのビルド"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:470
msgid ""
"The native executable will be specific to your operating system.\n"
"To create an executable that will run in a container, use the following:"
msgstr "ネイティブ実行可能ファイルは、お使いのオペレーティングシステムに固有のものになります。コンテナー内で実行される実行ファイルを作成するには、次のようにします。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:475
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a Docker container.\n"
"Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr "生成される実行ファイルは64bitのLinux実行ファイルになるので、OSによっては実行できなくなる可能性があります。しかし、Dockerコンテナーにコピーするので問題ありません。この場合、ビルド自体もDockerコンテナー内で動作するので、ローカルにGraalVMをインストールする必要はないことに注目してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:481
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` Docker image."
msgstr "デフォルトでは、ネイティブ実行可能ファイルは `quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` Dockerイメージを使用して生成されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:483
msgid ""
"If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version),\n"
"use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr "異なるDockerイメージでネイティブ実行可能ファイルをビルドしたい場合(例えば、異なるGraalVMのバージョンを使用するなど)、 `-Dquarkus.native.builder-image=<image name>` のbuild引数を使用してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:486
msgid ""
"The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io].\n"
"Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr "利用可能なDockerイメージのリストは link:https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io] にあります。Quarkusのバージョンが、利用可能な全てのイメージと互換性があるとは限りません。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:490
msgid "Running native tests"
msgstr "ネイティブテストの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:492
msgid "Run the native tests using:"
msgstr "次のようにネイティブテストを実行します:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:499
msgid "This task depends on `quarkusBuild`, so it will generate the native image before running the tests."
msgstr "このタスクは `quarkusBuild`  に依存しているので、テストを実行する前にネイティブイメージを生成します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:503
msgid "By default, the `native-test` source set is based on `main` and `test` source sets. It is possible to add an extra source set. For example, if your integration tests are located in an `integrationTest` source set, you can specify it as:"
msgstr "デフォルトでは、 `native-test` のソースセットは、 `main` と `test` のソースセットに基づいています。ソースセットを追加することも可能です。たとえば、統合テストが `integrationTest` のソースセットにある場合は、次のように指定します。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:533
msgid "Running integration tests"
msgstr "結合テストの実行"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:535
msgid ""
"Quarkus integration tests (annotated with `@QuarkusIntegrationTest`) will run on the artifact produced by Quarkus.\n"
"Those tests can be placed in a `src/integrationTest/java` directory and executed using:"
msgstr "（ `@QuarkusIntegrationTest` でアノテーションされた）Quarkus結合テストは、Quarkusが生成したアーティファクトで実行されます。これらのテストは、 `src/integrationTest/java` ディレクトリに配置し、それを使用して実行することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:543
msgid "This task depends on both `test` and `quarkusBuild` tasks. The final artifact will be produced before running tests."
msgstr "このタスクは `test` と `quarkusBuild` タスクに依存しています。最終的なアーティファクトは、テストを実行する前に生成されます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:545
msgid "Using fast-jar"
msgstr "fast-jar の利用"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:547
msgid "`fast-jar` is now the default quarkus package type. The result of `./gradlew build` command is a new directory under `build` named `quarkus-app`."
msgstr "`fast-jar` がデフォルトの quarkus パッケージタイプになりました。 `./gradlew build` コマンドの結果、 `build` の下に `quarkus-app` という名前の新しいディレクトリが作成されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:549
msgid "You can run the application using: `java -jar build/quarkus-app/quarkus-run.jar`."
msgstr "アプリケーションは次のようにで実行できます: `java -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:551
msgid ""
"In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or\n"
"might not function correctly."
msgstr "生成された jar を正常に実行するためには、 `quarkus-app` ディレクトリのすべての内容が必要です。いずれかのファイルが欠落していると、アプリケーションが起動しなかったり、正しく機能しない可能性があります。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:554
msgid ""
"The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar\n"
"because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar\n"
"on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr "`fast-jar` パッケージングでは、どの依存関係のjarにクラスやリソースが含まれているかという情報がインデックス化されているため、レガシーのQuarkus jarよりも起動が少し速く、メモリ消費量もわずかに少ないアーティファクトを作成できます。このため、クラスやリソースをロードする際に、 レガシー jar が必要とするクラスパス上のすべての jar を検索する必要がなくなります。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:558
msgid "Building Uber-Jars"
msgstr "UberJar のビルド"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:560
msgid "Quarkus Gradle plugin supports the generation of Uber-Jars by specifying a `quarkus.package.type` argument as follows:"
msgstr "Quarkus Gradleプラグインは、以下のように `--uber-jar`  引数を指定して UberJar の生成をサポートしています。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:566
msgid "When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `--ignored-entry` argument:"
msgstr "UberJar を作成する際に、 `--ignored-entry`  引数を使用して生成された jar から除外したいエントリーを指定することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:573
msgid "The entries are relative to the root of the generated Uber-Jar. You can specify multiple entries by adding extra `--ignored-entry` arguments."
msgstr "エントリーは、生成された Uber-Jar のルートからの相対的なものです。追加の `--ignored-entry`  引数を追加することで、複数のエントリーを指定することができます。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:576
msgid "Working with multi-module projects"
msgstr "マルチモジュールプロジェクトでの作業"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:578
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr "デフォルトでは、Quarkusは別のモジュール内のCDI Bean を検出しません。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:580
msgid ""
"The best way to enable CDI bean discovery for a module in a multi-module project would be to include a `META-INF/beans.xml` file,\n"
"unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will be indexed automatically."
msgstr "マルチモジュールプロジェクトのモジュールでCDI Bean検出を有効にするベストの方法は、 モジュールが、メインアプリケーションモジュールで、すでにquarkus-maven-pluginで設定されていない限り、`META-INF/beans.xml` ファイルをインクルードすることです。モジュールが、メインアプリケーションモジュールで、すでにquarkus-maven-pluginで設定されている場合は、自動的にインデックスが作成されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:583
msgid "Alternatively, there is some unofficial link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex plugins] that can be used instead of the `META-INF/beans.xml` file."
msgstr "あるいは、 `META-INF/beans.xml` ファイルの代わりに使える非公式の link:https://plugins.gradle.org/search?term=jandex[Gradle Jandex プラグイン] もあります。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:585
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr "このトピックの詳細については、CDI ガイドの xref:cdi-reference.adoc#bean_discovery[Bean Discovery] セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:588
msgid "Publishing your application"
msgstr "アプリケーションの発行"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:590
msgid ""
"In order to make sure the right dependency versions are being used by Gradle, the BOM is declared as an `enforcedPlatform` in your build file.\n"
"By default, the `maven-publish` plugin will prevent you from publishing your application due to this `enforcedPlatform`.\n"
"This validation can be skipped by adding the following configuration in your build file:"
msgstr "Gradle で正しい依存関係のバージョンが使用されていることを担保するために、BOM はビルドファイル内で `enforcedPlatform` として宣言されています。デフォルトでは、 `maven-publish` プラグインは、この `enforcedPlatform` を理由にアプリケーションの公開を阻止します。 `build.gradle` ファイルに以下の設定を追加することで、この検証をスキップすることができます。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:617
msgid "Configuring Quarkus builds"
msgstr "Quarkusのビルドの設定"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:619
msgid ""
"There are multiple configuration sources that influence Quarkus builds, mentioned in the order of their priority.\n"
"The Quarkus build uses the `prod` configuration profile:"
msgstr "Quarkusのビルドに影響を与える設定ソースは複数あり、優先順位順に説明しています。Quarkusのビルドでは、 `prod` の設定プロファイルが使用されます:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:622
msgid "System properties (for example `./gradlew -Dquarkus.package.type=fast-jar ...`)"
msgstr "システムプロパティ（例： `./gradlew -Dquarkus.package.type=fast-jar …​` ）"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:623
msgid "System environment (for example `QUARKUS_PACAKGE_TYPE=fast-jar ./gradlew ...`)"
msgstr "システム環境（例： `QUARKUS_PACAKGE_TYPE=fast-jar ./gradlew …​` ）"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:624
msgid "Configuration via the `quarkus` extensions's `quarkusBuildProperties` For example:"
msgstr "`quarkus` エクステンションの `quarkusBuildProperties` を介した設定。 例えば:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:626
#, fuzzy
msgid ""
"quarkus {\n"
"    quarkusBuildProperties {\n"
"        set(\"package.type\", \"uber-jar\")\n"
"    }\n"
"}"
msgstr "quarkus { quarkusBuildProperties { set(\"package.type\", \"uber-jar\") } }。}"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:632
msgid "Configuration via Gradle project properties (for example `./gradlew -Pquarkus.package.type=fast-jar`)"
msgstr "Gradleプロジェクトプロパティによる設定（例： `./gradlew -Pquarkus.package.type=fast-jar` )"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:633
msgid ""
"Configuration from a project's `application.properties`, `application.yaml` and `application.yml` files, as well\n"
"as a project's `application-prod.properties`, `application-prod.yaml` and `application-prod.yml` files"
msgstr "プロジェクトの `application.properties` 、 `application.yaml` 、 `application.yml` ファイル、およびプロジェクトの `application-prod.properties` 、 `application-prod.yaml` 、 `application-prod.yml` ファイルからの設定"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:637
msgid ""
"The above priorities have changed in Quarkus plugin starting with 3.0. Older versions of the Quarkus Gradle plugin\n"
"preferred `application.properties` over settings in the Gradle build."
msgstr "Quarkusプラグインでは、3.0から上記の優先順位が変更されました。古いバージョンのQuarkus Gradleプラグインでは、Gradleビルドの設定よりも `application.properties` が優先されました。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:641
msgid ""
"The Quarkus Gradle plugin uses the \"standard\" Quarkus mechanisms to load and parse configurations. Support for\n"
"`application.(yaml|yml)` has been added in Quarkus 3.0 in addition to `application.properties`. Also new in 3.0\n"
"is that all mechanisms available via SmallRye Config, are implicitly also now available for the Quarkus Gradle\n"
"plugin."
msgstr "Quarkus Gradleプラグインは、設定の読み込みと解析に\"標準\"のQuarkusのメカニズムを使用します。Quarkus 3.0では、 `application.properties` に加えて、 `application.(yaml|yml)` のサポートが追加されました。また、3.0では、SmallRye Configで利用できるすべてのメカニズムが、暗黙のうちにQuarkus Gradleプラグインでも利用できるようになっています。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:648
msgid ""
"Use the `quarkusShowEffectiveConfig` task to show the effective configuration options used for a Quarkus build. If you\n"
"specify the `--save-config-properties` command line option, the configuration properties are also store in the file\n"
"`build/<final-name>.quarkus-build.properties`."
msgstr "Quarkusのビルドに使用される有効な設定オプションを表示するには、 `quarkusShowEffectiveConfig` タスクを使用します。 `--save-config-properties` コマンドラインオプションを指定した場合、設定プロパティはファイル `build/<final-name>.quarkus-build.properties` にも保存されます。"

#. type: Title ===
#: upstream/_versions/main/guides/gradle-tooling.adoc:653
#, fuzzy
msgid "Gradle caching / task inputs"
msgstr "Gradleキャッシュ／タスク入力"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:655
#, fuzzy
msgid ""
"By default, system properties starting with `quarkus.` and environment variables, including those from `~/.env`,\n"
"starting  with `QUARKUS_`, are considered as inputs for the Gradle tasks. This means that only changes to those system\n"
"properties or environment variables will cause Gradle's up-to-date to trigger a rebuild. Changes to other system\n"
"properties or environment variables do not change Quarkus' Gradle task inputs and do not trigger an unnecessary rebuild."
msgstr "デフォルトでは、 `quarkus.` で始まるシステムプロパティと、 `QUARKUS_` で始まる `~/.env` からのものを含む環境変数が、Gradle タスクの入力として考慮されます。つまり、これらのシステムプロパティまたは環境変数の変更のみが、Gradleの最新日付にリビルドをトリガーする原因となります。その他のシステムプロパティや環境変数の変更は、QuarkusのGradleタスクの入力を変更せず、不要な再構築をトリガーしません。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:660
#, fuzzy
msgid ""
"Configuration properties specified via `quarkus.quarkusBuildProperties` or via the Quarkus `application.*`\n"
"configuration files are all considered as Gradle task inputs, in other words: every change in these files causes\n"
"a rebuild."
msgstr "`quarkus.quarkusBuildProperties` 、またはQuarkus `application.*` の設定ファイルで指定された設定プロパティは、すべてGradleタスクの入力とみなされます。言い換えると、これらのファイルを変更するたびに再構築が発生します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:664
#, fuzzy
msgid ""
"If your Quarkus build references system properties that do not start with `quarkus.` (or environment variables that\n"
"do not start with `QUARKUS_`), you must reference those via the Quarkus build extension. For example, if your\n"
"`application.properties` file references an environment variable like this:"
msgstr "Quarkusビルドで、 `quarkus.` で始まらないシステムプロパティ（または `QUARKUS_` で始まらない環境変数）を参照する場合は、Quarkusビルド拡張機能を使って参照する必要があります。たとえば、 `application.properties` ファイルが次のような環境変数を参照している場合："

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:668
#, fuzzy
msgid "greeting.message=${FOO_MESSAGE:Hello!}"
msgstr "greeting.message=${FOO_MESSAGE:Hello!｝"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:670
#, fuzzy
msgid "it must be explicitly declared as \"caching relevant\":"
msgstr "として明示的に宣言しなければならない："

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:672
#, fuzzy
msgid ""
"quarkus {\n"
"   cachingRelevantProperties.add(\"FOO_MESSAGE\")\n"
"   // Note: `cachingRelevantProperties` accepts regular expressions\n"
"}"
msgstr "quarkus { cachingRelevantProperties.add(\"FOO_MESSAGE\") // 注: `cachingRelevantProperties` は正規表現を受け入れます }."

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:678
msgid "Build workers"
msgstr "ビルドワーカー"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:680
msgid ""
"Quarkus application builds are ran in isolated processes using Gradle's worker API. This includes the Quarkus\n"
"application build and Quarkus code generation. This is necessary to properly pass the configuration from the\n"
"`quarkus` extension and Gradle project properties to Quarkus' code generator / application builder."
msgstr "Quarkusアプリケーションのビルドは、GradleのワーカーAPIを使用して、分離されたプロセスで実行されます。これには、QuarkusアプリケーションのビルドとQuarkusのコード生成が含まれます。これは、 `quarkus` エクステンションと Gradle プロジェクトのプロパティから Quarkus のコード生成/アプリケーションビルダーに設定を適切に渡すために必要です。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:684
msgid ""
"The JVM settings of the processes performing the code generation and/or Quarkus build can be configured as follows.\n"
"See link:https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html[JavaForkOptions]\n"
"for details."
msgstr "コード生成やQuarkusビルドを実行するプロセスのJVM設定は、次のように設定できます。詳細については、 link:https://docs.gradle.org/current/javadoc/org/gradle/process/JavaForkOptions.html[JavaForkOptions] を参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:731
msgid "Cached build artifacts"
msgstr "キャッシュされたビルドアーティファクト"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:733
msgid ""
"link:https://docs.gradle.org/current/userguide/build_cache.html[Gradle's build cache] is a very efficient mechanism to\n"
"improve the overall build runtime, by reusing previously generated outputs (see\n"
"link:https://docs.gradle.org/current/userguide/incremental_build.html[Incremental build] for technical details)."
msgstr "link:https://docs.gradle.org/current/userguide/build_cache.html[Gradleのビルドキャッシュ] は、以前に生成した出力を再利用することで、ビルド全体の実行時間を改善する非常に効率的な仕組みです（技術的な詳細は link:https://docs.gradle.org/current/userguide/incremental_build.html[Incremental build] を参照して下さい）。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:737
msgid ""
"The Quarkus plugin leverages the Gradle mechanisms of up-to-date checks and the build cache. The build cache can be\n"
"local or local _plus_ a remote cache server or, if configured in CI environments, remote in the sense of retrieving\n"
"and storing the whole cache as an artifact, for example using\n"
"link:https://github.com/gradle/gradle-build-action[Gradle's GitHub action] or directly/manually GitHub's\n"
"link:https://github.com/actions/cache[GitHub's cache action]."
msgstr "Quarkusプラグインは、最新のチェックとビルドキャッシュというgradleのメカニズムを活用します。ビルドキャッシュは、ローカル、ローカル _＋_ リモートキャッシュサーバー、またはCI環境で構成されている場合は、 link:https://github.com/gradle/gradle-build-action[GradleのGitHubアクション] や直接/手動でGitHubの link:https://github.com/actions/cache[GitHubのキャッシュ] アクションを使用するなど、キャッシュ全体をアーティファクトとして取得し保存する意味でリモートとすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:743
#, fuzzy
msgid ""
"The Quarkus Gradle plugin cares about _what_ is cached _in which environment_ (CI or local development). Big artifacts\n"
"like uber-jars and native binaries are not cached in CI, but are cached in local development environments."
msgstr "Quarkus Gradleプラグインは、 _何が_ _どの環境_ （CIまたはローカル開発 _）に_ キャッシュされるかを気にします。ユーバーjarやネイティブバイナリのような大きな成果物はCIにはキャッシュされませんが、ローカル開発環境にはキャッシュされます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:746
msgid "The Quarkus Gradle plugin detects a _CI environment_, if the `CI` environment variable is present."
msgstr "Quarkus Gradleプラグインは、 `CI` 環境変数が存在する場合、 _CI環境_ を検出します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:748
#, fuzzy
msgid ""
"How the various Quarkus package types are cached in non-CI and CI environments is described in the following table.\n"
"Note that even if a task's output is not _cached_, the _up-to-date_ checks still apply."
msgstr "非CIおよびCI環境において、さまざまなQuarkusパッケージタイプがどのようにキャッシュされるかは、次の表で説明されています。タスクの出力が _キャッシュ_ されない場合でも、 _最新の_ チェックが適用されることに注意してください。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:751
#, fuzzy
msgid ""
"The Quarkus application build is split across three tasks. The `quarkusBuild` taskl is responsible to _provide_\n"
"a built Quarkus application. The tasks `quarkusDependenciesBuild` and `quarkusAppPartsBuild` are considered internal\n"
"tasks (may change at any time w/o prior notice). See below for details."
msgstr "Quarkusアプリケーションのビルドは、3つのタスクに分かれています。 `quarkusBuild` タスクは、ビルドされたQuarkusアプリケーションを _提供_ する責任があります。 `quarkusDependenciesBuild` と `quarkusAppPartsBuild` のタスクは、内部タスクとみなされます（事前の通知なしにいつでも変更可能です）。詳細は以下を参照してください。"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:757
#, fuzzy
msgid "Quarkus package type"
msgstr "Quarkusのパッケージタイプ"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:757
msgid "Notes"
msgstr "備考"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:757
msgid "Caching (non-CI)"
msgstr "キャッシング（非CI）"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:757
msgid "Caching in CI"
msgstr "キャッシング（CI）"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:758
msgid "`fast-jar`, `jar`"
msgstr "`fast-jar`, `jar`"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:759
#, fuzzy
msgid ""
"Dependency jars are stored unmodified as individual files in the `quarkus-app/lib/` directory.\n"
"All other files in the `quarkus-app/` directory are generated.\n"
"\n"
"The `quarkusAppPartsBuild` task builds `fast-jar` package-type applications and allows caching of the _generated_\n"
"pieces, which is everything except the dependencies in the `quarkus-app/lib/` directory. The\n"
"`quarkusDependenciesBuild` task is used to collect the dependencies via Gradle mechanisms. The `quarkusBuild` task\n"
"then assembles the outputs of the `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks.\n"
"\n"
"Note: `fast-jar` (or `-jar`) is the default if no package type has been explicitly configured."
msgstr "依存性のあるjarは、 `quarkus-app/lib/` ディレクトリに個々のファイルとして変更されずに保存されます。 `quarkus-app/` ディレクトリの他のファイルはすべて生成されます。"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:782
msgid "✅"
msgstr "✅"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:771
msgid "`mutable-jar`, `uber-jar`, `native`, `native-sources`"
msgstr "`mutable-jar`, `uber-jar`, `native`, `native-sources`"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:772
msgid ""
"The `quarkusBuild` task is responsible for building the Quarkus application.\n"
"\n"
"The `quarkusAppPartsBuild` and `quarkusDependenciesBuild` tasks do nothing for `uber-jar`s."
msgstr ""
"`quarkusBuild` タスクは、Quarkusアプリケーションのビルドを担当します。\n"
"\n"
"`quarkusAppPartsBuild` および `quarkusDependenciesBuild` タスクは `uber-jar` に対しては何も行いません。"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:776
msgid "❌"
msgstr "❌"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:778
msgid "`legacy-jar`, `legacy`"
msgstr "`legacy-jar`, `legacy`"

#. type: Table
#: upstream/_versions/main/guides/gradle-tooling.adoc:779
msgid ""
"`legacy-jar` builds work similar to `fast-jar` builds, except that the directory structure is different and the\n"
"`modified-*.jar` files are considered as generated."
msgstr "`legacy-jar` のビルドは、ディレクトリ構造が異なることと、 `modified-*.jar` のファイルが生成されたとみなされることを除き、 `fast-jar` のビルドと同様に動作します。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:787
msgid ""
"In a local development environment, the cost (think: time) of storing (and retrieving) even bigger cache artifacts is\n"
"lower than the cost of re-building a Quarkus application. This means, that The Quarkus Gradle plugin allows caching\n"
"even potentially big artifacts like uber-jars or native binaries in non-CI environments. In CI environments, which run\n"
"builds against varying states of a code base (think: running CI against every commit on a main branch), adding each\n"
"built (and big) artifact to the build cache would let the build cache become unnecessarily big, which becomes a\n"
"problem for example in GitHub, where the total amount of cached artifacts is limited to 10 GB."
msgstr "ローカル開発環境では、より大きなキャッシュアーティファクトを保存（および取得）するコスト（時間）は、Quarkusアプリケーションを再ビルドするコストよりも低くなります。つまり、Quarkus Gradleプラグインは、非CI環境において、uber-jarやネイティブバイナリのような潜在的に大きな成果物をキャッシュすることができます。コードベースのさまざまな状態に対してビルドを実行するCI環境（メインブランチのすべてのコミットに対してCIを実行することを想定）では、ビルドされた（そして大きな）成果物をビルドキャッシュに追加すると、ビルドキャッシュが不必要に大きくなり、例えば、キャッシュできる成果物の総量が10GBに制限されているGitHubでは問題になります。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:797
msgid "Background information: There are two related mechanisms in Gradle at play to improve build performance:"
msgstr "背景：Gradleには、ビルドのパフォーマンスを向上させるために、2つの関連するメカニズムが働いています:"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:799
#, fuzzy
msgid ""
"Up-to-date checks allow a task's execution to be skipped, if the _inputs_ and _outputs_ of the tasks did not change.\n"
"For example, consider a Java compile tasks: if the library dependencies and the source files (the _inputs_) did not\n"
"change and the compiled class files (the _outputs_) are still available, compilation can be skipped."
msgstr "最新のチェックでは、タスクの _入力と_ _出力に_ 変更がない場合、タスクの実行をスキップすることができます。例えば、Javaのコンパイルタスクを考えてみましょう。ライブラリの依存関係やソースファイル（ _入力_ ）に変更がなく、コンパイルされたクラスファイル（ _出力_ ）がまだ利用可能であれば、コンパイルをスキップすることができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:802
msgid ""
"The build cache can store the outputs of (cacheable) tasks in the local build cache. The _output_ of a task can be\n"
"restored from the cache."
msgstr "ビルドキャッシュは、（キャッシュ可能な）タスクの出力をローカルビルドキャッシュに保存することができます。タスクの _出力_ は、キャッシュから復元することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:805
#, fuzzy
msgid ""
"The benefits of up-to-date checks and the interaction of the build cache come with the cost of modeling the _inputs_\n"
"and _outputs_. Inputs are not only files or directories, but also the Java version used during the build, the operating\n"
"system, the working directory, configuration options, and so on. So everything that influences the output of a task\n"
"action must be declared as an input of the task."
msgstr "最新のチェックとビルドキャッシュの相互作用の利点は、 _インプットと_ _アウトプットを_ モデル化するコストを伴います。入力とは、ファイルやディレクトリだけでなく、ビルド時に使用されたJavaのバージョン、オペレーティングシステム、作業ディレクトリ、設定オプションなどです。そのため、タスクアクションの出力に影響を与えるものはすべて、タスクの入力として宣言する必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/gradle-tooling.adoc:812
msgid "Gradle configuration cache"
msgstr "Gradle設定キャッシュ"

#. type: Plain Text
#: upstream/_versions/main/guides/gradle-tooling.adoc:814
msgid ""
"The Quarkus Gradle plugin works with builds that have the\n"
"link:https://docs.gradle.org/current/userguide/configuration_cache.html[Gradle's configuration cache] enabled, but\n"
"the configuration cache is disabled for the Quarkus tasks. This means, that the Quarkus plugin does not break such\n"
"Gradle builds."
msgstr "Quarkus Gradleプラグインは、 link:https://docs.gradle.org/current/userguide/configuration_cache.html[Gradleの設定キャッシュ] を有効にしているビルドで動作しますが、Quarkusタスクでは設定キャッシュは無効になっています。つまり、Quarkusプラグインは、そのようなGradleビルドを壊さないということです。"
