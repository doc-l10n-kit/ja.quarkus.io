msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/funqy-http.adoc:6
msgid "Funqy HTTP Binding (Standalone)"
msgstr "Funqy HTTPバインディング (スタンドアロン)"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:12
msgid ""
"The guide walks through quickstart code to show you how you can deploy Funqy as a\n"
"standalone service and invoke on Funqy functions using HTTP."
msgstr "このガイドでは、Funqyをスタンドアロンサービスとしてデプロイし、HTTPを使ってFunqy関数を呼び出す方法をクイックスタートコードで説明します。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:15
msgid ""
"The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy\n"
"needs to be portable across a lot of different protocols and function providers its HTTP binding\n"
"is very minimalistic and you will lose REST features like linking and the ability to leverage\n"
"HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's\n"
"Jakarta REST, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead\n"
"than these alternatives (except Vert.x which is still super fast)."
msgstr "FunqyのHTTPバインディングはHTTP上のRESTの代わりではありません。Funqyは多くの異なるプロトコルや Function プロバイダに対してポータブルである必要があるので、HTTPバインディングは非常にミニマムで、リンクのようなREST機能やキャッシュコントロールや条件付きGETのようなHTTPを利用する機能を失うことになります。代わりにQuarkusのJakarta REST、Spring MVC、またはVert.x Web Reactive Routesのサポートを使用することを検討すると良いでしょう。しかしながら、Funqy はこれらの選択肢と比べてオーバーヘッドが小さいでしょう(例外として Vert.x はそれでもすごく早いですが)。"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:22
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:25
#, fuzzy
msgid ""
"link:{includes}/prerequisites.adoc[role=include]\n"
"* Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "{includes}/prerequisites.adoc * xref:funqy.adoc[Funqyの基本について] 読んでください。これは短い読み物です！"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:28
msgid "The Quickstart"
msgstr "クイックスタート"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:30
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:32
#, fuzzy
msgid "The solution is located in the `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr "ソリューションは `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[ディレクトリに] あります。"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:34
msgid "The Code"
msgstr "コード"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:36
msgid ""
"If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods\n"
"annotated with `@Funq`.  Simple, easy, straightforward."
msgstr "Javaコードを見ると、HTTP固有のAPIがないことがわかります。単純な Java メソッドに `@Funq` とアノテーションが付けられているだけです。シンプルで、簡単で、わかりやすいです。"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:39
msgid "Maven Dependencies"
msgstr "Maven 依存関係"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:41
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr "Funqy HTTP Function を書くには、 `quarkus-funqy-http` 依存関係をQuarkus `pom.xml` ファイルにインクルードするだけでよいです。"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:51
msgid "Build Project"
msgstr "プロジェクトのビルド"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:58
msgid "This starts your functions in Quarkus dev mode."
msgstr "これにより、Quarkus devモードで Function が起動されます。"

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:60
msgid "Execute Funqy HTTP functions"
msgstr "Funqy HTTP Function の実行"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:62
msgid ""
"The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path\n"
"to execute the function would be `/foo`."
msgstr "Function を実行するための URL パスは、Function 名です。例えば、Function 名が `foo` の場合、Function を実行する URL パスは `/foo` になります。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:65
msgid ""
"The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function\n"
"is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function\n"
"has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr "HTTP POST または GET メソッドを使用して Function を呼び出すことができます。Function の戻り値は、Jackson JSON ライブラリを使用して JSON にマーシャルされます。Jackson アノテーションを使用することができます。Function に入力パラメーターがある場合、POST 呼び出しは入力タイプとして JSON を使用しなければなりません。ここでもJackson はアンマーシャリングに使用されます。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:69
#, fuzzy
msgid ""
"You can invoke the `hello` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"by pointing your browser to http://localhost:8080/hello"
msgstr "link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.javaで] 定義されている `hello` 関数を呼び出すには、ブラウザを http://localhost:8080/hello にポインティングします。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:72
#, fuzzy
msgid ""
"Invoking the other functions in the quickstart requires an HTTP POST.\n"
"To execute the `greet` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java]\n"
"invoke this curl script."
msgstr "クイックスタート内の他の関数を呼び出すにはHTTP POSTが必要です。 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.javaで] 定義された `greet` 関数を実行するには、次のcurlスクリプトを呼び出します。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:84
#, fuzzy
msgid ""
"Primitive types can also be passed as input using the standard JSON mapping for them.\n"
"To execute the `toLowerCase` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr "プリミティブ型は、標準的なJSONマッピングを使用して入力として渡すこともできます。 link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.javaで] 定義された `toLowerCase` 関数を実行するには、次のcurlスクリプトを実行します："

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:96
#, fuzzy
msgid ""
"To execute the `double` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr "link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.javaで] 定義されている `double` 関数を実行するには、次のcurlスクリプトを実行する："

#. type: Title ==
#: upstream/_versions/main/guides/funqy-http.adoc:107
msgid "GET Query Parameter Mapping"
msgstr "GET クエリパラメーターのマッピング"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:109
msgid ""
"For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n"
"Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n"
"classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n"
"`Map`:"
msgstr "GETリクエストのために、Funqy HTTPバインディングは、Function の入力パラメーターのためのクエリパラメーターマッピングも提供しています。Bean スタイル・クラスと `java.util.Map` だけが入力パラメーターに使用できます。Bean スタイル・クラスでは、クエリ・パラメーター名は Bean クラスのプロパティーにマッピングされます。以下は、単純な `Map` の例です。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:122
msgid ""
"Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex\n"
"bean style class.  For the above example, here's the corresponding curl request:"
msgstr "キー値は、プリミティブ型(char を除く)か `String` でなければなりません。値は、プリミティブ型 (char を除く)、 `String` 、 `OffsetDateTime` 、または複雑な Bean スタイルのクラスを使用できます。上記の例に対して、対応する curl リクエストを以下に示します。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:130
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr "`hello` Function の `map` 入力パラメーターは、 `a` →1, `b` →2 というキーバリューペアを持ちます。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:132
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr "Bean スタイルクラスを入力パラメーター型として使用することもできます。以下に例を示します。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:154
msgid ""
"Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.\n"
"`OffsetDateTime` query param values must be in ISO-8601 format."
msgstr "プロパティーの値は、 `char` 以外の任意のプリミティブ型にすることができます。また、 `String` や `OffsetDateTime` も可能です。 `OffsetDateTime` クエリのパラメーター値は ISO-8601 形式でなければなりません。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:157
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr "HTTP GET とクエリパラメーターを使用して呼び出すことができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:164
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr "上記のリクエストでは、クエリパラメーター名が入力クラスの対応するプロパティーにマッピングされています。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:166
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr "入力クラスは、入れ子になった Bean クラスを持つこともできます。前の例を拡張します。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:189
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr "この場合、入れ子になった値のクエリパラメーターは `.` 表記法を使用します。例えば、以下のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:196
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr "`java.util.List` と `Set` もプロパティー値としてサポートされています。例えば"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:215
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr "GETリクエストを実行するためには、 `pets` クエリパラメーターを複数回リストアップするだけです。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:222
msgid ""
"For more complex types, `List` and `Set` members must have an identifier in the\n"
"query parameter.  For example:"
msgstr "より複雑な型の場合、 `List` および `Set` のメンバーは、クエリパラメーターに識別子を持つ必要があります。例えば、以下のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:242
msgid ""
"Each `kids` query parameter must identify the kid they are referencing so that\n"
"the runtime can figure out which\n"
"property values go to which members in the list.  Here's the curl request:"
msgstr "それぞれの `kids` クエリーパラメーターは、参照している kid を識別する必要があります。これにより、ランタイムはどのプロパティー値がリストのどのメンバーに属するかを把握することができます。これが curl リクエストです。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:251
msgid ""
"The above URL uses the value `1` and `2` to identity the target member of the list, but any unique\n"
"string can be used."
msgstr "上記のURLでは、リストの対象メンバーを識別するために `1` と `2` という値を使用していますが、任意の一意の文字列を使用することができます。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:254
msgid ""
"A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.\n"
"For example:"
msgstr "プロパティーは `java.util.Map` でもよいです。 マップのキーは、任意のプリミティブ型と `String` が利用できます。例えば、以下のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:273
msgid "The corresponding call would look like this:"
msgstr "対応する呼び出しは次のようになります。"

#. type: Plain Text
#: upstream/_versions/main/guides/funqy-http.adoc:280
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr "`Map` の値が複雑な型であれば、最後に set するプロパティーを追加して表記を続けるだけです。"
