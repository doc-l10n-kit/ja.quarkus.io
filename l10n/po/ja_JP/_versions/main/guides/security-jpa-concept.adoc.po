msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/main/guides/security-jpa-concept.adoc:2
#, no-wrap
msgid "Quarkus Security with Jakarta Persistence"
msgstr "Quarkus SecurityとJakarta Persistence"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:7
msgid "Quarkus provides a Jakarta Persistence (formerly known as JPA) identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider], suitable for use with the xref:security-basic-authentication-concept.adoc[Basic] and xref:security-authentication-mechanisms-concept.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require a combination of username and password credentials."
msgstr "Quarkusには、 xref:security-jdbc.adoc[JDBC アイデンティティープロバイダー] に似たJakarta Persistence（旧称JPA）アイデンティティープロバイダーがあり、ユーザー名とパスワードの組み合わせが必要な xref:security-basic-authentication-concept.adoc[Basic] および xref:security-authentication-mechanisms-concept.adoc#form-auth[フォームベースの] Quarkusセキュリティメカニズムで使用するのに適しています。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:9
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "Jakarta Persistence `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。このインスタンスは、ユーザー認証時に使用され、アクセス要求の検証と認可を行い、Quarkusアプリケーションを保護します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:11
msgid "For an example of practical use of Basic authentication and Jakarta Persistence, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] tutorial."
msgstr "Basic認証とJakarta Persistenceの実用的な使用例については、 xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta Persistenceを使用したQuarkusアプリケーションの保護] チュートリアルを参照してください。"

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa-concept.adoc:13
#, no-wrap
msgid "Jakarta Persistence entity specification"
msgstr "Jakarta Persistenceエンティティ仕様"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:16
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles, and store them into Jakarta Persistence database entities."
msgstr "Quarkus securityには、ユーザー名、パスワード、ロールを収集し、Jakarta Persistenceデータベースエンティティに保存するためのJakarta Persistence統合があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:18
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and properly mapped so that Quarkus can retrieve this information from a database."
msgstr "次のJakarta Persistenceエンティティの定義は、Quarkusがデータベースからこの情報を取得できるように、ユーザーの情報をJakarta Persistenceエンティティに格納し、適切にマッピングする必要があることを示すものです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:21
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether link:https://quarkus.io/guides/hibernate-orm-panache[simplified Hibernate ORM with Panache] is used or not."
msgstr "`@UserDefinition` アノテーションは、 link:https://quarkus.io/guides/hibernate-orm-panache[簡略化されたHibernate ORM with Panache] が使用されているかどうかにかかわらず、Jakarta Persistenceエンティティに存在する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:23
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr "`@Username` と `@Password` のフィールドの型は常に `String` です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:25
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr "`@Roles` フィールドは、 `String` 、 `Collection<String>` 、または `Collection<X>` のいずれかである必要があります。 `X` は、 `@RolesValue` としてアノテーションされた単一の `String` フィールドを持つエンティティクラスです。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:27
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr "各 `String` ロール要素タイプは、ロールのカンマ区切りリストとしてパースされます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:29
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr "次の例では、 `user` エンティティにアノテーションを追加して、セキュリティ情報の保存をデモします:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:33
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:36
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:43
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:54
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:69
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:73
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、単一のエンティティが `@UserDefinition` でアノテーションされている場合にのみ、初期化されます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:75
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with a Panache entity."
msgstr "`@UserDefinition` アノテーションは、通常の Hibernate ORM エンティティまたは Hibernate ORM with a Panache エンティティのいずれか、単一のエンティティのみに存在する必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:76
msgid "Indicates the field used for the username."
msgstr "ユーザー名に使用するフィールドを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:78
msgid "Indicates the field used for the password.  By default, `security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr "パスワードに使用するフィールドを示します。デフォルトでは、 `security-jpa` は bcryptでハッシュ化されたパスワードを使用します。代わりにプレーンテキストまたはカスタムパスワードを設定することもできます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:79
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "ここでは対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:80
msgid "This method allows you to add users while hashing passwords with the proper `bcrypt` hash."
msgstr "このメソッドでは、パスワードを適切な `bcrypt` ハッシュでハッシュ化しながらユーザーを追加することができます。"

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa-concept.adoc:82
#, no-wrap
msgid "Jakarta Persistence entity as storage of roles"
msgstr "ロールの保存先としてのjakarta Persistenceエンティティ"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:85
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr "以下の例を使用して、ロールを別のJakarta Persistenceエンティティ内に格納します:"

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:94
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:97
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:102
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:105
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:108
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:112
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa-concept.adoc:114
#, no-wrap
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:117
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can choose to keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr "Quarkusでアプリケーションを開発する場合、パスワードのストレージとハッシュ化の管理方法を決めることができます。Quarkusのデフォルトのパスワードとハッシュの設定を維持するか、パスワードを手動でハッシュ化するかを選択できます。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:122
msgid "With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF).  While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.  As such, we do not need dedicated columns to keep them."
msgstr "デフォルトのオプションでは、パスワードは link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] でハッシュ化され、 link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]（MCF）で保存されます。MCFを使用している場合、ハッシュアルゴリズム、反復回数、およびソルトは、ハッシュ値の一部として保存されます。そのため、これらを保持するための専用カラムは必要ありません。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa-concept.adoc:126
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr "暗号技術において、ソルトとは、データ、パスワード、パスフレーズをハッシュ化する一方向性関数への追加入力として使用されるランダムデータの名称です。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:129
msgid "For manual password hashing, create a class that implements the `CustomPasswordProvider`as shown in the example below."
msgstr "手動でパスワードをハッシュ化する場合は、以下の例のように `CustomPasswordProvider` を実装したクラスを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:131
msgid "The following snippet shows how to set a custom password provider that uses the SHA256 hashing algorithm."
msgstr "次のスニペットは、SHA256ハッシュアルゴリズムを使用するカスタムパスワードプロバイダーを設定する方法を示しています。"

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:141
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:145
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:149
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:153
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa-concept.adoc:161
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa-concept.adoc:167
msgid "For quick creation of a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.  This method also allows specifying the desired amount of iterations and the salt used."
msgstr "ハッシュ化されたパスワードを素早く作成するには、 `String BcryptUtil.bcryptHash(String password)` を使用します。デフォルトでは、ランダムなソルトが作成され、10回の反復でハッシュ化されます。このメソッドでは、希望する反復回数と使用するソルトを指定することも可能です。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa-concept.adoc:172
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr "本番環境で動作するアプリケーションでは、パスワードをプレーンテキストとして保存しないでください。"

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa-concept.adoc:174
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr "ただし、テスト環境で運用する場合は、 `@Password(PasswordType.CLEAR)` のアノテーションでパスワードを平文で保存することが可能です。"

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa-concept.adoc:176
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:179
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr "xref:security-basic-authentication-tutorial.adoc[Basic認証とJakarta PersistenceによるQuarkusアプリケーションの保護]"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:180
msgid "xref:security-identity-providers-concept.adoc[Identity providers]"
msgstr "xref:security-identity-providers-concept.adoc[アイデンティティ・プロバイダー]"

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa-concept.adoc:180
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"
