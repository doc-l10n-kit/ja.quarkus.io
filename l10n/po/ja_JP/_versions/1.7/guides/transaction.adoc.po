msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/transaction.adoc:6
#, no-wrap
msgid "Using Transactions in Quarkus"
msgstr "Quarkusでのトランザクションの使用"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:14
msgid "Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.  Each extension dealing with persistence will integrate with it for you.  And you will explicitly interact with transactions via CDI.  This guide will walk you through all that."
msgstr "QuarkusにはTransaction Managerが付属しており、これを使用してトランザクションを調整してアプリケーションに公開します。永続性を扱う各エクステンションは、これと統合されます。そして、CDIを介して明示的にトランザクションと対話することになります。このガイドでは、これらすべてについて説明します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/transaction.adoc:15
#, no-wrap
msgid "Setting it up"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:19
msgid "You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.  Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "これを必要とするエクステンションは単に依存関係として追加するだけなので、ほとんどの場合、設定について心配する必要はありません。例えばHibernate ORMはトランザクションマネージャーを含んでおり、適切に設定してくれます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:22
msgid "You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.  Add the following to your `pom.xml`:"
msgstr "例えば、Hibernate ORMを使用せずに直接トランザクションを使用している場合は、明示的に依存関係として追加する必要があるかもしれません。以下を `pom.xml` に追加します:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:29
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-jta</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/transaction.adoc:31
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "トランザクションの開始と停止:境界線の定義"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:34
msgid "You can define your transaction boundaries the easy way, or the less easy way :)"
msgstr "トランザクションの境界を定義するには、簡単な方法と比較的簡単ではない方法があります :)"

#. type: Title ===
#: upstream/_versions/1.7/guides/transaction.adoc:35
#, no-wrap
msgid "Declarative approach"
msgstr "宣言的アプローチ"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:38
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr "トランザクションの境界を定義する最も簡単な方法は、エントリーメソッド ( `javax.transaction.Transactional` ) で `@Transactional` アノテーションを使用することです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:43
#: upstream/_versions/1.7/guides/transaction.adoc:91
#: upstream/_versions/1.7/guides/transaction.adoc:153
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:46
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:59
#, no-wrap
msgid ""
"    @Transactional // <1>\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            throw new OMGGiftNotRecognizedException(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:62
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "このアノテーションは、トランザクションの境界を定義し、トランザクション内でこの呼び出しをラップします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:63
msgid "A `RuntimeException` crossing the transaction boundaries will rollback the transaction."
msgstr "`RuntimeException` がトランザクションの境界を越えると、トランザクションがロールバックされます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:66
msgid "`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.  That includes REST endpoints."
msgstr "`@Transactional` は、メソッドレベルまたはクラスレベルで、すべてのメソッドがトランザクションであることを保証するために、任意の CDI Bean のトランザクション境界を制御するために使用することができます。これにはRESTエンドポイントも含まれます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:68
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "`@Transactional` のパラメーターを使用して、トランザクションを開始するかどうか、どのように開始するかを制御することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:70
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (デフォルト): 何も開始されていない場合はトランザクションを開始し、そうでない場合は既存のトランザクションを維持します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:71
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` : 何も開始されていない場合はトランザクションを開始し、既存のトランザクションが開始されている場合はそれを一時停止し、そのメソッドの境界で新しいトランザクションを開始します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:72
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` : トランザクションが開始されていない場合は失敗し、そうでない場合は既存のトランザクション内で動作します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:73
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` : トランザクションが開始されている場合、それに参加します。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:74
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` : トランザクションが開始されている場合、それを一時停止し、メソッドの境界ではトランザクションなしで動作します。開始されていない場合は、トランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:75
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` : トランザクションが開始されている場合は例外を発生させます。開始されていない場合はトランザクションなしで動作します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:79
msgid "`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.  This is how you decide whether a method is to be running within or outside a transaction.  Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` や `NOT_SUPPORTED` が最も便利なものでしょう。これは、メソッドがトランザクション内で実行されるか、トランザクション外で実行されるかを決定する方法です。正確な意味については、必ずJavaDocを確認してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:83
msgid "The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).  The transaction will commit unless a runtime exception crosses the method boundary.  You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "トランザクション・コンテキストは、予想通り `@Transactional` メソッドにネストされたすべての呼び出しに伝搬されます (この例では `childDAO.addToGiftList()` と `santaDAO.addToSantaTodoList()`)。ランタイム例外がメソッドの境界を越えない限り、トランザクションはコミットされます。例外が発生したときに強制的にロールバックするかどうかは、 `@Transactional(dontRollbackOn=SomeException.class)` (または `rollbackOn`) を使ってオーバーライドできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:86
msgid "You can also programmatically ask for a transaction to be marked for rollback.  Inject a `TransactionManager` for this."
msgstr "また、プログラムでトランザクションにロールバックのマークを付けることもできます。そのためには `TransactionManager` をインジェクトします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:95
#, no-wrap
msgid ""
"    @Inject TransactionManager tm; // <1>\n"
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:108
#, no-wrap
msgid ""
"    @Transactional\n"
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"        if (gift == null) {\n"
"            tm.setRollbackOnly(); // <2>\n"
"        }\n"
"        else {\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:111
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "`setRollbackOnly` のセマンティックを有効にするために、 `TransactionManager` をインジェクトします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:112
msgid "Programmatically decide to set the transaction for rollback."
msgstr "プログラムにより、トランザクションをロールバックするように設定します。"

#. type: Title ===
#: upstream/_versions/1.7/guides/transaction.adoc:114
#, no-wrap
msgid "Transaction Configuration"
msgstr "トランザクション設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:117
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "トランザクションの高度な設定は、エントリメソッドまたはクラスレベルで標準の `@Transactional` アノテーションに加えて設定される `@TransactionConfiguration` アノテーションを使用することで可能です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:119
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` アノテーションでは、タイムアウトのプロパティを秒単位で設定できます。それは、アノテーションされたメソッド内で作成されたトランザクションに適用されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:122
msgid "This annotation may only be placed on the top level method delineating the transaction.  Annotated nested methods once a transaction has started will throw an exception."
msgstr "このアノテーションは、トランザクションを定義するトップレベルのメソッドにのみ付けることができます。アノテーションされたネストされたメソッドでトランザクションが開始されると、例外がスローされます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:125
msgid "If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.  The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "クラスに定義されている場合、 `@Transactional` でマークされたクラスのすべてのメソッドに定義されているのと同じことになります。メソッドに定義された場合は、クラスに定義された設定よりも優先されます。"

#. type: Title ===
#: upstream/_versions/1.7/guides/transaction.adoc:126
#, no-wrap
msgid "Reactive extensions"
msgstr "リアクティブエクステンション"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:129
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "もし, `@Transactional` アノテーション付与されたメソッドが、次のようなリアクティブな値を返す場合:"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:131
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` （JDKから）"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:132
msgid "`Publisher` (from Reactive-Streams)"
msgstr "`Publisher` (Reactive-Streamsから)"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:133
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr "リアクティブ型コンバータを使用して、前の2つの型のうちの1つに変換できる任意の型"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:138
msgid "then the behaviour is a bit different, because the transaction will not be terminated until the returned reactive value is terminated. In effect, the returned reactive value will be listened to and if it terminates exceptionally the transaction will be marked for rollback, and will be committed or rolled-back only at termination of the reactive value."
msgstr "これらは、動作が少し異なり、返されたリアクティブ値が終了するまで、トランザクションは終了しません。実際には、返されたリアクティブ値を聞き、それが例外的に終了した場合、トランザクションはロールバックのためにマークされ、リアクティブ値の終了時にのみコミットまたはロールバックされることになります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:141
msgid "This allows your reactive methods to keep on working on the transaction asynchronously until their work is really done, and not just until the reactive method returns."
msgstr "これにより、リアクティブメソッドは、リアクティブメソッドが戻るまでではなく、その処理が本当に終了するまで、非同期でトランザクションを処理し続けることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:148
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "あまり簡単ではない方法としては、 `UserTransaction` を注入し、様々なトランザクション・デマケーションのメソッドを使用します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:157
#, no-wrap
msgid ""
"    @Inject ChildDAO childDAO;\n"
"    @Inject SantaClausDAO santaDAO;\n"
"    @Inject UserTransaction transaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/transaction.adoc:172
#, no-wrap
msgid ""
"    public void getAGiftFromSanta(Child child, String giftDescription) {\n"
"        // some transaction work\n"
"        try {\n"
"            transaction.begin();\n"
"            Gift gift = childDAO.addToGiftList(child, giftDescription);\n"
"            santaDAO.addToSantaTodoList(gift);\n"
"            transaction.commit();\n"
"        }\n"
"        catch(SomeException e) {\n"
"            // do something on Tx failure\n"
"            transaction.rollback();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/transaction.adoc:177
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "`@Transactional` によって呼び出されたトランザクションと持つメソッドでは、 `UserTransaction`  を使用できません。"

#. type: Title ==
#: upstream/_versions/1.7/guides/transaction.adoc:179
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr "トランザクションタイムアウトの設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:181
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "デフォルトのトランザクション・タイムアウト、つまりトランザクション・マネージャーによって管理されるすべてのトランザクションに適用されるタイムアウトを、プロパティー `quarkus.transaction-manager.default-transaction-timeout` を使用して、期間として指定して構成することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:185
msgid "The default value is 60 seconds."
msgstr "デフォルト値は60秒です。"

#. type: Title ==
#: upstream/_versions/1.7/guides/transaction.adoc:186
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr "トランザクションノード名識別子の設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:190
msgid "Narayana, as the underlying transaction manager, has a concept of a unique node identifier.  This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayanaは、基礎となるトランザクションマネージャーであり、一意のノード識別子の概念を持っています。これは、複数のリソースを含む XA トランザクションの使用を検討している場合に重要です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:196
msgid "The node name identifier plays a crucial part in the identification of a transaction.  The node name identifier is forged into the transaction id when the transaction is created.  Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction counterparts created in database or JMS broker. The identifier makes possible for the transaction manager to roll back the transaction counterparts during recovery."
msgstr "ノード名識別子はトランザクションの識別において重要な役割を果たします。ノード名識別子は、トランザクションが作成されるときに、トランザクションIDの作成に使用されます。ノード名識別子に基づいて、トランザクションマネージャーはデータベースまたはJMSブローカに作成されたXAトランザクションのカウンターパートを認識することができます。この識別子により、トランザクションマネージャーはリカバリ中にトランザクションのカウンターパートをロールバックすることが可能になる。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:199
msgid "The node name identifier needs to be unique per transaction manager deployment.  And the node identifier needs to be stable over the transaction manager restarts."
msgstr "ノード名識別子は、トランザクションマネージャーのデプロイメントごとに一意である必要があります。また、ノード識別子はトランザクションマネージャーの再起動時に変化しない必要があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:201
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "ノード名識別子は、プロパティー `quarkus.transaction-manager.node-name` を通じて設定することができます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/transaction.adoc:202
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr "なぜ常にトランザクションマネージャーを持っているのか?"

#. type: Labeled list
#: upstream/_versions/1.7/guides/transaction.adoc:204
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr "使いたいところなら、どこでも使えるのでしょうか？"

#. type: Labeled list
#: upstream/_versions/1.7/guides/transaction.adoc:212
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "それは2フェーズコミットを行い、私のアプリの速度を遅くしますか?"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:216
msgid "No, this is an old folk tale.  Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "いや、これは昔話です。基本的にはフリーで提供され、必要に応じて複数のデータソースを含むより複雑なケースにも対応できると考えてください。"

#. type: Labeled list
#: upstream/_versions/1.7/guides/transaction.adoc:217
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "読み込み専用の操作をするときにはトランザクションはいらないので、その方が早いですね。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:229
msgid "Wrong. + First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). + Second, it's again fairy tale that not using transaction is faster.  The answer is, it depends on your DB and how many SQL SELECTs you are making.  No transaction means the DB does have a single operation transaction context anyways. + Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.  Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.  By reading it in one transaction, they will be consistent.  If you read one and the other from two different transactions, then they can be inconsistent.  It can be more dramatic if you read data related to rights and access management for example."
msgstr "誤りです。+ まず第一に、トランザクションの境界を `@Transactional(NOT_SUPPORTED)` (または `NEVER` または `SUPPORTS` ) でマークすることで、トランザクションを無効にしてください。+ 第二に、トランザクションを使用しない方が速いというのは、またしてもおとぎ話です。答えは、それはあなたのDBと、あなたが行っているSQL SELECTの数に依存します。トランザクションを使用しないということは、DBはいずれにしても単一操作のトランザクションコンテキストを持っていることを意味します。+ 第三に、複数のSELECTを実行する場合は、それらを一つのトランザクションにまとめる方が良いでしょう。あなたのDBがあなたの車のダッシュボードを表しているとしましょう、あなたは残りのキロ数と燃料計のレベルを見ることができます。それを1つのトランザクションで読み取ることで、それらは一貫したものになります。一方ともう一方を2つの異なるトランザクションから読み取った場合、それらは一貫性のないものになる可能性があります。例えば、権限やアクセス管理に関連するデータを読むと、より劇的になることもあります。"

#. type: Labeled list
#: upstream/_versions/1.7/guides/transaction.adoc:230
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "Hibernateのトランザクション管理APIではなくJTAを好む理由"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:234
msgid "Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.  Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "`entityManager.getTransaction().begin()` やその類似を経由して手動でトランザクションを管理すると、最終的に人々が間違えるような試行回数の多い醜いコードになってしまいます。トランザクションはまた、JMSと他のデータベースアクセスについてですので、1つのAPIはより多くの理にかなっています。"

#. type: Labeled list
#: upstream/_versions/1.7/guides/transaction.adoc:235
#, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "私のJPA永続化ユニットが `JTA` を使っているのか `Resource-level` トランザクションを使っているのかわからないので、めちゃくちゃです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/transaction.adoc:240
msgid "It's not a mess in Quarkus :)  Resource-level was introduced to support JPA in a non managed environment.  But Quarkus is both lean and a managed environment so we can safely always assume we are in JTA mode.  The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr "Quarkusではごちゃごちゃしていません :)リソースレベルは、管理されていない環境でJPAをサポートするために導入されました。しかし、Quarkusはリーン環境であると同時にマネージド環境でもあるので、常にJTAモードになっていると思っておけば安心です。結局、Java SEモードでHibernate ORM + CDI + トランザクションマネージャーを実行することの難しさはQuarkusで解決されています。"
