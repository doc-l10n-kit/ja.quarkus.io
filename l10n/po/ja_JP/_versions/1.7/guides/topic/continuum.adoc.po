msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:1
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:4
#, no-wrap
msgid ""
"layout: vision\n"
"permalink: /vision/continuum\n"
"---\n"
msgstr ""
"layout: vision\n"
"permalink: /vision/continuum\n"
"---\n"

#. type: Title =
#: upstream/_versions/1.7/guides/topic/continuum.adoc:7
#, no-wrap
msgid "The Imperative and Reactive Continuum"
msgstr "命令型とリアクティブ Continuum"

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/continuum.adoc:20
#, no-wrap
msgid "HTTP microservices"
msgstr "HTTP マイクロサービス"

#. type: Target for macro image
#: upstream/_versions/1.7/guides/topic/continuum.adoc:26
#, no-wrap
msgid "../../guides/images/microservices.png"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:41
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Element> getAll() {\n"
"        return Element.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:61
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:72
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "JPAのエンティティマネージャーを直接使用することができます。Panacheは、ボイラープレートを取り除き、アクティブなレコードとリポジトリモデルを公開するという代替案を提示します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:79
#, no-wrap
msgid ""
"@Entity\n"
"public class Element extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:85
#, no-wrap
msgid ""
"    public String name;\n"
"    public String symbol;\n"
"    @Column(unique = true)\n"
"    public int position;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:93
msgid "First declare your service as follows:"
msgstr "まずは以下のようにサービスを宣言しましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:133
#, no-wrap
msgid "element-service/mp-rest/url=http://localhost:9001\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/continuum.adoc:140
#, no-wrap
msgid "Being reactive"
msgstr "リアクティブであること"

#. type: Target for macro image
#: upstream/_versions/1.7/guides/topic/continuum.adoc:147
#, no-wrap
msgid "../../guides/images/reactive-microservice.png"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:161
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/elements/{position}\")\n"
"public Uni<Element> getElement(@PathParam(\"position\") int position) {\n"
"    return elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:182
msgid "But, what about streams? Generating a _server-sent event_ response with Quarkus is just as simple:"
msgstr "しかし、ストリームについてはどうでしょうか? Quarkus を使用して _サーバーから送信されたイベント_ レスポンスを生成するのは簡単です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:191
#, no-wrap
msgid ""
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@GET\n"
"@Path(\"/events\")\n"
"public Multi<String> stream() {\n"
"    return kafka.toMulti();\n"
"}\n"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/1.7/guides/topic/continuum.adoc:198
#, no-wrap
msgid "../../guides/images/eda.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:221
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "メッセージを 1 つずつ処理するだけでは不十分な場合もあります。次のスニペットに示すように、リアクティブプログラミングを使ってメッセージ処理ロジックを表現することもできます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:233
#, no-wrap
msgid ""
"@Incoming(\"health\")\n"
"@Outgoing(\"output\")\n"
"public Multi<Record<String, Measure> filterState(Multi<Capture> input) {\n"
"    return input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -> capture.value > 0)\n"
"        .onItem().transform(capture -> new Measure(capture.sensor, capture.value, capture.unit))    \n"
"        .onItem().transform(measure -> Record.of(measure.sensor, measure));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:236
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr "Quarkusが公開しているリアクティブAPIについては、ストリーム操作にMutiny APIを使用しています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/topic/continuum.adoc:237
#, no-wrap
msgid "Functions as a Service and Serverless"
msgstr "サービスとサーバーレスとしての関数"

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:243
msgid "With Funqy, a function is just:"
msgstr "Funqyでは、関数は単に次のようになります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:247
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/topic/continuum.adoc:254
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    @Funq\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/topic/continuum.adoc:256
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr "Quarkus の機能のいずれかは関数で使用することができ、高速な起動と低メモリー使用率の恩恵を受けることができます。Quarkus を使用すると、プログラミング言語を変更することなく、この新しい世界を採用することができます。"

#~ msgid ""
#~ "@Path(\"fruits\")\n"
#~ "@Produces(\"application/json\")\n"
#~ "@Consumes(\"application/json\")\n"
#~ "public class FruitResource {\n"
#~ msgstr ""
#~ "@Path(\"fruits\")\n"
#~ "@Produces(\"application/json\")\n"
#~ "@Consumes(\"application/json\")\n"
#~ "public class FruitResource {\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    EntityManager entityManager;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    EntityManager entityManager;\n"

#~ msgid ""
#~ "    @GET\n"
#~ "    public List<Fruit> get() {\n"
#~ "        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
#~ "              .getResultList();\n"
#~ "    }\n"
#~ msgstr ""
#~ "    @GET\n"
#~ "    public List<Fruit> get() {\n"
#~ "        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
#~ "              .getResultList();\n"
#~ "    }\n"

#~ msgid ""
#~ "    @POST\n"
#~ "    @Transactional\n"
#~ "    public Response create(Fruit fruit) {\n"
#~ "        if (fruit.getId() != null) {\n"
#~ "            throw new WebApplicationException(\"Id was invalidly set on request.\", 422);\n"
#~ "        }\n"
#~ msgstr ""
#~ "    @POST\n"
#~ "    @Transactional\n"
#~ "    public Response create(Fruit fruit) {\n"
#~ "        if (fruit.getId() != null) {\n"
#~ "            throw new WebApplicationException(\"Id was invalidly set on request.\", 422);\n"
#~ "        }\n"

#~ msgid "JPA users will recognize the `EntityManager` used to access the database.  Finally, methods requiring a transaction are simply annotated with `@Transactional`."
#~ msgstr "JPA ユーザーは、データベースへのアクセスに使用された `EntityManager` を認識します。最後に、トランザクションを必要とするメソッドには `@Transactional` が付けられています。"

#~ msgid "For each call you are intending to do, add a method and use annotations to describe the behavior."
#~ msgstr "意図している各呼び出しについて、メソッドを追加し、動作を記述するためにアノテーションを使用します。"

#~ msgid "Then, in your resource, just use the `CountriesService`:"
#~ msgstr "そして、リソースの中で `CountriesService` を使いします。"

#~ msgid ""
#~ "# the format is interface-name/mp-rest/url=the-service-url\n"
#~ "org.acme.restclient.CountriesService/mp-rest/url=https://restcountries.eu/rest\n"
#~ msgstr ""
#~ "# the format is interface-name/mp-rest/url=the-service-url\n"
#~ "org.acme.restclient.CountriesService/mp-rest/url=https://restcountries.eu/rest\n"

#~ msgid "Quarkus stands with you on your path to reactive.  First, you can implement asynchronous HTTP endpoint as follows:"
#~ msgstr "Quarkus は、皆様のリアクティブへの道筋をサポートします。まず、以下のように非同期 HTTP エンドポイントを実装します。"

#~ msgid "public class HelloLambda implements RequestHandler<HelloRequest, String> {\n"
#~ msgstr "public class HelloLambda implements RequestHandler<HelloRequest, String> {\n"

#~ msgid ""
#~ "    @Inject\n"
#~ "    HelloGreeter greeter;\n"
#~ msgstr ""
#~ "    @Inject\n"
#~ "    HelloGreeter greeter;\n"

#~ msgid ""
#~ "    @Override\n"
#~ "    public String handleRequest(HelloRequest request, Context context) {\n"
#~ "        return greeter.greet(request.firstName, request.lastName);\n"
#~ "    }\n"
#~ "}\n"
#~ msgstr ""
#~ "    @Override\n"
#~ "    public String handleRequest(HelloRequest request, Context context) {\n"
#~ "        return greeter.greet(request.firstName, request.lastName);\n"
#~ "    }\n"
#~ "}\n"
