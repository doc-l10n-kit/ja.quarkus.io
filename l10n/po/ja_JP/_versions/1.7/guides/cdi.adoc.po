msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/cdi.adoc:6
#, no-wrap
msgid "Quarkus - Introduction to Contexts and Dependency Injection"
msgstr "Quarkus - コンテキストと依存性注入(CDI)の紹介"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:15
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification."
msgstr "このガイドでは、 http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=_blank]仕様に基づいたQuarkusプログラミングモデルの基本原理について説明します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:32
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr "_制御の反転_ (Inversion of Control, IoC )というプログラミングの原理を聞いたことがあると思います。依存性注入はIoCの実装技術の一つです。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:38
#, no-wrap
msgid "Simple Bean Example"
msgstr "シンプルなBeanの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:44
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import org.eclipse.microprofile.metrics.annotation.Counted;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:47
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:50
#, no-wrap
msgid ""
"    @Inject\n"
"    Dictionary dictionary; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:56
#, no-wrap
msgid ""
"    @Counted  <3>\n"
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:58
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr "これはスコープアノテーションです。これはコンテナーに、Beanのインスタンスをどのコンテキストに関連付けるかを伝えます。この特定のケースでは、 *単一のBeanインスタンス* がアプリケーション用に作成され、 `Translator`の注入を行う他の全てのBeanによって使用されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:59
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr "これはフィールド注入ポイントです。 `Translator`  が `Dictionary`  Beanに依存していることをコンテナーに伝えます。マッチするBeanがない場合、ビルドは失敗します。"

#. type: delimited block =
#: upstream/_versions/1.7/guides/cdi.adoc:81
msgid "Your can use programmatic lookup via `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr "`javax.enterprise.inject.Instance`  を通じてプログラム的なルックアップを使用して、実行時に曖昧さを解決したり、指定された型を実装しているすべてのBeanを反復処理したりすることができます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:85
#, no-wrap
msgid "public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:88
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<Dictionary> dictionaries; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:95
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      for (Dictionary dict : dictionaries) { <2>\n"
"         // ...\n"
"      }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:97
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr "このインジェクションポイントは、 `Dictionary`  型を実装した複数のBeanがあっても、曖昧な依存関係にはなりません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:98
msgid "`javax.enterprise.inject.Instance` extends `Iterable`."
msgstr "`javax.enterprise.inject.Instance` は `Iterable` を継承します。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:106
#, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr "初期化とコンストラクタのインジェクション例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:111
#: upstream/_versions/1.7/guides/cdi.adoc:304
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:113
#, no-wrap
msgid "    private final TranslatorHelper helper\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:117
#, no-wrap
msgid ""
"    Translator(TranslatorHelper helper) { <1>\n"
"       this.helper = helper;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:123
#, no-wrap
msgid ""
"    @Inject <2>\n"
"    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n"
"      / ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:128
msgid "This is a constructor injection.  In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.  However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.  It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr "これはコンストラクタのインジェクションです。実際には、このコードは通常のCDI実装では動作しません。通常のスコープを持つBeanは常にno-argsコンストラクタを宣言しなければならず、Beanのコンストラクタは `@Inject`  でアノテーションされなければなりません。しかし、Quarkusでは、no-argsコンストラクタが存在しないことを検出し、バイトコードに直接「追加」します。また、コンストラクタが1つしかない場合は、 `@Inject`  を追加する必要はありません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:129
msgid "An initializer method must be annotated with `@Inject`."
msgstr "イニシャライザメソッドには `@Inject`  をアノテーションしなければなりません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:130
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr "イニシャライザは複数のパラメーターを受け付けることができ、それぞれがインジェクションポイントとなります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:138
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@javax.inject.Qualifier` meta-annotation:"
msgstr "Qualifier型は、 `@Retention(RUNTIME)`  として定義された Java アノテーションで、 `@javax.inject.Qualifier`  メタアノテーションでアノテーションされています。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:139
#, no-wrap
msgid "Qualifier Example"
msgstr "修飾子の例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:146
#, no-wrap
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface Superior {}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:149
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr "Beanの修飾子は、Beanクラスやプロデューサのメソッドやフィールドに修飾子タイプをアノテーションすることで宣言されます。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:150
#, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr "カスタム修飾子を持つ Bean の例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:156
#, no-wrap
msgid ""
"@Superior <1>\n"
"@ApplicationScoped\n"
"public class SuperiorTranslator extends Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:161
#: upstream/_versions/1.7/guides/cdi.adoc:208
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:163
msgid "`@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr "`@Superior`  は link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[修飾子アノテーション, window=_blank]です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:167
msgid "This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.  The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.  And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr "このBeanは `@Inject @Superior Translator`  と `@Inject @Superior SuperiorTranslator`  には割り当てられますが、 `@Inject Translator`  には割り当てられません。その理由は、 `@Inject Translator`  はタイプセーフ解決の際に自動的に `@Inject @Default Translator`  に変換されるからです。また、私たちの `SuperiorTranslator`  は `@Default`  を宣言していないので、元の `Translator`  Beanだけが代入可能です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:171
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr "Beanのスコープはインスタンスのライフサイクルを決定します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:173
msgid "Every bean has exactly one scope."
msgstr "すべてのBeanは、正確に1つのスコープを持っています。"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:180
#, no-wrap
msgid "Annotation"
msgstr "アノテーション"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:182
#, no-wrap
msgid ""
"Description   \n"
"//----------------------"
msgstr ""
"説明   \n"
"//----------------------"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:182
#, no-wrap
msgid "`@javax.enterprise.context.ApplicationScoped`"
msgstr "`@javax.enterprise.context.ApplicationScoped`"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:183
#, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>."
msgstr "単一のBeanインスタンスがアプリケーションに使用され、すべてのインジェクションポイント間で共有されます。 link:#client_proxies[インスタンス] は遅延的に生成されます。"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:183
#, no-wrap
msgid "`@javax.inject.Singleton`"
msgstr "`@javax.inject.Singleton`"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:184
#, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr "クライアントプロキシーを使用しないことを除いて、 `@ApplicationScoped` と同じです。インスタンスは、@Singleton Beanに解決するインジェクションポイントがインジェクションされたときに生成されます。"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:184
#, no-wrap
msgid "`@javax.enterprise.context.RequestScoped`"
msgstr "`@javax.enterprise.context.RequestScoped`"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:185
#, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr "Beanインスタンスは、現在の _リクエスト_ (通常はHTTPリクエスト)に関連付けられています。"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:185
#, no-wrap
msgid "`@javax.enterprise.context.Dependent`"
msgstr "`@javax.enterprise.context.Dependent`"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:186
#, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr "これは疑似スコープです。インスタンスは共有されておらず、すべての注入ポイントは依存Beanの新しいインスタンスをスポーンします。依存Beanのライフサイクルは、それを注入するBeanに拘束されています。"

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:186
#, no-wrap
msgid "`@javax.enterprise.context.SessionScoped`"
msgstr "`@javax.enterprise.context.SessionScoped`"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:190
msgid "There can be other custom scopes provided by Quarkus extensions. For example, `quarkus-narayana-jta` provides `javax.transaction.TransactionScoped`."
msgstr "Quarkusのエクステンションによって提供される他のカスタムスコープもあります。例えば、 `quarkus-narayana-jta` は `javax.transaction.TransactionScoped` を提供します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:197
msgid "Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.  A client proxy is basically an object that delegates all method invocations to a target bean instance.  It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr "実際、 link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[クライアントプロキシー, window=_blank]は理解するのが難しいかもしれませんが、いくつかの有用な機能を提供します。クライアントプロキシーは基本的に、すべてのメソッド呼び出しをターゲットのBeanインスタンスに委譲するオブジェクトです。これは `io.quarkus.arc.ClientProxy`  を実装し、Bean クラスを拡張したコンテナー構造体です。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:198
#, no-wrap
msgid "Generated Client Proxy Example"
msgstr "生成されたクライアントプロキシーの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:203
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:211
#, no-wrap
msgid ""
"// The client proxy class is generated and looks like...\n"
"class Translator_ClientProxy extends Translator { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:219
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // Find the correct translator instance...\n"
"      Translator translator = getTranslatorInstanceFromTheApplicationContext();\n"
"      // And delegate the method invocation...\n"
"      return translator.translate(sentence);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:221
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr "`Translator_ClientProxy`  インスタンスは、 `Translator`  Beanの link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#contextual_instance[コンテキストインスタンス, window=_blank]への直接参照の代わりに、常に注入されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:223
msgid "Client proxies allow for:"
msgstr "クライアントプロキシーは、以下のことを可能にします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:225
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr "遅延インスタンス化 - メソッドがプロキシーに呼び出されるとインスタンスが生成されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:226
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr "「狭い」スコープのBeanを「広い」スコープのBeanに注入する機能、すなわち、 `@RequestScoped`  Beanを `@ApplicationScoped`  Beanに注入することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:227
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr "依存関係グラフの円形の依存関係。循環的な依存関係を持つことは、しばしば再設計を検討すべきであることを示していますが、時には避けられないこともあります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:228
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr "まれなケースでは、手動でBeanを破棄するのが現実的です。直接参照を注入すると、古くなったBeanのインスタンスになってしまいます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:235
msgid "Class beans"
msgstr "クラスBean"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:236
msgid "Producer methods"
msgstr "プロデューサーメソッド"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:237
msgid "Producer fields"
msgstr "プロデューサーフィールド"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:238
msgid "Synthetic beans"
msgstr "合成Bean"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:243
msgid "Producer methods and fields are useful if you need additional control over instantiation of a bean.  They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr "プロデューサ・メソッドとフィールドは、Beanのインスタンス化を追加で制御する必要がある場合に便利です。また、サードパーティのライブラリを統合する際に、クラスソースを制御できず、追加のアノテーションなどを追加できない場合にも便利です。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:244
#, no-wrap
msgid "Producers Example"
msgstr "プロデューサーの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:249
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:252
#, no-wrap
msgid ""
"    @Produces <1>\n"
"    double pi = Math.PI; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:262
#, no-wrap
msgid ""
"    @Produces <3>\n"
"    List<String> names() {\n"
"       List<String> names = new ArrayList<>();\n"
"       names.add(\"Andy\");\n"
"       names.add(\"Adalbert\");\n"
"       names.add(\"Joachim\");\n"
"       return names; <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:265
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:268
#, no-wrap
msgid ""
"   @Inject\n"
"   double pi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:271
#, no-wrap
msgid ""
"   @Inject\n"
"   List<String> names;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:274
#, no-wrap
msgid ""
"   // ...   \n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:279
msgid "The container analyses the field annotations to build a bean metadata.  The _type_ is used to build the set of bean types.  In this case, it will be `double` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "コンテナーは,フィールドアノテーションを分析して,Beanのメタデータを構築します。 _型_ は,Beanの型の集合を構築するために使用されます。この場合、 `double`  と `java.lang.Object` .スコープアノテーションは宣言されていないので、デフォルトは `@Dependent` になります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:280
msgid "The container will read this field when creating the bean instance."
msgstr "コンテナーは、Beanのインスタンスを作成するときにこのフィールドを読みます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:284
msgid "The container analyses the method annotations to build a bean metadata.  The _return type_ is used to build the set of bean types.  In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr "コンテナーは,メソッドのアノテーションを解析して,Beanのメタデータを構築します。戻り値の _型_ は、Bean型のセットを構築するために使用されます。この場合、 `List<String>` と `Collection<String>`、 `Iterable<String>`、 `java.lang.Object` となります。スコープアノテーションは宣言されていないので、デフォルトは `@Dependent`  となります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:285
msgid "The container will call this method when creating the bean instance."
msgstr "コンテナーは、Beanのインスタンスを作成する際にこのメソッドを呼び出します。"

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:292
#, no-wrap
msgid "Lifecycle Callbacks"
msgstr "ライフサイクルコールバック"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:295
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr "Beanクラスは、ライフサイクル `@PostConstruct`  と `@PreDestroy`  コールバックを宣言することができます。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:296
#, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr "ライフサイクルコールバックの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:301
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.annotation.PreDestroy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:309
#, no-wrap
msgid ""
"    @PostConstruct <1>\n"
"    void init() {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:315
#, no-wrap
msgid ""
"    @PreDestroy <2>\n"
"    void destroy() {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:317
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr "このコールバックは、Beanインスタンスがサービスに投入される前に呼び出されます。ここでいくつかの初期化を行うのが安全です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:318
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr "このコールバックは、Beanインスタンスが破棄される前に呼び出されます。ここでいくつかのクリーンアップタスクを実行しても安全です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:320
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr "コールバック内のロジックを「副作用なし」に保つこと、つまり、コールバック内で他のBeanを呼び出すことは避けるべきです。"

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:322
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:326
msgid "Interceptors are used to separate cross-cutting concerns from business logic.  There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr "インターセプターは、横断的な問題をビジネス・ロジックから分離するために使用されます。基本的なプログラミングモデルとセマンティクスを定義した Java Interceptors という別の仕様があります。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:327
#, no-wrap
msgid "Simple Interceptor Example"
msgstr "シンプルなインターセプターの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:332
#, no-wrap
msgid ""
"import javax.interceptor.Interceptor;\n"
"import javax.annotation.Priority;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:337
#, no-wrap
msgid ""
"@Logged <1>\n"
"@Priority(2020) <2>\n"
"@Interceptor <3>\n"
"public class LoggingInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:340
#, no-wrap
msgid ""
"   @Inject <4>\n"
"   Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:348
#, no-wrap
msgid ""
"   @AroundInvoke <5>\n"
"   Objec logInvocation(InvocationContext context) {\n"
"      // ...log before\n"
"      Objec ret = context.proceed(); <6>\n"
"      // ...log after\n"
"      return ret;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:350
#: upstream/_versions/1.7/guides/cdi.adoc:386
#: upstream/_versions/1.7/guides/cdi.adoc:395
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:352
msgid "This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`."
msgstr "これは、インターセプターをBeanにバインドするために使用されるインターセプターバインディングアノテーションです。Beanクラスに `@Logged`  をアノテーションします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:353
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr "`Priority`  はインターセプターを有効にし、インターセプターの順序に影響を与えます。優先度の値が小さいインターセプターが最初に呼び出されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:354
msgid "Marks an interceptor component."
msgstr "インターセプターコンポーネントをマークします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:355
msgid "An interceptor instance may be the target of dependency injection."
msgstr "インターセプターインスタンスは、依存性注入の対象となる場合があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:356
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr "`AroundInvoke`  とは、ビジネスの方法に口出しする方法を指します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:357
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr "インターセプターチェーンの次のインターセプターに進むか、インターセプターされたビジネスメソッドを呼び出します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:359
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr "インターセプタのインスタンスは、インターセプトするBeanのインスタンスに依存するオブジェクトです。"

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:360
#, no-wrap
msgid "Events and Observers"
msgstr "イベントとオブザーバー"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:365
msgid "Beans may also produce and consume events to interact in a completely decoupled fashion.  Any Java object can serve as an event payload.  The optional qualifiers act as topic selectors."
msgstr "Beanは、完全に分離された方法で相互作用するために、イベントを生成したり消費したりすることもできます。任意の Java オブジェクトをイベントのペイロードとして使用できます。オプションの修飾子は、トピックセレクタとして機能します。"

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:366
#, no-wrap
msgid "Simple Event Example"
msgstr "シンプルなイベントの例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:373
#, no-wrap
msgid ""
"class TaskCompleted {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:376
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class ComplicatedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:379
#, no-wrap
msgid ""
"   @Inject\n"
"   Event<Task> event; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:384
#, no-wrap
msgid ""
"   void doSomething() {\n"
"      // ...\n"
"      event.fire(new TaskCompleted()); <2>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:389
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Logger {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:393
#, no-wrap
msgid ""
"   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n"
"      // ...log the task\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:397
msgid "`javax.enterprise.event.Event` is used to fire events."
msgstr "`javax.enterprise.event.Event`  は、イベントの火付けに使われています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:398
msgid "Fire the event synchronously."
msgstr "イベントを同期的に発生させます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:399
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr "このメソッドは、 `TaskCompleted`  イベントが発生したときに通知されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:401
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr "イベント/オブザーバーの詳細については、 link:https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docsを, window=_blank]をご覧ください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:402
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:409
msgid "In this guide, we've covered some of the basic topics of the Quarkus programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.  However, a full CDI implementation is not used under the hood.  Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.  On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.  We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future."
msgstr "このガイドでは、 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=_blank]仕様に基づいたQuarkusプログラミングモデルの基本的なトピックをいくつか取り上げました。ただし、CDIの完全な実装が使用されている訳ではありません。QuarkusはCDI link:cdi-reference.html#supported_features[機能]のサブセットのみを実装しています。一方で、 link:cdi-reference.html#nonstandard_features[非標準の機能]や link:cdi-reference.html#build_time_apis[Quarkus固有のAPI]もかなりの数があります。私たちの努力は、将来的にビルドタイム指向の開発者スタックに向けてCDI仕様の革新を推進するものと信じています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:411
msgid "If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus link:cdi-reference[CDI Reference Guide].  We also recommend you to read the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr "Quarkus固有の機能や制限について詳しく知りたい場合は、Quarkus link:cdi-reference[CDIリファレンスガイド]があります。また、 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[CDIの仕様]や link:https://docs.jboss.org/weld/reference/latest/en-US/html/[Weldのドキュメント](WeldはCDIリファレンスインプリメンテーションです)を読んで、より複雑なトピックに精通することをお勧めします。"
