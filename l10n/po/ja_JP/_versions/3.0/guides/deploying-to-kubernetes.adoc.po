msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:6
#, no-wrap
msgid "Kubernetes extension"
msgstr "Kubernetes エクステンション"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:15
msgid "Quarkus offers the ability to automatically generate Kubernetes resources based on sane defaults and user-supplied configuration using https://github.com/dekorateio/dekorate/[dekorate].  It currently supports generating resources for vanilla <<#kubernetes,Kubernetes>>, <<#openshift,OpenShift>> and <<#knative,Knative>>.  Furthermore, Quarkus can deploy the application to a target Kubernetes cluster by applying the generated manifests to the target cluster's API Server.  Finally, when either one of container image extensions is present (see the xref:container-image.adoc[container image guide] for more details), Quarkus has the ability to create a container image and push it to a registry *before* deploying the application to the target platform."
msgstr "Quarkusは、 https://github.com/dekorateio/dekorate/[dekorate] を使用して、妥当なデフォルトとユーザーが提供する設定に基づいて Kubernetes リソースを自動的に生成する機能を提供しています。現在、バニラ <<#kubernetes,Kubernetes>> <<#openshift,OpenShift>> および <<#knative,Knative>> のリソースの生成をサポートしています。さらに、Quarkusは、生成されたマニフェストをターゲットクラスターの API Server に適用することで、ターゲット Kubernetes クラスターにアプリケーションをデプロイすることができます。最後に、コンテナイメージエクステンションのいずれかが存在する場合 (詳細は xref:container-image.adoc[コンテナイメージのガイド] を参照)、Quarkus では、ターゲットプラットフォームにアプリケーションをデプロイする *前* に、コンテナイメージを作成してレジストリーにプッシュする機能があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:21
msgid "Access to a Kubernetes cluster (Minikube is a viable option)"
msgstr "Kubernetesクラスターへのアクセス（Minikubeは有効な選択肢です）"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:23
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:900
#, no-wrap
msgid "Kubernetes"
msgstr "Kubernetes"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:26
msgid "Let's create a new project that contains both the Kubernetes and Jib extensions:"
msgstr "Kubernetes エクステンションとJib エクステンションの両方を含む新しいプロジェクトを作成してみましょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:33
msgid "This added the following dependencies to the build file:"
msgstr "これにより、ビルドファイルに以下の依存関係が追加されました。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:35
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:553
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:805
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:834
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:49
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-container-image-jib</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:52
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:562
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:814
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:843
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:57
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
"implementation(\"io.quarkus:quarkus-kubernetes\")\n"
"implementation(\"io.quarkus:quarkus-container-image-jib\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:61
msgid "By adding these dependencies, we enable the generation of Kubernetes manifests each time we perform a build while also enabling the build of a container image using Jib.  For example, following the execution of:"
msgstr "これらの依存関係を追加することで、ビルドを実行するたびに Kubernetes マニフェストの生成を可能にし、同時に Jib を使ったコンテナイメージのビルドを可能にします。たとえば、以下を実行した後、"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:66
msgid "you will notice amongst the other files that are created, two files named `kubernetes.json` and `kubernetes.yml` in the `target/kubernetes/` directory."
msgstr "作成された他のファイルの中に `kubernetes.json` と `kubernetes.yml` という名前の 2 つのファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:68
msgid "If you look at either file you will see that it contains both a Kubernetes `Deployment` and a `Service`."
msgstr "どちらのファイルを見ても、Kubernetes `Deployment` と `Service` 両方が含まれていることに気づくでしょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:70
msgid "The full source of the `kubernetes.json` file looks something like this:"
msgstr "`kubernetes.json` ファイルの完全なソースは以下の通りです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:149
#, no-wrap
msgid ""
"{\n"
"  {\n"
"    \"apiVersion\" : \"apps/v1\",\n"
"    \"kind\" : \"Deployment\",\n"
"    \"metadata\" : {\n"
"      \"annotations\": {\n"
"       \"app.quarkus.io/vcs-uri\" : \"<some url>\",\n"
"       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n"
"      },\n"
"      \"labels\" : {\n"
"        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"        \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\",\n"
"      },\n"
"      \"name\" : \"test-quarkus-app\"\n"
"    },\n"
"    \"spec\" : {\n"
"      \"replicas\" : 1,\n"
"      \"selector\" : {\n"
"        \"matchLabels\" : {\n"
"          \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"          \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\",\n"
"        }\n"
"      },\n"
"      \"template\" : {\n"
"        \"metadata\" : {\n"
"          \"labels\" : {\n"
"            \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"            \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\"\n"
"          }\n"
"        },\n"
"        \"spec\" : {\n"
"          \"containers\" : [ {\n"
"            \"env\" : [ {\n"
"              \"name\" : \"KUBERNETES_NAMESPACE\",\n"
"              \"valueFrom\" : {\n"
"                \"fieldRef\" : {\n"
"                  \"fieldPath\" : \"metadata.namespace\"\n"
"                }\n"
"              }\n"
"            } ],\n"
"            \"image\" : \"yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT\",\n"
"            \"imagePullPolicy\" : \"Always\",\n"
"            \"name\" : \"test-quarkus-app\"\n"
"          } ]\n"
"        }\n"
"      }\n"
"    }\n"
"  },\n"
"  {\n"
"  \"apiVersion\" : \"v1\",\n"
"  \"kind\" : \"Service\",\n"
"    \"metadata\" : {\n"
"      \"annotations\": {\n"
"       \"app.quarkus.io/vcs-uri\" : \"<some url>\",\n"
"       \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n"
"      },\n"
"      \"labels\" : {\n"
"        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"        \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\",\n"
"      },\n"
"      \"name\" : \"test-quarkus-app\"\n"
"    },\n"
"  \"spec\" : {\n"
"    \"ports\" : [ {\n"
"      \"name\" : \"http\",\n"
"      \"port\" : 8080,\n"
"      \"targetPort\" : 8080\n"
"    } ],\n"
"    \"selector\" : {\n"
"      \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"      \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\"\n"
"    },\n"
"    \"type\" : \"ClusterIP\"\n"
"  }\n"
" }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:152
msgid "The generated manifest can be applied to the cluster from the project root using `kubectl`:"
msgstr "生成されたマニフェストは、 `kubectl` を使用してプロジェクトのルートからクラスターに適用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:156
#, no-wrap
msgid "kubectl apply -f target/kubernetes/kubernetes.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:160
msgid "An important thing to note about the `Deployment` (or `StatefulSet`) is that is uses `yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT` as the container image of the `Pod`.  The name of the image is controlled by the Jib extension and can be customized using the usual `application.properties`."
msgstr "`Deployment` (または `StatefulSet`) について注意すべき重要なことは、`Pod` のコンテナイメージとして `yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT` を使用していることです。イメージの名前は Jib エクステンションによって制御され、通常の `application.properties` を利用してカスタマイズすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:162
msgid "For example with a configuration like:"
msgstr "例えば、次のような設定の場合:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:168
#, no-wrap
msgid ""
"quarkus.container-image.group=quarkus #optional, default to the system username\n"
"quarkus.container-image.name=demo-app #optional, defaults to the application name\n"
"quarkus.container-image.tag=1.0       #optional, defaults to the application version\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:171
msgid "The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`"
msgstr "生成されたマニフェストで使用されるイメージは `quarkus/demo-app:1.0` となります"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:172
#, no-wrap
msgid "Changing the generated deployment resource"
msgstr "生成されるデプロイメントリソースの変更"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:179
#, no-wrap
msgid "quarkus.kubernetes.deployment-kind=StatefulSet\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:181
#, no-wrap
msgid "Generating Job resources"
msgstr "Job リソースの生成"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:188
#, no-wrap
msgid "quarkus.kubernetes.deployment-kind=Job\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:198
#, no-wrap
msgid "Generating CronJob resources"
msgstr "CronJob リソースの生成"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:201
msgid "If you want to generate a CronJob resource, you need to add the following property via the `application.properties`:"
msgstr "CronJob リソースを生成したい場合、 `application.properties` で以下のプロパティを追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:207
#, no-wrap
msgid ""
"quarkus.kubernetes.deployment-kind=CronJob\n"
"# Cron expression to run the job every hour\n"
"quarkus.kubernetes.cron-job.schedule=0 * * * *\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:213
#, no-wrap
msgid "Namespace"
msgstr "名前空間"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:216
msgid "By default, Quarkus omits the namespace in the generated manifests, rather than enforce the `default` namespace. That means that you can apply the manifest to your chosen namespace when using `kubectl`, which in the example below is `test`:"
msgstr "デフォルトでは、Quarkusは生成されたマニフェストの名前空間を省略し、 `default` 名前空間を強制しません。つまり、 `kubectl` (以下の例では `test` )を使用している場合は、選択したネームスペースにマニフェストを適用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:220
#, no-wrap
msgid "kubectl apply -f target/kubernetes/kubernetes.json -n=test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:223
msgid "To specify the namespace in your manifest customize with the following property in your `application.properties`:"
msgstr "マニフェストで名前空間を指定するには、 `application.properties` の中で次のプロパティによってカスタマイズします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:227
#, no-wrap
msgid "quarkus.kubernetes.namespace=mynamespace \n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:229
#, no-wrap
msgid "Defining a Docker registry"
msgstr "Docker レジストリーの定義"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:232
msgid "The Docker registry can be specified with the following property:"
msgstr "Docker レジストリーは、以下のプロパティーで指定できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:236
#, no-wrap
msgid "quarkus.container-image.registry=my.docker-registry.net\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:240
msgid "By adding this property along with the rest of the container image properties of the previous section, the generated manifests will use the image `my.docker-registry.net/quarkus/demo-app:1.0`.  The image is not the only thing that can be customized in the generated manifests, as will become evident in the following sections."
msgstr "前のセクションで説明したコンテナイメージプロパティーと一緒にこのプロパティーを追加すると、生成されるマニフェストではイメージ `my.docker-registry.net/quarkus/demo-app:1.0` を使用するようになります。次のセクションで明らかになるように、生成されるマニフェストでカスタマイズできるのはイメージだけではありません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:241
#, no-wrap
msgid "Labels and Annotations"
msgstr "ラベルとアノテーション"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:243
#, no-wrap
msgid "Labels"
msgstr "ラベル"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:248
msgid "The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].  These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.  For example by adding the following configuration to your `application.properties`:"
msgstr "生成されたマニフェストには、Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[推奨のラベル]が使用されます。これらのラベルは、 `quarkus.kubernetes.name`, `quarkus.kubernetes.version` および `quarkus.kubernetes.part-of` を使用してカスタマイズすることができます。例えば、 `application.properties` に以下の設定を追加してください:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:254
#, no-wrap
msgid ""
"quarkus.kubernetes.part-of=todo-app\n"
"quarkus.kubernetes.name=todo-rest\n"
"quarkus.kubernetes.version=1.0-rc.1\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:260
msgid "As is described in detail in the <<#openshift, OpenShift>> section, customizing OpenShift (or Knative) properties is done in the same way, but replacing `kubernetes` with `openshift` (or `knative`). The previous example for OpenShift would look like this:"
msgstr "<<#openshift, OpenShift>> のセクションで詳しく説明しているように、OpenShift (または Knative) のプロパティーのカスタマイズは同じ方法で行いますが、`kubernetes` を `openshift` (または `knative`) に置き換えます。先ほどの OpenShift の例では、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:266
#, no-wrap
msgid ""
"quarkus.openshift.part-of=todo-app\n"
"quarkus.openshift.name=todo-rest\n"
"quarkus.openshift.version=1.0-rc.1\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:270
msgid "The labels in generated resources will look like:"
msgstr "生成されたリソースのラベルは次のようになります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:278
#, no-wrap
msgid ""
"  \"labels\" : {\n"
"    \"app.kubernetes.io/part-of\" : \"todo-app\",\n"
"    \"app.kubernetes.io/name\" : \"todo-rest\",\n"
"    \"app.kubernetes.io/version\" : \"1.0-rc.1\"\n"
"  }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:283
msgid "You can also remove the `app.kubernetes.io/version` label by applying the following configuration:"
msgstr "以下の設定を適用することで、`app.kubernetes.io/version` のラベルを削除することもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:287
#, no-wrap
msgid "quarkus.kubernetes.add-version-to-label-selectors=false\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:290
#, no-wrap
msgid "Custom Labels"
msgstr "Custom Labels"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:293
msgid "To add additional custom labels, for example `foo=bar` just apply the following configuration:"
msgstr "追加のカスタムラベルを追加するには、例えば `foo=bar` を設定する場合、以下の設定を適用するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:297
#, no-wrap
msgid "quarkus.kubernetes.labels.foo=bar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:300
msgid "When using the `quarkus-container-image-jib` extension to build a container image, then any label added via the aforementioned property will also be added to the generated container image."
msgstr "`quarkus-container-image-jib` エクステンションモジュールを使用してコンテナイメージを作成する場合、前述のプロパティーを介して追加されたラベルも生成されたコンテナイメージに追加されます。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:301
#, no-wrap
msgid "Annotations"
msgstr "アノテーション"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:304
msgid "Out of the box, the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes."
msgstr "生成されたリソースにはバージョン管理に関連する情報がアノテーションされ、ツールによって、またはユーザーがトラブルシューティングの目的で使用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:311
#, no-wrap
msgid ""
"  \"annotations\": {\n"
"    \"app.quarkus.io/vcs-uri\" : \"<some url>\",\n"
"    \"app.quarkus.io/commit-id\" : \"<some git SHA>\",\n"
"   }\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:313
#, no-wrap
msgid "Custom Annotations"
msgstr "カスタムアノテーション"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:316
msgid "Custom annotations can be added in a way similar to labels.For example to add the annotation `foo=bar` and `app.quarkus/id=42` just apply the following configuration:"
msgstr "例えば、アノテーション `foo=bar` と `app.quarkus/id=42` を追加するには、次の設定を適用するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:321
#, no-wrap
msgid ""
"quarkus.kubernetes.annotations.foo=bar\n"
"quarkus.kubernetes.annotations.\"app.quarkus/id\"=42\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:324
#, no-wrap
msgid "Environment variables"
msgstr "環境変数"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:327
msgid "Kubernetes provides multiple ways of defining environment variables:"
msgstr "Kubernetesでは、環境変数を定義する方法が複数用意されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:329
msgid "key/value pairs"
msgstr "キー/値のペア"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:330
msgid "import all values from a Secret or ConfigMap"
msgstr "Secret または ConfigMap からすべての値をインポート"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:331
msgid "interpolate a single value identified by a given field in a Secret or ConfigMap"
msgstr "Secret または ConfigMap の指定されたフィールドで識別される単一の値を補間"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:332
msgid "interpolate a value from a field within the same resource"
msgstr "同じリソース内のフィールドから値を補間"

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:333
#, no-wrap
msgid "Environment variables from key/value pairs"
msgstr "キー/値のペアからの環境変数"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:336
msgid "To add a key/value pair as an environment variable in the generated resources:"
msgstr "生成されたリソースに環境変数としてキーとバリューのペアを追加する場合:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:340
#, no-wrap
msgid "quarkus.kubernetes.env.vars.my-env-var=foobar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:344
msgid "The command above will add `MY_ENV_VAR=foobar` as an environment variable.  Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`."
msgstr "上のコマンドは `MY_ENV_VAR=foobar` を環境変数として追加します。キー `my-env-var` は大文字に変換され、ダッシュはアンダースコアに置き換えられて `MY_ENV_VAR` となることに注意してください。"

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:346
#, no-wrap
msgid "Environment variables from Secret"
msgstr "シークレットからの環境変数"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:350
msgid "To add all key/value pairs of `Secret` as environment variables just apply the following configuration, separating each `Secret` to be used as source by a comma (`,`):"
msgstr "`Secret` のすべてのキーと値のペアを環境変数として追加するには、以下の設定を適用し、ソースとして使用する各 `Secret` をカンマ ( `,` ) で区切ってください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:354
#, no-wrap
msgid "quarkus.kubernetes.env.secrets=my-secret,my-other-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:357
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:401
msgid "which would generate the following in the container definition:"
msgstr "とすると、コンテナの定義に以下のようなものが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:367
#, no-wrap
msgid ""
"envFrom:\n"
"  - secretRef:\n"
"      name: my-secret\n"
"      optional: false\n"
"  - secretRef:\n"
"      name: my-other-secret\n"
"      optional: false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:370
msgid "The following extracts a value identified by the `keyName` field from the `my-secret` Secret into a `foo` environment variable:"
msgstr "以下は、 `my-secret` Secret から `keyName` フィールドで識別される値を `foo` 環境変数に抽出します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:375
#, no-wrap
msgid ""
"quarkus.kubernetes.env.mapping.foo.from-secret=my-secret\n"
"quarkus.kubernetes.env.mapping.foo.with-key=keyName\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:378
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:423
msgid "This would generate the following in the `env` section of your container:"
msgstr "これにより、コンテナの `env` セクションに以下のようなものが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:388
#, no-wrap
msgid ""
"- env:\n"
"  - name: FOO\n"
"    valueFrom:\n"
"      secretKeyRef:\n"
"        key: keyName\n"
"        name: my-secret\n"
"        optional: false\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:390
#, no-wrap
msgid "Environment variables from ConfigMap"
msgstr "ConfigMap から環境変数を取得"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:394
msgid "To add all key/value pairs from `ConfigMap` as environment variables just apply the following configuration, separating each `ConfigMap` to be used as source by a comma (`,`):"
msgstr "`ConfigMap` からのすべてのキーと値のペアを環境変数として追加するには、以下の設定を適用し、ソースとして使用する各 `ConfigMap` をカンマ ( `,` ) で区切ってください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:398
#, no-wrap
msgid "quarkus.kubernetes.env.configmaps=my-config-map,another-config-map\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:411
#, no-wrap
msgid ""
"envFrom:\n"
"  - configMapRef:\n"
"      name: my-config-map\n"
"      optional: false\n"
"  - configMapRef:\n"
"      name: another-config-map\n"
"      optional: false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:415
msgid "The following extracts a value identified by the `keyName` field from the `my-config-map` ConfigMap into a `foo` environment variable:"
msgstr "以下は、 `my-config-map` ConfigMap から `keyName` フィールドで識別される値を `foo` 環境変数に抽出したものです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:420
#, no-wrap
msgid ""
"quarkus.kubernetes.env.mapping.foo.from-configmap=my-configmap\n"
"quarkus.kubernetes.env.mapping.foo.with-key=keyName\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:433
#, no-wrap
msgid ""
"- env:\n"
"  - name: FOO\n"
"    valueFrom:\n"
"      configMapRefKey:\n"
"        key: keyName\n"
"        name: my-configmap\n"
"        optional: false\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:435
#, no-wrap
msgid "Environment variables from fields"
msgstr "フィールドからの環境変数"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:438
msgid "It's also possible to use the value from another field to add a new environment variable by specifying the path of the field to be used as a source, as follows:"
msgstr "また、以下のように、ソースとして使用するフィールドのパスを指定することで、別のフィールドの値を使用して新しい環境変数を追加することも可能です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:442
#, no-wrap
msgid "quarkus.kubernetes.env.fields.foo=metadata.name\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:448
msgid "As is described in detail in the <<#openshift, OpenShift>> section, customizing OpenShift properties is done in the same way, but replacing `kubernetes` with `openshift`. The previous example for OpenShift would look like this:"
msgstr "<<#openshift, OpenShift>> のセクションで詳しく説明しているように、OpenShift プロパティーのカスタマイズは同じ方法で行いますが、`kubernetes` を `openshift` に置き換えます。先ほどの OpenShift の例では、以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:452
#, no-wrap
msgid "quarkus.openshift.env.fields.foo=metadata.name\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:455
#, no-wrap
msgid "Validation"
msgstr "バリデーション"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:458
msgid "A conflict between two definitions, e.g. mistakenly assigning both a value and specifying that a variable is derived from a field, will result in an error being thrown at build time so that you get the opportunity to fix the issue before you deploy your application to your cluster where it might be more difficult to diagnose the source of the issue."
msgstr "例えば、誤って両方の値を代入したり、変数がフィールドから派生したものであることを指定したりするなど、2つの定義の間で競合が発生すると、ビルド時にエラーが発生します。そのため、問題の原因を診断するのが困難なクラスターにアプリケーションをデプロイする前に問題を修正する機会を得ることができます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:460
msgid "Similarly, two redundant definitions, e.g. defining an injection from the same secret twice, will not cause an issue but will indeed report a warning to let you know that you might not have intended to duplicate that definition."
msgstr "同様に、同じシークレットからのインジェクションを2回定義するなど、2つの冗長な定義があっても問題は発生しませんが、その定義を複製することを意図していなかった可能性があることを知らせる警告が実際に報告されます。"

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:462
#, no-wrap
msgid "Backwards compatibility"
msgstr "下位互換性"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:465
msgid "Previous versions of the Kubernetes extension supported a different syntax to add environment variables. The older syntax is still supported but is deprecated, and it's advised that you migrate to the new syntax."
msgstr "Kubernetes エクステンションの以前のバージョンでは、環境変数を追加するための異なる構文をサポートしていました。古い構文はまだサポートされていますが、非推奨ですので、新しい構文に移行することをお勧めします。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:466
#, no-wrap
msgid "Old vs. new syntax"
msgstr "古い構文と新しい構文"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:468
#, no-wrap
msgid "Old"
msgstr "旧"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:468
#, no-wrap
msgid "New"
msgstr "新"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:469
#, no-wrap
msgid "Plain variable"
msgstr "素の変数"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:469
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.my-env-var.value=foobar`"
msgstr "`quarkus.kubernetes.env-vars.my-env-var.value=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:469
#, no-wrap
msgid "`quarkus.kubernetes.env.vars.my-env-var=foobar`"
msgstr "`quarkus.kubernetes.env.vars.my-env-var=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:470
#, no-wrap
msgid "From field"
msgstr "フィールドから"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:470
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.my-env-var.field=foobar`"
msgstr "`quarkus.kubernetes.env-vars.my-env-var.field=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:470
#, no-wrap
msgid "`quarkus.kubernetes.env.fields.my-env-var=foobar`"
msgstr "`quarkus.kubernetes.env.fields.my-env-var=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:471
#, no-wrap
msgid "All from `ConfigMap`"
msgstr "すべての `ConfigMap` から"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:471
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.xxx.configmap=foobar`"
msgstr "`quarkus.kubernetes.env-vars.xxx.configmap=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:471
#, no-wrap
msgid "`quarkus.kubernetes.env.configmaps=foobar`"
msgstr "`quarkus.kubernetes.env.configmaps=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:472
#, no-wrap
msgid "All from `Secret`"
msgstr "すべての `Secret` から"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:472
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.xxx.secret=foobar`"
msgstr "`quarkus.kubernetes.env-vars.xxx.secret=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:472
#, no-wrap
msgid "`quarkus.kubernetes.env.secrets=foobar`"
msgstr "`quarkus.kubernetes.env.secrets=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:473
#, no-wrap
msgid "From one `Secret` field"
msgstr "ある `Secret` フィールドから"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:473
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.foo.secret=foobar`"
msgstr "`quarkus.kubernetes.env-vars.foo.secret=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:473
#, no-wrap
msgid "`quarkus.kubernetes.env.mapping.foo.from-secret=foobar`"
msgstr "`quarkus.kubernetes.env.mapping.foo.from-secret=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:474
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:476
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.foo.value=field`"
msgstr "`quarkus.kubernetes.env-vars.foo.value=field`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:474
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:476
#, no-wrap
msgid "`quarkus.kubernetes.env.mapping.foo.with-key=field`"
msgstr "`quarkus.kubernetes.env.mapping.foo.with-key=field`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:475
#, no-wrap
msgid "From one `ConfigMap` field"
msgstr "ある `ConfigMap` フィールドから"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:475
#, no-wrap
msgid "`quarkus.kubernetes.env-vars.foo.configmap=foobar`"
msgstr "`quarkus.kubernetes.env-vars.foo.configmap=foobar`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:475
#, no-wrap
msgid "`quarkus.kubernetes.env.mapping.foo.from-configmap=foobar`"
msgstr "`quarkus.kubernetes.env.mapping.foo.from-configmap=foobar`"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:483
msgid "If you redefine the same variable using the new syntax while keeping the old syntax, **ONLY** the new version will be kept and a warning will be issued to alert you of the problem.For example, if you define both `quarkus.kubernetes.env-vars.my-env-var.value=foobar` and `quarkus.kubernetes.env.vars.my-env-var=newValue`, the extension will only generate an environment variable `MY_ENV_VAR=newValue` and issue a warning."
msgstr "古い文法を残した状態で新しい文法を使って同じ変数を再定義した場合、 新しいバージョン **のみ** が保持され、問題を通知するために警告が発せられます。例えば、`quarkus.kubernetes.env-vars.my-env-var.value=foobar` と `quarkus.kubernetes.env.vars.my-env-var=newValue` の両方を定義した場合、エクステンションは環境変数 `MY_ENV_VAR=newValue` のみを生成して警告を発します。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:484
#, no-wrap
msgid "Mounting volumes"
msgstr "ボリュームのマウント"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:488
msgid "The Kubernetes extension allows the user to configure both volumes and mounts for the application.  Any volume can be mounted with a simple configuration:"
msgstr "Kubernetes エクステンションを使用すると、アプリケーションのボリュームとマウントの両方を設定することができます。 簡単な設定で任意のボリュームをマウントすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:492
#, no-wrap
msgid "quarkus.kubernetes.mounts.my-volume.path=/where/to/mount\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:496
msgid "This will add a mount to the pod for volume `my-volume` to path `/where/to/mount`.  The volumes themselves can be configured as shown in the sections below."
msgstr "これにより、Pod のパス `/where/to/mount` にボリューム `my-volume` のマウントを追加します。 ボリューム自体は、以下のセクションに示すように設定することができます。"

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:497
#, no-wrap
msgid "Secret volumes"
msgstr "シークレットのボリューム"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:502
#, no-wrap
msgid "quarkus.kubernetes.secret-volumes.my-volume.secret-name=my-secret\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:504
#, no-wrap
msgid "ConfigMap volumes"
msgstr "ConfigMap ボリューム"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:509
#, no-wrap
msgid "quarkus.kubernetes.config-map-volumes.my-volume.config-map-name=my-secret\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:511
#, no-wrap
msgid "Passing application configuration"
msgstr "アプリケーション設定の受け渡し"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:515
msgid "Quarkus supports passing configuration from external locations (via Smallrye Config). This usually requires setting an additional environment variable or system property.  When you need to use a secret or a config map for the purpose of application configuration, you need to:"
msgstr "Quarkus は、(Smallrye Config を介して) 外部の場所から設定を渡すことをサポートしています。これには通常、追加の環境変数またはシステムプロパティーを設定する必要があります。アプリケーション設定の目的でシークレットまたは設定マップを使用する必要がある場合は、次のことを行う必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:517
msgid "define a volume"
msgstr "ボリュームを定義する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:518
msgid "mount the volume"
msgstr "ボリュームをマウントする"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:519
msgid "create an environment variable for `SMALLRYE_CONFIG_LOCATIONS`"
msgstr "`SMALLRYE_CONFIG_LOCATIONS` の環境変数を作成する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:521
msgid "To simplify things, quarkus provides single step alternative:"
msgstr "物事を単純化するために、Quarkus はシングルステップの代替手段を提供しています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:525
#, no-wrap
msgid "quarkus.kubernetes.app-secret=<name of the secret containing the configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:528
msgid "or"
msgstr "or"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:532
#, no-wrap
msgid "quarkus.kubernetes.app-config-map=<name of the config map containing the configuration>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:536
msgid "When these properties are used, the generated manifests will contain everything required.  The application config volumes will be created using path: `/mnt/app-secret` and `/mnt/app-config-map` for secrets and configmaps respectively."
msgstr "これらのプロパティを使用すると、生成されたマニフェストには必要なものがすべて含まれます。 アプリケーションのコンフィグボリュームは、Secret と ConfigMap にそれぞれパスを使用して作成されます。Secret と ConfigMap  はそれぞれ `/mnt/app-secret` と `/mnt/app-config-map` を使用して作成されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:538
msgid "Note: Users may use both properties at the same time."
msgstr "注：ユーザーは両方のプロパティを同時に使用することができます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:539
#, no-wrap
msgid "Changing the number of replicas:"
msgstr "レプリカ数を変更する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:542
msgid "To change the number of replicas from 1 to 3:"
msgstr "レプリカ数を1から3に変更するためには次のようにします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:546
#, no-wrap
msgid "quarkus.kubernetes.replicas=3\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:548
#, no-wrap
msgid "Add readiness and liveness probes"
msgstr "rediness および liveness プローブを追加する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:551
msgid "By default, the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the SmallRye Health extension like so:"
msgstr "デフォルトでは、Kubernetesリソースは、生成された `Deployment` の中に readiness と liveness のプローブを含みません。しかし、これらを追加するには、以下のように SmallRye Health エクステンションを追加するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:559
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:565
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-health\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:569
msgid "The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.  More information about the health extension can be found in the relevant xref:microprofile-health.adoc[guide]."
msgstr "生成されたプローブの値は、設定されたヘルスプロパティー (`quarkus.smallrye-health.root-path`、`quarkus.smallrye-health.liveness-path`、および `quarkus.smallrye-health.readiness-path`) によって決定されます。health エクステンションの詳細については、関連する xref:microprofile-health.adoc[ガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:572
msgid "To set the initial delay of the probe to 20 seconds and the period to 45:"
msgstr "プローブの初期遅延を 20 秒、周期を 45 秒に設定します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:577
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:911
#, no-wrap
msgid ""
"quarkus.kubernetes.readiness-probe.initial-delay=20s\n"
"quarkus.kubernetes.readiness-probe.period=45s\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:579
#, no-wrap
msgid "Add hostAliases"
msgstr "hostAliases の追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:581
msgid "To add entries to a Pod's `/etc/hosts` file (more information can be found in https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/[Kubernetes documentation]), just apply the following configuration:"
msgstr "Podの `/etc/hosts` ファイルにエントリを追加するには(詳細は https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/[Kubernetes のドキュメント] を参照)、以下の設定を適用するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:585
#, no-wrap
msgid "quarkus.kubernetes.hostaliases.\"10.0.0.0\".hostnames=foo.com,bar.org\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:588
msgid "This would generate the following `hostAliases` section in the `deployment` definition:"
msgstr "これにより、 `deployment` 定義の中に以下の `hostAliases` セクションが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:600
#, no-wrap
msgid ""
"kind: Deployment\n"
"spec:\n"
"  template:\n"
"    spec:\n"
"      hostAliases:\n"
"      - hostnames:\n"
"        - foo.com\n"
"        - bar.org\n"
"        ip: 10.0.0.0\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:602
#, no-wrap
msgid "Container Resources Management"
msgstr "コンテナリソース管理"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:605
msgid "CPU & Memory limits and requests can be applied to a `Container` (more info in https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/[Kubernetes documentation]) using the following configuration:"
msgstr "CPUやメモリの制限やリクエストは、以下の設定で `Container` (詳細は https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/[Kubernetes のドキュメント] を参照) に適用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:612
#, no-wrap
msgid ""
"quarkus.kubernetes.resources.requests.memory=64Mi\n"
"quarkus.kubernetes.resources.requests.cpu=250m\n"
"quarkus.kubernetes.resources.limits.memory=512Mi\n"
"quarkus.kubernetes.resources.limits.cpu=1000m\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:615
msgid "This would generate the following entry in the `container` section:"
msgstr "これにより、 `container` セクションに以下のエントリが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:626
#, no-wrap
msgid ""
"containers:\n"
"  - resources:\n"
"    limits:\n"
"      cpu: 1000m\n"
"      memory: 512Mi\n"
"    requests:\n"
"      cpu: 250m\n"
"      memory: 64Mi\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:631
msgid "Kubernetes exposes applications using https://kubernetes.io/docs/concepts/services-networking/ingress[Ingress resources]. To generate the Ingress resource, just apply the following configuration:"
msgstr "Kubernetes は、 https://kubernetes.io/docs/concepts/services-networking/ingress[Ingress リソース] を使用してアプリケーションを公開します。Ingress リソースを生成するには、次の設定を適用するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:635
#, no-wrap
msgid "quarkus.kubernetes.ingress.expose=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:638
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:680
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:722
msgid "This would generate the following Ingress resource:"
msgstr "この場合、以下のような Ingress リソースが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:662
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/commit-id: a58d2211c86f07a47d4b073ea9ce000d2c6828d5\n"
"    app.quarkus.io/build-timestamp: 2022-06-29 - 13:22:41 +0000\n"
"  labels:\n"
"    app.kubernetes.io/name: kubernetes-with-ingress\n"
"    app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  name: kubernetes-with-ingress\n"
"spec:\n"
"  rules:\n"
"    - http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: kubernetes-with-ingress\n"
"                port:\n"
"                  name: http\n"
"            path: /\n"
"            pathType: Prefix\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:665
msgid "After deploying these resources to Kubernetes, the Ingress resource will allow unsecured connections to reach out your application."
msgstr "これらのリソースを Kubernetes にデプロイすると、Ingress リソースによって、セキュリティーで保護されていない接続がアプリケーションに到達できるようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:677
#, no-wrap
msgid ""
"quarkus.kubernetes.ingress.expose=true\n"
"# To change the Ingress host. By default, it's empty.\n"
"quarkus.kubernetes.ingress.host=prod.svc.url\n"
"# To change the Ingress path of the generated Ingress rule. By default, it's \"/\".\n"
"quarkus.kubernetes.ports.http.path=/prod\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:702
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress\n"
"metadata:\n"
"  labels:\n"
"    app.kubernetes.io/name: kubernetes-with-ingress\n"
"    app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  name: kubernetes-with-ingress\n"
"spec:\n"
"  rules:\n"
"    - host: prod.svc.url\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: kubernetes-with-ingress\n"
"                port:\n"
"                  name: http\n"
"            path: /prod\n"
"            pathType: Prefix\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:713
#, no-wrap
msgid ""
"# Example to add a new rule\n"
"quarkus.kubernetes.ingress.rules.1.host=dev.svc.url\n"
"quarkus.kubernetes.ingress.rules.1.path=/dev\n"
"quarkus.kubernetes.ingress.rules.1.path-type=ImplementationSpecific\n"
"# by default, path type is Prefix\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:719
#, no-wrap
msgid ""
"# Exmple to add a new rule that use another service binding\n"
"quarkus.kubernetes.ingress.rules.2.host=alt.svc.url\n"
"quarkus.kubernetes.ingress.rules.2.path=/ea\n"
"quarkus.kubernetes.ingress.rules.2.service-name=updated-service\n"
"quarkus.kubernetes.ingress.rules.2.service-port-name=tcpurl\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:764
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress\n"
"metadata:\n"
"  labels:\n"
"    app.kubernetes.io/name: kubernetes-with-ingress\n"
"    app.kubernetes.io/version: 0.1-SNAPSHOT\n"
"  name: kubernetes-with-ingress\n"
"spec:\n"
"  rules:\n"
"    - host: prod.svc.url\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: kubernetes-with-ingress\n"
"                port:\n"
"                  name: http\n"
"            path: /prod\n"
"            pathType: Prefix\n"
"    - host: dev.svc.url\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: kubernetes-with-ingress\n"
"                port:\n"
"                  name: http\n"
"            path: /dev\n"
"            pathType: ImplementationSpecific\n"
"    - host: alt.svc.url\n"
"      http:\n"
"        paths:\n"
"          - backend:\n"
"              service:\n"
"                name: updated-service\n"
"                port:\n"
"                  name: tcpurl\n"
"            path: /ea\n"
"            pathType: Prefix\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:769
msgid "To secure the incoming connections, Kubernetes allows enabling https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[TLS] within the Ingress resource by specifying a Secret that contains a TLS private key and certificate. You can generate a secured Ingress resource by simply adding the \"tls.secret-name\" properties:"
msgstr "着信接続を保護するために、Kubernetes では、TLS 秘密鍵と証明書を含むシークレットを指定することで、Ingress リソース内で https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[TLS] を有効にすることができます。 \"tls.secret-name\" プロパティーを追加するだけで、安全な Ingress リソースを生成できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:775
#, no-wrap
msgid ""
"quarkus.kubernetes.ingress.expose=true\n"
"## Ingress TLS configuration:\n"
"quarkus.kubernetes.ingress.tls.my-secret.enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:778
msgid "This configuration will generate the following secured Ingress resource:"
msgstr "この設定では、以下のようなセキュアな Ingress リソースが生成されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:791
#, no-wrap
msgid ""
"apiVersion: networking.k8s.io/v1\n"
"kind: Ingress\n"
"metadata:\n"
"  ...\n"
"  name: kubernetes-with-secure-ingress\n"
"spec:\n"
"  rules:\n"
"    ...\n"
"  tls:\n"
"    - secretName: my-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:794
msgid "Now, Kubernetes will validate all the incoming connections using SSL with the certificates provided within the secret with name \"my-secret\"."
msgstr "これで、Kubernetes は、 \"my-secret\" という名前のシークレット内で提供された証明書を使用して、SSL を使用してすべての着信接続を検証します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:798
msgid "More information about how to create the secret in https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[here]."
msgstr "シークレットの作成方法の詳細については、 https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[こちら] を参照してください。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:800
#, no-wrap
msgid "Using the Kubernetes client"
msgstr "Kubernetes クライアントの使用"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:803
msgid "Applications that are deployed to Kubernetes and need to access the API server will usually make use of the `kubernetes-client` extension:"
msgstr "Kubernetesにデプロイされ、APIサーバにアクセスする必要があるアプリケーションは、通常 `kubernetes-client` エクステンションを利用します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:811
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:817
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:822
msgid "To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding).  So, when the `kubernetes-client` extension is present, the `kubernetes` extension is going to create those resources automatically, so that application will be granted the `view` role.  If more roles are required, they will have to be added manually."
msgstr "Kubernetes クラスター内から API サーバーにアクセスするには、いくつかの RBAC 関連のリソースが必要です (ServiceAccount、RoleBinding など)。そのため、 `kubernetes-client` エクステンションが存在する場合、 `kubernetes` エクステンションはそれらのリソースを自動的に作成するため、アプリケーションには `view` ロールが付与されます。さらにロールが必要な場合は、手動で追加する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:826
msgid "You can disable the RBAC resources generation using the property `quarkus.kubernetes-client.generate-rbac=false`."
msgstr "プロパティ `quarkus.kubernetes-client.generate-rbac=false` を使用して、RBAC リソースの生成を無効にすることができます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:828
#, no-wrap
msgid "Deploying to Minikube"
msgstr "Minikube へのデプロイ"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:832
msgid "https://github.com/kubernetes/minikube[Minikube] is quite popular when a Kubernetes cluster is needed for development purposes. To make the deployment to Minikube experience as frictionless as possible, Quarkus provides the `quarkus-minikube` extension. This extension can be added to a project like so:"
msgstr "https://github.com/kubernetes/minikube[Minikube] は、開発目的でKubernetesクラスタが必要な場合に非常に人気があります。Minikubeへのデプロイをできるだけ摩擦のないものにするために、Quarkusは `quarkus-minikube` エクステンションを提供しています。このエクステンションは、以下のようなプロジェクトに追加することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:840
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-minikube</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:846
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-minikube\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:850
msgid "The purpose of this extension is to generate Kubernetes manifests (`minikube.yaml` and `minikube.json`) that are tailored to Minikube.  This extension assumes a couple of things:"
msgstr "このエクステンションの目的は、Minikube に合わせた Kubernetes マニフェスト (`minikube.yaml` および `minikube.json`) を生成することです。このエクステンションは、いくつかのことを前提としています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:853
msgid "Users won't be using an image registry and will instead make their container image accessible to the Kubernetes cluster by building it directly into Minikube's Docker daemon. To use Minikube's Docker daemon you must first execute:"
msgstr "ユーザーはイメージレジストリを使用せず、コンテナイメージをMinikubeのDockerデーモンに直接ビルドしてKubernetesクラスタにアクセスできるようにします。MinikubeのDockerデーモンを使用するには、まず実行する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:857
#, no-wrap
msgid "eval $(minikube -p minikube docker-env)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:861
msgid "Applications deployed to Kubernetes won't be accessed via a Kubernetes `Ingress`, but rather as a `NodePort` `Service`.  The advantage of doing this is that the URL of an application can be retrieved trivially by executing:"
msgstr "Kubernetesにデプロイされたアプリケーションは、Kubernetesの `Ingress` ではなく、`NodePort` `Service` としてアクセスされます。 この方法の利点は、アプリケーションのURLを実行することで、アプリケーションのURLを簡単に取得できることです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:865
#, no-wrap
msgid "minikube service list\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:869
msgid "To control the https://kubernetes.io/docs/concepts/services-networking/service/#nodeport[nodePort] that is used in this case, users can set `quarkus.kubernetes.node-port`.  Note however that this configuration is entirely optional because Quarkus will automatically use a proper (and non-changing) value if none is set."
msgstr "この場合に使用される https://kubernetes.io/docs/concepts/services-networking/service/#nodeport[nodePort] を制御するために、ユーザーは `quarkus.kubernetes.node-port` を設定することができます。 しかし、何も設定されていない場合、Quarkusは自動的に適切な（変更されない）値を使用するため、この設定は完全に任意であることに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:872
msgid "It is highly discouraged to use the manifests generated by the Minikube extension when deploying to production as these manifests are intended for development purposes only. When deploying to production, consider using the vanilla Kubernetes manifests (or the OpenShift ones when targeting OpenShift)."
msgstr "本番環境へのデプロイ時に Minikube エクステンションで生成されたマニフェストを使用することはまったくお勧めできません。本番環境にデプロイする場合は、バニラ Kubernetes マニフェスト (または OpenShift をターゲットにしている場合は OpenShift マニフェスト) の使用を検討してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:875
msgid "If the assumptions the Minikube extension makes don't fit your workflow, nothing prevents you from using the regular Kubernetes extension to generate Kubernetes manifests and apply those to your Minikube cluster."
msgstr "Minikube エクステンションが想定している前提がワークフローに合わない場合、通常の Kubernetes エクステンションを使用して Kubernetes マニフェストを生成し、それを Minikube クラスタに適用することを妨げるものは何もありません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:876
#, no-wrap
msgid "Deploying to Kind"
msgstr "Kind へのデプロイメント"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:879
msgid "https://kind.sigs.k8s.io/[Kind] is another popular tool used as a Kubernetes cluster for development purposes. To make the deployment to Kind experience as frictionless as possible, Quarkus provides the `quarkus-kind` extension. This extension can be added to a project like so:"
msgstr "https://kind.sigs.k8s.io/[Kind] は、開発目的で Kubernetes クラスターとして使用されるもう 1 つの一般的なツールです。Kind エクスペリエンスへのデプロイを可能な限りスムーズにするために、Quarkus は `quarkus-kind` エクステンションを提供します。このエクステンションは、次のようにプロジェクトに追加できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:886
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kind</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:890
msgid "The purpose of this extension is to generate Kubernetes manifests (`kind.yaml` and `kind.json`) that are tailored to Kind and also to automate the process of loading images to the cluster when performing container image builds. The tailor made manifests will be pretty similar (they share the same rules) with Minikube (see above)."
msgstr "このエクステンションの目的は、Kind に合わせた Kubernetes マニフェスト (`kind.yaml` と `kind.json`) を生成することと、コンテナイメージのビルドを行う際にクラスターにイメージをロードする処理を自動化することにあります。テーラーメードのマニフェストは、Minikube (上記を参照) と非常によく似ています (同じルールを共有)。"

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:891
#, no-wrap
msgid "Tuning the generated resources using application.properties"
msgstr "application.properties を使用して生成されたリソースをチューニングする"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:895
msgid "The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.  Here are some examples:"
msgstr "Kubernetes のエクステンションでは、`application.properties` ファイルを使用して生成されたマニフェストをチューニングすることができます。 ここではいくつかの例を紹介します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:896
#, no-wrap
msgid "Configuration options"
msgstr "設定オプション"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:899
msgid "The table below describe all the available configuration options."
msgstr "以下の表は、利用可能なすべての設定オプションについて説明しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:906
msgid "Properties that use non-standard types, can be referenced by expanding the property.  For example to define a `kubernetes-readiness-probe` which is of type `Probe`:"
msgstr "非標準型を使用するプロパティーは、プロパティーを展開することで参照することができます。例えば、 `Probe` 型の  `kubernetes-readiness-probe` を定義するには次のようにします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:915
msgid "In this example `initial-delay` and `period` are fields of the type `Probe`.  Below you will find tables describing all available types."
msgstr "この例では、 `initial-delay` と `period` は `Probe` タイプのフィールドです。以下に、利用可能なすべてのタイプを説明した表を示します。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:916
#, no-wrap
msgid "Client Connection Configuration"
msgstr "クライアント接続の設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:919
msgid "You may need to configure the connection to your Kubernetes cluster.  By default, it automatically uses the active _context_ used by `kubectl`."
msgstr "Kubernetes クラスターへの接続の設定が必要な場合があります。デフォルトでは、`kubectl` が使用するアクティブな _context_ が自動的に使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:921
msgid "For instance, if your cluster API endpoint uses a self-signed SSL Certificate you need to explicitly configure the client to trust it. You can achieve this by defining the following property:"
msgstr "たとえば、クラスター API のエンドポイントが自己署名入り SSL 証明書を使用している場合、それを信頼するようにクライアントを明示的に設定する必要があります。これを実現するには、以下のプロパティーを定義します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:925
#, no-wrap
msgid "quarkus.kubernetes-client.trust-certs=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:928
msgid "The full list of the Kubernetes client configuration properties is provided below."
msgstr "Kubernetes クライアント設定プロパティーの完全なリストを以下に示します。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:933
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1039
#, no-wrap
msgid "OpenShift"
msgstr "OpenShift"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:936
msgid "One way to deploy an application to OpenShift is to use s2i (source to image) to create an image stream from the source and then deploy the image stream:"
msgstr "アプリケーションを OpenShift にデプロイする方法の1つとして、s2i(source to image)を使用してソースからイメージストリームを作成し、イメージストリームをデプロイする方法があります。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:938
#, no-wrap
msgid "CLI"
msgstr "コマンドラインインタフェース"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:942
#, no-wrap
msgid ""
"quarkus extension remove kubernetes,jib\n"
"quarkus extension add openshift\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:945
#, no-wrap
msgid ""
"oc new-project quarkus-project\n"
"quarkus build -Dquarkus.container-image.build=true \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:950
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:965
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:980
#, no-wrap
msgid ""
"oc new-app --name=greeting  quarkus-project/kubernetes-quickstart:1.0.0-SNAPSHOT\n"
"oc expose svc/greeting\n"
"oc get route\n"
"curl <route>/greeting\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:953
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:957
#, no-wrap
msgid ""
"./mvnw quarkus:remove-extension -Dextensions=\"kubernetes, jib\"\n"
"./mvnw quarkus:add-extension -Dextensions=\"openshift\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:960
#, no-wrap
msgid ""
"oc new-project quarkus-project\n"
"./mvnw clean package -Dquarkus.container-image.build=true \n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:968
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:972
#, no-wrap
msgid ""
"./gradlew removeExtension --extensions=\"kubernetes, jib\"\n"
"./gradlew addExtension --extensions=\"openshift\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:975
#, no-wrap
msgid ""
"oc new-project quarkus-project\n"
"./gradlew build -Dquarkus.container-image.build=true \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:983
msgid "See further information in xref:deploying-to-openshift.adoc[Deploying to OpenShift]."
msgstr "詳細は xref:deploying-to-openshift.adoc[OpenShift へのデプロイ] を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:985
#, no-wrap
msgid "A description of OpenShift resources and customisable properties is given below alongside Kubernetes resources to show similarities where applicable.   This includes an alternative to  `oc new-app ...` above, i.e. `oc apply -f target/kubernetes/openshift.json` .\n"
msgstr "OpenShiftリソースとカスタマイズ可能なプロパティーの説明を以下にKubernetesリソースと一緒に記載し、該当する場合には類似性を示します。これには、上記の `oc new-app …` の代替、すなわち `oc apply -f target/kubernetes/openshift.json` を含みます。\n"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:987
msgid "To enable the generation of OpenShift resources, you need to include OpenShift in the target platforms:"
msgstr "OpenShift リソースの生成を有効にするには、ターゲットプラットフォームに OpenShift を含める必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:991
#, no-wrap
msgid "quarkus.kubernetes.deployment-target=openshift\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:994
msgid "If you need to generate resources for both platforms (vanilla Kubernetes and OpenShift), then you need to include both (comma separated)."
msgstr "両方のプラットフォーム(バニラKubernetesとOpenShift)のリソースを生成する必要がある場合は、両方を含める必要があります(カンマ区切り)。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:998
#, no-wrap
msgid "quarkus.kubernetes.deployment-target=kubernetes,openshift\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1002
msgid "Following the execution of `./mvnw package -Dquarkus.container-image.build=true` you will notice amongst the other files that are created, two files named `openshift.json` and `openshift.yml` in the `target/kubernetes/` directory."
msgstr "`./mvnw package -Dquarkus.container-image.build=true` の実行後に、作成された他のファイルの中に `openshift.json` と `openshift.yml` という名前の 2 つのファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1004
msgid "These manifests can be deployed as is to a running cluster, using `kubectl`:"
msgstr "これらのマニフェストは、 `kubectl` を使用して、実行中のクラスターにそのままデプロイすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1008
#, no-wrap
msgid "kubectl apply -f target/kubernetes/openshift.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1011
msgid "OpenShift's users might want to use `oc` rather than `kubectl`:"
msgstr "OpenShift のユーザーは、kubectl ではなく oc を使用したい場合があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1015
#, no-wrap
msgid "oc apply -f target/kubernetes/openshift.json\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1023
#, no-wrap
msgid "./mvnw clean package -Dquarkus.openshift.deploy=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1030
#, no-wrap
msgid "./gradlew build -Dquarkus.openshift.deploy=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1036
msgid "Quarkus also provides the xref:deploying-to-openshift.adoc[OpenShift] extension. This extension is basically a wrapper around the Kubernetes extension and relieves OpenShift users of the necessity of setting the `deployment-target` property to `openshift`"
msgstr "Quarkus は xref:deploying-to-openshift.adoc[OpenShift] エクステンションも提供しています。このエクステンションは、基本的に Kubernetes エクステンションのラッパーであり、これにより、OpenShift ユーザーは `deployment-target` プロパティーを `openshift` に設定する必要がなくなります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1038
msgid "The OpenShift resources can be customized in a similar approach with Kubernetes."
msgstr "Kubernetesと同様のアプローチでOpenShiftのリソースをカスタマイズすることができます。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1044
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1104
#, no-wrap
msgid "Knative"
msgstr "Knative"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1047
msgid "To enable the generation of Knative resources, you need to include Knative in the target platforms:"
msgstr "Knative リソースの生成を可能にするには、ターゲットプラットフォームに Knative を含める必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1051
#, no-wrap
msgid "quarkus.kubernetes.deployment-target=knative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1055
msgid "Following the execution of `./mvnw package` you will notice amongst the other files that are created, two files named `knative.json` and `knative.yml` in the `target/kubernetes/` directory."
msgstr "`./mvnw package` の実行後、作成された他のファイルの中に `knative.json` と `knative.yml` という名前のファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1057
msgid "If you look at either file you will see that it contains a Knative `Service`."
msgstr "どちらかのファイルを見ると、Knative `Service` が含まれることが確認できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1059
msgid "The full source of the `knative.json` file looks something like this:"
msgstr "`knative.json` ファイルの完全なソースはこんな感じです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1093
#, no-wrap
msgid ""
"{\n"
"  {\n"
"    \"apiVersion\" : \"serving.quarkus.knative.dev/v1alpha1\",\n"
"    \"kind\" : \"Service\",\n"
"    \"metadata\" : {\n"
"      \"annotations\": {\n"
"       \"app.quarkus.io/vcs-uri\" : \"<some url>\",\n"
"       \"app.quarkus.io/commit-id\" : \"<some git SHA>\"\n"
"      },\n"
"      \"labels\" : {\n"
"        \"app.kubernetes.io/name\" : \"test-quarkus-app\",\n"
"        \"app.kubernetes.io/version\" : \"1.0.0-SNAPSHOT\"\n"
"      },\n"
"      \"name\" : \"knative\"\n"
"    },\n"
"    \"spec\" : {\n"
"      \"runLatest\" : {\n"
"        \"configuration\" : {\n"
"          \"revisionTemplate\" : {\n"
"            \"spec\" : {\n"
"              \"container\" : {\n"
"                \"image\" : \"dev.local/yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT\",\n"
"                \"imagePullPolicy\" : \"Always\"\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1096
msgid "The generated manifest can be deployed as is to a running cluster, using `kubectl`:"
msgstr "生成されたマニフェストは、 `kubectl` を使用して、実行中のクラスターにそのままデプロイすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1100
#, no-wrap
msgid "kubectl apply -f target/kubernetes/knative.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1103
msgid "The generated service can be customized using the following properties:"
msgstr "生成されたサービスは、以下のプロパティーを使用してカスタマイズすることができます:"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1108
#, no-wrap
msgid "Deployment targets"
msgstr "デプロイメントターゲット"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1112
msgid "Mentioned in the previous sections was the concept of `deployment-target`. This concept allows users to control which Kubernetes manifests will be generated and deployed to a cluster (if `quarkus.kubernetes.deploy` has been set to `true`)."
msgstr "前のセクションで述べたのは `deployment-target` という概念です。この概念により、ユーザーはどの Kubernetes マニフェストを生成してクラスターにデプロイするかを制御することができます ( `quarkus.kubernetes.deploy` が `true` に設定されている場合)。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1116
msgid "By default, when no `deployment-target` is set, then only vanilla Kubernetes resources are generated and deployed. When multiple values are set (for example `quarkus.kubernetes.deployment-target=kubernetes,openshift`) then the resources for all targets are generated, but only the resources that correspond to the *first* target are applied to the cluster (if deployment is enabled)."
msgstr "デフォルトでは、 `deployment-target` が設定されていない場合は、バニラ Kubernetes リソースのみが生成され、デプロイされます。複数の値が設定されている場合 (例: `quarkus.kubernetes.deployment-target=kubernetes,openshift` )、すべてのターゲットのリソースが生成されますが、 *最初* のターゲットに対応するリソースのみがクラスターに適用されます (デプロイが有効な場合)。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1123
#, no-wrap
msgid "./mvnw clean package -Dquarkus.knative.deploy=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1130
#, no-wrap
msgid "./gradlew build -Dquarkus.knative.deploy=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1138
msgid "In the case of wrapper extensions like OpenShift and Minikube, when these extensions have been explicitly added to the project, the default `deployment-target` is set by those extensions. For example if `quarkus-minikube` has been added to a project, then `minikube` becomes the default deployment target and its resources will be applied to the Kubernetes cluster when deployment via `quarkus.kubernetes.deploy` has been set.  Users can still override the deployment-targets manually using `quarkus.kubernetes.deployment-target`."
msgstr "OpenShiftやMinikubeのようなラッパーエクステンションの場合、これらのエクステンションがプロジェクトに明示的に追加されているときは、それらのエクステンションによってデフォルトの `deployment-target` が設定されます。例えば、 `quarkus-minikube` がプロジェクトに追加されている場合、 `minikube` がデフォルトのデプロイメントターゲットになり、 `quarkus.kubernetes.deploy` 経由のデプロイメントが設定されていると、そのリソースが Kubernetes クラスターに適用されます。ユーザーは、 `quarkus.kubernetes.deployment-target` を使用して手動でディプロイメント ターゲットを上書きすることもできます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1139
#, no-wrap
msgid "Deprecated configuration"
msgstr "非推奨の設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1142
msgid "The following categories of configuration properties have been deprecated."
msgstr "以下のカテゴリの設定プロパティーは非推奨となりました。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1143
#, no-wrap
msgid "Properties without the quarkus prefix"
msgstr "quarkus接頭辞のないプロパティー"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1146
msgid "In earlier versions of the extension, the `quarkus.` was missing from those properties. These properties are now deprecated."
msgstr "以前のバージョンのエクステンションでは、これらのプロパティーに `quarkus.` がありませんでした。これらのプロパティーは現在非推奨となっています。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1147
#, no-wrap
msgid "Docker and S2i properties"
msgstr "Docker と S2i のプロパティー"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1150
msgid "The properties for configuring `docker` and `s2i` are also deprecated in favor of the new container-image extensions."
msgstr "`docker` と `s2i` を設定するためのプロパティーも非推奨となり、新しいコンテナイメージエクステンションが採用されました。"

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1151
#, no-wrap
msgid "Config group arrays"
msgstr "コンフィググループ配列"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1154
msgid "Properties referring to config group arrays (e.g. `kubernetes.labels[0]`, `kubernetes.env-vars[0]` etc) have been converted to Maps to align with the rest of the Quarkus ecosystem."
msgstr "設定グループ配列を参照するプロパティー (例: `kubernetes.labels0`、`kubernetes.env-vars0` など) は、Quarkus エコシステムの残りの部分に合わせてマップに変換されました。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1156
msgid "The code below demonstrates the change in `labels` config:"
msgstr "以下のコードは `labels` の設定を変更した様子を示しています:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1162
#, no-wrap
msgid ""
"# Old labels config:\n"
"kubernetes.labels[0].name=foo\n"
"kubernetes.labels[0].value=bar\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1165
#, no-wrap
msgid ""
"# New labels\n"
"quarkus.kubernetes.labels.foo=bar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1168
msgid "The code below demonstrates the change in `env-vars` config:"
msgstr "以下のコードは `env-vars` の設定を変更した様子を示しています:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1174
#, no-wrap
msgid ""
"# Old env-vars config:\n"
"kubernetes.env-vars[0].name=foo\n"
"kubernetes.env-vars[0].configmap=my-configmap\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1177
#, no-wrap
msgid ""
"# New env-vars\n"
"quarkus.kubernetes.env-vars.foo.configmap=myconfigmap\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1179
#, no-wrap
msgid "`env-vars` properties"
msgstr "env-vars プロパティー"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1183
msgid "`quarkus.kubernetes.env-vars` are deprecated (though still currently supported as of this writing) and the new declaration style should be used instead.  See <<#env-vars>> and more specifically <<env-vars-backwards>> for more details."
msgstr "`quarkus.kubernetes.env-vars` は非推奨となったため (この記事の執筆時点ではまだサポートされていますが) 、代わりに新しい宣言スタイルを使う必要があります。詳細は、 <<#env-vars>> のほか、より具体的には <<env-vars-backwards>> を参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1184
#, no-wrap
msgid "Deployment"
msgstr "Deployment"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1188
msgid "To trigger building and deploying a container image you need to enable the `quarkus.kubernetes.deploy` flag (the flag is disabled by default - furthermore it has no effect during test runs or dev mode).  This can be easily done with the command line:"
msgstr "コンテナイメージをビルドしてデプロイするには、 `quarkus.kubernetes.deploy` フラグを有効にする必要があります (このフラグはデフォルトでは無効になっています - さらに、テスト実行中や開発モードでは何の効果もありません)。これはコマンドラインで簡単に行えます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1192
#, no-wrap
msgid "./mvnw clean package -Dquarkus.kubernetes.deploy=true\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1194
#, no-wrap
msgid "Building a container image"
msgstr "コンテナイメージのビルド"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1197
msgid "Building a container image is possible, using any of the 3 available `container-image` extensions:"
msgstr "コンテナイメージのビルドは、利用可能な3つの `container-image` エクステンションのいずれかを使用して可能です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1199
msgid "xref:container-image.adoc#docker[Docker]"
msgstr "xref:container-image.adoc#docker[Docker]"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1200
msgid "xref:container-image.adoc#jib[Jib]"
msgstr "xref:container-image.adoc#jib[Jib]"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1201
msgid "xref:container-image.adoc#s2i[s2i]"
msgstr "xref:container-image.adoc#s2i[s2i]"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1203
msgid "Each time deployment is requested, a container image build will be implicitly triggered (no additional properties are required when the Kubernetes deployment has been enabled)."
msgstr "デプロイが要求されるたびに、暗黙のうちにコンテナイメージのビルドがトリガーされます(Kubernetes のデプロイが有効になっている場合は、追加のプロパティーは必要ありません)。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1204
#, no-wrap
msgid "Deploying"
msgstr "デプロイ"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1209
msgid "When deployment is enabled, the Kubernetes extension will select the resources specified by `quarkus.kubernetes.deployment-target` and deploy them.  This assumes that a `.kube/config` is available in your user directory that points to the target Kubernetes cluster.  In other words the extension will use whatever cluster `kubectl` uses. The same applies to credentials."
msgstr "デプロイメントを有効にすると、Kubernetes エクステンションは `quarkus.kubernetes.deployment-target` で指定されたリソースを選択してデプロイします。これは、ターゲットの Kubernetes クラスターを指す `.kube/config` がユーザーディレクトリーで利用可能であることを前提としています。言い換えれば、エクステンションは `kubectl` が使用しているクラスターであればどれでも使用します。これは、クレデンシャルについても当てはまります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1211
msgid "At the moment no additional options are provided for further customization."
msgstr "現在のところ、さらなるカスタマイズのための追加オプションは提供されていません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1212
#, no-wrap
msgid "Remote Debugging"
msgstr "リモートデバッグ"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1215
msgid "To remotely debug applications that are running on a kubernetes environment, we need to deploy the application as described in the previous section and add as new property: `quarkus.kubernetes.remote-debug.enabled=true`. This property will automatically configure the Java application to append the java agent configuration (for example: `-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005`) and also the service resource to listen using the java agent port."
msgstr "kubernetes 環境で動作しているアプリケーションをリモートでデバッグするには、前のセクションで説明したようにアプリケーションをデプロイし、新しいプロパティー (`quarkus.kubernetes.remote-debug.enabled=true`) として追加する必要があります。このプロパティーは、Java アプリケーションを自動的に設定し、Java エージェント設定 (例: `-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005`) だけでなく、Java エージェントポートを使ってリッスンするサービスリソースも追加します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1217
msgid "After your application has been deployed with the debug enabled, next you need to tunnel the traffic from your local host machine to the specified port of the java agent:"
msgstr "デバッグを有効にした状態でアプリケーションをデプロイしたら、次に、ローカルホストマシンから java エージェントの指定されたポートにトラフィックをトンネルする必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1221
#, no-wrap
msgid "kubectl port-forward svc/<application name> 5005:5005\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1224
msgid "Using this command, you'll forward the traffic from the \"localhost:5005\" to the kubernetes service running the java agent using the port \"5005\" which is the one that the java agent uses by default for remote debugging. You can also configure another java agent port using the property `quarkus.kubernetes.remote-debug.address-port`."
msgstr "このコマンドを使用すると、java エージェントがリモートデバッグ用にデフォルトで使用するポート \"5005\" を使用して、\"localhost:5005\" からのトラフィックを java エージェントを実行している kubernetes サービスに転送することになります。プロパティー `quarkus.kubernetes.remote-debug.address-port` を使用して、別の java エージェントポートを設定することも可能です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1226
msgid "Finally, all you need to do is to configure your favorite IDE to attach the java agent process that is forwarded to `localhost:5005` and start to debug your application. For example, in IntelliJ IDEA, you can follow https://www.jetbrains.com/help/idea/tutorial-remote-debug.html[this tutorial] to debug remote applications."
msgstr "最後に、やらなければならないのは、`localhost:5005` に転送される java エージェントプロセスをアタッチするようにお気に入りの IDE を設定し、アプリケーションのデバッグを開始することだけです。たとえば、IntelliJ IDEA では、 https://www.jetbrains.com/help/idea/tutorial-remote-debug.html:[このチュートリアル] に従って、リモートアプリケーションのデバッグを行うことができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1227
#, no-wrap
msgid "Using existing resources"
msgstr "既存のリソースの利用"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1235
msgid "Note: At the time of writing there is no mechanism in place that allows a one-to-many relationship between provided and generated files. Minikube is not an exception to the rule above, so if you want to customize the generated minikube manifests, the file placed under `src/main/kubernetes` will have to be named `minikube.json` or `minikube.yml` (naming it `kubernetes.yml` or `kubernetes.json` will result in having only the generated `kubernetes.yml` and `kubernetes.json` affected)."
msgstr "注記: 執筆時点では、提供ファイルと生成ファイルの間に一対多の関係を可能にするメカニズムは存在しません。Minikube も上記の例外ではないため、生成された minikube マニフェストをカスタマイズしたい場合は、`src/main/kubernetes` 配下のファイルの名前を `minikube.json` または `minikube.yml` にしなければなりません (名前を `kubernetes.yml` または `kubernetes.json` にすると、生成した `kubernetes.yml` と `kubernetes.json` のみが影響を受けることになります)。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1238
msgid "Any resource found will be added in the generated manifests. Global modifications (e.g. labels, annotations) will also be applied to those resources.  If one of the provided resources has the same name as one of the generated ones, then the generated resource will be created on top of the provided resource, respecting existing content when possible (e.g. existing labels, annotations, environment variables, mounts, replicas etc)."
msgstr "見つかったリソースは、生成されたマニフェストに追加されます。グローバルな変更 (ラベルやアノテーションなど) は、それらのリソースにも適用されます。提供されたリソースの一つが、生成されたリソースの一つと同じ名前を持つ場合、生成されたリソースは提供されたリソースの上に作成され、可能な限り既存のコンテンツ (既存のラベル、アノテーション、環境変数、マウント、レプリカなど) を尊重します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1240
msgid "The name of the resource is determined by the application name and may be overridden by `quarkus.kubernetes.name`, `quarkus.openshift.name` and `quarkus.knative.name`."
msgstr "リソースの名前はアプリケーション名によって決定され、 `quarkus.kubernetes.name` 、 `quarkus.openshift.name` 、 `quarkus.knative.name` で上書きすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1242
msgid "For example, in the `kubernetes-quickstart` application, we can add a `kubernetes.yml` file in the `src/main/kubernetes` that looks like:"
msgstr "例えば、 `kubernetes-quickstart` アプリケーションでは、 `src/main/kubernetes` の中に `kubernetes.yml` のようなファイルを追加することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1269
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  name: kubernetes-quickstart\n"
"  labels:\n"
"    app: quickstart\n"
"spec:\n"
"  replicas: 3\n"
"  selector:\n"
"    matchLabels:\n"
"      app: quickstart\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app: quickstart\n"
"    spec:\n"
"      containers:\n"
"      - name: kubernetes-quickstart\n"
"        image: someimage:latest\n"
"        ports:\n"
"        - containerPort: 80\n"
"        env:\n"
"        - name: FOO\n"
"          value: BAR\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1272
msgid "The generated `kubernetes.yml` will look like:"
msgstr "生成された `kubernetes.yml` は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1308
#, no-wrap
msgid ""
"apiVersion: \"apps/v1\"\n"
"kind: \"Deployment\"\n"
"metadata:\n"
"  annotations:\n"
"    app.quarkus.io/build-timestamp: \"2020-04-10 - 12:54:37 +0000\"\n"
"  labels:\n"
"    app: \"quickstart\"\n"
"  name: \"kubernetes-quickstart\"\n"
"spec:\n"
"  replicas: 3 <1>\n"
"  selector:\n"
"    matchLabels:\n"
"      app.kubernetes.io/name: \"kubernetes-quickstart\"\n"
"      app.kubernetes.io/version: \"1.0.0-SNAPSHOT\"\n"
"  template:\n"
"    metadata:\n"
"      annotations:\n"
"        app.quarkus.io/build-timestamp: \"2020-04-10 - 12:54:37 +0000\"\n"
"      labels:\n"
"        app: \"quickstart\" <2>\n"
"    spec:\n"
"      containers:\n"
"      - env:\n"
"        - name: \"FOO\" <3>\n"
"          value: \"BAR\"\n"
"        image: \"<<yourDockerUsername>>/kubernetes-quickstart:1.0.0-SNAPSHOT\" <4>\n"
"        imagePullPolicy: \"Always\"\n"
"        name: \"kubernetes-quickstart\"\n"
"        ports:\n"
"        - containerPort: 8080 <5>\n"
"          name: \"http\"\n"
"          protocol: \"TCP\"\n"
"      serviceAccount: \"kubernetes-quickstart\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1311
msgid "The provided replicas <1>, labels <2> and environment variables <3> were retained. However, the image <4> and container port <5> were modified. Moreover, the default annotations have been added."
msgstr "提供されたレプリカ <1> 、ラベル <2> および環境変数 <3> が保持されました。ただし、イメージの <4> およびコンテナポート <5> は変更されました。さらに、デフォルトのアノテーションが追加されました。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1315
msgid "When the resource name does not match the application name (or the overridden name) rather than reusing the resource a new one will be added. Same goes for the container."
msgstr "リソース名がアプリケーション名 (またはオーバーライドされた名前) と一致しない場合、リソースを再利用するのではなく、新しいものが追加されます。これは、コンテナについても当てはまります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1317
msgid "When the name of the container does not match the application name (or the overridden name), container specific configuration will be ignored."
msgstr "コンテナ名がアプリケーション名 (またはオーバーライドされた名前) と一致しない場合、コンテナ固有の設定は無視されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1333
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ConfigMap\n"
"metadata:\n"
"  name: common-configmap\n"
"data:\n"
"  hello: world\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1337
#, no-wrap
msgid "Service Binding [[service_binding]]"
msgstr "サービスバインディング [[service_binding]]"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1340
msgid "Quarkus supports the link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] to bind services to applications."
msgstr "Quarkus は、サービスをアプリケーションにバインドするために、link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] をサポートします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1342
msgid "Specifically, Quarkus implements the link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] part of the specification, therefore allowing applications to bind to services, such as a Database or a Broker, without the need for user configuration."
msgstr "具体的には、Quarkus は、仕様の link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] の部分を実装しているため、アプリケーションから Database または Broker などのサービスに、ユーザー設定なしでバインドすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1344
msgid "To enable Service Binding for supported extensions, add the `quarkus-kubernetes-service-binding` extension to the application dependencies."
msgstr "サポートされるエクステンションの Service Binding を有効にするには、`quarkus-kubernetes-service-binding` エクステンションをアプリケーションの依存関係に追加します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1346
msgid "The following extensions can be used with Service Binding and are supported for Workload Projection:"
msgstr "Service Binding では、以下のエクステンションを使用でき、Workload Projection に対応しています。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1349
msgid "`quarkus-jdbc-mariadb`"
msgstr "`quarkus-jdbc-mariadb`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1350
msgid "`quarkus-jdbc-mssql`"
msgstr "`quarkus-jdbc-mssql`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1351
msgid "`quarkus-jdbc-mysql`"
msgstr "`quarkus-jdbc-mysql`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1352
msgid "`quarkus-jdbc-postgresql`"
msgstr "`quarkus-jdbc-postgresql`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1353
msgid "`quarkus-mongo-client`"
msgstr "`quarkus-mongo-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1355
msgid "`quarkus-kafka-client`"
msgstr "`quarkus-kafka-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1356
msgid "`quarkus-smallrye-reactive-messaging-kafka`"
msgstr "`quarkus-smallrye-reactive-messaging-kafka`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1358
msgid "`quarkus-reactive-db2-client`"
msgstr "`quarkus-reactive-db2-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1359
msgid "`quarkus-reactive-mssql-client`"
msgstr "`quarkus-reactive-mssql-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1360
msgid "`quarkus-reactive-mysql-client`"
msgstr "`quarkus-reactive-mysql-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1361
msgid "`quarkus-reactive-oracle-client`"
msgstr "`quarkus-reactive-oracle-client`"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1362
msgid "`quarkus-reactive-pg-client`"
msgstr "`quarkus-reactive-pg-client`"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1366
#, no-wrap
msgid "Workload Projection"
msgstr "Workload Projection"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1369
msgid "Workload Projection is a process of obtaining the configuration for services from the Kubernetes cluster. This configuration takes the form of directory structures that follow certain conventions and is attached to an application or to a service as a mounted volume. The `kubernetes-service-binding` extension uses this directory structure to create configuration sources, which allows you to configure additional modules, such as databases or message brokers."
msgstr "Workload Projection は、Kubernetes クラスターからのサービスの設定を取得するプロセスです。この設定は、特定の規約に従ったディレクトリー構造の形式をとり、アプリケーションまたはサービスにマウントされたボリュームとしてアタッチされます。`kubernetes-service-binding` エクステンションは、このディレクトリー構造を利用して設定ソースを作成し、これにより、データベースやメッセージブローカーなどの追加モジュールを設定することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1371
msgid "During application development, users can use workload projection to connect their application to a development database, or other locally-run services, without changing the actual application code or configuration."
msgstr "アプリケーションの開発中、ユーザーは Workload Projection を使用して、実際のアプリケーションコードや設定を変更することなく、開発用データベースやその他のローカルで実行されるサービスにアプリケーションを接続することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1373
msgid "For an example of a workload projection where the directory structure is included in the test resources and passed to integration test, see the link:https://github.com/quarkusio/quarkus/tree/e7efe6b3efba91b9c4ae26f9318f8397e23e7505/integration-tests/kubernetes-service-binding-jdbc/src/test/resources/k8s-sb[Kubernetes Service Binding datasource] GitHub repository."
msgstr "ディレクトリー構造をテストリソースに含めて統合テストに渡すワークロードの投影の例については、link:https://github.com/quarkusio/quarkus/tree/e7efe6b3efba91b9c4ae26f9318f8397e23e7505/integration-tests/kubernetes-service-binding-jdbc/src/test/resources/k8s-sb[Kubernetes Service Binding datasource] GitHub リポジトリーを参照してください。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1377
msgid "The `k8s-sb` directory is the root of all service bindings. In this example, only one database called `fruit-db` is intended to be bound. This binding database has the `type` file, that indicates `postgresql` as the database type, while the other files in the directory provide the necessary information to establish the connection."
msgstr "`k8s-sb` ディレクトリーは、すべてのサービスバインディングの root です。この例では、`fruit-db` と呼ばれる 1 つのデータベースのみをバインドすることを意図しています。このバインディングデータベースには、データベースタイプとして `postgresql` を示す `type` ファイルがあり、ディレクトリー内の他のファイルは、接続を確立するために必要な情報を提供します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1379
msgid "After your Quarkus project obtains information from `SERVICE_BINDING_ROOT` environment variables that are set by OpenShift, you can locate generated configuration files that are present in the file system and use them to map the configuration-file values to properties of certain extensions."
msgstr "Quarkus プロジェクトが、OpenShift によって設定された `SERVICE_BINDING_ROOT` 環境変数から情報を取得した後、ファイルシステム内に存在する生成された設定ファイルを探し出し、設定ファイルの値を特定のエクステンションのプロパティーにマッピングするために使用することができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1382
#, no-wrap
msgid "Introduction to the Service Binding Operator"
msgstr "サービスバインディング Operator の紹介"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1385
msgid "The link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] is an Operator that implements link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] and is meant to simplify the binding of services to an application. Containerized applications that support link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] obtain service binding information in the form of volume mounts. The Service Binding Operator reads binding service information and mounts it to the application containers that need it."
msgstr "link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] は、link:https://github.com/k8s-service-bindings/spec[Service Binding Specification for Kubernetes] を実装する Operator で、アプリケーションへのサービスのバインディングを簡素化するためのものです。link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] をサポートするコンテナ型アプリケーションは、サービスバインディング情報をボリュームマウントの形で取得します。Service Binding Operator は、バインディングサービス情報を読み取り、それを必要とするアプリケーションコンテナにマウントします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1387
msgid "The correlation between application and bound services is expressed through the `ServiceBinding` resources, which declares the intent of what services are meant to be bound to what application."
msgstr "アプリケーションとバインドされたサービスの相関は `ServiceBinding` リソースによって表現され、これにより、どのサービスがどのアプリケーションにバインドされるかという意図が宣言されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1389
msgid "The Service Binding Operator watches for `ServiceBinding` resources, which inform the Operator what applications are meant to be bound with what services. When a listed application is deployed, the Service Binding Operator collects all the binding information that must be passed to the application, then upgrades the application container by attaching a volume mount with the binding information."
msgstr "Service Binding Operator は `ServiceBinding` リソースを監視し、どのアプリケーションがどのサービスとバインドされるべきかを Operator に知らせます。リストされたアプリケーションがデプロイされると、Service Binding Operator はアプリケーションに渡さなければならないすべてのバインディング情報を収集し、バインディング情報でボリュームマウントをアタッチしてアプリケーションコンテナをアップグレードします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1391
msgid "The Service Binding Operator completes the following actions:"
msgstr "Service Binding Operator は、以下の操作を実施します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1393
msgid "Observes `ServiceBinding` resources for workloads intended to be bound to a particular service"
msgstr "特定のサービスにバインドされることを意図したワークロードの `ServiceBinding` リソースを観察する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1394
msgid "Applies the binding information to the workload using volume mounts"
msgstr "ボリュームマウントを使用して、ワークロードにバインド情報を適用する"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1396
msgid "The following chapter describes the automatic and semi-automatic service binding approaches and their use cases. With either approach, the `kubernetes-service-binding` extension generates a `ServiceBinding` resource. With the semi-automatic approach, users must provide a configuration for target services manually. With the automatic approach, for a limited set of services generating the `ServiceBinding` resource, no additional configuration is needed."
msgstr "次の章では、自動および半自動のサービスバインディングのアプローチとそのユースケースについて説明します。どちらのアプローチでも、`kubernetes-service-binding` エクステンションは、`ServiceBinding` リソースを生成します。半自動アプローチでは、ユーザーはターゲットサービスの設定を手動で提供する必要があります。自動アプローチでは、`ServiceBinding` リソースを生成する限定されたサービスセットの場合、追加の設定は必要ありません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1398
#, no-wrap
msgid "Semi-automatic service binding"
msgstr "半自動のサービスバインディング"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1401
msgid "A service binding process starts with a user specification of required services that will be bound to a certain application. This expression is summarized in the `ServiceBinding` resource that is generated by the `kubernetes-service-binding` extension. The use of the `kubernetes-service-binding` extensions helps users to generate `ServiceBinding` resources with minimal configuration, therefore simplifying the process overall."
msgstr "サービスバインディングのプロセスは、あるアプリケーションにバインドされる必要なサービスをユーザーが指定するところから始まります。この表現は、`kubernetes-service-binding` エクステンションによって生成される `ServiceBinding` リソースに要約されています。`kubernetes-service-binding` エクステンションを使用することで、ユーザーは最小限の設定で `ServiceBinding` リソースを生成できるため、プロセス全体が簡素化されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1403
msgid "The Service Binding Operator responsible for the binding process then reads the information from the `ServiceBinding` resource and mounts the required files to a container accordingly."
msgstr "バインディングプロセスを担当するService Binding Operator は、`ServiceBinding` リソースから情報を読み取り、それに応じて必要なファイルをコンテナにマウントします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1406
msgid "An example of the `ServiceBinding` resource:"
msgstr "以下は、`ServiceBinding` リソースの例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1426
#, no-wrap
msgid ""
"apiVersion: binding.operators.coreos.com/v1beta1\n"
"kind: ServiceBinding\n"
"metadata:\n"
" name: binding-request\n"
" namespace: service-binding-demo\n"
"spec:\n"
" application:\n"
"   name: java-app\n"
"   group: apps\n"
"   version: v1\n"
"   resource: deployments\n"
" services:\n"
" - group: postgres-operator.crunchydata.com\n"
"   version: v1beta1\n"
"   kind: Database\n"
"   name: db-demo\n"
"   id: postgresDB\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1431
msgid "The `quarkus-kubernetes-service-binding` extension provides a more compact way of expressing the same information. For example:"
msgstr "`quarkus-kubernetes-service-binding` エクステンションは、同じ情報をよりコンパクトに表現する方法を提供します。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1436
#, no-wrap
msgid ""
"quarkus.kubernetes-service-binding.services.db-demo.api-version=postgres-operator.crunchydata.com/v1beta1\n"
"quarkus.kubernetes-service-binding.services.db-demo.kind=Database\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1440
msgid "After adding the earlier configuration properties inside your `application.properties`, the `quarkus-kubernetes`, in combination with the `quarkus-kubernetes-service-binding` extension, automatically generates the `ServiceBinding` resource."
msgstr "先ほどの設定プロパティーを `application.properties` 内に追加すると、`quarkus-kubernetes` は、`quarkus-kbernetes-service-binding` エクステンションとの組み合わせにより、自動的に `ServiceBinding` リソースを生成します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1442
msgid "The earlier mentioned `db-demo` property-configuration identifier now has a double role and also completes the following actions:"
msgstr "先に述べた `db-demo` property-configuration 識別子は、2 つのロールを持つようになり、以下の動作も完了します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1444
msgid "Correlates and groups `api-version` and `kind` properties together"
msgstr "`api-version` と `kind` のプロパティーを相互に関連付け、グループ化する"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1445
msgid "Defines the `name` property for the custom resource with a possibility for a later edit. For example:"
msgstr "後で編集できるように、カスタムリソースの `name` プロパティーを定義します。以下に例を示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1451
#, no-wrap
msgid ""
"quarkus.kubernetes-service-binding.services.db-demo.api-version=postgres-operator.crunchydata.com/v1beta1\n"
"quarkus.kubernetes-service-binding.services.db-demo.kind=Database\n"
"quarkus.kubernetes-service-binding.services.db-demo.name=my-db\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1453
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1589
#, no-wrap
msgid "Additional resources"
msgstr "その他のリソース"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1456
msgid "For a semi-automatic service binding demonstration, see link:https://developers.redhat.com/articles/2021/12/22/how-use-quarkus-service-binding-operator#create_the_quarkus_application[How to use Quarkus with the Service Binding Operator]"
msgstr "半自動のサービスバインディングのデモについては、link:https://developers.redhat.com/articles/2021/12/22/how-use-quarkus-service-binding-operator#create_the_quarkus_application[How to use Quarkus with the Service Binding Operator] を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1458
msgid "link:https://github.com/redhat-developer/service-binding-operator#known-bindable-operators[List of bindable Operators]"
msgstr "link:https://github.com/redhat-developer/service-binding-operator#known-bindable-operators[bindable Operator の一覧]"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1460
#, no-wrap
msgid "Automatic service binding"
msgstr "自動サービスバインディング"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1463
msgid "The `quarkus-kubernetes-service-binding` extension can generate the `ServiceBinding` resource automatically after detecting that an application requires access to the external services that are provided by available bindable Operators."
msgstr "`quarkus-kubernetes-service-binding` エクステンションは、アプリケーションが利用可能でバインド可能な Operator によって提供される外部サービスへのアクセスを必要とすることを検出した後、自動的に `ServiceBinding` リソースを生成することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1465
msgid "Automatic service binding can be generated for a limited number of service types. To be consistent with established terminology for Kubernetes and Quarkus services, this chapter refers to these service types as kinds."
msgstr "自動サービスバインディングは、限られた数のサービスタイプに対して生成することができます。Kubernetes および Quarkus のサービスに関する確立された用語と一致させるために、この章ではこれらのサービスタイプを kind と呼びます。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1466
#, no-wrap
msgid "Operators that support the service auto-binding"
msgstr "サービス auto-binding をサポートするオペレーター"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1469
#, no-wrap
msgid "Operator"
msgstr "オペレーター"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1469
#, no-wrap
msgid "API Version"
msgstr "API バージョン"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1470
#, no-wrap
msgid "Kind"
msgstr "Kind"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1470
#, no-wrap
msgid "`postgresql`"
msgstr "`postgresql`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1470
#, no-wrap
msgid "link:https://operatorhub.io/operator/postgresql[CrunchyData Postgres]"
msgstr "link:https://operatorhub.io/operator/postgresql[CrunchyData Postgres]"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1470
#, no-wrap
msgid "postgres-operator.crunchydata.com/v1beta1"
msgstr "postgres-operator.crunchydata.com/v1beta1"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1471
#, no-wrap
msgid "PostgresCluster"
msgstr "PostgresCluster"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1471
#, no-wrap
msgid "`mysql`"
msgstr "`mysql`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1471
#, no-wrap
msgid "link:https://operatorhub.io/operator/percona-xtradb-cluster-operator[Percona XtraDB Cluster]"
msgstr "link:https://operatorhub.io/operator/percona-xtradb-cluster-operator[Percona XtraDB Cluster]"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1471
#, no-wrap
msgid "pxc.percona.com/v1-9-0"
msgstr "pxc.percona.com/v1-9-0"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1472
#, no-wrap
msgid "PerconaXtraDBCluster"
msgstr "PerconaXtraDBCluster"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1472
#, no-wrap
msgid "`mongo`"
msgstr "`mongo`"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1472
#, no-wrap
msgid "link:https://operatorhub.io/operator/percona-server-mongodb-operator[Percona Mongo]"
msgstr "link:https://operatorhub.io/operator/percona-server-mongodb-operator[Percona Mongo]"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1472
#, no-wrap
msgid "psmdb.percona.com/v1-9-0"
msgstr "psmdb.percona.com/v1-9-0"

#. type: Table
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1473
#, no-wrap
msgid "PerconaServerMongoDB"
msgstr "PerconaServerMongoDB"

#. type: Title ===
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1476
#, no-wrap
msgid "Automatic datasource binding"
msgstr "自動データソースバインディング"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1479
msgid "For traditional databases, automatic binding is initiated whenever a datasource is configured as follows:"
msgstr "従来のデータベースの場合、データソースが以下のように設定されるたびに自動バインディングが開始されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1483
#, no-wrap
msgid "quarkus.datasource.db-kind=postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1486
msgid "The previous configuration, combined with the presence of `quarkus-datasource`, `quarkus-jdbc-postgresql`, `quarkus-kubernetes`, and `quarkus-kubernetes-service-binding` properties in the application, results in the generation of the `ServiceBinding` resource for the `postgresql` database type."
msgstr "前述の設定と、アプリケーション内の `quarkus-datasource`、`quarkus-jdbc-postgresql`、`quarkus-kubernetes` および `quarkus-kbernetes-service-binding` プロパティーの存在により、データベースタイプ `postgresql` 用の `ServiceBinding` リソースが生成されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1488
msgid "By using the `apiVersion` and `kind` properties of the Operator resource, which matches the used `postgresql` Operator, the generated `ServiceBinding` resource binds the service or resource to the application."
msgstr "使用された `postgresql`` Operator と一致する Operator リソースの `apiVersion` プロパティーと `kind` プロパティーを使用することにより、生成された `ServiceBinding` リソースは、サービスまたはリソースをアプリケーションにバインドします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1497
#, no-wrap
msgid ""
" services:\n"
" - apiVersion: postgres-operator.crunchydata.com/v1beta1\n"
"   kind: PostgresCluster\n"
"   name: postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1500
msgid "Specified the name of the datasource as follows:"
msgstr "データソースの名前を以下のように指定しました。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1504
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1577
#, no-wrap
msgid "quarkus.datasource.fruits-db.db-kind=postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1507
msgid "The `service` in the generated `ServiceBinding` then displays as follows:"
msgstr "生成された `ServiceBinding` 内の `service` は、以下のように表示されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1514
#, no-wrap
msgid ""
" services:\n"
" - apiVersion: postgres-operator.crunchydata.com/v1beta1\n"
"   kind: PostgresCluster\n"
"   name: fruits-db\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1517
msgid "Similarly, if you use `mysql`, the name of the datasource can be specified as follows:"
msgstr "同様に、`mysql` を使う場合は、データソース名を以下のように指定することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1521
#, no-wrap
msgid "quarkus.datasource.fruits-db.db-kind=mysql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1524
msgid "The generated `service` contains the following:"
msgstr "生成された `service` には、以下の内容が含まれます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1531
#, no-wrap
msgid ""
" services:\n"
" - apiVersion: pxc.percona.com/v1-9-0\n"
"   kind: PerconaXtraDBCluster\n"
"   name: fruits-db\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1534
#, no-wrap
msgid "Customizing Automatic Service Binding"
msgstr "自動サービスバインディングのカスタマイズ"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1537
msgid "Even though automatic binding was developed to eliminate as much manual configuration as possible, there are cases where modifying the generated `ServiceBinding` resource might still be needed. The generation process exclusively relies on information extracted from the application and the knowledge of the supported Operators, which may not reflect what is deployed in the cluster. The generated resource is based purely on the knowledge of the supported bindable Operators for popular service kinds and a set of conventions that were developed to prevent possible mismatches, such as:"
msgstr "自動バインディングは手動での設定をできるだけ排除するために開発されましたが、生成された `ServiceBinding` リソースを修正しなければならない場合もあります。生成プロセスはアプリケーションから抽出された情報とサポートされる Operator のナレッジにのみ依存しており、これはクラスターにデプロイされているものを反映していない可能性があります。生成されるリソースは、一般的なサービス kind のサポートされているバインディング可能な Operator のナレッジと、以下のようなミスマッチの可能性を防ぐために開発された一連の規約にのみ基づいています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1539
msgid "The target resource name does not match the datasource name"
msgstr "ターゲットリソース名がデータソース名と一致しない"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1540
msgid "A specific Operator needs to be used rather than the default Operator for that service kind"
msgstr "そのサービスの kind のデフォルトの Operator ではなく、特定の Operator を使用する必要がある"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1541
msgid "Version conflicts that occur when a user needs to use any other version than default or latest"
msgstr "ユーザーがデフォルトまたは最新以外のバージョンを使用する必要がある場合に発生するバージョンの競合"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1542
#, no-wrap
msgid "Conventions"
msgstr "規約"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1545
msgid "The target resource coordinates are determined based on the type of Operator and the kind of service."
msgstr "対象リソース座標は、Operator のタイプとサービスの kind に応じて決定されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1546
msgid "The target resource name is set by default to match the service kind, such as `postgresql`, `mysql`, `mongo`."
msgstr "ターゲットリソース名は、デフォルトでは `postgresql`、`mysql`、`mongo` などのサービスの kind に一致するように設定されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1547
msgid "For named datasources, the name of the datasource is used."
msgstr "名前付きデータソースの場合、データソースの名前が使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1548
msgid "For named `mongo` clients, the name of the client is used."
msgstr "名前付き `mongo` クライアントの場合、クライアントの名前が使われます。"

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1550
#, no-wrap
msgid "Example 1 - Name mismatch"
msgstr "例 1 - 名前の不一致"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1553
msgid "For cases in which you need to modify the generated `ServiceBinding` to fix a name mismatch, use the `quarkus.kubernetes-service-binding.services` properties and specify the service's name as the service key."
msgstr "生成された `ServiceBinding` を修正して名前の不一致を修正する必要がある場合は、`quarkus.kubernetes-service-binding.services` プロパティーを使用して、サービスの名前をサービスキーとして指定します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1555
msgid "The `service key` is usually the name of the service, for example the name of the datasource, or the name of the `mongo` client. When this value is not available, the datasource type, such as `postgresql`, `mysql`, `mongo`, is used instead."
msgstr "`service key` は通常、データソースの名前や `mongo` クライアントの名前など、サービスの名前です。この値がない場合は、`postgresql`、`mysql`、`mongo` などのデータソースのタイプが代わりに使用されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1557
msgid "To avoid naming conflicts between different types of services, prefix the `service key` with a specific datasource type, such as `postgresql-__<person>__`."
msgstr "異なるタイプのサービス間での名前の競合を避けるために、`service key` の前に `postgresql-__<person>__` のような特定のデータソースのタイプを付けます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1559
msgid "The following example shows how to customize the `apiVersion` property of the `PostgresCluster` resource:"
msgstr "次の例は、`PostgresCluster` リソースの `apiVersion` プロパティーをカスタマイズする方法を示しています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1564
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.kubernetes-service-binding.services.postgresql.api-version=postgres-operator.crunchydata.com/v1beta2\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1568
#, no-wrap
msgid "Example 2: Application of a custom name for a datasource"
msgstr "例 2: データソースのカスタム名のアプリケーション"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1571
msgid "In Example 1, the `db-kind`(`postgresql`) was used as a service key. In this example, because the datasource is named, according to convention, the datasource name (`fruits-db`) is used instead."
msgstr "例 1 では、`db-kind`(`postgresql`) がサービスキーとして使用されました。この例では、規約に従ってデータソースに名前がついているので、データソース名 (`fruits-db`) が代わりに使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1573
msgid "The following example shows that for a named datasource, the datasource name is used as the name of the target resource:"
msgstr "次の例は、名前付きデータソースの場合、データソース名がターゲットリソースの名前として使用されることを示しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1580
msgid "This has the same effect as the following configuration:"
msgstr "これは、以下の設定と同じ効果があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1586
#, no-wrap
msgid ""
"quarkus.kubernetes-service-binding.services.fruits-db.api-version=postgres-operator.crunchydata.com/v1beta1\n"
"quarkus.kubernetes-service-binding.services.fruits-db.kind=PostgresCluster\n"
"quarkus.kubernetes-service-binding.services.fruits-db.name=fruits-db\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/deploying-to-kubernetes.adoc:1590
msgid "For more details about the available properties and how do they work, see the link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] part of the Service Binding specification."
msgstr "利用可能なプロパティーとその動作の詳細については、Service Binding 仕様 の link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] の部分を参照してください。"
