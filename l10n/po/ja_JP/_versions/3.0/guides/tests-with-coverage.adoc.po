msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:7
#, no-wrap
msgid "Measuring the coverage of your tests"
msgstr "テストカバレッジの測定"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:17
msgid "Learn how to measure the test coverage of your application. This guide covers:"
msgstr "アプリケーションのテストカバレッジを測定する方法をご紹介します。このガイドでは、以下の内容をカバーしています:"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:19
msgid "Measuring the coverage of your Unit Tests"
msgstr "ユニットテストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:20
msgid "Measuring the coverage of your Integration Tests"
msgstr "統合テストのカバレッジを測定する"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:21
msgid "Separating the execution of your Unit Tests and Integration Tests"
msgstr "ユニットテストと統合テストの実行を分離する"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:22
msgid "Consolidating the coverage for all your tests"
msgstr "全テストのカバレッジを統合する"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:24
msgid "Please note that code coverage is not supported in native mode."
msgstr "ネイティブモードではコードカバレッジはサポートされていませんのでご注意ください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:29
msgid "Having completed the xref:getting-started-testing.adoc[Testing your application guide]"
msgstr "link:https://quarkus.io/guides/getting-started-testing[アプリケーションのテストガイド] が完了済であること"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:34
msgid "The application built in this guide is just a JAX-RS endpoint (hello world) that relies on dependency injection to use a service.  The service will be tested with JUnit 5 and the endpoint will be annotated via a `@QuarkusTest` annotation."
msgstr "このガイドで作成するアプリケーションは、サービスを使用するために依存性の注入を使用した JAX-RS エンドポイント (hello world) です。サービスは JUnit 5 でテストされ、エンドポイントには `@QuarkusTest` のアノテーションが付けられます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:35
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:39
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example.  Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。しかし、完成した例にすぐに進むことができます。Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-archive-url}[archive] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:41
msgid "The solution is located in the `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[directory]."
msgstr "ソリューションは `tests-with-coverage-quickstart` {quickstarts-tree-url}/tests-with-coverage-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:42
#, no-wrap
msgid "Starting from a simple project and two tests"
msgstr "簡単なプロジェクトと2つのテストから始める"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:45
msgid "Let's start from an empty application created with the Quarkus Maven plugin:"
msgstr "Quarkus Mavenプラグインで作成した空のアプリケーションから始めてみましょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:51
msgid "Now we'll be adding all the elements necessary to have an application that is properly covered with tests."
msgstr "ここで、アプリケーションをテストで適切にカバーするために必要な要素をすべて追加していきます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:53
msgid "First, a JAX-RS resource serving a hello endpoint:"
msgstr "最初に、helloエンドポイントを提供するアプリケーション:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:57
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:94
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:112
#, no-wrap
msgid "package org.acme.testcoverage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:63
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:66
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:68
#, no-wrap
msgid "    private final GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:73
#, no-wrap
msgid ""
"    @Inject\n"
"    public GreetingResource(GreetingService service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:80
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:87
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:90
msgid "This endpoint uses a greeting service:"
msgstr "このエンドポイントは、グリーティングサービスを利用しています:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:96
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:99
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:103
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:105
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:108
msgid "The project will also need a test:"
msgstr "また、プロジェクトにはテストも必要です:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:116
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Tag;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:118
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:121
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:124
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:133
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:145
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:147
#, no-wrap
msgid "Setting up JaCoCo"
msgstr "Jacocoの設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:150
msgid "Now we need to add JaCoCo to our project. To do this we need to add the following to the build file:"
msgstr "次に、Jacocoをプロジェクトに追加する必要があります。そのために、ビルドファイルに以下を追加する必要があります:"

#. type: Block title
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:152
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:190
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:346
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:159
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jacoco</artifactId>\n"
"  <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:162
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:224
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:399
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:165
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-jacoco\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:169
msgid "This Quarkus extension takes care of everything that would usually be done via the JaCoCo Maven plugin, so no additional config is required."
msgstr "このQuarkusエクステンションは、通常はJacoco Mavenプラグインで行われることすべての処理を行うため、追加の設定は必要ありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:172
msgid "Using both the extension and the plugin requires special configuration, if you add both you will get lots of errors about classes already being instrumented. The configuration needed is detailed below."
msgstr "エクステンションとプラグインの両方を使用するには、特別な設定が必要です。両方を追加すると、すでに組み込まれているクラスに関する多くのエラーが発生します。必要な設定の詳細は以下のとおりです。"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:173
#, no-wrap
msgid "Running the tests with coverage"
msgstr "カバレッジ付きテストの実行"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:177
msgid "Run `mvn verify`, the tests will be run and the results will end up in `target/jacoco-reports`. This is all that is needed, the `quarkus-jacoco` extension allows JaCoCo to just work out of the box."
msgstr "`mvn verify` を実行すると、テストが実行され、その結果が `target/jacoco-reports` に出力されます。 `quarkus-jacoco` のエクステンションを使えば、これだけでJacoco はすぐに動作します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:179
msgid "There are some config options that affect this:"
msgstr "これにはいくつかの設定オプションがあります:"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:182
#, no-wrap
msgid "Coverage for tests not using @QuarkusTest"
msgstr "QuarkusTestを使用していないテストのカバレッジ"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:186
msgid "The Quarkus automatic JaCoCo config will only work for tests that are annotated with `@QuarkusTest`. If you want to check the coverage of other tests as well then you will need to fall back to the JaCoCo maven plugin."
msgstr "Quarkusの自動Jacoco設定は、 `@QuarkusTest` でアノテーションされたテストに対してのみ機能します。他のテストのカバレッジもチェックしたい場合は、Jacoco mavenプラグインを利用する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:188
msgid "In addition to including the `quarkus-jacoco` extension in your `pom.xml` you will need the following config:"
msgstr "`quarkus-jacoco` エクステンションを `pom.xml` に含めるのに加えて、以下のような設定が必要になります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:219
#, no-wrap
msgid ""
"<project>\n"
"    <build>\n"
"        <plugins>\n"
"            ...\n"
"            <plugin>\n"
"                <groupId>org.jacoco</groupId>\n"
"                <artifactId>jacoco-maven-plugin</artifactId>\n"
"                <version>${jacoco.version}</version>\n"
"                <executions>\n"
"                   <execution>\n"
"                      <id>default-prepare-agent</id>\n"
"                      <goals>\n"
"                           <goal>prepare-agent</goal>\n"
"                      </goals>\n"
"                      <configuration>\n"
"                        <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>  <1>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                      </configuration>\n"
"                   </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:221
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:243
msgid "This config tells it to ignore `@QuarkusTest` related classes, as they are loaded by `QuarkusClassLoader`"
msgstr "この設定は、 `QuarkusClassLoader`  によってロードされる `@QuarkusTest` 関連のクラスを無視するようになっています"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:231
#, no-wrap
msgid ""
"plugins {\n"
"    id 'jacoco' <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:240
#, no-wrap
msgid ""
"test {\n"
"    finalizedBy jacocoTestReport\n"
"    jacoco {\n"
"        excludeClassLoaders = [\"*QuarkusClassLoader\"] <2>\n"
"        destinationFile = layout.buildDirectory.file(\"jacoco-quarkus.exec\").get().asFile <2>\n"
"    }\n"
"    jacocoTestReport.enabled = false <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:242
msgid "Add the `jacoco` gradle plugin"
msgstr "`jacoco` gradleプラグインの追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:244
msgid "Set this config to `false` if you are also using the `quarkus-jacoco` extension and have at least one `@QuarkusTest`.  The default `jacocoTestReport` task can be skipped since `quarkus-jacoco` will generate the combined report of regular unit tests and `@QuarkusTest` classes since the execution data is recorded in the same file."
msgstr "`quarkus-jacoco` エクステンションも使用していて、少なくとも 1 つの `@QuarkusTest` がある場合は、この設定を `false` にします。デフォルトの `jacocoTestReport` タスクは省略できます。なぜなら、通常のユニットテストと `@QuarkusTest` クラスの実行データが同じファイルに記録されているため、 `quarkus-jacoco` がそれらを合わせたレポートを生成するからです。"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:248
msgid "This config will only work if at least one `@QuarkusTest` is being run. If you are not using `@QuarkusTest` then you can simply use the JaCoCo plugin in the standard manner with no additional config."
msgstr "この設定は、少なくとも1つの `@QuarkusTest` が実行されている場合にのみ機能します。 `@QuarkusTest` を使用していない場合は、追加の設定をすることなく、通常の方法で Jacoco プラグインを使用することができます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:249
#, no-wrap
msgid "Coverage for Integration Tests"
msgstr "結合テストのカバレッジ"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:252
msgid "To get code coverage data from integration tests, the following requirements need to be met:"
msgstr "結合テストからコードカバレッジデータを取得するには、以下の要件を満たす必要があります:"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:254
msgid "The built artifact is a jar (and not a container or native binary)."
msgstr "ビルドされたアーティファクトがjarであること（コンテナやネイティブバイナリではないこと）。"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:255
msgid "JaCoCo needs to be configured in your build tool."
msgstr "Jacocoがビルドツールで設定されていること。"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:256
msgid "The application must have been built with `quarkus.package.write-transformed-bytecode-to-build-output` set to `true`"
msgstr "アプリケーションは、 `quarkus.package.write-transformed-bytecode-to-build-output` が `true` に設定してビルドされていること"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:258
msgid "Setting `quarkus.package.write-transformed-bytecode-to-build-output=true` should be done with caution and only if subsequent builds are done in a clean environment - i.e. the build tool's output directory has been completely cleaned."
msgstr "`quarkus.package.write-transformed-bytecode-to-build-output=true` は慎重に設定を行う必要があります。　後続のビルドがクリーンな環境で行われる場合、つまりビルドツールの出力ディレクトリが完全にクリーンである場合のみ行う必要があります。"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:261
msgid "In the `pom.xml`, you can add the following plugin configuration for JaCoCo. This will append integration test data into the same destination file as unit tests, re-build the JaCoCo report after the integration tests are complete, and thus produce a comprehensive code-coverage report."
msgstr "`pom.xml` で、Jacocoのプラグイン設定を以下のように追加します。これにより、結合テストのデータをユニットテストと同じ保存先のファイルに追加し、結合テストが完了した後にjacocoレポートを再構築することで、包括的なコードカバレッジレポートを作成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:274
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:360
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <groupId>org.jacoco</groupId>\n"
"            <artifactId>jacoco-maven-plugin</artifactId>\n"
"            <version>${jacoco.version}</version>\n"
"            <executions>\n"
"                ... <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:302
#, no-wrap
msgid ""
"                <execution>\n"
"                    <id>default-prepare-agent-integration</id>\n"
"                    <goals>\n"
"                        <goal>prepare-agent-integration</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>\n"
"                        <append>true</append>\n"
"                    </configuration>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>report</id>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <goals>\n"
"                        <goal>report</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <outputDirectory>${project.build.directory}/jacoco-report</outputDirectory>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:304
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:396
msgid "All executions should be in the same `<plugin>` definition so make sure you concatenate all of them."
msgstr "すべてのexecutionsは同じ `<plugin>` の定義にあるはずなので、すべてつなげてください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:306
msgid "In order to run the integration tests as a jar with the JaCoCo agent, add the following to your `pom.xml`."
msgstr "Jacocoエージェントで結合テストをjarとして実行するには、 `pom.xml` に以下を追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:335
#, no-wrap
msgid ""
"<build>\n"
"    ...\n"
"    <plugins>\n"
"        ...\n"
"        <plugin>\n"
"            <artifactId>maven-failsafe-plugin</artifactId>\n"
"            <version>${surefire-plugin.version}</version>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>integration-test</goal>\n"
"                        <goal>verify</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                        <systemPropertyVariables>\n"
"                            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                            <maven.home>${maven.home}</maven.home>\n"
"                            <quarkus.test.arg-line>${argLine}</quarkus.test.arg-line>\n"
"                        </systemPropertyVariables>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:339
msgid "Sharing the same value for `quarkus.test.arg-line` might break integration test runs that test different types of Quarkus artifacts. In such cases, the use of Maven profiles is advised."
msgstr "`quarkus.test.arg-line` で同じ値を共有すると、異なるタイプの Quarkus アーティファクトをテストする統合テストの実行が中断される場合があります。このような場合は、Mavenプロファイルの使用することをお勧めします。"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:340
#, no-wrap
msgid "Setting coverage thresholds"
msgstr "カバレッジの閾値を設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:344
msgid "You can set thresholds for code coverage using the JaCoCo Maven plugin. Note the element `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>`.  You must set it matching your choice for `quarkus.jacoco.data-file`."
msgstr "JaCoCo Maven プラグインを使用して、コードカバレッジの閾値を設定することができます。注意点としては、 `<dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>` があり、 `quarkus.jacoco.data-file` の設定と一致するように設定が必要です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:394
#, no-wrap
msgid ""
"                <execution>\n"
"                    <id>jacoco-check</id>\n"
"                    <goals>\n"
"                        <goal>check</goal>\n"
"                    </goals>\n"
"                    <phase>post-integration-test</phase>\n"
"                    <configuration>\n"
"                        <dataFile>${project.build.directory}/jacoco-quarkus.exec</dataFile>\n"
"                        <rules>\n"
"                            <rule>\n"
"                                <element>BUNDLE</element>\n"
"                                <limits>\n"
"                                    <limit>\n"
"                                        <counter>LINE</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.8</minimum>\n"
"                                    </limit>\n"
"                                    <limit>\n"
"                                        <counter>BRANCH</counter>\n"
"                                        <value>COVEREDRATIO</value>\n"
"                                        <minimum>0.72</minimum>\n"
"                                    </limit>\n"
"                                </limits>\n"
"                            </rule>\n"
"                        </rules>\n"
"                    </configuration>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"        ...\n"
"    </plugins>\n"
"    ...\n"
"</build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:421
#, no-wrap
msgid ""
"jacocoTestCoverageVerification {\n"
"    executionData.setFrom(\"$project.buildDir/jacoco-quarkus.exec\")\n"
"    violationRules {\n"
"        rule {\n"
"            limit {\n"
"                counter = 'INSTRUCTION'\n"
"                value = 'COVEREDRATIO'\n"
"                minimum = 0.80\n"
"            }\n"
"            limit {\n"
"                counter = 'BRANCH'\n"
"                value = 'COVEREDRATIO'\n"
"                minimum = 0.72\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"check.dependsOn jacocoTestCoverageVerification\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:424
msgid "Excluding classes from the verification task can be configured as following:"
msgstr "検証タスクからクラスを除外するには、以下のように設定します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:436
#, no-wrap
msgid ""
"jacocoTestCoverageVerification {\n"
"    afterEvaluate { <1>\n"
"        classDirectories.setFrom(files(classDirectories.files.collect { <2>\n"
"            fileTree(dir: it, exclude: [\n"
"                    \"org/example/package/**/*\" <3>\n"
"            ])\n"
"        }))\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:438
msgid "`classDirectories` needs to be read after evaluation phase in Gradle"
msgstr "Gradle では、評価フェーズの後に `classDirectories` を読み込む必要があります"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:439
msgid "Currently, there is a bug in Gradle JaCoCo which requires the `excludes` to be specified in this manner - https://github.com/gradle/gradle/issues/14760.  Once this issue is fixed, excludes"
msgstr "現在、GradleのJaCoCoには、 `excludes` をこのように指定する必要があります。 - https://github.com/gradle/gradle/issues/14760  の問題が修正されると、除外されます"

#. type: Plain text
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:440
msgid "Exclude all classes in `org/example/package` package"
msgstr "`org/example/package` パッケージに含まれるすべてのクラスを除外します"

#. type: Title ==
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:442
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: delimited block *
#: upstream/_versions/3.0/guides/tests-with-coverage.adoc:445
msgid "You now have all the information you need to study the coverage of your tests! But remember, some code that is not covered is certainly not well tested. But some code that is covered is not necessarily *well* tested. Make sure to write good tests!"
msgstr "これで、テストのカバレッジを調べるのに必要な情報はすべて揃いました! しかし、カバーされていないコードは、十分にテストされていないものがあることを忘れないでください。 カバーされているコードが必ずしも *十分に* テストされていないものもあります。良いテストを書くようにしましょう!"
