msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:6
#, no-wrap
msgid "Amazon Lambda with RESTEasy Reactive, Undertow, or Reactive Routes"
msgstr "RESTEasy Reactive、Undertow、または Reactive Routes を使用した Amazon Lambda"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:16
msgid "With Quarkus you can deploy your favorite Java HTTP frameworks as Amazon Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API] or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy Reactive (JAX-RS), Undertow (servlet), Reactive Routes, xref:funqy-http.adoc[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr "Quarkusでは、link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API] または link:https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST] API のいずれかを使用して、お気に入りの Java HTTP フレームワークを Amazon Lambdaとしてデプロイできます。つまり、RESTEasy (JAX-RS)、Undertow (サーブレット)、Reactive Route、xref:funqy-http.adoc[Funqy HTTP]、その他の Quarkus の HTTP フレームワークで書かれたマイクロサービスを、AWS Lambda としてデプロイすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:19
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr "Lambda を純粋な Java jar としてデプロイすることもできますし、プロジェクトをネイティブイメージにコンパイルしてデプロイすることで、より少ないメモリーフットプリントと起動時間を実現することもできます。また、統合により、 https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[AmazonのSAM framework] で使用できるSAMデプロイメントファイルも生成されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:23
msgid "Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.  The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use, Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr "Quarkusでは、ゲートウェイAPIごとに異なるエクステンションを用意しています。HTTP Gateway APIは、 `quarkus-amazon-lambda-http` のエクステンションで実装されています。REST Gateway APIは、 `quarkus-amazon-lambda-rest` のエクステンションで実装されています。どのGateway製品を使用すべきか迷っている場合は、Amazonが決断を助ける為に link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[素晴らしいガイド]を提供しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:25
msgid "Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding."
msgstr "Quarkus AWS Lambda HTTP/REST エクステンションは、大概の Quarkus エクステンションと同様、ライブコーディングをサポートしています。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:28
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:33
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "https://aws.amazon.com[An Amazon AWS account]"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:34
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:35
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:39
msgid "This guide walks you through generating an example Java project via a Maven archetype.  Later on, it walks through the structure of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr "このガイドでは、Maven のアーキタイプを利用して Java プロジェクトのサンプルを生成する方法を説明します。その後、既存のプロジェクトを Amazon Lambda で利用できるようにするために、プロジェクトの構造を説明します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:40
#, no-wrap
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:44
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:45
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:48
msgid "Create the Quarkus AWS Lambda Maven project using our Maven Archetype."
msgstr "Maven Archetype を使用して Quarkus AWS Lambda Maven プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:50
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "AWS Gateway HTTP APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:56
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:59
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "AWS Gateway REST APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:65
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-rest-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:68
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:71
msgid "Build the project:"
msgstr "プロジェクトのビルド"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:77
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev mode is also available with this extension."
msgstr "これでコードがコンパイルされ、生成されたプロジェクト内に含まれるユニットテストが実行されます。ユニットテストは他のJavaプロジェクトと同じで、Amazonで実行する必要はありません。Quarkus dev モードもこのエクステンションで利用できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:80
msgid "If you want to build a native executable, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr "ネイティブ実行可能ファイルをビルドする場合は、GraalVM が正しくインストールされていることを確認し、ビルドに `native` プロパティーを追加してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:86
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a Docker build as Amazon Lambda requires Linux binaries.  You can do this by passing `-Dquarkus.native.container-build=true` to your build command.  This requires you to have Docker installed locally, however."
msgstr "Linux 以外のシステムでビルドしている場合は、Amazon Lambda が Linux バイナリーを必要とするため、Docker ビルドを使用するように Quarkus に指示するプロパティーも渡す必要があります。これを行うには、ビルドコマンドに `-Dquarkus.native.container-build=true` を渡します。ただし、これには Docker をローカルにインストールする必要があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:89
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:93
msgid "After you run the build, there are a few extra files generated by the Quarkus lambda extension you are using.  These files are in the build directory: `target/` for Maven, `build/` for Gradle."
msgstr "ビルドを実行すると、Quarkus lambda エクステンションで生成されるいくつかの追加ファイルがあります。これらのファイルはビルドディレクトリーにあります: Maven なら `target/`、Gradle なら `build/` です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:95
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:96
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - SAM CLI デプロイメントスクリプト"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:97
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - ネイティブ用の SAM CLI デプロイメントスクリプト"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:98
#, no-wrap
msgid "Live Coding and Simulating AWS Lambda Environment Locally"
msgstr "AWS Lambda 環境のローカルでのライブコーディングとシミュレーション"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:104
msgid "In dev and test mode, Quarkus will start a mock AWS Lambda event server that will convert HTTP requests to the corresponding API Gateway event types and post them to the underlying Quarkus HTTP lambda environment for processing.  This simulates the AWS Lambda environment as much as possible locally without requiring tools like Docker and SAM CLI."
msgstr "開発モードおよびテストモードでは、Quarkus は模擬 AWS Lambda イベントサーバーを起動し、対応する API Gateway イベントタイプに HTTP リクエストを変換し、処理のために基盤となる Quarkus HTTP Lambda 環境に送信します。これにより、Docker や SAM CLI などのツールを必要とせずに、AWS Lambda 環境を可能な限りローカルでシミュレートします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:108
msgid "When using Quarkus Dev Mode just invoke HTTP requests on `http://localhost:8080` as you normally would when testing your REST endpoints.  This request will hit the Mock Event Server and will be converted to the API Gateway json message that is consumed by the Quarkus Lambda Poll loop."
msgstr "Quarkus Dev Mode を使用する場合は、REST エンドポイントをテストする場合と同じように、`http://localhost:8080` で HTTP リクエストを呼び出すだけです。このリクエストは Mock Event Server にヒットし、Quarkus Lambda Poll ループによって消費される API Gateway json メッセージに変換されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:111
msgid "For testing, Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is automatically set to 8081 by Quarkus, so you don't have to worry about setting this up."
msgstr "テストのために、Quarkus はポート 8081 で別の Mock Event サーバーを起動します。Rest Assured のデフォルトポートは Quarkus によって自動的に 8081 に設定されるため、これを設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:116
msgid "If you want to simulate more complex API Gateway events in your tests, then manually do an HTTP POST to `http://localhost:8080/\\_lambda_` (port 8081 in test mode) with the raw API Gateway json events.  These events will be placed directly on the Quarkus Lambda poll loop for processing.  Here's an example of that:"
msgstr "テストでより複雑な API Gateway イベントをシミュレートする場合は、生の API Gateway json イベントを使用して `http://localhost:8080/\\_lambda_` (テストモードではポート 8081) に対して手動で HTTP POST を実行します。これらのイベントは、処理のために Quarkus Lambda ポーリングループに直接配置されます。その例を次に示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:121
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:123
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:469
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:510
#, no-wrap
msgid "import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:125
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:135
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class AmazonLambdaSimpleTestCase {\n"
"    @Test\n"
"    public void testJaxrsCognitoJWTSecurityContext() throws Exception {\n"
"        APIGatewayV2HTTPEvent request = request(\"/security/username\");\n"
"        request.getRequestContext().setAuthorizer(new APIGatewayV2HTTPEvent.RequestContext.Authorizer());\n"
"        request.getRequestContext().getAuthorizer().setJwt(new APIGatewayV2HTTPEvent.RequestContext.Authorizer.JWT());\n"
"        request.getRequestContext().getAuthorizer().getJwt().setClaims(new HashMap<>());\n"
"        request.getRequestContext().getAuthorizer().getJwt().getClaims().put(\"cognito:username\", \"Bill\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:146
#, no-wrap
msgid ""
"        given()\n"
"                .contentType(\"application/json\")\n"
"                .accept(\"application/json\")\n"
"                .body(request)\n"
"                .when()\n"
"                .post(\"/_lambda_\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(\"body\", equalTo(\"Bill\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:149
msgid "The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda."
msgstr "上記の例は、HTTP リクエストを含む Cognito プリンシパルを HTTP Lambda に送信することをシミュレートしています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:154
msgid "If you want to hand code raw events for the AWS HTTP API, the AWS Lambda library has the request event type which is `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` and the response event type of `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`.  This corresponds to the `quarkus-amazon-lambda-http` extension and the AWS HTTP API."
msgstr "AWS HTTP API の生のイベントをハンドコードする場合、AWS Lambda ライブラリーのリクエストイベントタイプは `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` で、レスポンスイベントタイプは `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse` です。これは、`quarkus-amazon-lambda-http` エクステンションおよび AWS HTTP API に対応します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:158
msgid "If you want to hand code raw events for the AWS REST API, Quarkus has its own implementation: `io.quarkus.amazon.lambda.http.model.AwsProxyRequest` and `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`.  This corresponds to `quarkus-amazon-lambda-rest` extension and the AWS REST API."
msgstr "AWS REST API の生のイベントをハンドコードする場合、Quarkus には独自の実装 (`io.quarkus.amazon.lambda.http.model.AwsProxyRequest` および `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`) があります。これは、`quarkus-amazon-lambda-rest` エクステンションおよび AWS REST API に対応します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:161
msgid "The mock event server is also started for `@NativeImageTest` and `@QuarkusIntegrationTest` tests so will work with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr "模擬イベントサーバーは、`@NativeImageTest` および `@QuarkusIntegrationTest` テストでも起動されるため、ネイティブバイナリーでも機能します。これはすべて、Docker のオーバーヘッドなしで、SAM CLI ローカルテストと同様の機能を提供します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:164
msgid "Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev and test mode ports with application.properties"
msgstr "最後に、ポート 8080 またはポート 8081 がコンピューターで使用できない場合は、application.properties を使用して開発モードとテストモードのポートを変更できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:169
#, no-wrap
msgid ""
"quarkus.lambda.mock-event-server.dev-port=8082\n"
"quarkus.lambda.mock-event-server.test-port=8083\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:172
msgid "A port value of zero will result in a randomly assigned port."
msgstr "ポート値がゼロの場合、ポートはランダムに割り当てられます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:173
#, no-wrap
msgid "Simulate Amazon Lambda Deployment with SAM CLI"
msgstr "SAM CLI を使用して Amazon Lambda のデプロイをシミュレートする"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:177
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires Docker to be installed.  After you have built your Maven project, execute this command:"
msgstr "AWS SAM CLI を使用すると、ラップトップ上で Lambda をシミュレートした環境でローカルに実行することができます。このためには Docker をインストールする必要があります。Maven プロジェクトをビルドした後、以下のコマンドを実行してください"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:181
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:185
msgid "This will start a Docker container that mimics Amazon's Lambda's deployment environment. Once the environment is started you can invoke the example lambda in your browser by going to:"
msgstr "これで Amazon の Lambda のデプロイ環境を模した Docker コンテナーが起動します。環境が起動したら、ブラウザで以下を開くとサンプルの Lambda を実行できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:187
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:190
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr "コンソールには、ラムダからの起動メッセージが表示されます。この特定のデプロイメントでは、JVM を起動し、純粋な Java として Lambda をロードします。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:192
#, no-wrap
msgid "Deploy to AWS"
msgstr "AWS にデプロイする"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:197
#, no-wrap
msgid "sam deploy -t target/sam.jvm.yaml -g\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:201
msgid "Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr "すべての質問に答えると、 Lambda がデプロイされ、API Gatewayへの必要なフックが設定されます。すべてが正常にデプロイされると、マイクロサービスのルート URL がコンソールに出力されます。このような感じです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:206
#, no-wrap
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:209
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性は Lambda のルート URL です。これをブラウザにコピーして、最後に `hello` を追加します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:215
msgid "Responses for binary types will be automatically encoded with base64.  This is different from the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr "バイナリー型のレスポンスは自動的にbase64でエンコードされます。これは、生のバイトを返す `quarkus:dev` を使用した動作とは異なります。Amazon の API には、base64 エンコーディングを必要とする追加の制限があります。一般的に、クライアントコードは自動的にこのエンコーディングを処理しますが、特定のカスタムな状況では、手動でエンコーディングを管理する必要があるかもしれないことを認識しておく必要があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:216
#, no-wrap
msgid "Deploying a native executable"
msgstr "ネイティブ実行可能ファイルのデプロイ"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:219
msgid "To deploy a native executable, you must build it with GraalVM."
msgstr "ネイティブ実行可能ファイルをデプロイするには、GraalVM を使用してビルドする必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:223
msgid "You can then test the executable locally with sam local"
msgstr "その後、ローカルで sam local を使って実行可能ファイルをテストすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:227
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:230
msgid "To deploy to AWS Lambda:"
msgstr "AWS Lambda へのデプロイ"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:233
#, no-wrap
msgid "sam deploy -t target/sam.native.yaml -g\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:235
#, no-wrap
msgid "Examine the POM"
msgstr "POM を検証する"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:240
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension (if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploying an AWS Gateway REST API).  These extensions automatically generate everything you might need for your lambda deployment."
msgstr "POM には `quarkus-amazon-lambda-http` エクステンション(AWS Gateway HTTP APIでデプロイしている場合) か `quarkus-amazon-lambda-rest` エクステンション( AWS Gateway REST APIでデプロイしている場合)が依存関係として含まれている以外に特別なことは何もありません。これらのエクステンションは Lambda のデプロイに必要なものをすべて自動的に生成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:244
msgid "Also, at least in the generated Maven archetype `pom.xml`, the `quarkus-resteasy-reactive`, `quarkus-reactive-routes`, and `quarkus-undertow` dependencies are all optional.  Pick which HTTP framework(s) you want to use (JAX-RS, Reactive Routes, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr "また、少なくとも生成された Maven アーキタイプ `pom.xml` では、`quarkus-resteasy-reactive`、`quarkus-reactive-routes`、および `quarkus-undertow` の依存関係はすべて任意です。使用する HTTP フレームワーク (JAX-RS、Reactive Routes、Servlet) を選択し、他の依存関係を削除してデプロイメントを縮小します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:245
#, no-wrap
msgid "Examine sam.yaml"
msgstr "sam.yaml を調べる"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:249
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are going to craft your own custom `sam.yaml` deployment files."
msgstr "`sam.yaml` の構文はこのドキュメントの範囲を超えています。しかし、カスタムの `sam.yaml` デプロイメントファイルを作成しようとしている場合、幾つかの強調しなければならないことがあります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:252
msgid "The first thing to note is that for pure Java lambda deployments require a specific handler class.  Do not change the Lambda handler name."
msgstr "最初に注意することは、純粋なJavaラムダデプロイメントには特定のハンドラークラスが必要であるということです。 Lambdaハンドラー名は変更しないでください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:258
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:261
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (JAX-RS, Servlet, etc.)"
msgstr "このハンドラは、ラムダランタイムと、使用しているQuarkus HTTPフレームワーク（JAX-RS、Servletなど）との間のブリッジとなります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:264
msgid "If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr "ネイティブを利用する場合は、ネイティブのGraalVMデプロイメント用に設定する必要のある環境変数があります。 `sam.native.yaml` を見ると、次のことがわかります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:270
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:273
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr "この環境変数は、QuarkusとAmazon Lambdaカスタムランタイム環境との間のいくつかの非互換性を解決します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:278
msgid "Finally, there is one specific thing for AWS Gateway REST API deployments.  That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr "最後に、AWS Gateway RESTAPIへのデプロイに固有のことが一つあります。そのAPIは、設定でどのメディアタイプがバイナリーであるかを明示的に指定しない限り、HTTPレスポンスボディはテキストであることを想定しています。より簡単にするために、QuarkusエクステンションはすべてのHTTP応答メッセージのバイナリー(ベース64)エンコーディングを強制します。 `sam.yaml` ファイルでは、すべてのメディアタイプがバイナリーであると仮定するようにAPI Gatewayを設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:286
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:288
#, no-wrap
msgid "Injectable AWS Context Variables"
msgstr "注入可能なAWSコンテキスト変数"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:292
msgid "If you are using RESTEasy Reactive and JAX-RS, you can inject various AWS Context variables into your JAX-RS resource classes using the JAX-RS `@Context` annotation or anywhere else with the CDI `@Inject` annotation."
msgstr "RESTEasy Reactive と JAX-RS を使用している場合は、JAX-RS `@Context` アノテーションを使用するか、CDI `@Inject` アノテーションを使用して、さまざまな AWS Context 変数を JAX-RS リソースクラスに挿入できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:295
msgid "For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr "AWS HTTP APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` および `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` を注入することができます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:300
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Context;\n"
"import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:306
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:331
#, no-wrap
msgid ""
"@Path(\"/myresource\")\n"
"public class MyResource {\n"
"    @GET\n"
"    public String ctx(@Context com.amazonaws.services.lambda.runtime.Context ctx) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:309
#, no-wrap
msgid ""
"    @GET\n"
"    public String event(@Context APIGatewayV2HTTPEvent event) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:312
#, no-wrap
msgid ""
"    @GET\n"
"    public String requestContext(@Context APIGatewayV2HTTPEvent.RequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:315
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:339
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:319
msgid "For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr "AWS REST APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` と `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext` を注入することができます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:325
#, no-wrap
msgid ""
"import jakarta.ws.rs.core.Context;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:334
#, no-wrap
msgid ""
"    @GET\n"
"    public String reqContext(@Context AwsProxyRequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:337
#, no-wrap
msgid ""
"    @GET\n"
"    public String req(@Context AwsProxyRequest req) { }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:341
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay と GraalVM を使用したトレース"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:346
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:347
#, no-wrap
msgid "Security Integration"
msgstr "セキュリティー統合"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:352
msgid "When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP request that can be consumed by any HTTP framework Quarkus supports (JAX-RS, servlet, Reactive Routes)."
msgstr "API Gateway で HTTP リクエストを呼び出すと、ゲートウェイはその HTTP リクエストを JSON イベントドキュメントに変換し、Quarkus Lambda に転送します。Quarkus Lambda はこの json を解析し、Quarkus がサポートする任意の HTTP フレームワーク (JAX-RS、サーブレット、Reactive Routes) で使用できる HTTP リクエストの内部表現に変換します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:361
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr "このセキュリティー機能を有効にするには、これを `application.properties` ファイルに追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:363
#, no-wrap
msgid "quarkus.lambda-http.enable-security=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:367
msgid "Here's how its mapped:"
msgstr "マッピング方法は次のとおりです。"

#. type: Block title
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:368
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:420
#, no-wrap
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr "HTTP `quarkus-amazon-lambda-http`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:371
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "Auth Type"
msgstr "認証タイプ"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:371
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "Principal Class"
msgstr "プリンシパルクラス"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:372
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "Json path of Principal Name"
msgstr "プリンシパル名の Json パス"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:372
#, no-wrap
msgid "Cognito JWT"
msgstr "Cognito JWT"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:372
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:373
#, no-wrap
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr "`requestContext.authorizer.jwt.claims.cognito:username`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:373
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "IAM"
msgstr "IAM"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:373
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.IAMPrincipal`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:374
#, no-wrap
msgid "`requestContext.authorizer.iam.userId`"
msgstr "`requestContext.authorizer.iam.userId`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:374
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:384
#, no-wrap
msgid "Custom Lambda"
msgstr "カスタム Lambda"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:374
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:384
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CustomPrincipal`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:376
#, no-wrap
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr "`requestContext.authorizer.lambda.principalId`"

#. type: Block title
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:378
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:461
#, no-wrap
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr "REST `quarkus-amazon-lambda-rest`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:382
#, no-wrap
msgid "Cognito"
msgstr "Cognito"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:383
#, no-wrap
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr "`requestContext.authorizer.claims.cognito:username`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:384
#, no-wrap
msgid "`requestContext.identity.user`"
msgstr "`requestContext.identity.user`"

#. type: Table
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:386
#, no-wrap
msgid "`requestContext.authorizer.principalId`"
msgstr "`requestContext.authorizer.principalId`"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:395
#, no-wrap
msgid "quarkus.lambda-http.map-cognito-to-roles=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:401
#, no-wrap
msgid "quarkus.lambda-http.cognito-role-claim=cognito:roles\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:408
#, no-wrap
msgid "quarkus.lambda-http.cognito-claim-matcher=[^\\[\\] \\t]+\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:411
#, no-wrap
msgid "Custom Security Integration"
msgstr "カスタムセキュリティーの統合"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:419
msgid "The default support for AWS security only maps the principal name to Quarkus security APIs and does nothing to map claims or roles or permissions.  You have full control on how security metadata in the lambda HTTP event is mapped to Quarkus security APIs using implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider` interface.  By implementing this interface, you can do things like define role mappings for your principal or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr "AWS セキュリティーのデフォルトのサポートは、プリンシパル名を Quarkus セキュリティー API にマップするだけで、クレーム、ロール、またはパーミッションをマップすることはありません。`io.quarkus.amazon.lambda.http.LambdaIdentityProvider` インターフェイスの実装を使用して、Lambda HTTP イベントのセキュリティーメタデータを Quarkus セキュリティー API にマッピングする方法を完全に制御できます。このインターフェイスを実装することにより、プリンシパルのロールマッピングを定義したり、IAM または Cognito、もしくはカスタム Lambda セキュリティー統合によって提供される追加の属性を公開したりすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:424
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:465
#, no-wrap
msgid "package io.quarkus.amazon.lambda.http;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:434
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"    @Override\n"
"    default public Class<LambdaAuthenticationRequest> getRequestType() {\n"
"        return LambdaAuthenticationRequest.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:444
#, no-wrap
msgid ""
"    @Override\n"
"    default Uni<SecurityIdentity> authenticate(LambdaAuthenticationRequest request, AuthenticationRequestContext context) {\n"
"        APIGatewayV2HTTPEvent event = request.getEvent();\n"
"        SecurityIdentity identity = authenticate(event);\n"
"        if (identity == null) {\n"
"            return Uni.createFrom().optional(Optional.empty());\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:456
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:460
msgid "For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr "HTTP の場合、オーバーライドする重要なメソッドは `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)` です。ここで、`APIGatewayV2HTTPEvent` からセキュリティーデータをマッピングする方法に基づいて SecurityIdentity を割り当てます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:467
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:475
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.IdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:482
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:494
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:498
msgid "For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr "REST の場合、オーバーライドする重要なメソッドは `LambdaIdentityProvider.authenticate(AwsProxyRequest event)` です。ここで、`AwsProxyRequest` からセキュリティーデータをマップする方法に基づいて SecurityIdentity を割り当てます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:500
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr "実装するプロバイダーは CDI Bean である必要があります。次に例を示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:504
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:535
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:506
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:537
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:508
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:539
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:515
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:546
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.LambdaIdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.runtime.QuarkusPrincipal;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:528
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        if (event.getHeaders() == null || !event.getHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getHeaders().get(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:531
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr "次も同じ例ですが、AWS Gateway REST API を使用しています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:541
#, no-wrap
msgid "import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:559
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        if (event.getMultiValueHeaders() == null || !event.getMultiValueHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getMultiValueHeaders().getFirst(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:563
msgid "Quarkus should automatically discover this implementation and use it instead of the default implementation discussed earlier."
msgstr "Quarkus は、この実装を自動的に検出し、前述のデフォルトの実装の代わりに使用する必要があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:564
#, no-wrap
msgid "Simple SAM Local Principal"
msgstr "単純な SAM ローカルプリンシパル"

#. type: Plain text
#: upstream/_versions/3.0/guides/amazon-lambda-http.adoc:569
msgid "If you are testing your application with `sam local` you can hardcode a principal name to use when your application runs by setting the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr "`sam local` を使用してアプリケーションをテストしている場合は、`QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` 環境変数を設定することで、アプリケーションの実行時に使用するプリンシパル名をハードコーディングできます。"
