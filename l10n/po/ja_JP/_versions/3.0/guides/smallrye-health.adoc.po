msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/smallrye-health.adoc:6
#, no-wrap
msgid "SmallRye Health"
msgstr "SmallRye Health"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:13
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-health/[SmallRye Health] an implementation of the https://github.com/eclipse/microprofile-health/[MicroProfile Health] specification."
msgstr "このガイドでは、 link:https://github.com/eclipse/microprofile-health/[MicroProfile Health]仕様の実装である link:https://github.com/smallrye/smallrye-health/[SmallRye Health]をQuarkusアプリケーションで使用する方法を説明します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:18
msgid "SmallRye Health allows applications to provide information about their state to external viewers which is typically useful in cloud environments where automated processes must be able to determine whether the application should be discarded or restarted."
msgstr "SmallRye Healthは、アプリケーションの状態に関する情報を外部の閲覧者に提供することができます。これは、自動処理によってアプリケーションを破棄または再起動すべきかどうかを判断できなければならないクラウド環境において、一般的に有用です。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:28
msgid "In this guide, we build a simple REST application that exposes MicroProfile Health functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the specification."
msgstr "このガイドでは、仕様書に従って `/q/health/live` と `/q/health/ready` のエンドポイントで MicroProfile Health の機能を公開するシンプルな REST アプリケーションを構築します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:29
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example."
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:39
msgid "The solution is located in the `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr "このソリューションは、 `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:40
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:43
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:49
msgid "This command generates a project, importing the `smallrye-health` extension."
msgstr "このコマンドは、 `smallrye-health` エクステンションをインポートしたプロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `smallrye-health` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `smallrye-health` エクステンションをプロジェクトに追加することができます:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:57
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-health.adoc:59
#: upstream/_versions/3.0/guides/smallrye-health.adoc:432
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:65
#: upstream/_versions/3.0/guides/smallrye-health.adoc:438
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-health.adoc:68
#: upstream/_versions/3.0/guides/smallrye-health.adoc:441
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:71
#: upstream/_versions/3.0/guides/smallrye-health.adoc:444
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-health\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:73
#, no-wrap
msgid "Running the health check"
msgstr "ヘルスチェックの実行"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:76
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr "`smallrye-health` エクステンションを直接インポートすると、3つのRESTエンドポイントが公開されます:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:78
msgid "`/q/health/live` - The application is up and running."
msgstr "`/q/health/live` - アプリケーションが稼働していること"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:79
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr "`/q/health/ready` - アプリケーションは、リクエストに対応する準備ができていること"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:80
msgid "`/q/health/started` - The application is started."
msgstr "`/q/health/started` - アプリケーションが開始されていること"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:81
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr "`/q/health` - アプリケーションのすべてのヘルスチェック手順の累積"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:83
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr "`smallrye-health` エクステンションが期待通りに動作しているかのチェックをします:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:87
msgid "start your Quarkus application with:"
msgstr "Quarkusアプリケーションを次のように起動します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:91
msgid "access the `http://localhost:8080/q/health/live` endpoint using your browser or `curl http://localhost:8080/q/health/live`"
msgstr "`http://localhost:8080/q/health/live` エンドポイントにブラウザか、 `curl http://localhost:8080/q/health/live` でアクセス"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:95
msgid "All `health` REST endpoints return a simple JSON object with two fields:"
msgstr "すべての `health` RESTエンドポイントは、2つのフィールドを持つシンプルなJSONオブジェクトを返します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:97
msgid "`status` -- the overall result of all the health check procedures"
msgstr "`status` -- the overall result of all the health check procedures"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:98
msgid "`checks` -- an array of individual checks"
msgstr "`checks` -- an array of individual checks"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:102
msgid "The general `status` of the health check is computed as a logical AND of all the declared health check procedures. The `checks` array is empty as we have not specified any health check procedure yet so let's define some."
msgstr "ヘルスチェックの一般的な `status` は、宣言されたすべてのヘルスチェックの論理的な AND として計算されます。 `checks` 配列は、まだヘルスチェックの手順を指定していないので空ですが、いくつか定義してみましょう。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:103
#, no-wrap
msgid "Creating your first health check"
msgstr "初めてのヘルスチェックの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:106
msgid "In this section, we create our first simple health check procedure."
msgstr "このセクションでは、最初の簡単なヘルスチェック手順を作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:108
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr "`org.acme.microprofile.health.SimpleHealthCheck` クラスを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:112
#: upstream/_versions/3.0/guides/smallrye-health.adoc:166
#: upstream/_versions/3.0/guides/smallrye-health.adoc:211
#: upstream/_versions/3.0/guides/smallrye-health.adoc:243
#: upstream/_versions/3.0/guides/smallrye-health.adoc:314
#, no-wrap
msgid "package org.acme.microprofile.health;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:116
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Liveness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:118
#: upstream/_versions/3.0/guides/smallrye-health.adoc:172
#: upstream/_versions/3.0/guides/smallrye-health.adoc:217
#: upstream/_versions/3.0/guides/smallrye-health.adoc:251
#: upstream/_versions/3.0/guides/smallrye-health.adoc:320
#: upstream/_versions/3.0/guides/smallrye-health.adoc:378
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:122
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped <1> <2>\n"
"public class SimpleHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:128
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Simple health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:130
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr "すべてのヘルスチェックのリクエストに単一のBeanインスタンスが使用されるように、ヘルスチェッククラスに `@ApplicationScoped` または `@Singleton` のスコープでアノテーションを付けることをお勧めします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:131
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr "アノテーションされたBeanクラスがスコープを宣言していない場合、 `@Singleton` のスコープが自動的に使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:133
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr "ご覧のように、ヘルスチェックは、 `HealthCheck` インターフェースを実装するCDI Beanとして定義され、次のようなヘルスチェックの修飾子の1つでアノテーションされています:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:135
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr "`@Liveness` - `/q/health/live` でアクセス可能なLivenessチェック"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:136
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr "`@Readiness` - `/q/health/ready` でアクセス可能なReadinessチェック"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:140
msgid "`HealthCheck` is a functional interface whose single method `call` returns a `HealthCheckResponse` object which can be easily constructed by the fluent builder API shown in the example."
msgstr "`HealthCheck` は関数のインターフェースで、その単一のメソッド `call` は `HealthCheckResponse` オブジェクトを返します。このオブジェクトは、サンプルで示した fluent builder API で簡単に構築することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:146
msgid "As we have started our Quarkus application in dev mode simply repeat the request to `http://localhost:8080/q/health/live` by refreshing your browser window or by using `curl http://localhost:8080/q/health/live`. Because we defined our health check to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure is now present in the `checks` array."
msgstr "QuarkusアプリケーションをDevモードで起動しているので、 `http://localhost:8080/q/health/live` へのリクエストを ブラウザウィンドウを更新するか `curl http://localhost:8080/q/health/live` で単に繰り返してください。ヘルスチェックをlivenessプロシージャ（ `@Liveness` 修飾子付き）と定義したため、新しいヘルスチェックプロシージャが `checks` 配列に存在するようになりました。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:149
msgid "Congratulations! You've created your first Quarkus health check procedure. Let's continue by exploring what else can be done with SmallRye Health."
msgstr "おめでとうございます！初めてのQuarkus Health Checkプロシージャを作成しました。続けて、SmallRye Healthで他にどのようなことができるかを調べてみましょう。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:150
#, no-wrap
msgid "Adding a readiness health check procedure"
msgstr "readiness ヘルスチェックプロシージャの追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:156
msgid "In the previous section, we created a simple liveness health check procedure which states whether our application is running or not. In this section, we will create a readiness health check which will be able to state whether our application is able to process requests."
msgstr "前のセクションでは、アプリケーションが実行されているかどうかを示す単純な liveness ヘルスチェックプロシージャを作成しました。このセクションでは、アプリケーションがリクエストを処理することができるかどうかを示すことができるReadinessヘルスチェックを作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:160
msgid "We will create another health check procedure that simulates a connection to an external service provider such as a database. For starters, we will always return the response indicating the application is ready."
msgstr "ここでは、データベースなどの外部サービスプロバイダへの接続をシミュレートする別のヘルスチェックプロシージャを作成します。まずは、アプリケーションの準備ができていることを示すレスポンスを常に返すようにします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:162
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:170
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:176
#: upstream/_versions/3.0/guides/smallrye-health.adoc:255
#, no-wrap
msgid ""
"@Readiness\n"
"@ApplicationScoped\n"
"public class DatabaseConnectionHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:182
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Database connection health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:192
msgid "If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks` array will contain only the previously defined `SimpleHealthCheck` as it is the only check defined with the `@Liveness` qualifier. However, if you access `http://localhost:8080/q/health/ready` (in the browser or with `curl http://localhost:8080/q/health/ready`) you will see only the `Database connection health check` as it is the only health check defined with the `@Readiness` qualifier as the readiness health check procedure."
msgstr "`http://localhost:8080/q/health/live` でヘルスチェックを再実行すると、`checks` 配列には以前定義した `SimpleHealthCheck` のみが含まれます。これは `@Liveness` 修飾子をで定義された唯一のチェックであるためです。しかし、ブラウザまたは `curl http://localhost:8080/q/health/ready` で `http://localhost:8080/q/health/ready` にアクセスすると、`Database connection health check` しか表示されません。これは、Readiness ヘルスチェックプロシージャとして `@Readiness` 修飾子を持つ唯一のヘルスチェックとして定義されたものだからです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:194
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr "`http://localhost:8080/q/health` にアクセスすると、両方のチェックが戻ってきます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:199
msgid "More information about which health check procedures should be used in which situation is detailed in the MicroProfile Health specification. Generally, the liveness procedures determine whether the application should be restarted while readiness procedures determine whether it makes sense to contact the application with requests."
msgstr "どのような状況でどのヘルスチェックプロシージャを使用すべきかについての詳細は、MicroProfile Health 仕様に記載されています。一般的には、livenessプロシージャはアプリケーションを再起動すべきかどうかを判断し、readinessプロシージャはアプリケーションにリクエストを出すことが意味のあることかどうかを判断します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:200
#, no-wrap
msgid "Adding a startup health check procedure"
msgstr "スタートアップヘルスチェックプロシージャの追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:203
msgid "The third and final type of health check procedures is startup. Startup procedures are defined as an option for slow starting containers (should not be needed in Quarkus) to delay the invocations of liveness probe which will take over from startup once the startup responds UP for the first time. Startup health checks are defined with the `@Startup` qualifier."
msgstr "ヘルスチェックプロシージャの最後の3つ目のタイプはスタートアップです。スタートアッププロシージャは、起動が遅いコンテナ（Quarkusでは必要ないはず）のオプションとして定義されており、起動が初めてUPに応答すると起動から引き継がれるliveness probeの呼び出しを遅らせることができます。スタートアップのヘルスチェックは、 `@Startup` で定義されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:205
msgid "Please make sure that you import the microprofile `org.eclipse.microprofile.health.Startup` annotation since there is an unfortunate clash with `io.quarkus.runtime.Startup`."
msgstr "`io.quarkus.runtime.Startup` と不幸にも衝突してしまうため、microprofile `org.eclipse.microprofile.health.Startup` のアノテーションを必ずインポートしてください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:207
msgid "Create `org.acme.microprofile.health.StartupHealthCheck` class:"
msgstr "`org.acme.microprofile.health.SimpleHealthCheck` クラスを作成:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:215
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Startup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:221
#, no-wrap
msgid ""
"@Startup\n"
"@ApplicationScoped\n"
"public class StartupHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:227
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Startup health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:230
msgid "The startup health check will be available either at `http://localhost:8080/q/health/started` or together with other health check procedure at `http://localhost:8080/q/health`."
msgstr "`http://localhost:8080/q/health/live` エンドポイントにブラウザか、 `curl http://localhost:8080/q/health/live` でアクセスします:"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:231
#, no-wrap
msgid "Negative health check procedures"
msgstr "ネガティブヘルスチェックプロシージャ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:237
msgid "In this section, we extend our `Database connection health check` with the option of stating that our application is not ready to process requests as the underlying database connection cannot be established. For simplicity reasons, we only determine whether the database is accessible or not by a configuration property."
msgstr "このセクションでは、 `Database connection health check` を拡張して、基礎となるデータベース接続が確立できないために、アプリケーションがリクエストを処理する準備ができていないことを示すオプションを追加します。簡略化のため、データベースにアクセスできるかどうかの判断は、設定プロパティでのみ行います。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:239
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを以下のようにアップデートします:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:249
#, no-wrap
msgid ""
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:258
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"database.up\", defaultValue = \"false\")\n"
"    private boolean databaseUp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:261
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:263
#, no-wrap
msgid "        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named(\"Database connection health check\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:271
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:274
#, no-wrap
msgid ""
"        return responseBuilder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:281
#, no-wrap
msgid ""
"    private void simulateDatabaseConnectionVerification() {\n"
"        if (!databaseUp) {\n"
"            throw new IllegalStateException(\"Cannot contact database\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:288
msgid "Until now, we used a simplified method of building a `HealthCheckResponse` through the `HealthCheckResponse#up(String)` (there is also `HealthCheckResponse#down(String)`) which will directly build the response object.  From now on, we utilize the full builder capabilities provided by the `HealthCheckResponseBuilder` class."
msgstr "これまでは、レスポンスオブジェクトを直接構築する `HealthCheckResponse#up(String)` （ `HealthCheckResponse#down(String)` もあります）を通して `HealthCheckResponse` を構築するという単純な方法を使っていました。今後は、 `HealthCheckResponseBuilder` クラスが提供するビルダー機能をフルに活用します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:293
msgid "If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)  the overall `status` should be DOWN. You can also check the liveness check at `http://localhost:8080/q/health/live` which will return the overall `status` UP because it isn't influenced by the readiness checks."
msgstr "再度、Readinessヘルスチェック ( `http://localhost:8080/q/health/ready` ) を再実行すると、全ての `status` がDOWNするはずです。また、 `http://localhost:8080/q/health/live` でlivenessチェックを行うこともできます。この場合、全体の `status` はUPします。これは、Readinessチェックの影響を受けないためです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:297
msgid "As we shouldn't leave this application with a readiness check in a DOWN state and because we are running Quarkus in dev mode you can add `database.up=true` in `src/main/resources/application.properties` and rerun the readiness health check again"
msgstr "QuarkusをDevモードで実行しているため、このアプリケーションのReadinessヘルスチェックをDOWN状態のままにしてはならないので、 `src/main/resources/application.properties` に `database.up=true` を追加してReadinessヘルスチェックを再度実行してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:298
msgid "it should be up again."
msgstr "再びUPになるはずです。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:300
#, no-wrap
msgid "Adding user-specific data to the health check response"
msgstr "ヘルスチェックのレスポンスにユーザー固有のデータを追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:308
msgid "In previous sections, we saw how to create simple health checks with only the minimal attributes, namely, the health check name and its status (UP or DOWN). However, the MicroProfile Health specification also provides a way for the applications to supply arbitrary data in the form of key-value pairs sent to the consuming end. This can be done by using the `withData(key, value)` method of the health check response builder API."
msgstr "前のセクションでは、最小限の属性、すなわちヘルスチェック名とそのステータス（UPまたはDOWN）のみを持つ単純なヘルスチェックを作成する方法を説明しました。しかし、MicroProfile Health仕様では、アプリケーションが任意のデータを、コンシューマーに送信されるキー・バリュー・ペアの形で供給する方法も提供しています。これは、ヘルスチェック response builder APIの `withData(key, value)` メソッドを使用することで可能です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:310
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr "新しいヘルスチェック・プロシージャ `org.acme.microprofile.health.DataHealthCheck` を作成してみましょう:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:318
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:324
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class DataHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:334
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"Health check with data\")\n"
"                .up()\n"
"                .withData(\"foo\", \"fooValue\")\n"
"                .withData(\"bar\", \"barValue\")\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:340
msgid "If you rerun the liveness health check procedure by accessing the `/q/health/live` endpoint you can see that the new health check `Health check with data` is present in the `checks` array. This check contains a new attribute called `data` which is a JSON object consisting of the properties we have defined in our health check procedure."
msgstr "`/q/health/live` エンドポイントにアクセスしてLivenessヘルスチェックプロシージャを再実行すると、新しいヘルスチェック `Health check with data` が `checks` 配列に存在していることがわかります。このチェックには、 `data` という新しい属性が含まれています。この属性は、ヘルスチェックプロシージャで定義したプロパティで構成されるJSONオブジェクトです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:343
msgid "This functionality is specifically useful in failure scenarios where you can pass the error along with the health check response."
msgstr "この機能は、ヘルスチェックのレスポンスと一緒にエラーを渡すことができるため、特に障害シナリオで有用です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:355
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down()\n"
"                    .withData(\"error\", e.getMessage()); // pass the exception message\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:357
#, no-wrap
msgid "Context propagation into the health check invocations"
msgstr "ヘルスチェック呼び出しへのコンテキストの伝搬"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:360
msgid "For performance reasons, the context (e.g., CDI or security context) is not propagated into each health check invocation. However, if you need to enable this functionality you can set the config property `quarkus.smallrye-health.context-propagation=true` to allow the context propagation into every health check call."
msgstr "パフォーマンス上の理由から、コンテキスト（例：CDIまたはセキュリティ・コンテキスト）は各ヘルスチェック呼び出しに伝搬されません。しかし、この機能を有効にする必要がある場合は、 `quarkus.smallrye-health.context-propagation=true` を設定して、すべてのヘルスチェック呼び出しにコンテキストの伝搬を許可することができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:361
#, no-wrap
msgid "Reactive health checks"
msgstr "リアクティブヘルスチェック"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:364
msgid "MicroProfile Health currently doesn't support returning reactive types, but SmallRye Health does."
msgstr "MicroProfile Healthは現在、reactive型の戻り値をサポートしていませんが、SmallRye Healthはサポートしています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:367
msgid "If you want to provide a reactive health check, you can implement the `io.smallrye.health.api.AsyncHealthCheck` interface instead of the `org.eclipse.microprofile.health.HealthCheck` one.  The `io.smallrye.health.api.AsyncHealthCheck` interface allows you to return a `Uni<HealthCheckResponse>`."
msgstr "リアクティブなヘルスチェックを行いたい場合は、 `org.eclipse.microprofile.health.HealthCheck` の代わりに `io.smallrye.health.api.AsyncHealthCheck` のインターフェイスを実装することができます。 `io.smallrye.health.api.AsyncHealthCheck` インターフェイスでは、 `Uni<HealthCheckResponse>` を返すことができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:369
msgid "The following example shows a reactive liveness check:"
msgstr "以下の例では、リアクティブなLivenessチェックを行っています:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:373
#, no-wrap
msgid "import io.smallrye.health.api.AsyncHealthCheck;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:376
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:382
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class LivenessAsync implements AsyncHealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-health.adoc:389
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HealthCheckResponse> call() {\n"
"        return Uni.createFrom().item(HealthCheckResponse.up(\"liveness-reactive\"))\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:391
#, no-wrap
msgid "Extension health checks"
msgstr "エクステンションのヘルスチェック"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:394
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr "一部のエクステンションでは、デフォルトのヘルスチェックを提供している場合があり、その場合、エクステンションは自動的にヘルスチェックを登録します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:397
msgid "For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check that will validate each datasource: xref:datasource.adoc#datasource-health-check[Datasource Health Check]."
msgstr "例えば、Quarkusのデータソースを管理するために使用される `quarkus-agroal` は、各 link:datasource.html#datasource-health-check[データソースのヘルスチェック] を検証するReadinessのヘルスチェックを自動的に登録します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:399
msgid "You can disable extension health checks via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr "エクステンションのヘルスチェックは、プロパティ（ `quarkus.health.extensions.enabled` ）で無効にすることができ、自動的に登録されることはありません。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:401
#, no-wrap
msgid "Health UI "
msgstr "Health UI "

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:404
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験的 - MicroProfileの仕様に含まれない"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:406
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr "`health-ui` はヘルスチェックの内容をWeb GUIで確認することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:408
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr "Quarkusの `smallrye-health` エクステンションは、 `health-ui` を同梱しており、devおよびtestモードでデフォルトで有効になりますが、productionモードでも同様に明示的に設定することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:410
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr "`health-ui` は、 http://localhost:8080/q/health-ui/ からアクセスできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:412
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr "image:health-ui-screenshot01.png[alt=Health UI]"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:413
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:419
msgid "SmallRye Health provides a way for your application to distribute information about its healthiness state to state whether it is able to function properly.  Liveness checks are utilized to tell whether the application should be restarted and readiness checks are used to tell whether the application is able to process requests."
msgstr "SmallRye Healthは、アプリケーションが正常に機能できるかどうかを示すために、 アプリケーションの健全性に関する情報を得る方法を提供します。Liveness チェックは、アプリケーションを再起動すべきかどうかを判断するために使用され、Readinessチェックは、アプリケーションがリクエストを処理できるかどうかを判断するために使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:421
msgid "All that is needed to enable the SmallRye Health features in Quarkus is:"
msgstr "QuarkusでSmallRye Healthの機能を有効にするために必要なのは"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:425
msgid "adding the `smallrye-health` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-health` Quarkusエクステンションをプロジェクトに追加します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-health.adoc:430
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。 :"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-health.adoc:446
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
