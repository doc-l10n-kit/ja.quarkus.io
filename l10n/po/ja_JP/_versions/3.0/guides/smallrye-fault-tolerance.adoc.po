msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:6
#, no-wrap
msgid "SmallRye Fault Tolerance"
msgstr "SmallRyeのフォールト・トレランス"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:16
msgid "One of the challenges brought by the distributed nature of microservices is that communication with external systems is inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance], an implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance] specification."
msgstr "マイクロサービスの分散した性質がもたらす課題の1つは、外部システムとの通信が本質的に信頼できないことです。これにより、アプリケーションの耐障害性に対する要求が高まります。より耐障害性の高いアプリケーションを簡単に作るために、Quarkusは link:https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]仕様の実装である link:https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance]を提供します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:19
msgid "In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`, `@Retry` and `@CircuitBreaker`."
msgstr "このガイドでは、 `@Timeout` 、 `@Fallback` 、 `@Retry` 、 `@CircuitBreaker` などの MicroProfile Fault Tolerance アノテーションの使用方法を説明します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:24
#, no-wrap
msgid "The Scenario"
msgstr "シナリオ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:28
msgid "The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST endpoint providing information about coffee samples we have on store."
msgstr "このガイドで作成したアプリケーションは、グルメ・コーヒーのe-ショップのシンプルなバックエンドをシミュレートしています。このアプリケーションは、店舗で販売しているコーヒーのサンプルに関する情報を提供するRESTエンドポイントを実装しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:31
msgid "Let's imagine, although it's not implemented as such, that some methods in our endpoint require communication to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "そのような実装はされていませんが、エンドポイントのいくつかのメソッドが、データベースや外部のマイクロサービスなどの外部サービスとの通信を必要とし、信頼性の低い要素を導入することを想像してみましょう。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:32
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:36
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:38
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:40
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "ソリューションは `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:41
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:44
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:50
msgid "This command generates a project, importing the extensions for RESTEasy Reactive/JAX-RS and SmallRye Fault Tolerance."
msgstr "このコマンドは、RESTEasy Reactive/JAX-RSおよびSmallRye Fault Toleranceのエクステンションをインポートして、プロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:53
msgid "If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-fault-tolerance` エクステンションを追加することができます。 :"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:58
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:60
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:486
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:66
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:69
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:495
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:72
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:498
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-fault-tolerance\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:74
#, no-wrap
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "アプリケーションの準備: RESTエンドポイントとCDIビーン"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:78
msgid "In this section we create a skeleton of our application, so that we have something that we can extend and to which we can add fault tolerance features later on."
msgstr "このセクションでは、アプリケーションのスケルトン (骨組) を作成します。これにより、後から拡張したり、フォールトトレランス機能を追加したりすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:80
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "まず、お店のコーヒーのサンプルを表すシンプルなエンティティを作成します。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:84
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:109
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:154
#, no-wrap
msgid "package org.acme.microprofile.faulttolerance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:86
#, no-wrap
msgid "public class Coffee {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:91
#, no-wrap
msgid ""
"    public Integer id;\n"
"    public String name;\n"
"    public String countryOfOrigin;\n"
"    public Integer price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:94
#, no-wrap
msgid ""
"    public Coffee() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:102
#, no-wrap
msgid ""
"    public Coffee(Integer id, String name, String countryOfOrigin, Integer price) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"        this.countryOfOrigin = countryOfOrigin;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:105
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "続いて、コーヒーのサンプルのrepositoryとして動作するシンプルなCDIビーンです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:117
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collections;\n"
"import java.util.HashMap;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.stream.Collectors;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:120
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CoffeeRepositoryService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:122
#, no-wrap
msgid "    private Map<Integer, Coffee> coffeeList = new HashMap<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:128
#, no-wrap
msgid ""
"    public CoffeeRepositoryService() {\n"
"        coffeeList.put(1, new Coffee(1, \"Fernandez Espresso\", \"Colombia\", 23));\n"
"        coffeeList.put(2, new Coffee(2, \"La Scala Whole Beans\", \"Bolivia\", 18));\n"
"        coffeeList.put(3, new Coffee(3, \"Dak Lak Filter\", \"Vietnam\", 25));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:132
#, no-wrap
msgid ""
"    public List<Coffee> getAllCoffees() {\n"
"        return new ArrayList<>(coffeeList.values());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:136
#, no-wrap
msgid ""
"    public Coffee getCoffeeById(Integer id) {\n"
"        return coffeeList.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:147
#, no-wrap
msgid ""
"    public List<Coffee> getRecommendations(Integer id) {\n"
"        if (id == null) {\n"
"            return Collections.emptyList();\n"
"        }\n"
"        return coffeeList.values().stream()\n"
"                .filter(coffee -> !id.equals(coffee.id))\n"
"                .limit(2)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:150
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最後に、 `org.acme.microprofile.faulttolerance.CoffeeResource` クラスを以下のように作成します。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:161
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Random;\n"
"import java.util.concurrent.atomic.AtomicLong;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:163
#, no-wrap
msgid "import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:166
#, no-wrap
msgid ""
"@Path(\"/coffee\")\n"
"public class CoffeeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:168
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(CoffeeResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:171
#, no-wrap
msgid ""
"    @Inject\n"
"    CoffeeRepositoryService coffeeRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:173
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:366
#, no-wrap
msgid "    private AtomicLong counter = new AtomicLong(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:177
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Coffee> coffees() {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:179
#, no-wrap
msgid "        maybeFail(String.format(\"CoffeeResource#coffees() invocation #%d failed\", invocationNumber));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:183
#, no-wrap
msgid ""
"        LOGGER.infof(\"CoffeeResource#coffees() invocation #%d returning successfully\", invocationNumber);\n"
"        return coffeeRepository.getAllCoffees();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:191
#, no-wrap
msgid ""
"    private void maybeFail(String failureLogMessage) {\n"
"        if (new Random().nextBoolean()) {\n"
"            LOGGER.error(failureLogMessage);\n"
"            throw new RuntimeException(\"Resource failure.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:196
msgid "At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "この時点で、コーヒーのサンプルのリストをJSON形式で表示するRESTメソッドを1つ公開しています。なお、 `CoffeeResource#maybeFail()` メソッドに障害を起こすコードを導入したため、約50%のリクエストで `CoffeeResource#coffees()` エンドポイント・メソッドに障害を発生させようとするものです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:198
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "アプリケーションが動作することを確認してみましょう。次のようにQuarkusの開発サーバーを起動してください。 :"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:204
msgid "and open `http://localhost:8080/coffee` in your browser. Make a couple of requests (remember, some of them are expected to fail). At least some requests should show us the list of our coffee samples in JSON, the rest will fail with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "`http://localhost:8080/coffee` をブラウザで開きます。いくつかのリクエストを行います（いくつかのリクエストは失敗することを想定しています）。少なくともいくつかのリクエストは、コーヒーサンプルのリストをJSONで表示してくれるはずです。残りのリクエストは、  `CoffeeResource#maybeFail()` 内で `RuntimeException` をスローして失敗します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:206
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "おめでとうございます！（多少、信頼性に欠けるものの）Quarkusアプリケーションが完成しました！"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:207
#, no-wrap
msgid "Adding Resiliency: Retries"
msgstr "レジリエンスの追加: リトライ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:211
msgid "Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()` method as follows and save the file:"
msgstr "Quarkus開発サーバーを起動し、IDEで `@Retry` アノテーションを `CoffeeResource#coffees()` メソッドに以下のように追加し、ファイルを保存します。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:216
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:451
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Retry;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:226
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:461
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Retry(maxRetries = 4)\n"
"    public List<Coffee> coffees() {\n"
"        ...\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:230
msgid "Hit refresh in your browser. The Quarkus development server will automatically detect the changes and recompile the app for you, so there's no need to restart it."
msgstr "ブラウザの更新ボタンを押してください。Quarkusの開発サーバーが自動的に変更を検出し、アプリを再コンパイルしますので、再起動する必要はありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:234
msgid "You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()` method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry the call!"
msgstr "さらに何度か更新ボタンを押してみてください。実質的にすべてのリクエストが成功しているはずです。 `CoffeeResource#coffees()` メソッドは、実際にはまだ約50％の確率で失敗していますが、そのたびにプラットフォームは自動的に呼び出しを再試行します！"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:237
msgid "To see that the failures still happen, check the output of the development server. The log messages should be similar to these:"
msgstr "障害がまだ発生していることを確認するには、開発サーバーの出力をチェックします。ログメッセージは以下のようになっているはずです。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:245
#, no-wrap
msgid ""
"2019-03-06 12:17:41,725 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #5 returning successfully\n"
"2019-03-06 12:17:44,187 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #6 returning successfully\n"
"2019-03-06 12:17:45,166 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #7 failed\n"
"2019-03-06 12:17:45,172 ERROR [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #8 failed\n"
"2019-03-06 12:17:45,176 INFO  [org.acm.fau.CoffeeResource] (XNIO-1 task-1) CoffeeResource#coffees() invocation #9 returning successfully\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:250
msgid "You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.  Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed to a failure. Which is fairly unlikely to happen."
msgstr "呼び出しが失敗するたびに、すぐに次の呼び出しが行われ、1つが成功するまで繰り返されることがわかります。4回の再試行を許可しているので、ユーザーが実際に失敗にさらされるためには、5回連続して失敗する必要があります。これはかなり起こりにくいことです。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:251
#, no-wrap
msgid "Adding Resiliency: Timeouts"
msgstr "レジリエンスの追加: タイムアウト"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:254
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "では、MicroProfile Fault Toleranceには他に何があるのでしょうか。タイムアウトについて見てみましょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:257
msgid "Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code and save the file."
msgstr "`CoffeeResource` のエンドポイントに以下の2つのメソッドを追加します。繰り返しになりますが、サーバーを再起動する必要はなく、コードを貼り付けてファイルを保存するだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:270
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Timeout;\n"
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @GET\n"
"    @Path(\"/{id}/recommendations\")\n"
"    @Timeout(250)\n"
"    public List<Coffee> recommendations(int id) {\n"
"        long started = System.currentTimeMillis();\n"
"        final long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:281
#, no-wrap
msgid ""
"        try {\n"
"            randomDelay();\n"
"            LOGGER.infof(\"CoffeeResource#recommendations() invocation #%d returning successfully\", invocationNumber);\n"
"            return coffeeRepository.getRecommendations(id);\n"
"        } catch (InterruptedException e) {\n"
"            LOGGER.errorf(\"CoffeeResource#recommendations() invocation #%d timed out after %d ms\",\n"
"                    invocationNumber, System.currentTimeMillis() - started);\n"
"            return null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:286
#, no-wrap
msgid ""
"    private void randomDelay() throws InterruptedException {\n"
"        Thread.sleep(new Random().nextInt(500));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:292
msgid "We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without recommendations."
msgstr "いくつかの新しい機能を追加しました。ユーザーが現在見ているコーヒーに基づいて、関連するコーヒーをお勧めできるようにしたいのです。これは重要な機能ではなく、あれば望ましい程度の機能です。システムに負荷がかかり、おすすめ情報を得るためのロジックの実行に時間がかかりすぎる場合は、むしろタイムアウトしておすすめ情報のないUIを表示したいと考えています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:295
msgid "Note that the timeout was configured to 250 ms, and a random artificial delay between 0 and 500 ms was introduced into the `CoffeeResource#recommendations()` method."
msgstr "なお、タイムアウトは250msに設定し、0～500msのランダムな人工的な遅延が `CoffeeResource#recommendations()` メソッドに導入されたことに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:297
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "お使いのブラウザで `http://localhost:8080/coffee/2/recommendations` にアクセスして、2、3回更新してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:300
msgid "You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.  Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "`org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` でいくつかのリクエストがタイムアウトになるはずです。タイムアウトにならなかったリクエストでは、JSONに2つのおすすめコーヒーサンプルが表示されます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:301
#, no-wrap
msgid "Adding Resiliency: Fallbacks"
msgstr "レジリエンスの追加: フォールバック"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:305
msgid "Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related coffees."
msgstr "関連するコーヒーを入手するための代替手段（おそらくより迅速な方法）を提供することで、おすすめ機能をさらに改善しましょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:308
msgid "Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method as follows:"
msgstr "以下のように`CoffeeResource` にフォールバック・メソッドを、 `CoffeeResource#recommendations()` メソッドに `@Fallback` アノテーションを追加します。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:313
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import org.eclipse.microprofile.faulttolerance.Fallback;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:321
#, no-wrap
msgid ""
"...\n"
"public class CoffeeResource {\n"
"    ...\n"
"    @Fallback(fallbackMethod = \"fallbackRecommendations\")\n"
"    public List<Coffee> recommendations(int id) {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:329
#, no-wrap
msgid ""
"    public List<Coffee> fallbackRecommendations(int id) {\n"
"        LOGGER.info(\"Falling back to RecommendationResource#fallbackRecommendations()\");\n"
"        // safe bet, return something that everybody likes\n"
"        return Collections.singletonList(coffeeRepository.getCoffeeById(1));\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:335
msgid "Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.  The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than two recommendations returned by the original method."
msgstr "`http://localhost:8080/coffee/2/recommendations` を何回も更新してください。 `TimeoutException` はもう表示されないはずです。代わりに、タイムアウトが発生した場合、元のメソッドが返す2つのレコメンデーションではなく、フォールバックメソッド `fallbackRecommendations()` にハードコードされた1つのレコメンデーションが表示されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:337
msgid "Check the server output to see that fallback is really happening:"
msgstr "フォールバックが本当に行われているかどうか、サーバーの出力を確認してください。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:343
#, no-wrap
msgid ""
"2020-01-09 13:21:34,250 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #1 returning successfully\n"
"2020-01-09 13:21:36,354 ERROR [org.acm.fau.CoffeeResource] (executor-thread-1) CoffeeResource#recommendations() invocation #2 timed out after 250 ms\n"
"2020-01-09 13:21:36,355 INFO  [org.acm.fau.CoffeeResource] (executor-thread-1) Falling back to RecommendationResource#fallbackRecommendations()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:346
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "フォールバックメソッドには、元のメソッドと同じパラメータが必要です。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:347
#, no-wrap
msgid "Adding Resiliency: Circuit Breaker"
msgstr "レジリエンスの追加: サーキットブレーカー"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:353
msgid "A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations of that method for a given time."
msgstr "サーキットブレーカーは，システムの一部が一時的に不安定になったときに，システム内で発生する障害の数を制限するのに有効です。サーキットブレーカーは、あるメソッドの成功と失敗を記録し、失敗したメソッドの割合が指定された閾値に達すると、サーキットブレーカーが _開き_、それ以降のメソッドの呼び出しを一定時間ブロックします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:355
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "次のコードを `CoffeeRepositoryService` ビーンに追加して、サーキットブレーカーの動作をデモできるようにします。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:361
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicLong;\n"
"import org.eclipse.microprofile.faulttolerance.CircuitBreaker;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:364
#, no-wrap
msgid ""
"public class CoffeeRepositoryService {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:372
#, no-wrap
msgid ""
"    @CircuitBreaker(requestVolumeThreshold = 4)\n"
"    public Integer getAvailability(Coffee coffee) {\n"
"        maybeFail();\n"
"        return new Random().nextInt(30);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:381
#, no-wrap
msgid ""
"    private void maybeFail() {\n"
"        // introduce some artificial failures\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
"        if (invocationNumber % 4 > 1) { // alternate 2 successful and 2 failing invocations\n"
"            throw new RuntimeException(\"Service failed.\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:384
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "そして、以下のコードを `CoffeeResource` のエンドポイントに注入します。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:393
#, no-wrap
msgid ""
"public class CoffeeResource {\n"
"    ...\n"
"    @Path(\"/{id}/availability\")\n"
"    @GET\n"
"    public Response availability(int id) {\n"
"        final Long invocationNumber = counter.getAndIncrement();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:399
#, no-wrap
msgid ""
"        Coffee coffee = coffeeRepository.getCoffeeById(id);\n"
"        // check that coffee with given id exists, return 404 if not\n"
"        if (coffee == null) {\n"
"            return Response.status(Response.Status.NOT_FOUND).build();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:415
#, no-wrap
msgid ""
"        try {\n"
"            Integer availability = coffeeRepository.getAvailability(coffee);\n"
"            LOGGER.infof(\"CoffeeResource#availability() invocation #%d returning successfully\", invocationNumber);\n"
"            return Response.ok(availability).build();\n"
"        } catch (RuntimeException e) {\n"
"            String message = e.getClass().getSimpleName() + \": \" + e.getMessage();\n"
"            LOGGER.errorf(\"CoffeeResource#availability() invocation #%d failed: %s\", invocationNumber, message);\n"
"            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\n"
"                    .entity(message)\n"
"                    .type(MediaType.TEXT_PLAIN_TYPE)\n"
"                    .build();\n"
"        }\n"
"    }\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:419
msgid "We added another functionality - the application can return the amount of remaining packages of given coffee on our store (just a random number)."
msgstr "もう一つの機能を追加しました。このアプリケーションは、私たちの店における、指定されたコーヒーの残りのパッケージの量を返すことができます（単なる乱数です）。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:422
msgid "This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is going to alternate between two successful and two failed invocations."
msgstr "今回は、CDIビーンに人工的な失敗を導入しました。 `CoffeeRepositoryService#getAvailability()` メソッドは、2回の成功と2回の失敗の呼び出しを交互に行うことになります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:426
msgid "We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open when 2 of the last 4 invocations failed, and it will stay open for 5 seconds."
msgstr "また、`@CircuitBreaker`アノテーションを追加し、`requestVolumeThreshold = 4`としました。`CircuitBreaker.failureRatio` はデフォルトで 0.5 で、 `CircuitBreaker.delay` はデフォルトで 5 秒です。つまり、過去4回の起動のうち2回が失敗した場合にサーキットブレーカーが開き、5秒間その状態のままになります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:428
msgid "To test this out, do the following:"
msgstr "これを試すには、次のようにします。 :"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:430
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr "ブラウザで `http://localhost:8080/coffee/2/availability` を開いて下さい。数字が返ってくるのが見えるでしょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:431
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "リフレッシュすると、この2回目のリクエストが再び成功し、数字が返ってくるはずです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:433
msgid "Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "さらに2回リフレッシュします。2回とも、\"RuntimeException:Service failed.\" というテキストが表示されます。これは、 `CoffeeRepositoryService#getAvailability()` によってスローされる例外です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:436
msgid "Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's \"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "さらに数回更新します。長く待ちすぎていなければ、再び例外が表示されるはずですが、今回は \"CircuitBreakerOpenException: getAvailability\" となっています。この例外は、サーキットブレーカーが開き、 `CoffeeRepositoryService#getAvailability()` メソッドが呼び出されなくなったことを示しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:438
msgid "Give it 5 seconds during which circuit breaker should close, and you should be able to make two successful requests again."
msgstr "5秒後にサーキットブレーカーが閉じて、再び2回のリクエストを成功させるようになります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:439
#, no-wrap
msgid "Runtime configuration"
msgstr "ランタイム設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:442
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "`application.properties` ファイルの中で、実行時にアノテーションパラメータをオーバーライドすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:444
msgid "If we take the retry example that we already saw:"
msgstr "先ほどのリトライの例で言えば :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:448
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:464
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "以下の設定項目により、 `maxRetries` パラメータをオーバーライドして、リトライ回数を4回から6回に変更することができます。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:467
#, no-wrap
msgid "org.acme.CoffeeResource/coffees/Retry/maxRetries=6\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:471
msgid "The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.  You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr "フォーマットは `fully-qualified-class-name/method-name/annotation-name/property-name=value` です。また、 `annotation-name/property-name=value` を通じて、すべてのアノテーションに対するプロパティを設定することもできます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:472
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:476
msgid "SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity of our business logic."
msgstr "SmallRye Fault Toleranceは、ビジネスロジックの複雑さに影響を与えることなく、アプリケーションの耐障害性を向上させます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:478
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "Quarkusのフォールトトレランス機能を有効にするために必要なのは次の通りです。 :"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:481
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-fault-tolerance` Quarkus エクステンションをプロジェクトに追加することです :"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:484
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。 :"

#. type: Title ==
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:501
#, no-wrap
msgid "Additional resources"
msgstr "その他のリソース"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:505
msgid "SmallRye Fault Tolerance has more features than shown here.  Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr "SmallRye Fault Toleranceには、ここで紹介した以外にも様々な機能があります。それらについては、 link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/index.html[SmallRye Fault Toleranceのドキュメント]をご確認ください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:507
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "Quarkusでは、SmallRye Fault Toleranceのオプション機能をすぐに使用することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:509
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "Mutinyがサポートされているので、非同期のメソッドは `CompletionStage` だけでなく `Uni` を返すことができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:511
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile Context PropagationはFault Toleranceと統合されているので、既存のコンテキストは自動的に非同期メソッドに伝搬されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:516
msgid "This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.  This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr "これは CDI リクエストコンテキストにも当てはまります。もしオリジナルのスレッドでアクティブであれば、新しいスレッドに伝搬されますが、もしそうでなければ、新しいスレッドはそれを持ちません。 これは MicroProfile Fault Tolerance 仕様に反しており、  `@Asynchronous`  メソッド呼び出しの間はリクエストコンテキストがアクティブでなければならないとされています。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:519
msgid "We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.  The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr "MicroProfile Context Propagationがある場合、この要件は適用されるべきではないと考えています。コンテキスト伝搬の主な目的は、新しいスレッドが元のスレッドと同じコンテキストを持っていることを確認することにあります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:524
msgid "Non-compatible mode is enabled by default.  This means that methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@Blocking` or `@NonBlocking` annotation.  It also means that circuit breaker, fallback and retry automatically inspect the exception cause chain if the exception itself is insufficient to decide what should happen."
msgstr "非互換モードはデフォルトで有効になっています。 これは、 `CompletionStage` (または `Uni`) を返すメソッドには、 `@Asynchronous`, `@Blocking`, `@NonBlocking` アノテーションなしで、非同期のフォールトトレランスが適用されることを意味します。 また、サーキットブレーカー、フォールバック、リトライは、例外そのものがどうなるべきかを判断するのに不十分な場合、例外の原因チェーンを自動的に検査することを意味します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:529
msgid "This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.  To restore full compatibility, add this configuration property:"
msgstr "このモードは、非互換性は非常に小さいものの、MicroProfile Fault Tolerance仕様と互換性がありません。 完全な互換性を回復するには、このコンフィギュレーションプロパティを追加してください。 :"

#. type: delimited block -
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:533
#, no-wrap
msgid "smallrye.faulttolerance.mp-compatibility=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:538
msgid "The link:https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/usage/programmatic-api.html[programmatic API] is present, including Mutiny support, and integrated with the declarative, annotation-based API.  You can use the `FaultTolerance` and `MutinyFaultTolerance` APIs out of the box."
msgstr "Mutinyのサポートを含む link:https://smallrye.io/docs/smallrye-fault-tolerance/5.3.1/usage/programmatic-api.html[プログラム的なAPIが]存在し、宣言的でアノテーションベースのAPIと統合されています。デフォルトで `FaultTolerance` と `MutinyFaultTolerance` の API を使うことができます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:540
msgid "Support for Kotlin is present (assuming you use the Quarkus extension for Kotlin), so you can guard your `suspend` functions with fault tolerance annotations."
msgstr "Kotlinのサポートがあるため（Kotlin用のQuarkusエクステンションを使用することが前提）、フォールトトレランスのアノテーションで `suspend` 関数を保護することができます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/smallrye-fault-tolerance.adoc:544
msgid "Metrics are automatically discovered and integrated.  If your application uses the Quarkus extension for Micrometer, SmallRye Fault Tolerance will emit metrics to Micrometer.  If your application uses the Quarkus extension for SmallRye Metrics, SmallRye Fault Tolerance will emit metrics to MicroProfile Metrics.  Otherwise, SmallRye Fault Tolerance metrics will be disabled."
msgstr "メトリクスは自動的に検出され、統合されます。 アプリケーションでQuarkus Extension for Micrometerを使用している場合、SmallRye Fault ToleranceからMicrometerにメトリクスが送信されます。 アプリケーションがSmallRye Metrics用のQuarkusエクステンションを使用している場合、SmallRye Fault ToleranceはMicroProfile Metricsにメトリクスを送信します。 そうでない場合は、SmallRye Fault Toleranceのメトリクスは無効になります。"
