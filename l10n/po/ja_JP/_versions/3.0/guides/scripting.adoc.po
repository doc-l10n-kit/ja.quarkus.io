msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/scripting.adoc:6
#, no-wrap
msgid "Scripting with Quarkus"
msgstr "Quarkus によるスクリプティング"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:13
msgid "Quarkus provides integration with https://jbang.dev[jbang] which allows you to write Java scripts/applications requiring no Maven nor Gradle to get running."
msgstr "Quarkus は Maven も Gradleも必要としない Java のスクリプトおよびアプリケーションを記述することができる https://jbang.dev[jbang] との統合を提供しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:15
msgid "In this guide, we will see how you can write a REST application using just a single Java file."
msgstr "このガイドでは、1つの Java ファイルだけを使って REST アプリケーションを書く方法を見ていきます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:18
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:25
msgid "https://jbang.dev/download[JBang]"
msgstr "https://jbang.dev/download[JBang]"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:26
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:29
msgid "Normally we would link to a Git repository to clone but in this case there is no additional files than the following:"
msgstr "通常は Git リポジトリに関連付けてクローンしますが、今回利用するのは以下のファイルだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:37
#, no-wrap
msgid ""
"//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS io.quarkus.platform:quarkus-bom:{quarkus-version}@pom\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive\n"
"//JAVAC_OPTIONS -parameters\n"
"//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:46
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:50
#: upstream/_versions/3.0/guides/scripting.adoc:175
#: upstream/_versions/3.0/guides/scripting.adoc:297
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@ApplicationScoped\n"
"public class quarkusapp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:55
#: upstream/_versions/3.0/guides/scripting.adoc:180
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:59
#: upstream/_versions/3.0/guides/scripting.adoc:306
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:62
#: upstream/_versions/3.0/guides/scripting.adoc:309
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:69
#: upstream/_versions/3.0/guides/scripting.adoc:316
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:72
#: upstream/_versions/3.0/guides/scripting.adoc:319
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:78
#: upstream/_versions/3.0/guides/scripting.adoc:325
#, no-wrap
msgid ""
"        public String greeting(String name) {\n"
"            return \"hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:80
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:83
msgid "In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr "このガイドでは、 `hello` エンドポイントを提供する簡単なアプリケーションを、 `pom.xml` や `build.gradle` のようなビルドファイルを追加することなく、単一のソースファイルで作成します。依存関係の注入の動作を確認するために、このエンドポイントは `greeting` Bean を使用します。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/scripting.adoc:84
#, no-wrap
msgid "Architecture,"
msgstr "アーキテクチャ"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/scripting.adoc:84
#, no-wrap
msgid "getting-started-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:86
#, no-wrap
msgid "Creating the initial file"
msgstr "初期ファイルの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:89
msgid "First, we need a Java file. JBang lets you create an initial version using:"
msgstr "最初に、Java ファイルが必要です。JBang を使うと、次のように初期バージョンの Java ファイルを作成することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:94
#, no-wrap
msgid ""
"jbang init scripting/quarkusapp.java\n"
"cd scripting\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:97
msgid "This command generates a .java file that you can directly run on Linux and macOS, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`."
msgstr "このコマンドは、Linux と macOS で直接実行できる .java ファイルとして `./quarkusapp.java` を生成します。Windows では、`jbang quarkusapp.java` を使用する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:99
msgid "This initial version will print `Hello World` when run."
msgstr "この初期バージョンを実行すると `Hello World` を表示します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:101
msgid "Once generated, look at the `quarkusapp.java` file."
msgstr "生成された `quarkusapp.java` ファイルを確認します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:103
msgid "You will find at the top a line looking like this:"
msgstr "一番上にこのような行があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:107
#, no-wrap
msgid "//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:110
msgid "This line is what on Linux and macOS allows you to run it as a script. On Windows this line is ignored."
msgstr "この行は、Linux や macOS でスクリプトとして実行できるようにするためのものです。Windowsでは、この行は無視されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:112
msgid "The next lines"
msgstr "次の行"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:116
#, no-wrap
msgid "// //DEPS <dependency1> <dependency2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:119
msgid "illustrate how you add dependencies to this script. This is a feature of JBang."
msgstr "このスクリプトに依存関係を追加する方法を示しています。これは `jbang` の機能です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:121
msgid "Go ahead and update this line to include the `quarkus-bom` and the `quarkus-resteasy-reactive` dependency like so:"
msgstr "この行を `quarkus-resteasy` の依存関係を含むように更新します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:126
#, no-wrap
msgid ""
"//DEPS io.quarkus.platform:quarkus-bom:{quarkus-version}@pom\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:129
msgid "Now, run `jbang quarkusapp.java` and you will see JBang resolving this dependency and building the jar with help from Quarkus' JBang integration."
msgstr "ここで `jbang quarkusapp.java` を実行すると、 `jbang` がこの依存関係を解決し、Quarkus の jbang 統合の機能を利用して jar をビルドしていることがわかります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:133
#: upstream/_versions/3.0/guides/scripting.adoc:204
#, no-wrap
msgid "$ jbang quarkusapp.java\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:144
#, no-wrap
msgid ""
"[jbang] Resolving dependencies...\n"
"[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n"
"[jbang] Dependencies resolved\n"
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 722ms\n"
"Hello World\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:147
msgid "For now the application does nothing new."
msgstr "ここまでは、このアプリケーションは特に新しい動作をしていません。"

#. type: Block title
#: upstream/_versions/3.0/guides/scripting.adoc:149
#, no-wrap
msgid "How do I edit this file and get content assist?"
msgstr "このファイルの編集時にコンテンツアシスト機能を利用する方法"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:153
msgid "As there is nothing but a `.java` file, most IDE's don't handle content assist well.  To work around that you can run `jbang edit quarkusapp.java`, this will print out a directory that will have a temporary project setup you can use in your IDE."
msgstr "`.java` ファイルのみが存在するため、ほとんどの IDE はコンテンツアシストを適切に処理できません。この問題を回避する方法として、 `jbang edit quarkusapp.java` を実行することで、IDE で使用できる一時的なプロジェクトの設定を持ったディレクトリーが出力されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:155
msgid "On Linux/macOS you can run `<idecommand> `jbang edit quarkusapp.java``."
msgstr "Linux/macOS では、 `<idecommand> `jbang edit quarkusapp.java`` で実行可能です。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:158
msgid "If you add dependencies while editing, you can get JBang to automatically refresh the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`."
msgstr "編集中に依存関係を追加した場合は、 `jbang edit --live=<idecommand> quarkusapp.java` を使用することで、IDE プロジェクトを自動的に更新するように jbang を設定することができます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/scripting.adoc:161
#, no-wrap
msgid "The JAX-RS resources"
msgstr "JAX-RSリソース"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:164
msgid "Now let us replace the class with one that uses Quarkus features:"
msgstr "これを Quarkus の機能を使用するクラスに置き換えてみます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:171
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:185
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:188
msgid "It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\"."
msgstr "Quarkus で REST エンドポイントを起動し、「/hello」へのリクエスト対して「hello」を返すメインメソッドを持つ、非常にシンプルなクラスです。"

#. type: Block title
#: upstream/_versions/3.0/guides/scripting.adoc:190
#, no-wrap
msgid "Why is the `main` method there?"
msgstr "`main` メソッドが存在する理由"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:193
msgid "A `main` method is currently needed for the JBang integration to work - we might remove this requirement in the future."
msgstr "現時点で `jbang` の統合が動作するためには `main` メソッドが必要です。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:195
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:198
msgid "Now when you run the application you will see Quarkus start up."
msgstr "アプリケーションを実行すると、 Quarkus が起動するのを確認することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:200
msgid "Use: `jbang quarkusapp.java`:"
msgstr "`jbang quarkusapp.java` の利用"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:218
#, no-wrap
msgid ""
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 681ms\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:221
msgid "Once started, you can request the provided endpoint:"
msgstr "起動後、提供されたエンドポイントにリクエストを送信することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:226
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:229
msgid "After that, hit `CTRL+C` to stop the application."
msgstr "その後 `CTRL+C` を入力し、アプリケーションを停止させます。"

#. type: Block title
#: upstream/_versions/3.0/guides/scripting.adoc:231
#, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "`curl -w \"\\n\"` で自動的に改行が追加されるようにします。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:234
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "この例では `curl -w \"\\n\"` を使用して、結果とプロンプトが1行で表示されてしまうことを防止しています。"

#. type: Block title
#: upstream/_versions/3.0/guides/scripting.adoc:237
#, no-wrap
msgid "Why is `quarkus-resteasy-reactive` not resolved?"
msgstr "`quarkus-resteasy-reactive` が解決されない理由"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:241
msgid "In this second run you should not see a line saying it is resolving `quarkus-resteasy-reactive` as JBang caches the dependency resolution between runs.  If you want to clear the caches to force resolution use `jbang cache clear`."
msgstr "1回めの実行で jbang が依存関係の解決をキャッシュしているため、2回目の実行では `quarkus-resteasy` の依存関係を解決する行は表示されません。キャッシュをクリアして強制的に解決させたい場合は `jbang cache clear` を利用します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:243
#, no-wrap
msgid "Using injection"
msgstr "依存性注入の使用"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:247
msgid "Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  You can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr "Quarkus の依存性注入は、Quarkus のアーキテクチャに合わせて調整された CDI ベースの依存性注入ソリューションである ArC をベースにしています。 ArC の詳細については、xref:cdi-reference.adoc[コンテキストと依存性注入ガイド] を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:249
msgid "ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy."
msgstr "ArCは `quarkus-resteasy` の依存関係として提供されるため、新たに追加する必要はありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:251
msgid "Let's modify the application and add a companion bean."
msgstr "アプリケーションを修正してコンパニオンクラスのBeanを追加してみます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:254
msgid "Normally you would add a separate class, but as we are aiming to have it all in one file you will add a nested class."
msgstr "通常は別のクラスを追加しますが、一つのファイルにまとめるために、ネストされたクラスを追加します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:256
msgid "Add the following *inside* the `quarkusapp` class body."
msgstr "`quarkusapp` クラスの *内側に* 以下を追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:261
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"static public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:265
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:267
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/scripting.adoc:270
#, no-wrap
msgid "Use of nested static public classes"
msgstr "ネストされた静的パブリッククラスの使用"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:273
msgid "We are using a nested static public class instead of a top level class for two reasons:"
msgstr "トップレベルのクラスではなく、ネストされた静的パブリッククラスを使用しているのには、2つの理由があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:275
msgid "JBang currently does not support multiple source files."
msgstr "現在、 jbang は複数のソースファイルをサポートしていません。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/scripting.adoc:276
msgid "All Java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in Java there can only be one top level public class in a file."
msgstr "イントロスペクションに依存する全てのJavaフレームワークは、トップレベルクラスがパブリッククラスのようなアクセス修飾子を持たないため、トップレベルクラスを使用することに課題があります。そして Java では、1つのファイルにトップレベルのパブリッククラスは1つしか記述できません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:280
msgid "Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:"
msgstr "`quarksapp` クラスを編集して `GreetingService` を注入し、それを使って新しいエンドポイントを作成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:285
#, no-wrap
msgid ""
"//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive:{quarkus-version}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:293
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:302
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayHello() {\n"
"        return \"hello from Quarkus with jbang.dev\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:328
msgid "Now when you run `jbang quarkusapp.java` you can check what the new end point returns:"
msgstr "jbang quarkusapp.java` を実行すると、新しいエンドポイントが返す内容を確認することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:333
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello null\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:336
msgid "Now that is unexpected, why is it returning `hello null` and not `hello quarkus`?"
msgstr "予想に反し、 `hello quarkus` ではなく `hello null` が返却されます。この理由は何でしょうか？"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:338
msgid "The reason is that RESTEasy Reactive relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter."
msgstr "これは、RESTEasy Reactive が `name` パラメータに `{name}` をマップできるようにするために `-parameters` コンパイラーフラグをセットすることに依存しているからです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:340
msgid "We fix that by adding the following comment instruction to the file:"
msgstr "ファイルに以下のコメント命令文を追加することで修正します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:344
#, no-wrap
msgid "//JAVAC_OPTIONS -parameters\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:347
msgid "Now when you run with `jbang quarkusapp.java` the end point should return what you expect:"
msgstr "`jbang quarkusapp.java` を実行すると、エンドポイントは期待通りの値を返すようになったことが確認できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:352
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:354
#, no-wrap
msgid "Debugging"
msgstr "デバッグ"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:358
msgid "To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the more traditional Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`."
msgstr "アプリケーションをデバッグするには、`jbang --debug quarkusapp.java` を使用し、IDE を使用してポート 4004 に接続します。より伝統的な Quarkus デバッグポートを使用したい場合は、`jbang --debug=5005 quarkusapp.java` を使用します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:360
msgid "Note: JBang debugging always suspends thus you need to connect the debugger to have the application run."
msgstr "注意: `jbang` デバッグは常に一時停止しているため、アプリケーションを実行させためるにはデバッガーを接続する必要があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:361
#, no-wrap
msgid "Logging"
msgstr "ロギング"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:364
msgid "To use logging in Quarkus scripting with JBang you do as usual, with configuring a logger, i.e."
msgstr "jbang による Quarkus スクリプトでロギングを使用するには、通常通りロガーを設定します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:368
#, no-wrap
msgid "public static final Logger LOG = Logger.getLogger(quarkusapp.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:371
msgid "To get it to work you need to add a Java option to ensure the logging is initialized properly, i.e."
msgstr "これを動作させるためには、ロギングが適切に初期化されるように Java オプションを追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:375
#, no-wrap
msgid "//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:378
msgid "With that in place running `jbang quarkusapp.java` will log and render as expected."
msgstr "これにより、 `jbang quarkusapp.java` を実行すると、期待通りにロギングが行われます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:379
#, no-wrap
msgid "Configuring Application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:382
msgid "You can use `//Q:CONFIG <property>=<value>` to set up static configuration for your application."
msgstr "アプリケーションの静的な設定を行うために、 `//Q:CONFIG <property>=<value>` を使用することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:384
msgid "I.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` extensions and have the Swagger UI always show up you would add the following:"
msgstr "例えば `smallrye-openapi` と `swagger-ui` のエクステンションを追加して Swagger UI を常に表示させたい場合は、以下のように追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:390
#, no-wrap
msgid ""
"//DEPS io.quarkus:quarkus-smallrye-openapi:{quarkus-version}\n"
"//DEPS io.quarkus:quarkus-swagger-ui:{quarkus-version}\n"
"//Q:CONFIG quarkus.swagger-ui.always-include=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:393
msgid "Now during build the `quarkus.swagger-ui.always-include` will be generated into the resulting jar and `http://0.0.0.0:8080/q/swagger-ui` will be available when run."
msgstr "これでビルドによって出来上がるjar内に `quarkus.swagger-ui.always-include` が生成されるようになり、実行時に `http://0.0.0.0:8080/q/swagger-ui` が利用可能になります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/scripting.adoc:394
#, no-wrap
msgid "Running as a native application"
msgstr "ネイティブアプリケーションとしての実行"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:397
msgid "If you have the `native-image` binary installed and `GRAALVM_HOME` set, you can get the native executable built and run using `jbang --native quarkusapp.java`:"
msgstr "`native-image` バイナリーがインストールされていて `GRAALVM_HOME` が設定されている場合は、 `jbang --native quarkusapp.java` を使用してネイティブ実行可能ファイルをビルドして実行することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:401
#, no-wrap
msgid "$ jbang --native quarkusapp.java\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:414
#, no-wrap
msgid ""
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 6:21:15 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.JarResultBuildStep buildNativeImageThinJar\n"
"INFO: Building native image source jar: /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n"
"INFO: Building native image from /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep checkGraalVMVersion\n"
"INFO: Running Quarkus native-image plugin on GraalVM Version 20.1.0 (Java Version 11.0.7)\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n"
"INFO: /Users/max/.sdkman/candidates/java/20.1.0.r11-grl/bin/native-image -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\\$BySpaceAndTime -H:+JNI -jar quarkus-application-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-application-runner\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:424
#, no-wrap
msgid ""
"Aug 30, 2020 6:22:31 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 76010ms\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 06:22:32,012 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.017s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:427
msgid "This native build will take some time on first run but any subsequent runs (without changing `quarkusapp.java`) will be close to instant thanks to JBang cache:"
msgstr "このネイティブビルドは最初の実行には時間がかかりますが、その後は ( `quarkusapp.java` を変更せずに) jbang キャッシュのおかげですぐに実行できるようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/scripting.adoc:438
#, no-wrap
msgid ""
"$ jbang --native quarkusapp.java\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.015s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/scripting.adoc:440
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: upstream/_versions/3.0/guides/scripting.adoc:442
msgid "If you want to get started with Quarkus or write something quickly, Quarkus Scripting with jbang lets you do that. No Maven, no Gradle - just a Java file. In this guide we outlined the very basics on using Quarkus with JBang; if you want to learn more about what JBang can do, go see https://jbang.dev."
msgstr "Quarkusを使い始めたい、または何かを素早くコーディングしたい場合、 jbang による Quarkus スクリプティングを使用すると便利です。Java ファイルだけでよく、Maven や Gradle は必要ありません。このガイドでは、JBang を使用した Quarkus の基本的な使い方を説明しました。JBangでできることの詳細については、 https://jbang.dev を参照してください。"
