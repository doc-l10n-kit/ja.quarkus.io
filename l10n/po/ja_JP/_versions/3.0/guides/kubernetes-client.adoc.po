msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:6
#, no-wrap
msgid "Kubernetes Client"
msgstr "Kubernetesクライアント"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:14
msgid "Quarkus includes the `kubernetes-client` extension which enables the use of the https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes Client] in native mode while also making it easier to work with."
msgstr "Quarkusには、 link:https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetesクライアント] をネイティブモードで使用できるようにする `kubernetes-client` エクステンションが含まれています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:19
msgid "Having a Kubernetes Client extension in Quarkus is very useful in order to unlock the power of Kubernetes Operators.  Kubernetes Operators are quickly emerging as a new class of Cloud Native applications.  These applications essentially watch the Kubernetes API and react to changes on various resources and can be used to manage the lifecycle of all kinds of complex systems like databases, messaging systems and much more.  Being able to write such operators in Java with the very low footprint that native images provide is a great match."
msgstr "Kubernetes Operatorのパワーを引き出すためには、QuarkusにKubernetesクライアントエクステンションがあると非常に便利です。Kubernetes Operatorは、クラウドネイティブアプリケーションの新しい種類として急速に台頭してきています。これらのアプリケーションは、基本的にKubernetes APIを監視し、様々なリソースの変更に反応し、データベースやメッセージングシステムなど、あらゆる種類の複雑なシステムのライフサイクルを管理するために使用することができます。ネイティブイメージが提供する非常に低いフットプリントで、このようなOperatorをJavaで書くことができるということは、非常にマッチしています。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:20
#, no-wrap
msgid "Configuration"
msgstr "設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:24
msgid "Once you have your Quarkus project configured you can add the `kubernetes-client` extension to your project by running the following command in your project base directory."
msgstr "Quarkusプロジェクトを設定したら、プロジェクトのベースディレクトリーで次のコマンドを実行して、 `kubernetes-client` エクステンションをプロジェクトに追加できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:29
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:31
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:141
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:327
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:456
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:40
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:151
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:336
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:466
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-kubernetes-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:45
#, no-wrap
msgid "Usage"
msgstr "使用方法"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:49
msgid "Quarkus configures a Bean of type `KubernetesClient` which can be injected into application code using the well known CDI methods.  This client can be configured using various properties as can be seen in the following example:"
msgstr "Quarkusは、よく知られたCDIメソッドを使用してアプリケーションコードに注入できる `KubernetesClient` タイプのBeanを設定します。このクライアントは、以下の例にあるように、さまざまなプロパティーを使用して設定することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:54
#, no-wrap
msgid ""
"quarkus.kubernetes-client.trust-certs=false\n"
"quarkus.kubernetes-client.namespace=default\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:57
msgid "Note that the full list of properties is available in the link:#quarkus-kubernetes-client_quarkus.kubernetes-client.devservices-dev-services[Dev Services section of the configuration reference]."
msgstr "なお、プロパティの全リストは、 link:#quarkus-kubernetes-client_quarkus.kubernetes-client.devservices-dev-services[コンフィギュレーションリファレンスのDev Servicesセクション] に掲載されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:59
msgid "In dev mode and when running tests, xref:kubernetes-dev-services.adoc[Dev Services for Kubernetes] automatically starts a Kubernetes API server."
msgstr "devモードやテスト実行時には、 link:kubernetes-dev-services.html[Dev Services for Kubernetes] が自動的にKubernetes APIサーバーを起動します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:60
#, no-wrap
msgid "Overriding"
msgstr "オーバーライド"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:64
msgid "The extension also allows application code to override either of `io.fabric8.kubernetes.client.Config` or `io.fabric8.kubernetes.client.KubernetesClient` which are normally provided by the extension by simply declaring custom versions of those beans."
msgstr "また、このエクステンションでは、アプリケーションコードは、単にそれらのBeanのカスタムバージョンを宣言することで、通常はエクステンションによって提供される `io.fabric8.kubernetes.client.Config` や `io.fabric8.kubernetes.client.KubernetesClient` のいずれかをオーバーライドすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:66
msgid "An example of this can be seen in the following snippet:"
msgstr "この例は、次のスニペットの通りです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:71
#, no-wrap
msgid ""
"@Singleton\n"
"public class KubernetesClientProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:78
#, no-wrap
msgid ""
"    @Produces\n"
"    public KubernetesClient kubernetesClient() {\n"
"        // here you would create a custom client\n"
"        return new DefaultKubernetesClient();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:80
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:85
msgid "To make testing against a mock Kubernetes API extremely simple, Quarkus provides the `WithKubernetesTestServer` annotation which automatically launches a mock of the Kubernetes API server and sets the proper environment variables needed so that the Kubernetes Client configures itself to use said mock.  Tests can inject the mock server and set it up in any way necessary for the particular testing using the `@KubernetesTestServer` annotation."
msgstr "モックのKubernetes APIに対するテストを非常に簡単にするために、Quarkusでは、Kubernetes APIサーバーのモックを自動的に起動し、Kubernetesクライアントがそのモックを使用するように設定するために必要な適切な環境変数を設定する `KubernetesMockServerTestResource` を提供しています。テストは、 `@MockServer` アノテーションを使用して、特定のテストに必要な方法でモックを注入し、設定することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:87
msgid "Let's assume we have a REST endpoint defined like so:"
msgstr "このようにRESTエンドポイントが定義されているとします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:92
#, no-wrap
msgid ""
"@Path(\"/pod\")\n"
"public class Pods {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:94
#, no-wrap
msgid "    private final KubernetesClient kubernetesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:98
#, no-wrap
msgid ""
"    public Pods(KubernetesClient kubernetesClient) {\n"
"        this.kubernetesClient = kubernetesClient;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:105
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{namespace}\")\n"
"    public List<Pod> pods(String namespace) {\n"
"        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:108
msgid "We could write a test for this endpoint very easily like so:"
msgstr "このエンドポイントのテストは次のように簡単に書けます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:115
#, no-wrap
msgid ""
"// you can even configure aspects like crud, https and port on this annotation\n"
"@WithKubernetesTestServer\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:118
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:168
#, no-wrap
msgid ""
"    @KubernetesTestServer\n"
"    KubernetesServer mockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:123
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:173
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void before() {\n"
"        final Pod pod1 = new PodBuilder().withNewMetadata().withName(\"pod1\").withNamespace(\"test\").and().build();\n"
"        final Pod pod2 = new PodBuilder().withNewMetadata().withName(\"pod2\").withNamespace(\"test\").and().build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:128
#, no-wrap
msgid ""
"        // Set up Kubernetes so that our \"pretend\" pods are created\n"
"        mockServer.getClient().pods().create(pod1);\n"
"        mockServer.getClient().pods().create(pod2);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:134
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:187
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInteractionWithAPIServer() {\n"
"        RestAssured.when().get(\"/pod/test\").then()\n"
"                .body(\"size()\", is(2));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:136
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:189
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:139
msgid "Note that to take advantage of these features, the `quarkus-test-kubernetes-client` dependency needs to be added, for example like so:"
msgstr "これらの機能を利用するには、例えば次のように `quarkus-test-kubernetes-client` 依存関係を追加する必要があることに注意してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:148
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-kubernetes-client</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:154
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-kubernetes-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:158
msgid "By default, the mock server will be in CRUD mode, so you have to use the client to build your state before your application can retrieve it, but you can also set it up in non-CRUD mode and mock all HTTP requests made to Kubernetes:"
msgstr "デフォルトでは、モックサーバはCRUDモードになっているので、アプリケーションがステートを取得する前に、クライアントを使ってステートを構築する必要がありますが、非CRUDモードに設定して、KubernetesへのすべてのHTTPリクエストをモックすることもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:165
#, no-wrap
msgid ""
"// you can even configure aspects like crud, https and port on this annotation\n"
"@WithKubernetesTestServer(crud = false)\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:181
#, no-wrap
msgid ""
"        // Mock any HTTP request to Kubernetes pods so that our pods are returned\n"
"        mockServer.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"                .andReturn(200,\n"
"                        new PodListBuilder().withNewMetadata().withResourceVersion(\"1\").endMetadata().withItems(pod1, pod2)\n"
"                                .build())\n"
"                .always();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:192
msgid "You can also use the `setup` attribute on the `@WithKubernetesTestServer` annotation to provide a class that will configure the `KubernetesServer` instance:"
msgstr "また、 `@WithKubernetesTestServer` アノテーションの `setup` 属性を使用して、 `KubernetesServer` インスタンスを設定するクラスを提供することもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:198
#, no-wrap
msgid ""
"@WithKubernetesTestServer(setup = MyTest.Setup.class)\n"
"@QuarkusTest\n"
"public class MyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:200
#, no-wrap
msgid "    public static class Setup implements Consumer<KubernetesServer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:207
#, no-wrap
msgid ""
"        @Override\n"
"        public void accept(KubernetesServer server) {\n"
"          server.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"            .andReturn(200, new PodList()).always();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:210
#, no-wrap
msgid ""
"    // tests\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:213
msgid "Alternately, you can create an extension of the `KubernetesServerTestResource` class to ensure all your `@QuarkusTest` enabled test classes share the same mock server setup via the `QuarkusTestResource` annotation:"
msgstr "または、 `KubernetesServerTestResource` クラスの拡張を作成して、 `@QuarkusTest` が有効なすべてのテストクラスが `QuarkusTestResource` アノテーションを介して同じモックサーバーセットアップを共有するようにすることもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:217
#, no-wrap
msgid "public class CustomKubernetesMockServerTestResource extends KubernetesServerTestResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:225
#, no-wrap
msgid ""
"    @Override\n"
"    protected void configureServer() {\n"
"        super.configureServer();\n"
"        server.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"          .andReturn(200, new PodList()).always();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:228
msgid "and use this in your other test classes as follows:"
msgstr "そして、これを次のように他のテストクラスで使用します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:233
#, no-wrap
msgid ""
"@QuarkusTestResource(CustomKubernetesMockServerTestResource.class)\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:236
#, no-wrap
msgid ""
"    //tests will now use the configured server...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:239
#, no-wrap
msgid "Note on implementing or extending generic types"
msgstr "ジェネリック型の実装または拡張に関する注意"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:245
msgid "Due to the restrictions imposed by GraalVM, extra care needs to be taken when implementing or extending generic types provided by the client if the application is intended to work in native mode.  Essentially every implementation or extension of generic classes such as `Watcher`, `ResourceHandler` or `CustomResource` needs to specify their associated Kubernetes model class (or, in the case of `CustomResource`, regular Java types) at class definition time.  To better understand this, suppose we want to watch for changes to Kubernetes `Pod` resources.  There are a couple ways to write such a `Watcher` that are guaranteed to work in native:"
msgstr "GraalVMによって課せられた制限のため、アプリケーションがネイティブモードで動作することを意図している場合、 クライアントによって提供されるジェネリック型を実装または拡張する際には特別な注意が必要です。基本的に、  `Watcher` 、 `ResourceHandler` 、 `CustomResource` などのジェネリッククラスのすべての実装または拡張は、クラス定義時に関連するKubernetesモデルクラス（または、 `CustomResource` の場合は通常のJavaタイプ）を指定する必要があります。 よく理解するために、例えばKubernetesの `Pod` リソースへの変更を監視するとします。 ネイティブでの動作が保証されているこのような `Watcher` を作成するには、いくつかの方法があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:253
#, no-wrap
msgid ""
"client.pods().watch(new Watcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:259
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:262
msgid "or"
msgstr "or"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:270
#, no-wrap
msgid ""
"public class PodResourceWatcher implements Watcher<Pod> {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:276
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:317
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:278
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:291
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:281
#, no-wrap
msgid "client.pods().watch(new PodResourceWatcher());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:284
msgid "Note that defining the generic type via a class hierarchy similar to the following example will also work correctly:"
msgstr "以下の例のようにクラス階層を介してジェネリック型を定義した場合も、正しく動作することに注目してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:289
#, no-wrap
msgid ""
"public abstract class MyWatcher<S> implements Watcher<S> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:299
#, no-wrap
msgid ""
"client.pods().watch(new MyWatcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:303
msgid "The following example will **not** work in native mode because the generic type of watcher cannot be determined by looking at the class and method definitions thus making Quarkus unable to properly determine the Kubernetes model class for which reflection registration is needed:"
msgstr "以下の例では、クラスやメソッドの定義を見てウォッチャーのジェネリック型を判断できないため、Quarkusはリフレクション登録が必要なKubernetesモデルクラスを適切に判断できないため、ネイティブモードでは動作 *しません* 。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:311
#, no-wrap
msgid ""
"public class ResourceWatcher<T extends HasMetadata> implements Watcher<T> {\n"
"    @Override\n"
"    public void eventReceived(Action action, T resource) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:319
#, no-wrap
msgid "client.pods().watch(new ResourceWatcher<Pod>());\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:322
#, no-wrap
msgid "Note on using Elliptic Curve keys"
msgstr "楕円曲線鍵使用時の注意点"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:325
msgid "Please note that if you would like to use Elliptic Curve keys with Kubernetes Client then adding a BouncyCastle PKIX dependency is required:"
msgstr "なお、Kubernetes Clientで楕円曲線鍵を使用したい場合は、BouncyCastle PKIXの依存関係を追加する必要があります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:333
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.bouncycastle</groupId>\n"
"    <artifactId>bcpkix-jdk15on</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:339
#, no-wrap
msgid "implementation(\"org.bouncycastle:bcpkix-jdk15on\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:342
msgid "Note that internally an `org.bouncycastle.jce.provider.BouncyCastleProvider` provider will be registered if it has not already been registered."
msgstr "内部では、`org.bouncycastle.jce.provider.BouncyCastleProvider` プロバイダーがまだ登録されていない場合、それが登録されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:344
msgid "You can have this provider registered as described in the xref:security-customization.adoc#bouncy-castle[BouncyCastle] or xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] sections."
msgstr "xref:security-customization.adoc#bouncy-castle[BouncyCastle] または xref:security-customization.adoc#bouncy-castle-fips[BouncyCastle FIPS] セクションの説明に従って、このプロバイダーを登録できます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:345
#, no-wrap
msgid "Access to the Kubernetes API"
msgstr "Kubernetes APIへのアクセス"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:349
msgid "In many cases in order to access the Kubernetes API server a `ServiceAccount`, `Role` and `RoleBinding` will be necessary.  An example that allows listing all pods could look something like this:"
msgstr "多くの場合、Kubernetes API サーバーにアクセスするには `ServiceAccount` 、 `Role` 、 `RoleBinding` が必要になります。すべてのPodをリスト可能な例は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:352
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:358
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:368
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: Role\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"rules:\n"
"  - apiGroups: [\"\"]\n"
"    resources: [\"pods\"]\n"
"    verbs: [\"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:382
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"roleRef:\n"
"  kind: Role\n"
"  name: <applicationName>\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    name: <applicationName>\n"
"    namespace: <namespace>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:386
msgid "Replace `<applicationName>` and `<namespace>` with your values.  Have a look at https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[Configure Service Accounts for Pods] to get further information."
msgstr "`<applicationName>` と `<namespace>` は値に置き換えてください。 link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[PodのService Accountの設定] を参照して、詳細な情報を入手してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:387
#, no-wrap
msgid "OpenShift Client"
msgstr "OpenShiftクライアント"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:392
msgid "If the targeted Kubernetes cluster is an OpenShift cluster, it is possible to access it through the `openshift-client` extension, in a similar way. This leverages the dedicated fabric8 openshift client, and provides access to `OpenShift` proprietary objects (e.g. `Route`, `ProjectRequest`, `BuildConfig` ...)"
msgstr "対象となるKubernetesクラスターがOpenShiftクラスターであれば、同様の方法で、 `openshift-client` エクステンションを利用してアクセスすることが可能です。これは専用の fabric8 openshift クライアントを利用し、 `OpenShift` 固有のオブジェクト(例: `Route` , `ProjectRequest` , `BuildConfig` ...)へのアクセスを提供します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:395
msgid "Note that the configuration properties are shared with the `kubernetes-client` extension. In particular, they have the same `quarkus.kubernetes-client` prefix."
msgstr "設定プロパティーは `kubernetes-client` エクステンションと共有されていることに注意してください。特に、これらは同じ `quarkus.kubernetes-client` プレフィックスを持っています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:397
msgid "Add the extension with:"
msgstr "以下のコマンドでエクステンションを追加します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:402
msgid "Note that `openshift-client` extension has a dependency on the `kubernetes-client` extension."
msgstr "`openshift-client` エクステンションは `kubernetes-client` エクステンションに依存していることに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:404
msgid "To use the client, inject an `OpenShiftClient` instead of the `KubernetesClient`:"
msgstr "クライアントを使用するには、 `KubernetesClient` の代わりに `OpenShiftClient` を注入します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:409
#, no-wrap
msgid ""
"@Inject\n"
"private OpenShiftClient openshiftClient;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:412
msgid "If you need to override the default `OpenShiftClient`, provide a producer such as:"
msgstr "デフォルトの `OpenShiftClient` を上書きする必要がある場合は、次のようなプロデューサーを提供してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:417
#, no-wrap
msgid ""
"@Singleton\n"
"public class OpenShiftClientProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:424
#, no-wrap
msgid ""
"    @Produces\n"
"    public OpenShiftClient openshiftClient() {\n"
"        // here you would create a custom client\n"
"        return new DefaultOpenShiftClient();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:427
msgid "Mock support is also provided in a similar fashion:"
msgstr "モックサポートも同様の方法で提供されています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:433
#, no-wrap
msgid ""
"@QuarkusTestResource(OpenShiftMockServerTestResource.class)\n"
"@QuarkusTest\n"
"public class OpenShiftClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:437
#, no-wrap
msgid ""
"    @MockServer\n"
"    private OpenShiftMockServer mockServer;\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:441
msgid "Or by using the `@WithOpenShiftTestServer` similar to the `@WithKubernetesTestServer` explained in the previous section:"
msgstr "または、前のセクションで説明した `@WithKubernetesTestServer` と同様の `@WithOpenShiftTestServer` を使用することによって:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:447
#, no-wrap
msgid ""
"@WithOpenShiftTestServer\n"
"@QuarkusTest\n"
"public class OpenShiftClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:451
#, no-wrap
msgid ""
"    @OpenShiftTestServer\n"
"    private OpenShiftServer mockOpenShiftServer;\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:454
msgid "To use this feature, you have to add a dependency on `quarkus-test-openshift-client`:"
msgstr "この機能を使用するには、 `quarkus-test-openshift-client` に依存関係を追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:463
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-openshift-client</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:469
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-openshift-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/kubernetes-client.adoc:471
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
