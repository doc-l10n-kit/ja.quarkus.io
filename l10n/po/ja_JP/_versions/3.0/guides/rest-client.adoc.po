msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/rest-client.adoc:6
#, no-wrap
msgid "Using the REST Client"
msgstr "REST クライアントの利用"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:14
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr "このガイドは、 Quarkus 2.8 までデフォルトの JAX-RS 実装であった link:https://resteasy.dev[RESTEasy Classic]と互換性のある REST Client に関するものです。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:18
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr "現在では、従来のブロック型ワークロードとリアクティブ型ワークロードを同様にサポートする RESTEasy Reactive の使用が推奨されています。 RESTEasy Reactive の詳細については、 link:rest-client-reactive.html[REST Client Reactivevガイド]、サーバーサイドについては、 link:rest-json.html[REST JSON 入門ガイド]、またはより詳細な link:resteasy-reactive.html[RESTEasy Reactive ガイド]を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:22
msgid "This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs with very little effort."
msgstr "このガイドでは、 RESTEasy REST Client を使用することで手間をかけずに REST API とやりとりする方法を説明します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:24
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr "サーバーサイドで JSON REST API を書く必要がある場合は、link:rest-json.html[JSON REST API ガイド]を参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:29
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:37
msgid "The solution is located in the `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "ソリューションは `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:38
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:47
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:49
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr "REST サーバーのサポートのための `resteasy` と `resteasy-jackson` のエクステンション。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:50
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr "REST クライアントのサポートのための `rest-client` と `rest-client-jackson` のエクステンション。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:53
msgid "If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、 `rest-client` と `rest-client-jackson` のエクステンションをプロジェクトに追加することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:58
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_versions/3.0/guides/rest-client.adoc:60
#: upstream/_versions/3.0/guides/rest-client.adoc:656
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:70
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/rest-client.adoc:73
#: upstream/_versions/3.0/guides/rest-client.adoc:668
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:77
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:79
#, no-wrap
msgid "Setting up the model"
msgstr "モデルのセットアップ"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:83
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供する REST API の一部を利用する方法を紹介します。最初に、使用する `Extension` モデルを POJO の形式で作成します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:85
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:89
#: upstream/_versions/3.0/guides/rest-client.adoc:111
#: upstream/_versions/3.0/guides/rest-client.adoc:158
#: upstream/_versions/3.0/guides/rest-client.adoc:274
#: upstream/_versions/3.0/guides/rest-client.adoc:309
#: upstream/_versions/3.0/guides/rest-client.adoc:352
#: upstream/_versions/3.0/guides/rest-client.adoc:380
#: upstream/_versions/3.0/guides/rest-client.adoc:435
#: upstream/_versions/3.0/guides/rest-client.adoc:463
#: upstream/_versions/3.0/guides/rest-client.adoc:528
#: upstream/_versions/3.0/guides/rest-client.adoc:562
#: upstream/_versions/3.0/guides/rest-client.adoc:688
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:91
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:93
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:98
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:100
#: upstream/_versions/3.0/guides/rest-client.adoc:373
#: upstream/_versions/3.0/guides/rest-client.adoc:411
#: upstream/_versions/3.0/guides/rest-client.adoc:749
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:103
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:104
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:107
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "RESTEasy REST Client の利用は、適切な JAX-RS と MicroProfile アノテーションを使用してインターフェースを作成するのと同じくらい簡単です。今回の場合、インタフェースは `src/main/java/org/acme/rest/client/ExtensionsService.java` として、以下のような内容で作成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:114
#: upstream/_versions/3.0/guides/rest-client.adoc:361
#: upstream/_versions/3.0/guides/rest-client.adoc:444
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:119
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:123
#: upstream/_versions/3.0/guides/rest-client.adoc:170
#: upstream/_versions/3.0/guides/rest-client.adoc:365
#: upstream/_versions/3.0/guides/rest-client.adoc:450
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:127
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:130
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:132
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:135
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:136
msgid "`@Path`, `@GET` and `@QueryParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr "`@Path` と `@GET` 、 `@QueryParam` はサービスへのアクセス方法を定義するために使用される標準的な JAX-RS アノテーションです。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:143
msgid "When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "`quarkus-rest-client-jackson` や `quarkus-rest-client-jsonb` などの JSON エクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkus はほとんどの戻り値に `application/json` メディアタイプをデフォルトで使用します( `String` や `File` などのよく知られたタイプには例外があり、それぞれ `text/plain` と `application/octet-stream` がデフォルトとなっています)。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:146
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "デフォルトで JSON を使用したくない場合は、 `quarkus.resteasy-json.default-json=false` を設定することで、デフォルトが自動ネゴシエーション動作に戻ります。この設定を行った場合、 JSON を使用するためには、エンドポイントに `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` を追加する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:149
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "JSON のデフォルトに頼らない場合は、エンドポイントに `@Produces` や `@Consumes` のアノテーションを付けて、期待するコンテンツタイプを正確に定義することを強く推奨します。これにより、ネイティブ実行可能ファイルに含まれる JAX-RS プロバイダー ( コンバーターとみなすことができます) の数を絞り込むことができるようになります。"

#. type: Title ===
#: upstream/_versions/3.0/guides/rest-client.adoc:151
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:154
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr "GET リクエストにパスパラメーターが必要な場合は、 `@QueryParam` の代わりに、または追加で、 `@PathParam(\"parameter-name\")` を利用することができます。パスとクエリパラメーターは、必要に応じて組み合わせることができます。以下のモックの例を参照してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:162
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:166
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:175
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:178
#, no-wrap
msgid "Create the configuration"
msgstr "設定の作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:182
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:188
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".scope=jakarta.inject.Singleton # // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:192
msgid "Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr "この設定を行うと、 `ExtensionsService` を使用して実行されるすべてのリクエストは、ベース URL として `https://stage.code.quarkus.io` を使用します。上記の設定を使用して、 `io.quarkus:quarkus-rest-client` の値で `ExtensionsService` の `getById` メソッドを呼び出すと、 `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client` に対して HTTP GET リクエストが行われます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:194
msgid "Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.  The default scope can also be defined on the interface."
msgstr "この設定を行うと、 `ExtensionsService` のデフォルトのスコープは `@Singleton` になります。サポートされているスコープの値は `@Singleton` 、 `@Dependent` 、 `@ApplicationScoped` および `@RequestScoped` です。デフォルトのスコープは `@Dependent` です。デフォルトのスコープはインターフェース上で定義することもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:196
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した `ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:200
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr "クライアントを設定の設定には、標準の MicroProfile Rest Client のプロパティー記法を使用することもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:205
#, no-wrap
msgid ""
"org.acme.rest.client.ExtensionsService/mp-rest/url=https://stage.code.quarkus.io/api\n"
"org.acme.rest.client.ExtensionsService/mp-rest/scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:208
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr "プロパティーが Quarkus 記法と MicroProfile 記法の両方で指定されている場合、 Quarkus 記法が優先されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:212
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、 `@RegisterRestClient` `configKey` プロパティーを使用して、インターフェースの完全修飾名とは別の設定ルートを使用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:220
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:227
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=jakarta.inject.Singleton\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/rest-client.adoc:229
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr "ホスト名の検証を無効にする"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:232
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "特定のRESTクライアントのSSLホスト名検証を無効にするには、次のプロパティーを構成に追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:236
#, no-wrap
msgid "quarkus.rest-client.extensions-api.verify-host=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:240
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "この設定は、SSLホスト名検証を無効にするため、本番運用では使用しないでください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:243
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr "さらに、カスタムのホスト名検証ストラテジーを使用するようにRESTクライアントを設定することができます。必要なのは、インターフェース `javax.net.ssl.HostnameVerifier` を実装したクラスを用意し、以下のプロパティを設定に追加することだけです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:247
#, no-wrap
msgid "quarkus.rest-client.extensions-api.hostname-verifier=<full qualified custom hostname verifier class name>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:252
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr "Quarkus REST クライアントは、 `io.quarkus.restclient.NoopHostnameVerifier` と呼ばれるホスト名検証を無効にするための組込ホスト名検証ストラテジーを提供しています。"

#. type: Title ===
#: upstream/_versions/3.0/guides/rest-client.adoc:254
#, no-wrap
msgid "Disabling SSL verifications"
msgstr "SSL の検証の無効化"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:257
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr "全ての SSL の検証を無効にするには、以下の内容を設定に追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:261
#, no-wrap
msgid "quarkus.tls.trust-all=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:265
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr "この設定は、あらゆる種類の SSL 検証を無効にするため、実運用環境では使用しないでください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:267
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr "JAX-RSリソースの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:270
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを以下の内容で作成してください:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:277
#: upstream/_versions/3.0/guides/rest-client.adoc:390
#: upstream/_versions/3.0/guides/rest-client.adoc:473
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:282
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:285
#: upstream/_versions/3.0/guides/rest-client.adoc:393
#: upstream/_versions/3.0/guides/rest-client.adoc:478
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:289
#: upstream/_versions/3.0/guides/rest-client.adoc:397
#: upstream/_versions/3.0/guides/rest-client.adoc:482
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:296
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:299
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr "標準の CDI `@Inject` アノテーションに加えて、 `ExtensionsService` を注入するために MicroProfile `@RestClient` アノテーションを使用する必要があることに注意してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:300
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:304
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、 `testExtensionIdEndpoint` メソッドの内容を以下のように変更します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:314
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:317
#, no-wrap
msgid ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:320
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:324
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:338
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"                \"[0].name\", is(\"REST Client Classic\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:341
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:343
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:348
msgid "The rest client supports asynchronous rest calls.  Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "REST クライアントは非同期の REST 呼び出しをサポートしています。非同期のサポートには、 `CompletionStage` を返却するか `Uni` ( `quarkus-rest-client-mutiny` のエクステンションが必要です) を返却するかの2つのパターンがあります。 `ExtensionsService` REST インタフェースに `getByIdAsync` メソッドを追加してみます。コードは以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:355
#: upstream/_versions/3.0/guides/rest-client.adoc:383
#: upstream/_versions/3.0/guides/rest-client.adoc:438
#: upstream/_versions/3.0/guides/rest-client.adoc:466
#: upstream/_versions/3.0/guides/rest-client.adoc:531
#, no-wrap
msgid ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:358
#: upstream/_versions/3.0/guides/rest-client.adoc:441
#: upstream/_versions/3.0/guides/rest-client.adoc:534
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:368
#: upstream/_versions/3.0/guides/rest-client.adoc:548
#: upstream/_versions/3.0/guides/rest-client.adoc:598
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:371
#: upstream/_versions/3.0/guides/rest-client.adoc:551
#: upstream/_versions/3.0/guides/rest-client.adoc:601
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:376
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:387
#: upstream/_versions/3.0/guides/rest-client.adoc:470
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:403
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:409
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:414
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:428
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"            \"[0].name\", is(\"REST Client Classic\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:431
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:446
#: upstream/_versions/3.0/guides/rest-client.adoc:475
#: upstream/_versions/3.0/guides/rest-client.adoc:540
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:452
#: upstream/_versions/3.0/guides/rest-client.adoc:485
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:456
#: upstream/_versions/3.0/guides/rest-client.adoc:555
#: upstream/_versions/3.0/guides/rest-client.adoc:605
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:459
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:492
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/rest-client.adoc:495
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:499
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:503
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:508
#, no-wrap
msgid "@Inject @RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:510
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:513
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:518
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、サービスのメソッドを呼び出して再実行する必要があります。この違いは、Mutinyとその合意方法の怠惰性の側面から来ています。これについての詳細は Mutiny の https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:519
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:522
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr "MicroProfile REST クライアントでは、 `ClientHeadersFactory` を `@RegisterClientHeaders` アノテーションで登録することで、リクエストヘッダーを修正することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:524
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr "`ExtensionsResource` REST インタフェースに `@RegisterClientHeaders` アノテーションを追加して、 `RequestUUIDHeaderFactory` クラスを指すようにします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:538
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:545
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:558
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr "`RequestUUIDHeaderFactory` は以下ようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:564
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:569
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.core.MultivaluedHashMap;\n"
"import jakarta.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:572
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:580
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:584
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/rest-client.adoc:586
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:589
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr "また、カスタムファクトリーを指定せずに `@RegisterClientHeaders` アノテーションを使用することもできます。その場合は、 `DefaultClientHeadersFactoryImpl` ファクトリーが使用され、 `org.eclipse.microprofile.rest.client.propagateHeaders` プロパティーに記載されているすべてのヘッダーが修正されます。個々のヘッダー名はコンマで区切られています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:595
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:611
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:613
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:616
msgid "Run the application with:"
msgstr "アプリケーションを実行します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:620
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client を開きます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:622
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr "REST Client extension に関する基本情報を含む JSON オブジェクトが表示されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:624
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:628
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、`java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:630
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:633
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr "REST クライアントと RESTEasy のやりとり"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:637
msgid "In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr "Quarkus では、REST Client エクステンションと xref:rest-json.adoc[RESTEasy エクステンション]は同じインフラストラクチャーを共有しています。この考察の重要な結果の1つは、 JAX-RS の意味においての同じプロバイダーリストを共有していることです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:640
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方を横取りしますが、これは望ましい動作ではない可能性があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:642
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダーに制約を設けることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:644
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr "プロバイダーに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* の呼び出しのみを考慮します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:645
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr "プロバイダーに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* の呼び出しのみを考慮します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:647
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:652
msgid "Setting up a mock HTTP server, against which tests are run, is a common testing pattern.  Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "テストを実行する際にモック HTTP サーバーを設定することは、一般的なテストパターンです。そのようなサーバーの例としては、 link:http://wiremock.org/[Wiremock] や link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] があります。このセクションでは、ここまでで開発した `ExtensionsService` をテストするために Wiremock を活用する方法を示します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:654
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "最初に、 Wiremock をテストの依存関係として追加する必要があります。 Maven プロジェクトの場合は以下のようになります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:664
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:666
#: upstream/_versions/3.0/guides/rest-client.adoc:673
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr "適切な Wiremock のバージョンを使用します。利用可能なすべてのバージョンは link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[ここ] で見つけることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:671
#, no-wrap
msgid "testImplementation(\"com.github.tomakehurst:wiremock-jre8:$wiremockVersion\") <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:677
msgid "In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration values that Quarkus will use."
msgstr "Quarkus のテストにおいて、 テストの実行前にサービスを開始する必要がある場合、 サービスを開始し Quarkus が使用する設定値を提供できる `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を指定するために `@io.quarkus.test.common.QuarkusTestResource` アノテーションを使用します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:681
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "`@QuarkusTestResource` の詳細については、 link:getting-started-testing.html#quarkus-test-resource[ドキュメントのこの記述]を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:684
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "`WiremockExtensions` という名前で、 `QuarkusTestResourceLifecycleManager` の実装を以下のように作成します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:691
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:694
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:696
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:698
#, no-wrap
msgid "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:700
#, no-wrap
msgid "    private WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:705
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:715
#, no-wrap
msgid ""
"        wireMockServer.stubFor(get(urlEqualTo(\"/extensions?id=io.quarkus:quarkus-rest-client\"))   // <4>\n"
"                .willReturn(aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                            \"[{\" +\n"
"                            \"\\\"id\\\": \\\"io.quarkus:quarkus-rest-client\\\",\" +\n"
"                            \"\\\"name\\\": \\\"REST Client Classic\\\"\" +\n"
"                            \"}]\"\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:717
#, no-wrap
msgid "        wireMockServer.stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:720
#, no-wrap
msgid ""
"        return Collections.singletonMap(\"quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", wireMockServer.baseUrl()); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:728
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:731
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "Wiremock パッケージのメソッドを静的にインポートすることで、テストが読みやすくなります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:732
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr "`start` メソッドは、テストを実行する前に Quarkus によって呼び出され、テスト実行中に適用される設定プロパティーの `Map` を返します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:733
msgid "Launch Wiremock."
msgstr "Wiremock を起動します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:734
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "`/extensions?id=io.quarkus:quarkus-rest-client` への呼び出しに対して特定のレスポンスを返すよう、Wiremock のスタブを設定します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:735
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "スタブ化されていないすべての HTTP 呼び出しは、実際のサービスを呼び出すことで処理されます。これはデモンストレーションを目的として行われているものであり、通常は実際のテストでは発生しません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:737
msgid "As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "`start` メソッドはテストに適用される設定を返すため、 `ExtensionsResource` の実装で使用されるベース URL を制御する rest-client プロパティーを、Wiremock がリクエストの受信を待ち受けているベース URL に設定します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:738
msgid "When all tests have finished, shutdown Wiremock."
msgstr "すべてのテストが終了したら、Wiremock を終了します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:741
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr "`ExtensionsResourceTest` クラスには、以下のようなアノテーションが必要です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rest-client.adoc:747
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/rest-client.adoc:754
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr "`@QuarkusTestResource` は `ExtensionsResourceTest` だけでなく、すべてのテストに適用されます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rest-client.adoc:756
#, no-wrap
msgid "Further reading"
msgstr "参考資料"

#. type: Plain text
#: upstream/_versions/3.0/guides/rest-client.adoc:758
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
