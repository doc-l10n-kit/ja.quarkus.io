msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:6
#, no-wrap
msgid "Build, Sign and Encrypt JSON Web Tokens"
msgstr "JSONウェブトークン (JWT) のビルド、署名、暗号化"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:11
msgid "According to link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519], JSON Web Token (JWT) is a compact, URL-safe means of representing claims which are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code(MAC) and/or encrypted."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519] によると、JSON Web Token (JWT) は、使用される JSON オブジェクトとしてエンコードされたクレームを表すコンパクトで URL セーフな手段です。JSON Web Signature (JWS) 構造のペイロードとして、または JSON Web Encryption (JWE) 構造のプレーンテキストとして、クレームにデジタル署名したり、メッセージ認証コード (MAC) で完全に保護したり、暗号化したりできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:13
msgid "Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification."
msgstr "クレームへの署名は、クレームを保護するために最も頻繁に使用されます。今日において JWT トークンとして知られているものは、通常、link:https://tools.ietf.org/html/rfc7515[JSON Web 署名] の仕様で説明されている手順を使用して、JSON 形式でクレームに署名することによって生成されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:15
msgid "However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims."
msgstr "ただし、クレームが機密である場合は、link:https://tools.ietf.org/html/rfc7516[JSON Web 暗号化] の仕様に記載されている手順に従って暗号化されたクレームを含む JWT を生成することにより、機密性を保証できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:17
msgid "Finally, both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr "さらに、クレームに署名してからネストされた JWT トークンを暗号化することにより、クレームの機密性と整合性の両方を強化できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:19
msgid "SmallRye JWT Build provides an API for securing JWT claims using all of these options. link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] is used internally to support this API."
msgstr "SmallRye JWT Build は、これらすべてのオプションを使用して JWT クレームを保護するための API を提供します。link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] は、この API をサポートするために内部で使用されます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:20
#, no-wrap
msgid "Dependency"
msgstr "依存関係"

#. type: Block title
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:23
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:29
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:32
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:35
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-jwt-build\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:39
msgid "Note you can use Smallrye JWT Build API without having to create MicroProfile JWT endpoints supported by `quarkus-smallrye-jwt`.  It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr "`quarkus-smallrye-jwt` でサポートされている MicroProfile JWT エンドポイントを作成しなくても、Smallrye JWT Build API を使用できることに留意してください。MP JWT エンドポイントが JWT トークンを生成する必要がない場合は、`quarkus-smallrye-jwt` から除外することもできます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:40
#, no-wrap
msgid "Create JwtClaimsBuilder and set the claims"
msgstr "JwtClaimsBuilder の作成とクレームの設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:43
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr "最初のステップとして、以下のオプションの 1 つを使用して `JwtClaimsBuilder` を初期化し、それにいくつかのクレームを追加します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:58
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import jakarta.json.Json;\n"
"import jakarta.json.JsonObject;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.build.JwtClaimsBuilder;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"...\n"
"// Create an empty builder and add some claims\n"
"JwtClaimsBuilder builder1 = Jwt.claims();\n"
"builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n"
"// Or start typing the claims immediately:\n"
"// JwtClaimsBuilder builder1 = Jwt.upn(\"Alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:61
#, no-wrap
msgid ""
"// Builder created from the existing claims\n"
"JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:64
#, no-wrap
msgid ""
"// Builder created from a map of claims\n"
"JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:70
#, no-wrap
msgid ""
"// Builder created from JsonObject\n"
"JsonObject userName = Json.createObjectBuilder().add(\"username\", \"Alice\").build();\n"
"JsonObject userAddress = Json.createObjectBuilder().add(\"city\", \"someCity\").add(\"street\", \"someStreet\").build();\n"
"JsonObject json = Json.createObjectBuilder(userName).add(\"address\", userAddress).build();\n"
"JwtClaimsBuilder builder4 = Jwt.claims(json);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:74
#, no-wrap
msgid ""
"// Builder created from JsonWebToken\n"
"@Inject JsonWebToken token;\n"
"JwtClaimsBuilder builder5 = Jwt.claims(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:77
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr "これは fluent API であるため、ビルダーの初期化は fluent API シーケンスの一部として実行できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:79
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set."
msgstr "ビルダーは、`iat` (発行日) を現在の時刻に設定し、`exp` (有効期限) を現在の時刻から 5 分後に設定し (`smallrye.jwt.new-token.lifespan` プロパティーでカスタマイズ可能)、未設定の場合は `jti` (一意のトークン識別子) クレームも設定します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:81
msgid "One can also configure `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` properties and skip setting the issuer and audience directly with the builder API."
msgstr "`smallrye.jwt.new-token.issuer` プロパティーと `smallrye.jwt.new-token.audience` プロパティーを設定し、ビルダー API を使用した発行者とオーディエンスの直接設定を省略することもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:83
msgid "The next step is to decide how to secure the claims."
msgstr "次のステップでは、クレームの保護方法を決定します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:85
#, no-wrap
msgid "Sign the claims"
msgstr "クレームへの署名"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:88
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr "クレームは、すぐに署名するか、 `JSON Web Signature` ヘッダーが設定された後に署名できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:93
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:148
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:214
#, no-wrap
msgid ""
"import io.smallrye.jwt.build.Jwt;\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:97
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property.\n"
"// No 'jws()' transition is necessary. Default algorithm is RS256.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").sign();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:101
#, no-wrap
msgid ""
"// Set the headers and sign the claims with an RSA private key loaded in the code (the implementation of this method is omitted).\n"
"// Note a 'jws()' transition to a 'JwtSignatureBuilder', Default algorithm is RS256.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jws().keyId(\"kid1\").header(\"custom-header\", \"custom-value\").sign(getPrivateKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:104
msgid "Note the `alg` (algorithm) header is set to `RS256` by default. Signing key identifier (`kid` header) does not have to be set if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr "`alg` (アルゴリズム) ヘッダーはデフォルトで `RS256` に設定されていることに注意してください。 `kid` プロパティーを含む単一の JSON Web Key (JWK) を使用する場合、署名キー識別子 ( `kid` ヘッダー) を設定する必要はありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:107
msgid "RSA and Elliptic Curve (EC) private keys as well as symmetric secret keys can be used to sign the claims.  `ES256` and `HS256` are the default algorithms for EC private and symmetric key algorithms respectively."
msgstr "クレームの署名には、RSAや楕円曲線（EC）の秘密鍵のほか、対称性のある秘密鍵も使用できます。 `ES256` と `HS256` は、それぞれEC秘密鍵と対称鍵アルゴリズムのためのdefautアルゴリズムです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:109
msgid "You can customize the signature algorithm, for example:"
msgstr "署名アルゴリズムはカスタマイズできます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:114
#, no-wrap
msgid ""
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:117
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").jws().algorithm(SignatureAlgorithm.PS256).sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:120
msgid "Alternatively you can use a `smallrye.jwt.new-token.signature-algorithm` property:"
msgstr "または、 `smallrye.jwt.new-token.signature-algorithm` プロパティーを使用することもできます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:124
#, no-wrap
msgid "smallrye.jwt.new-token.signature-algorithm=PS256\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:127
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:191
msgid "and write a simpler API sequence:"
msgstr "より単純な API シーケンスを記述します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:131
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:195
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:134
#, no-wrap
msgid ""
"// Sign the claims using an RSA private key loaded from the location set with a 'smallrye.jwt.sign.key.location' property. Algorithm is PS256.\n"
"String jwt = Jwt.upn(\"Alice\").sign();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:137
msgid "Note the `sign` step can be combined with the <<encrypt-claims, encrypt>> step to produce `inner-signed and encrypted` tokens, see <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr "`sign` ステップは、<<encrypt-claims, encrypt>> ステップと組み合わせて `inner-signed and encrypted` を生成することもできることに注意してください。詳細は、<<innersign-encrypt-claims, クレームへの署名とネストされた JWT トークンの暗号化>> セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:139
#, no-wrap
msgid "Encrypt the claims"
msgstr "クレームの暗号化"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:143
msgid "The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.  The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition given that the API has been optimized to support signing and inner-signing of the claims."
msgstr "クレームは、すぐに暗号化することも、 `JSON Web Encryption` ヘッダーを署名するのと同じ方法で設定した後に暗号化することもできます。唯一の小さな違いは、API がクレームの署名と内部署名をサポートするように最適化されている場合、クレームの暗号化には常に `jwe()` `JwtEncryptionBuilder` 遷移が必要になることです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:151
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property. Default key encryption algorithm is RSA-OAEP.\n"
"String jwt1 = Jwt.claims(\"/tokenClaims.json\").jwe().encrypt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:154
#, no-wrap
msgid ""
"// Set the headers and encrypt the claims with an RSA public key loaded in the code (the implementation of this method is omitted).  Default key encryption algorithm is A256KW.\n"
"String jwt2 = Jwt.claims(\"/tokenClaims.json\").jwe().header(\"custom-header\", \"custom-value\").encrypt(getSecretKey());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:157
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP` and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr "デフォルトでは、`alg` (キー管理アルゴリズム) ヘッダーが `RSA-OAEP` に設定され、`enc` (コンテンツ暗号化ヘッダー) が `A256GCM` に設定されていることに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:160
msgid "RSA and Elliptic Curve (EC) public keys as well as symmetric secret keys can be used to encrypt the claims.  `ECDH-ES` and `A256KW` are the default algorithms for EC public and symmetric key encryption algorithms respectively."
msgstr "RSA および Elliptic Curve (EC) 公開鍵、および対称秘密鍵を使用して、クレームを暗号化できます。`ECDH-ES` と `A256KW` は、それぞれ EC 公開鍵と対称鍵の暗号化アルゴリズムのデフォルトアルゴリズムです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:162
msgid "Note two encryption operations are done when creating an encrypted token:"
msgstr "暗号化されたトークンを作成する際には、2つの暗号化処理が行われることに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:164
msgid "the generated content encryption key is encrypted by the key supplied with the API using the key encryption algorithm such as `RSA-OAEP`"
msgstr "生成されたコンテンツ暗号化キーは、`RSA-OAEP` などのキー暗号化アルゴリズムを使用して API で提供されるキーによって暗号化されます"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:165
msgid "the claims are encrypted by the generated content encryption key using the content encryption algorithm such as `A256GCM`."
msgstr "クレームは、`A256GCM` などのコンテンツ暗号化アルゴリズムを使用して生成されたコンテンツ暗号化キーによって暗号化されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:167
msgid "You can customize the key and content encryption algorithms, for example:"
msgstr "キーとコンテンツの暗号化アルゴリズムはカスタマイズできます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:173
#, no-wrap
msgid ""
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.ContentEncryptionAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:180
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").jwe()\n"
"    .keyAlgorithm(KeyEncryptionAlgorithm.RSA_OAEP_256)\n"
"    .contentAlgorithm(ContentEncryptionAlgorithm.A256CBC_HS512)\n"
"    .encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:183
msgid "Alternatively you can use `smallrye.jwt.new-token.key-encryption-algorithm` and `smallrye.jwt.new-token.content-encryption-algorithm` properties to customize the key and content encryption algorithms:"
msgstr "また、 `smallrye.jwt.new-token.key-encryption-algorithm` と `smallrye.jwt.new-token.content-encryption-algorithm` のプロパティでキーとコンテンツの暗号化アルゴリズムをカスタマイズすることが可能です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:188
#, no-wrap
msgid ""
"smallrye.jwt.new-token.key-encryption-algorithm=RSA-OAEP-256\n"
"smallrye.jwt.new-token.content-encryption-algorithm=A256CBC-HS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:199
#, no-wrap
msgid ""
"// Encrypt the claims using an RSA public key loaded from the location set with a 'smallrye.jwt.encrypt.key.location' property.\n"
"// Key encryption algorithm is RSA-OAEP-256, content encryption algorithm is A256CBC-HS512.\n"
"String jwt = Jwt.subject(\"Bob\").encrypt();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:203
msgid "Note that when the token is directly encrypted by the public RSA or EC key it is not possible to verify which party sent the token.  Therefore, the secret keys should be preferred for directly encrypting the tokens, for example, when using JWT as cookies where a secret key is managed by the Quarkus endpoint with only this endpoint being both a producer and a consumer of the encrypted token."
msgstr "トークンが公開 RSA または EC キーによって直接暗号化されている場合、トークンの送信元は確認できないことに注意してください。したがって、トークンを直接暗号化するには秘密鍵を使用する必要があります。たとえば、JWT を Cookie として使用する場合、秘密鍵は Quarkus エンドポイントによって管理され、このエンドポイントのみが暗号化されたトークンのプロデューサーとコンシューマーになります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:205
msgid "If you would like to use RSA or EC public keys to encrypt the token then it is recommended to sign the token first if the signing key is available, see the next <<innersign-encrypt-claims, Sign the claims and encrypt the nested JWT token>> section."
msgstr "RSA または EC 公開鍵を使用してトークンを暗号化する場合、署名鍵が使用可能であれば最初にトークンに署名することをお勧めします。詳細については、次の<<innersign-encrypt-claims, クレームへの署名とネストされた JWT トークンの暗号化>> セクションを参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:207
#, no-wrap
msgid "Sign the claims and encrypt the nested JWT token"
msgstr "クレームへの署名とネストされた JWT トークンの暗号化"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:210
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr "クレームに署名してから、署名と暗号化の手順を組み合わせて、ネストされた JWT トークンを暗号化できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:217
#, no-wrap
msgid ""
"// Sign the claims and encrypt the nested token using the private and public keys loaded from the locations set with the 'smallrye.jwt.sign.key.location' and 'smallrye.jwt.encrypt.key.location' properties respectively. Signature algorithm is RS256, key encryption algorithm is RSA-OAEP-256.\n"
"String jwt = Jwt.claims(\"/tokenClaims.json\").innerSign().encrypt();\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:219
#, no-wrap
msgid "Fast JWT Generation"
msgstr "JWT の迅速な生成"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:222
msgid "If `smallrye.jwt.sign.key.location` or/and `smallrye.jwt.encrypt.key.location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr "`smallrye.jwt.sign.key.location` や `smallrye.jwt.encrypt.key.location` プロパティーが設定されている場合、既存のクレーム (リソース、マップ、JsonObjects) を 1 回の呼び出しで保護できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:227
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").sign();\n"
"Jwt.sign(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:230
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").jwe().encrypt();\n"
"Jwt.encrypt(\"/claims.json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:233
#, no-wrap
msgid ""
"// More compact than Jwt.claims(\"/claims.json\").innerSign().encrypt();\n"
"Jwt.signAndEncrypt(\"/claims.json\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:235
msgid "As mentioned above, `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer) and `aud` (audience) claims will be added if needed."
msgstr "上記のように、必要に応じて、 `iat` (発行日)、 `exp` (有効期限)、 `jti` (トークン識別子)、 `iss` (発行者)、および `aud` (オーディエンス) クレームが追加されます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:236
#, no-wrap
msgid "Dealing with the keys"
msgstr "キーの取り扱い"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:239
msgid "`smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties can be used to point to signing and encryption key locations. The keys can be located on the local file system, classpath, or fetched from the remote endpoints and can be in `PEM` or `JSON Web Key` (`JWK`) formats. For example:"
msgstr "`smallrye.jwt.sign.key.location` プロパティーと `smallrye.jwt.encrypt.key.location` プロパティーを使用して、署名キーと暗号化キーの場所を指定できます。キーは、ローカルファイルシステムやクラスパスに配置するか、リモートエンドポイントから取得でき、 `PEM` または `JSON Web Key` ( `JWK` ) 形式にすることができます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:244
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=privateKey.pem\n"
"smallrye.jwt.encrypt.key=publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:247
msgid "You can also use MicroProfile `ConfigSource` to fetch the keys from the external services such as link:{vault-guide}[HashiCorp Vault] or other secret managers and use `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties instead:"
msgstr "MicroProfile `ConfigSource` を使用して、link:{vault-guide}[HashiCorp Vault] や他のシークレットマネージャーなどの外部サービスからキーを取得し、代わりに `smallrye.jwt.sign.key` プロパティーと `smallrye.jwt.encrypt.key` プロパティーを使用することもできます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:252
#, no-wrap
msgid ""
"smallrye.jwt.sign.key=${private.key.from.vault}\n"
"smallrye.jwt.encrypt.key=${public.key.from.vault}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:256
msgid "where both `private.key.from.vault` and `public.key.from.vault` are the `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`.  `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` can also contain only the Base64-encoded private or public keys values."
msgstr "この場合、`private.key.from.vault` と `public.key.from.vault` はどちらも、カスタムの `ConfigSource` によって提供される `PEM` または `JWK` 形式のキー値です。`smallrye.jwt.sign.key` と `smallrye.jwt.encrypt.key` には、Base64 でエンコードされた秘密鍵または公開鍵の値のみ含めることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:258
msgid "However, please note, directly inlining the private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only if you need to fetch a signing key value from the remote secret manager."
msgstr "ただし、設定に秘密鍵を直接インライン化することはお勧めしません。リモートシークレットマネージャーから署名キー値を取得する必要がある場合にのみ、`smallrye.jwt.sign.key` プロパティーを使用してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:260
msgid "The keys can also be loaded by the code which builds the token and supplied to JWT Build API."
msgstr "キーは、JWT ビルド API に提供される、トークンをビルドするコードによってロードすることもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:262
msgid "If you need to sign and/or encrypt the token using the symmetric secret key then consider using `io.smallrye.jwt.util.KeyUtils` to generate a SecretKey of the required length."
msgstr "対称秘密鍵を使用してトークンに署名および/または暗号化する必要がある場合は、`io.smallrye.jwt.util.KeyUtils` を使用して必要な長さの秘密鍵を生成することを検討してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:264
msgid "For example, one needs to have a 64 byte key to sign using the `HS512` algorithm (`512/8`) and a 32 byte key to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr "たとえば、`HS512` アルゴリズム (`512/8`) を使用して署名するには 64 バイトのキーが必要であり、`A256KW` アルゴリズム (`256/8`) を使用してコンテンツ暗号化キーを暗号化するには 32 バイトのキーが必要です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:272
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import io.smallrye.jwt.KeyEncryptionAlgorithm;\n"
"import io.smallrye.jwt.SignatureAlgorithm;\n"
"import io.smallrye.jwt.build.Jwt;\n"
"import io.smallrye.jwt.util.KeyUtils;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:276
#, no-wrap
msgid ""
"SecretKey signingKey = KeyUtils.generateSecretKey(SignatureAlgorithm.HS512);\n"
"SecretKey encryptionKey = KeyUtils.generateSecretKey(KeyEncryptionAlgorithm.A256KW);\n"
"String jwt = Jwt.claim(\"sensitiveClaim\", getSensitiveClaim()).innerSign(signingKey).encrypt(encryptionKey);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:279
msgid "You can also consider using a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format to store a secret key on a secure file system and refer to it using either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties, for example:"
msgstr "また、`JSON Web Key` (JWK) または `JSON Web Key Set` (JWK Set) 形式を使用して秘密鍵を安全なファイルシステムに保存し、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` プロパティーを使用してそれを参照する方法もあります。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:287
#, no-wrap
msgid ""
"{\n"
" \"kty\":\"oct\",\n"
" \"kid\":\"secretKey\",\n"
" \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:290
msgid "or"
msgstr "or"

#. type: delimited block -
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:307
#, no-wrap
msgid ""
"{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey1\",\n"
"     \"k\":\"Fdh9u8rINxfivbrianbbVT1u232VQBZYKx1HGAGPt2I\"\n"
"   },\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey2\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:310
msgid "`io.smallrye.jwt.util.KeyUtils` can also be used to generate a pair of asymmetric RSA or EC keys. These keys can be stored using a `JWK`, `JWK Set` or `PEM` format."
msgstr "`io.smallrye.jwt.util.KeyUtils` を使用して、非対称 RSA または EC キーのペアを生成することもできます。これらのキーは、 `JWK` 、 `JWK Set` 、または `PEM` 形式を使用して保存できます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:311
#, no-wrap
msgid "SmallRye JWT Builder configuration"
msgstr "SmallRye JWT Builder の設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:314
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and/or encrypted:"
msgstr "SmallRye JWT は、クレームの署名や暗号化の方法をカスタマイズするために使用できる次のプロパティーをサポートしています。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:317
#, no-wrap
msgid "Property Nam"
msgstr "プロパティ名"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:317
#, no-wrap
msgid "Default"
msgstr "デフォルト"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:318
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:318
#, no-wrap
msgid "smallrye.jwt.sign.key.location"
msgstr "smallrye.jwt.sign.key.location"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:318
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:320
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:321
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:324
#, no-wrap
msgid "`none`"
msgstr "`none`"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:319
#, no-wrap
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用される秘密鍵の場所。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:319
#, no-wrap
msgid "smallrye.jwt.sign.key"
msgstr "smallrye.jwt.sign.key"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:319
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:323
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:330
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "non"
msgstr "non"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:320
#, no-wrap
msgid "Key value which will be used to sign the claims when either a no-argument sign() or innerSign() method is called."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用されるキー値。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:320
#, no-wrap
msgid "smallrye.jwt.sign.key.i"
msgstr "smallrye.jwt.sign.key.i"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:321
#, no-wrap
msgid "Signing key identifier which is checked only when JWK keys are used."
msgstr "JWK キーを使用する場合にのみチェックされる署名キー識別子。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:321
#, no-wrap
msgid "smallrye.jwt.encrypt.key.location"
msgstr "smallrye.jwt.encrypt.key.location"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:322
#, no-wrap
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr "引数なし `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用される公開鍵の位置。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:322
#, no-wrap
msgid "smallrye.jwt.sign.relax-key-validation"
msgstr "smallrye.jwt.sign.relax-key-validation"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:322
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:325
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:332
#, no-wrap
msgid "fals"
msgstr "fals"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:323
#, no-wrap
msgid "Relax the validation of the signing keys."
msgstr "署名キーの検証を緩和します。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:323
#, no-wrap
msgid "smallrye.jwt.encrypt.key"
msgstr "smallrye.jwt.encrypt.key"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:324
#, no-wrap
msgid "Key value which will be used to encrypt the claims or inner JWT when a no-argument encrypt() method is called."
msgstr "引数なし `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用されるキー値。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:324
#, no-wrap
msgid "smallrye.jwt.encrypt.key.i"
msgstr "smallrye.jwt.encrypt.key.i"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:325
#, no-wrap
msgid "Encryption key identifier which is checked only when JWK keys are used."
msgstr "JWK キーを使用する場合にのみチェックされる暗号化キー識別子。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:325
#, no-wrap
msgid "smallrye.jwt.encrypt.relax-key-validation"
msgstr "smallrye.jwt.encrypt.relax-key-validation"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "Relax the validation of the encryption keys."
msgstr "暗号化キーの検証を緩和します。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "smallrye.jwt.new-token.signature-algorith"
msgstr "smallrye.jwt.new-token.signature-algorith"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:326
#, no-wrap
msgid "RS256"
msgstr "RS256"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "Signature algorithm. This property will be checked if the JWT signature builder has not already set the signature algorithm."
msgstr "署名アルゴリズム。このプロパティーは、JWT 署名ビルダーが署名アルゴリズムをまだ設定していない場合にチェックされます。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "smallrye.jwt.new-token.key-encryption-algorith"
msgstr "smallrye.jwt.new-token.key-encryption-algorith"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:327
#, no-wrap
msgid "RSA-OAEP"
msgstr "RSA-OAEP"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "Key encryption algorithm. This property will be checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr "キー暗号化アルゴリズム。このプロパティーは、JWT 暗号化ビルダーがキー暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "smallrye.jwt.new-token.content-encryption-algorith"
msgstr "smallrye.jwt.new-token.content-encryption-algorith"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:328
#, no-wrap
msgid "A256GCM"
msgstr "A256GCM"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:329
#, no-wrap
msgid "Content encryption algorithm. This property will be checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr "コンテンツ暗号化アルゴリズム。このプロパティーは、JWT 暗号化ビルダーがコンテンツ暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:329
#, no-wrap
msgid "smallrye.jwt.new-token.lifespan"
msgstr "smallrye.jwt.new-token.lifespan"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:329
#, no-wrap
msgid "300"
msgstr "300"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:330
#, no-wrap
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr "exp (expiry) クレームがまだ設定されていない場合、このクレーム値を計算するために使用される トークン生存期間の秒数。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:330
#, no-wrap
msgid "smallrye.jwt.new-token.issuer"
msgstr "smallrye.jwt.new-token.issuer"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr "`iss` (発行者)クレームがまだ設定されていない場合に、このクレーム値を設定するために使用できるトークン発行者。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:331
#, no-wrap
msgid "smallrye.jwt.new-token.audienc"
msgstr "smallrye.jwt.new-token.audienc"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:332
#, no-wrap
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr "`aud` (オーディエンス) クレームがまだ設定されていない場合に、このクレーム値を設定するために使用できるトークンオーディエンス。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:332
#, no-wrap
msgid "smallrye.jwt.new-token.override-matching-claim"
msgstr "smallrye.jwt.new-token.override-matching-claim"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:333
#, no-wrap
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr "既に初期化されている `iss` （発行者）と `aud` （視聴者）のクレームを `smallrye.jwt.new-token.issuer` と `smallrye.jwt.new-token.audience` の値で上書きするために、 このプロパティを `true` に設定します。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:333
#, no-wrap
msgid "smallrye.jwt.keystore.typ"
msgstr "smallrye.jwt.keystore.typ"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:333
#, no-wrap
msgid "`JKS`"
msgstr "`JKS`"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:334
#, no-wrap
msgid "This property can be used to customize a keystore type if either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` or both of these properties point to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` のいずれか、あるいはこれらのプロパティの両方が `KeyStore` ファイルを指している場合に、キーストアタイプをカスタマイズするために使用することができます。このプロパティが設定されていない場合、ファイル名をチェックしてキーストアの種類を決定し、デフォルトで `JKS` に設定されます。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:334
#, no-wrap
msgid "smallrye.jwt.keystore.provider"
msgstr "smallrye.jwt.keystore.provider"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:335
#, no-wrap
msgid "This property can be used to customize a `KeyStore` provider if `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合に、 `KeyStore` プロバイダをカスタマイズするために使用できます。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:335
#, no-wrap
msgid "smallrye.jwt.keystore.passwor"
msgstr "smallrye.jwt.keystore.passwor"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:336
#, no-wrap
msgid "Keystore password. If `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file then this property has be set."
msgstr "キーストアのパスワード。 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合、このプロパティを設定する必要があります。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:336
#, no-wrap
msgid "smallrye.jwt.keystore.encrypt.key.alia"
msgstr "smallrye.jwt.keystore.encrypt.key.alia"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:337
#, no-wrap
msgid "This property has to be set to identify a public encryption key which will be extracted from `KeyStore` from a matching certificate if `smallrye.jwt.encrypt.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合、一致する証明書によって `KeyStore` から抽出される公開暗号鍵を特定するために設定される必要があります。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:337
#, no-wrap
msgid "smallrye.jwt.keystore.sign.key.alia"
msgstr "smallrye.jwt.keystore.sign.key.alia"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:338
#, no-wrap
msgid "This property has to be set to identify a private signing key if `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指している場合、秘密署名鍵を特定するために設定する必要があります。"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:338
#, no-wrap
msgid "smallrye.jwt.keystore.sign.key.passwor"
msgstr "smallrye.jwt.keystore.sign.key.passwor"

#. type: Table
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:339
#, no-wrap
msgid "This property may be set if a private signing key's password in `KeyStore` is different to `smallrye.jwt.keystore.password` when `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指しているときに、`KeyStore` にある秘密署名鍵のパスワードが `smallrye.jwt.keystore.password` と異なる場合に設定される場合があります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:341
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:344
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:345
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:346
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:347
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:348
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:349
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:351
msgid "xref:security-jwt.adoc[Using Smallrye JWT to Protect Service Applications]"
msgstr "xref:security-jwt.adoc[Smallrye JWT を使用したサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_versions/3.0/guides/security-jwt-build.adoc:351
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"
