msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:6
#, no-wrap
msgid "Tips for writing native applications"
msgstr "ネイティブ・アプリケーションを作成するためのヒント"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:12
msgid "This guide contains various tips and tricks for getting around problems that might arise when attempting to run Java applications as native executables."
msgstr "このガイドには、Java アプリケーションをネイティブ実行可能ファイルとして実行しようとしたときに発生する可能性のある問題を回避するためのさまざまなヒントやコツが記載されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:14
msgid "Note that we differentiate two contexts where the solution applied might be different:"
msgstr "適用されるソリューションが異なる可能性のある 2 つの文脈を区別していることに注意してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:16
msgid "in the context of an application, you will rely on configuring the `native-image` configuration by tweaking your `pom.xml`;"
msgstr "アプリケーションの文脈では、`pom.xml` を修正して、 `native-image` 設定を調整することに依存することになります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:17
msgid "in the context of an extension, Quarkus offers a lot of infrastructure to simplify all of this."
msgstr "エクステンションの文脈では、Quarkus はこれらすべてを簡素化するための多くのインフラストラクチャーを提供しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:19
msgid "Please refer to the appropriate section depending on your context."
msgstr "コンテキストに応じて適切なセクションを参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:20
#, no-wrap
msgid "Supporting native in your application"
msgstr "アプリケーションでのネイティブのサポート"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:23
msgid "GraalVM imposes a number of constraints and making your application a native executable might require a few tweaks."
msgstr "GraalVM は多くの制約を課しており、アプリケーションをネイティブ実行可能なものにするには、いくつかの調整が必要になるかもしれません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:24
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:618
#, no-wrap
msgid "Including resources"
msgstr "リソースのインクルード"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:28
msgid "By default, when building a native executable, GraalVM will not include any of the resources that are on the classpath into the native executable it creates.  Resources that are meant to be part of the native executable need to be configured explicitly."
msgstr "デフォルトでは、ネイティブ実行可能ファイルをビルドする際に、GraalVM はクラスパス上にあるリソースを作成するネイティブ実行可能ファイルには含めません。ネイティブ実行可能ファイルの一部に含めるリソースは、明示的に設定する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:30
msgid "Quarkus automatically includes the resources present in `META-INF/resources` (the web resources) but, outside this directory, you are on your own."
msgstr "Quarkus では、`META-INF/resources` (Web リソース) にあるリソースを自動的にインクルードしますが、このディレクトリー以外の場所は自分で設定する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:35
msgid "Note that you need to be extremely careful here as anything in `META-INF/resources` will be exposed as static web resources.  So this directory is not a shortcut for \"let's automatically include these resources in the native executable\" and should only be used for static web resources."
msgstr "`META-INF/resources` にあるものはすべて、静的な Web リソースとして公開されるので、ここでは非常に注意が必要です。このディレクトリーは、「これらのリソースを自動的にネイティブ実行可能ファイルに含める」ためのショートカットではなく、静的な Web リソースのためにのみ使用する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:37
msgid "Other resources should be declared explicitly."
msgstr "その他のリソースは明示的に宣言する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:41
msgid "To include more resources in the native executable, the easiest way is to use the `quarkus.native.resources.includes` configuration property, and its counterpart to exclude resources `quarkus.native.resources.excludes`."
msgstr "追加でリソースをネイティブ実行可能ファイルに含めるには、`quarkus.native.resources.includes` という設定プロパティーと、リソースを除外するための `quarkus.native.resources.excludes` を使用するのが最も簡単です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:43
msgid "Both configuration properties support glob patterns."
msgstr "どちらの設定プロパティーもグロブパターンに対応しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:45
msgid "For instance, having the following properties in your `application.properties`:"
msgstr "たとえば、`application.properties` で以下のプロパティーを設定すると、"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:50
#, no-wrap
msgid ""
"quarkus.native.resources.includes=foo/**,bar/**/*.txt\n"
"quarkus.native.resources.excludes=foo/private/**\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:53
msgid "will include:"
msgstr "以下が含まれます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:55
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr "`foo/` ディレクトリーとそのサブディレクトリーにあるすべてのファイルのうち、`foo/private/` とそのサブディレクトリーにあるファイルを除く。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:56
msgid "all text files in the `bar/` directory and its subdirectories."
msgstr "`bar/` ディレクトリーとそのサブディレクトリーにあるすべてのテキストファイル。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:59
msgid "If globs are not sufficiently precise for your use case and you need to rely on regular expressions, or if you prefer relying on the GraalVM infrastructure, you can also create a `resources-config.json` (the most common location is within `src/main/resources`) JSON file defining which resources should be included:"
msgstr "グロブでは不十分で正規表現に頼る必要があるユースケースや、GraalVM インフラストラクチャーを使用することを好む場合は、どのリソースを含めるべきかを定義する JSON ファイル `resources-config.json` (最も一般的な場所は `src/main/resources` 内) を作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:72
#, no-wrap
msgid ""
"{\n"
"  \"resources\": [\n"
"    {\n"
"      \"pattern\": \".*\\\\.xml$\"\n"
"    },\n"
"    {\n"
"      \"pattern\": \".*\\\\.json$\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:76
msgid "The patterns are valid Java regexps.  Here we include all the XML files and JSON files into the native executable."
msgstr "このパターンは有効な Java 正規表現です。ここでは、すべての XML ファイルと JSONファイル をネイティブ実行可能ファイルに含めています。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:80
msgid "You can find more information about this topic in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[the GraalVM documentation]."
msgstr "このトピックに関する詳しい情報は、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[GraalVMのドキュメント]に記載されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:83
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:252
msgid "The final order of business is to make the configuration file known to the `native-image` executable by adding the proper configuration to `application.properties`:"
msgstr "最後にやるべきことは、`application.properties` に適切な設定を追加して、設定ファイルを `native-image` 実行可能ファイルに知らせることです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:87
#, no-wrap
msgid "quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=resources-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:91
msgid "In the previous snippet we were able to simply use `resources-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.  If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr "前のスニペットでは、`src/main/resources` に追加されたため、ファイルのパス全体を指定するのではなく、単に `resources-config.json` を使用することができました。ファイルが別のディレクトリーに追加されていた場合は、適切なファイルパスを手動で指定する必要がありました。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:95
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:264
msgid "Multiple options may be separated by a comma. For example, one could use:"
msgstr "複数のオプションはカンマで区切ることができます。例えば、次のように使用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:101
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:270
#, no-wrap
msgid ""
"quarkus.native.additional-build-args =\\\n"
"    -H:ResourceConfigurationFiles=resources-config.json,\\\n"
"    -H:ReflectionConfigurationFiles=reflection-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:104
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:273
msgid "in order to ensure that various resources are included and additional reflection is registered."
msgstr "さまざまなリソースが含まれており、追加のリフレクションの登録を担保するため。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:107
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:276
msgid "If for some reason adding the aforementioned configuration to `application.properties` is not desirable, it is possible to configure the build tool to effectively perform the same operation."
msgstr "何らかの理由で `application.properties` に前述の構成を追加することが望ましくない場合には、ビルドツールで効果的に同様の操作を行うように構成することも可能です。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:109
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:278
msgid "When using Maven, we could use the following configuration:"
msgstr "Maven を使用する場合は、以下のような構成にすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:121
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"            <quarkus.native.additional-build-args>-H:ResourceConfigurationFiles=resources-config.json</quarkus.native.additional-build-args>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:123
#, no-wrap
msgid "Registering for reflection"
msgstr "リフレクションのための登録"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:127
msgid "When building a native executable, GraalVM operates with a closed world assumption.  It analyzes the call tree and removes all the classes/methods/fields that are not used directly."
msgstr "ネイティブ実行可能ファイルを構築する際、GraalVM は閉世界仮説に基づいて動作します。これは、コールツリーを解析し、直接使用しないクラス/メソッド/フィールドをすべて削除します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:130
msgid "The elements used via reflection are not part of the call tree so they are dead code eliminated (if not called directly in other cases).  To include these elements in your native executable, you need to register them for reflection explicitly."
msgstr "リフレクションで使用される要素はコールツリーの一部ではないので、デッドコードとして排除されます (他のケースでは直接呼び出されない場合)。ネイティブ実行可能ファイルにこれらの要素を含めるには、リフレクションに明示的に登録する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:132
msgid "This is a very common case as JSON libraries typically use reflection to serialize the objects to JSON:"
msgstr "これは非常によくあるケースです。JSONライブラリは一般的にリフレクションを使用してオブジェクトをJSONにシリアライズする為です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:138
#, no-wrap
msgid ""
"    public class Person {\n"
"        private String first;\n"
"        private String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:142
#, no-wrap
msgid ""
"        public String getFirst() {\n"
"            return first;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:146
#, no-wrap
msgid ""
"        public void setFirst(String first) {\n"
"            this.first = first;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:150
#, no-wrap
msgid ""
"        public String getLast() {\n"
"            return last;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:155
#, no-wrap
msgid ""
"        public void setValue(String last) {\n"
"            this.last = last;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:160
#, no-wrap
msgid ""
"    @Path(\"/person\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:162
#, no-wrap
msgid "        private final Jsonb jsonb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:166
#, no-wrap
msgid ""
"        public PersonResource() {\n"
"            jsonb = JsonbBuilder.create(new JsonbConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:172
#, no-wrap
msgid ""
"        @GET\n"
"        public Response list() {\n"
"            return Response.ok(jsonb.fromJson(\"{\\\"first\\\":  \\\"foo\\\", \\\"last\\\":  \\\"bar\\\"}\", Person.class)).build();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:175
msgid "If we were to use the code above, we would get an exception like the following when using the native executable:"
msgstr "上記のコードを使用した場合、ネイティブ実行可能ファイルを使用すると以下のような例外が発生します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:179
#, no-wrap
msgid "Exception handling request to /person: org.jboss.resteasy.spi.UnhandledException: jakarta.json.bind.JsonbException: Can't create instance of a class: class org.acme.jsonb.Person, No default constructor found\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:182
msgid "or if you are using Jackson:"
msgstr "または Jackson を使用している場合。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:186
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.acme.jsonb.Person and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:189
msgid "An even nastier possible outcome could be for no exception to be thrown, but instead the JSON result would be completely empty."
msgstr "さらに厄介なのは、例外がスローされずに JSON の結果が完全に空になってしまうことです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:191
msgid "There are two different ways to fix this type of issues."
msgstr "このタイプの問題を解決するには、2 つの方法があります。"

#. type: Title ====
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:193
#, no-wrap
msgid "Using the @RegisterForReflection annotation"
msgstr "@RegisterForReflection アノテーションの使用"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:196
msgid "The easiest way to register a class for reflection is to use the `@RegisterForReflection` annotation:"
msgstr "リフレクション用のクラスを登録する最も簡単な方法は、`@RegisterForReflection` アノテーションを使用することです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:202
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class MyClass {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:205
msgid "If your class is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForReflection` for it."
msgstr "クラスがサードパーティの jar にある場合は、そのクラスの `@RegisterForReflection` をホストする空のクラスを使用することで行うことができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:211
#, no-wrap
msgid ""
"@RegisterForReflection(targets={ MyClassRequiringReflection.class, MySecondClassRequiringReflection.class})\n"
"public class MyReflectionConfiguration {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:214
msgid "Note that `MyClassRequiringReflection` and `MySecondClassRequiringReflection` will be registered for reflection but not `MyReflectionConfiguration`."
msgstr "なお、 `MyClassRequiringReflection` と `MySecondClassRequiringReflection` はリフレクションに登録されますが、 `MyReflectionConfiguration` は登録されません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:216
msgid "This feature is handy when using third-party libraries using object mapping features (such as Jackson or GSON):"
msgstr "この機能は、オブジェクトマッピング機能を使用するサードパーティのライブラリ（JacksonやGSONなど）を使用する際に便利です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:221
#, no-wrap
msgid ""
"@RegisterForReflection(targets = {User.class, UserImpl.class})\n"
"public class MyReflectionConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:223
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:611
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:632
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:654
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:678
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:225
#, no-wrap
msgid "Using a configuration file"
msgstr "設定ファイルの使用"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:228
msgid "You can use a configuration file to register classes for reflection."
msgstr "設定ファイルを使用してリフレクション用のクラスを登録することも可能です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:230
msgid "As an example, in order to register all methods of class `com.acme.MyClass` for reflection, we create `reflection-config.json` (the most common location is within `src/main/resources`)"
msgstr "例えば、クラス `com.acme.MyClass` のすべてのメソッドをリフレクションのために登録するには、`reflection-config.json` を作成します (最も一般的な場所は `src/main/resources` の中です)。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:244
#, no-wrap
msgid ""
"[\n"
"  {\n"
"    \"name\" : \"com.acme.MyClass\",\n"
"    \"allDeclaredConstructors\" : true,\n"
"    \"allPublicConstructors\" : true,\n"
"    \"allDeclaredMethods\" : true,\n"
"    \"allPublicMethods\" : true,\n"
"    \"allDeclaredFields\" : true,\n"
"    \"allPublicFields\" : true\n"
"  }\n"
"]\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:249
msgid "For more details on the format of this file, please refer to https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[the GraalVM documentation]."
msgstr "このファイルのフォーマットの詳細については、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[GraalVMのドキュメント]を参照してください。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:256
#, no-wrap
msgid "quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:260
msgid "In the previous snippet we were able to simply use `reflection-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.  If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr "前のスニペットでは、`src/main/resources` に追加されたため、ファイルのパス全体を指定するのではなく、単に `reflection-config.json` を使用することができました。ファイルが別のディレクトリーに追加されていた場合は、適切なファイルパスを手動で指定する必要がありました。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:290
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"            <quarkus.native.additional-build-args>-H:ReflectionConfigurationFiles=reflection-config.json</quarkus.native.additional-build-args>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:293
#, no-wrap
msgid "Delaying class initialization"
msgstr "クラスの初期化を遅らせる"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:296
msgid "By default, Quarkus initializes all classes at build time."
msgstr "デフォルトでは、Quarkus はビルド時にすべてのクラスを初期化します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:299
msgid "There are cases where the initialization of certain classes is done in a static block needs to be postponed to runtime.  Typically, omitting such configuration would result in a runtime exception like the following:"
msgstr "特定のクラスの初期化が静的ブロックで行われる場合、実行時に延期する必要がある場合があります。通常、このような設定を省略すると、以下のような実行時例外が発生します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:306
#, no-wrap
msgid ""
"Error: No instances are allowed in the image heap for a class that is initialized or reinitialized at image runtime: sun.security.provider.NativePRNG\n"
"Trace: object java.security.SecureRandom\n"
"method com.amazonaws.services.s3.model.CryptoConfiguration.<init>(CryptoMode)\n"
"Call path from entry point to com.amazonaws.services.s3.model.CryptoConfiguration.<init>(CryptoMode):\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:309
msgid "Another common source of errors is when the image heap taken by GraalVM contains a `Random`/`SplittableRandom` instance:"
msgstr "もう一つのよくあるエラーの原因は、GraalVMによって取得されたイメージヒープが `Random` / `SplittableRandom` インスタンスを含んでいる場合です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:313
#, no-wrap
msgid "Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:317
msgid "Which is more often than not caused by Quarkus initializing at build time a class with a static `Random`/`SplittableRandom` field, causing this particular instance to be tentatively included in the image heap."
msgstr "これは、Quarkus がビルド時に静的な `Random`/`SplittableRandom` フィールドを持つクラスを初期化し、この特定のインスタンスがイメージヒープに一時的に含まれることが原因である場合がほとんどです。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:321
msgid "You can find detailed information about this `Random`/`SplittableRandom` issue in https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[this blog post]."
msgstr "この `Random`/`SplittableRandom` の問題については、 https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[このブログ記事] に詳細な情報があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:325
msgid "In these cases, delaying the infringing class initialization at runtime might be the solution and, to achieve that, you can use the `--initialize-at-run-time=<package or class>` configuration knob."
msgstr "これらの場合、実行時に違反しているクラスの初期化を遅らせることが解決策になる可能性があり、それを達成するには、 `--initialize-at-run-time=<package or class>` 設定ノブを使用できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:327
msgid "It should be added to the `native-image` configuration using the `quarkus.native.additional-build-args` configuration property as shown in the examples above."
msgstr "上記の例のように、`quarkus.native.additional-build-args` 設定プロパティーを使用して `native-image` 設定に追加する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:331
msgid "You can find more information about all this in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[the GraalVM documentation]."
msgstr "これらすべての情報は、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVMのドキュメント]に記載されています。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:337
msgid "When multiple classes or packages need to be specified via the `quarkus.native.additional-build-args` configuration property, the `,` symbol needs to be escaped.  An example of this is the following:"
msgstr "`quarkus.native.additional-build-args` 設定プロパティーを介して複数のクラスやパッケージを指定する必要がある場合は、`,` シンボルをエスケープする必要があります。その例を以下に示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:341
#, no-wrap
msgid "quarkus.native.additional-build-args=--initialize-at-run-time=com.example.SomeClass\\\\,org.acme.SomeOtherClass\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:344
msgid "and in the case of using the Maven configuration instead of `application.properties`:"
msgstr "`application.properties` の代わりに Maven 設定を使用する場合。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:348
#, no-wrap
msgid "<quarkus.native.additional-build-args>--initialize-at-run-time=com.example.SomeClass\\,org.acme.SomeOtherClass</quarkus.native.additional-build-args>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:351
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:663
#, no-wrap
msgid "Managing Proxy Classes"
msgstr "プロキシークラスの管理"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:354
msgid "While writing native application you'll need to define proxy classes at image build time by specifying the list of interfaces that they implement."
msgstr "ネイティブアプリケーションを書く際には、実装するインターフェースのリストを指定して、イメージのビルド時にプロキシークラスを定義する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:356
msgid "In such a situation, the error you might encounter is:"
msgstr "このような状況では、以下のようなエラーが発生します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:360
#, no-wrap
msgid "com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface org.apache.http.conn.HttpClientConnectionManager, interface org.apache.http.pool.ConnPoolControl, interface com.amazonaws.http.conn.Wrapped] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:364
msgid "Solving this issue requires adding the `-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` option and to provide a dynamic proxy configuration file.  You can find all the information about the format of this file in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[the GraalVM documentation]."
msgstr "この問題を解決するには、`-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` オプションを追加し、ダイナミックプロキシ設定ファイルを用意する必要があります。このファイルのフォーマットに関するすべての情報は、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM ドキュメント] に記載されています。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:366
#, no-wrap
msgid "Modularity Benefits"
msgstr "モジュール化のメリット"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:372
msgid "During native executable build time GraalVM analyses the application's call tree and generates a code-set that includes all the code it needs.  Having a modular codebase is key to avoiding problems with unused or optional parts of your application, while at the same time reducing both native executable build times and size.  In this section you will learn about the details behind the benefits of modularity for native applications."
msgstr "ネイティブ実行可能ファイルのビルド時に、GraalVM はアプリケーションのコールツリーを分析し、必要なすべてのコードを含むコードセットを生成します。モジュラーコードベースを使用することは、アプリケーションの未使用部分またはオプション部分の問題を回避すると同時に、ネイティブ実行可能ファイルのビルド時間とサイズの両方を削減するための鍵となります。このセクションでは、ネイティブアプリケーションのモジュール化の利点の背後にある詳細について学習します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:391
msgid "A modular codebase is the best way to avoid these kind of issues.  Taking the JAXB/AWT problem above, if the JAXB code that dealt with images was in a separate module or jar (e.g. `jaxb-images`), then Quarkus could choose not to include that module unless the user specifically requested the need to serialize/deserialize XML files containing images at build time."
msgstr "モジュール式のコードベースは、この種の問題を回避するための最良の方法です。上記の JAXB/AWT の問題を考えると、イメージを扱う JAXB コードが別のモジュールまたは jar (例: `jaxb-images`) にあった場合、Quarkus は、構築時に画像を含むXMLファイルをシリアライズ/デシリアライズする必要があるとユーザーが特に要求しない限り、そのモジュールを含めないように選択することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:394
msgid "Another benefit of modular applications is that they can reduce the code-set that will need to get into the native executable.  The smaller the code-set, the faster the native executable builds will be and the smaller the native executable produced."
msgstr "モジュラーアプリケーションのもう 1 つの利点は、ネイティブ実行可能ファイルに組み込む必要があるコードセットを削減できることです。コードセットが小さいほど、ネイティブ実行可能ファイルのビルドが高速になり、生成されるネイティブ実行可能ファイルが小さくなります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:400
msgid "The key takeaway point here is the following: Keeping optional features, particularly those that depend on third party libraries or API subsystems with a big footprint, in separate modules is the best solution."
msgstr "ここで重要なポイントは次のとおりです。オプションの機能、特に大きなフットプリントを持つサードパーティーのライブラリーや API サブシステムに依存する機能は、別のモジュールに保持することが最善のソリューションです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:409
msgid "How do I know if my application suffers from similar problems? Aside from a deep study of the application, finding usages of https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html[Maven optional dependencies] is a clear indicator that your application might suffer from similar problems.  These type of dependencies should be avoided, and instead code that interacts with optional dependencies should be moved into separate modules."
msgstr "アプリケーションに同様の問題があるかどうかを確認するにはどうすればよいですか? アプリケーションの詳細な調査は別として、 https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.htmlMaven のオプションの依存関係 の使用法を見つけることは、アプリケーションで同様の問題が発生する可能性があります。この種の依存関係は避けるべきであり、代わりに、オプションの依存関係と対話するコードは別のモジュールに移動する必要があります。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:411
#, no-wrap
msgid "Enforcing Singletons"
msgstr "シングルトンの強制"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:418
msgid "As already explained in the <<delay-class-init-in-your-app, delay class initialization>> section, Quarkus marks all code to be initialized at build time by default.  This means that, unless marked otherwise, static variables will be assigned at build time, and static blocks will be executed at build time too."
msgstr "<<delay-class-init-in-your-app, 遅延クラス初期化>> セクションですでに説明したように、Quarkus はデフォルトでビルド時にすべてのコードを初期化するようマークします。つまり、特に指定がない限り、静的変数はビルド時に代入され、静的ブロックもビルド時に実行されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:423
msgid "This can cause values in Java programs that would normally vary from one run to another, to always return a constant value.  E.g. a static field that is assigned the value of `System.currentTimeMillis()` will always return the same value when executed as a Quarkus native executable."
msgstr "これにより、通常は実行ごとに異なるJavaプログラムの値が、常に一定の値として返されるようになります。例えば、 `System.currentTimeMillis()` という値が割り当てられている静的フィールドは、Quarkus ネイティブ実行可能ファイルとして実行されると、常に同じ値を返します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:426
msgid "Singletons that rely on static variable initialization will suffer similar problems.  For example, imagine you have a singleton based around static initialization along with a REST endpoint to query it:"
msgstr "静的変数の初期化に依存するシングルトンは、同様の問題に悩まされます。たとえば、クエリーを実行する REST エンドポイントと共に、静的初期化に基づくシングルトンがあるとします。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:431
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:472
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:519
#, no-wrap
msgid ""
"@Path(\"/singletons\")\n"
"public class Singletons {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:438
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/static\")\n"
"    public long withStatic() {\n"
"        return StaticSingleton.startTime();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:441
#, no-wrap
msgid ""
"class StaticSingleton {\n"
"    static final long START_TIME = System.currentTimeMillis();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:446
#, no-wrap
msgid ""
"    static long startTime() {\n"
"        return START_TIME;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:451
msgid "When the `singletons/static` endpoint is queried, it will always return the same value, even after the application is restarted:"
msgstr "`singletons/static` のエンドポイントに問い合わせると、アプリケーションを再起動しても常に同じ値が返されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:456
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:459
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:464
#, no-wrap
msgid ""
"$ curl http://localhost:8080/singletons/static\n"
"1656509254532%\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:461
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:508
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:554
#, no-wrap
msgid "### Restart the native application ###\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:467
msgid "Singletons that rely on `enum` classes are also affected by the same issue:"
msgstr "`enum` クラスに依存しているシングルトンも同じ問題の影響を受けます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:479
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/enum\")\n"
"    public long withEnum() {\n"
"        return EnumSingleton.INSTANCE.startTime();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:482
#, no-wrap
msgid ""
"enum EnumSingleton {\n"
"    INSTANCE(System.currentTimeMillis());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:484
#, no-wrap
msgid "    private final long startTime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:488
#, no-wrap
msgid ""
"    private EnumSingleton(long startTime) {\n"
"        this.startTime = startTime;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:493
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:539
#, no-wrap
msgid ""
"    long startTime() {\n"
"        return startTime;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:498
msgid "When the `singletons/enum` endpoint is queried, it will always return the same value, even after the application is restarted:"
msgstr "`singletons/enum` エンドポイントがクエリーされると、アプリケーションが再起動された後でも、常に同じ値が返されます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:503
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:506
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:511
#, no-wrap
msgid ""
"$ curl http://localhost:8080/singletons/enum\n"
"1656509254601%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:514
msgid "One way to fix it is to build singletons using CDI's `@Singleton` annotation:"
msgstr "これを修正する 1 つの方法は、CDI の `@Singleton` アノテーションを使用してシングルトンを構築することです。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:522
#, no-wrap
msgid ""
"    @Inject\n"
"    CdiSingleton cdiSingleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:529
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/cdi\")\n"
"    public long withCdi() {\n"
"        return cdiSingleton.startTime();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:534
#, no-wrap
msgid ""
"@Singleton\n"
"class CdiSingleton {\n"
"    // Note that the field is not static\n"
"    final long startTime = System.currentTimeMillis();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:544
msgid "After each restart, querying `singletons/cdi` will return a different value, just like it would in JVM mode:"
msgstr "再起動するたびに、 `singletons/cdi` をクエリすると、JVM モードと同じように、異なる値が返却されます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:549
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:552
#, no-wrap
msgid ""
"$ curl http://localhost:8080/singletons/cdi\n"
"1656510218554%\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:557
#, no-wrap
msgid ""
"$ curl http://localhost:8080/singletons/cdi\n"
"1656510714689%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:564
msgid "An alternative way to enforce a singleton while relying static fields, or enums, is to <<delay-class-init-in-your-app,delay its class initialization until run time>>.  The nice advantage of CDI-based singletons is that your class initialization is not constrained, so you can freely decide whether it should be build-time or run-time initialized, depending on your use case."
msgstr "静的フィールドや列挙型に依存しながらシングルトンを強制する別の方法は、<<delay-class-init-in-your-app,実行時までクラス初期化を遅延させる>> ことです。CDIベースのシングルトンの良い利点は、クラスの初期化が制約されないので、ユースケースに応じて、ビルド時または実行時に初期化されるべきかを自由に決定できることです。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:565
#, no-wrap
msgid "Beware of common Java API overrides"
msgstr "よくある Java API オーバーライドの注意点"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:575
msgid "Certain commonly used Java methods are overriden by user classes, e.g. `toString`, `equals`, `hashCode`...etc.  The majority of overrides do not cause problems, but if they use third party libraries (e.g. for additional formatting), or use dynamic language features (e.g. reflection or proxies), they can cause native image build to fail.  Some of those failures might be solvable via configuration, but others can be more tricky to handle."
msgstr "特定の一般的に使用される Java メソッドは、`toString`、`equals`、`hashCode` などのユーザークラスによってオーバーライドされます。オーバーライドの大部分は問題を引き起こしませんが、サードパーティーのライブラリー (追加の書式設定など) を使用したり、動的言語機能 (リフレクションやプロキシーなど) を使用したりすると、ネイティブイメージのビルドが失敗する可能性があります。これらの障害の中には、設定によって解決できるものもありますが、処理がより難しいものもあります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:583
msgid "From a GraalVM points-to analysis perspective, what happens in these method overrides matters, even if the application does not explicitly call them.  This is because these methods are used throughout the JDK, and all it takes is for one of those calls to be done on an unconstrained type, e.g. `java.lang.Object`, for the analysis to have to pull all implementations of that particular method."
msgstr "GraalVM ポイントツー分析の観点からは、アプリケーションが明示的に呼び出さなくても、これらのメソッドオーバーライドで何が起こるかが問題になります。これは、これらのメソッドが JDK 全体で使用されているためであり、これらの呼び出しの 1 つが制約のない型 (たとえば、`java.lang.Object`) で実行されるだけで、分析でその特定のすべての実装をプルする必要があるためです。方法。"

#. type: Title ==
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:585
#, no-wrap
msgid "Supporting native in a Quarkus extension"
msgstr "Quarkus エクステンションでネイティブをサポートする"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:588
msgid "Supporting native in a Quarkus extension is even easier as Quarkus provides a lot of tools to simplify all this."
msgstr "Quarkus のエクステンションでのネイティブのサポートは、Quarkus がこれらすべてを単純化するための多くのツールを提供しているため、さらに簡単になりました。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:592
msgid "Everything described here will only work in the context of Quarkus extensions, it won't work in an application."
msgstr "ここで説明したことはすべて、Quarkus エクステンションの文脈でのみ機能し、アプリケーションでは機能しません。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:594
#, no-wrap
msgid "Register reflection"
msgstr "リフレクションの登録"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:597
msgid "Quarkus makes registration of reflection in an extension a breeze by using `ReflectiveClassBuildItem`, thus eliminating the need for a JSON configuration file."
msgstr "Quarkus では、`ReflectiveClassBuildItem` を使用することで、エクステンションへのリフレクションの登録が簡単になり、JSON 設定ファイルが不要になります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:599
msgid "To register a class for reflection, one would need to create a Quarkus processor class and add a build step that registers reflection:"
msgstr "リフレクション用のクラスを登録するには、Quarkus プロセッサークラスを作成し、リフレクションを登録するビルドステップを追加する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:603
#, no-wrap
msgid "public class SaxParserProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:609
#, no-wrap
msgid ""
"    @BuildStep\n"
"    ReflectiveClassBuildItem reflection() {\n"
"        // since we only need reflection to the constructor of the class, we can specify `false` for both the methods and the fields arguments.\n"
"        return new ReflectiveClassBuildItem(false, false, \"com.sun.org.apache.xerces.internal.parsers.SAXParser\");\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:616
msgid "More information about reflection in GraalVM can be found https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[here]."
msgstr "GraalVMでのリフレクションについての詳細は https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[こちら]をご覧ください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:621
msgid "In the context of an extension, Quarkus eliminates the need for a JSON configuration file by allowing extension authors to specify a `NativeImageResourceBuildItem`:"
msgstr "エクステンションのコンテキストでは、Quarkus は、エクステンションの作成者が `NativeImageResourceBuildItem` を指定できるようにすることで、JSON 設定ファイルの必要性を排除しています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:625
#, no-wrap
msgid "public class ResourcesProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:630
#, no-wrap
msgid ""
"    @BuildStep\n"
"    NativeImageResourceBuildItem nativeImageResourceBuildItem() {\n"
"        return new NativeImageResourceBuildItem(\"META-INF/extra.properties\");\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:637
msgid "For more information about GraalVM resource handling in native executables please refer to https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[the GraalVM documentation]."
msgstr "ネイティブ実行可能ファイルにおけるGraalVMのリソース処理についての詳細は、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[GraalVMのドキュメント]を参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:640
#, no-wrap
msgid "Delay class initialization"
msgstr "遅延クラス初期化"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:643
msgid "Quarkus simplifies things by allowing extensions authors to simply register a `RuntimeInitializedClassBuildItem`. A simple example of doing so could be:"
msgstr "Quarkus では、エクステンションの作成者が簡単に `RuntimeInitializedClassBuildItem` を登録できるようにすることで、物事をシンプルにしています。簡単な例としては、次のようなものが考えられます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:647
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:670
#, no-wrap
msgid "public class S3Processor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:652
#, no-wrap
msgid ""
"    @BuildStep\n"
"    RuntimeInitializedClassBuildItem cryptoConfiguration() {\n"
"        return new RuntimeInitializedClassBuildItem(CryptoConfiguration.class.getCanonicalName());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:657
msgid "Using such a construct means that a `--initialize-at-run-time` option will automatically be added to the `native-image` command line."
msgstr "このような構文を使用すると、 `--initialize-at-run-time` オプションが自動的に `native-image` コマンドラインに追加されることを意味します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:661
msgid "For more information about `--initialize-at-run-time`, please read https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[the GraalVM documentation]."
msgstr "`--initialize-at-run-time` の詳細については、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVMのドキュメント]をお読みください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:666
msgid "Very similarly, Quarkus allows extensions authors to register a `NativeImageProxyDefinitionBuildItem`. An example of doing so is:"
msgstr "同様に、Quarkus では、エクステンションの作成者が `NativeImageProxyDefinitionBuildItem` を登録することができます。その例としては、以下のようなものがあります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:676
#, no-wrap
msgid ""
"    @BuildStep\n"
"    NativeImageProxyDefinitionBuildItem httpProxies() {\n"
"        return new NativeImageProxyDefinitionBuildItem(\"org.apache.http.conn.HttpClientConnectionManager\",\n"
"                \"org.apache.http.pool.ConnPoolControl\", \"com.amazonaws.http.conn.Wrapped\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:681
msgid "Using such a construct means that a `-H:DynamicProxyConfigurationResources` option will automatically be added to the `native-image` command line."
msgstr "このような構文を使用すると、`-H:DynamicProxyConfigurationResources` オプションが自動的に `native-image` コマンドラインに追加されることを意味します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:685
msgid "For more information about Proxy Classes you can read https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[the GraalVM documentation]."
msgstr "プロキシクラスの詳細については、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVMのドキュメント]をご覧ください。"

#. type: Title ===
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:687
#, no-wrap
msgid "Logging with Native Image"
msgstr "ネイティブイメージでのロギング"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:690
msgid "If you are using dependencies that require logging components such as Apache Commons Logging or Log4j and are experiencing a `ClassNotFoundException` when building the native executable, you can resolve this by excluding the logging library and adding the corresponding JBoss Logging adapter."
msgstr "Apache Commons Logging や Log4j などのロギングコンポーネントを必要とする依存関係を使用していて、ネイティブ実行可能ファイルをビルドする際に `ClassNotFoundException` が発生する場合、ロギングライブラリーを除外し、対応する JBoss Logging アダプターを追加することで解決できます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/writing-native-applications-tips.adoc:691
msgid "For more details please refer to the xref:logging.adoc#logging-adapters[Logging guide]."
msgstr "詳しくは、link:logging.html#logging-adapters[Loggingガイド] をご覧ください。"
