msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:6
#, no-wrap
msgid "Using Hibernate ORM and JPA"
msgstr "Hibernate ORMとJPAの使用"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:15
msgid "Hibernate ORM is the de facto standard JPA implementation and offers you the full breadth of an Object Relational Mapper.  It works beautifully in Quarkus."
msgstr "Hibernate ORMは、デファクトスタンダートのJPA実装であり、オブジェクトリレーショナルマッパーのすべてを提供します。これはQuarkusで美しく動作します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:16
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:20
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成していくことをお勧めします。ただし、完成した例にすぐにアクセスすることもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:22
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:24
msgid "The solution is located in the `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr "このソリューションは `hibernate-orm-quickstart` {quickstarts-tree-url}/hibernate-orm-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:25
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:28
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:31
msgid "Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs; so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr "このような古典的な設定ファイルを使用することは選択肢として存在しますが、特定の高度なニーズがない限り不要です。そのため、まずはHibernate ORMを `persistence.xml` リソース無しで設定できることをみていきましょう。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:33
msgid "In Quarkus, you only need to:"
msgstr "Quarkusでは、次のことを行うだけです:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:35
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:36
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常通りにアノテーションします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:38
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:40
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:42
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:43
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:44
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2の] ための `quarkus-jdbc-db2`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:45
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[Apache Derby] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:46
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:47
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:48
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:49
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:50
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:51
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:53
msgid "For instance:"
msgstr "例えば"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:55
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:62
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:68
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:71
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:75
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:78
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:82
msgid "Annotate your persistent objects with `@Entity`, then add the relevant configuration properties in `{config-file}`."
msgstr "永続化オブジェクトに `@Entity` アノテーションを付けたら `{config-file}` に関連する設定プロパティを追加します。"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:84
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例 `{config-file}`"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:91
#, no-wrap
msgid ""
"# datasource configuration\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = hibernate\n"
"quarkus.datasource.password = hibernate\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:94
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:98
msgid "Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.  They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr "これらの設定プロパティは、通常のHibernate ORMの設定ファイルにあるものとは異なることに注意してください。多くの場合はHibernate ORMの設定のプロパティに対応していますが、名前が異なる場合もあり、必ずしも1対1で対応しているわけではありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:100
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate ORMの設定を自動的に設定し、多くの場合、より現代的なデフォルト値を使用します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:102
msgid "Please see below section <<hibernate-configuration-properties, Hibernate ORM configuration properties>> for the list of properties you can set in `{config-file}`."
msgstr "`{config-file}` で設定できるプロパティのリストについては、以下の <<hibernate-configuration-properties, Hibernate ORM 設定プロパティ>> のセクションを参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:104
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr "Hibernate ORM エクステンションがプロジェクトの依存関係の中に入っていればQuarkus の `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:106
msgid "The dialect will be selected based on the JDBC driver - unless you set one explicitly."
msgstr "方言(dialect)は、明示的に設定しない限りはJDBCドライバに基づいて選択されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:108
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、 `EntityManager` をうまくインジェクションすることができます:"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:110
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SantaClausService {\n"
"    @Inject\n"
"    EntityManager em; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:124
#, no-wrap
msgid ""
"    @Transactional <2>\n"
"    public void createGift(String giftDescription) {\n"
"        Gift gift = new Gift();\n"
"        gift.setName(giftDescription);\n"
"        em.persist(gift);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:127
msgid "Inject your entity manager and have fun"
msgstr "エンティティマネージャーをインジェクションして楽しむ"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:128
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr "CDI Beanメソッドに `@Transactional` を付けると `EntityManager` がトランザクション境界内に入りコミット時にフラッシュします。"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:130
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:136
#, no-wrap
msgid ""
"@Entity\n"
"public class Gift {\n"
"    private Long id;\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:143
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(name = \"giftSeq\", sequenceName = \"gift_id_seq\", allocationSize = 1, initialValue = 1)\n"
"    @GeneratedValue(generator = \"giftSeq\")\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:147
#, no-wrap
msgid ""
"    public void setId(Long id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:151
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:156
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:161
msgid "To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your `resources` directory.  This script can contain any SQL DML statements.  Make sure to terminate each statement with a semicolon."
msgstr "Hibernate ORMの起動時にSQL文をロードするには、 `import.sql` ファイルをresourcesディレクトリーのルートに追加します。このスクリプトには、任意のSQL DML文を含めることができます。各ステートメントは必ずセミコロンで終了させてください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:163
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:167
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) は必ずトランザクション内で行うようにしてください。CDI Beanの機能 `@Transactional` アノテーションを使うことでそのメソッドをトランザクションの境界にできます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:169
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティ"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:172
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "`EntityManagerFactory` を改良したり、Quarkusの推測を導くのに便利な様々なオプションのプロパティがあります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:174
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されていれば、それ以外に必須のプロパティはありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:177
msgid "When no property is set, Quarkus can typically infer everything it needs to set up Hibernate ORM and will have it use the default datasource."
msgstr "プロパティが設定されていない場合、Quarkusは通常はHibernate ORMのセットアップに必要な値を推測し、デフォルトのデータソースを使用するようにします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:179
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr "ここに記載されている設定プロパティーでは、このようなデフォルトを上書きしたり、様々な面をカスタマイズしたり調整したりすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:194
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:399
#, no-wrap
msgid "quarkus.hibernate-orm.persistence-xml.ignore=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:200
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr "PostgreSQLサーバをDockerで起動したいですか？"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:206
#, no-wrap
msgid ""
"docker run --rm=true --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n"
"           -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:209
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr "これは、永続化されない空のデータベースを起動します。簡単な実験に最適です!"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:212
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続化ユニット"

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:214
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:217
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティを使用して複数の永続化ユニットを定義することができます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:220
msgid "The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.  For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr "`quarkus.hibernate-orm.` 名前空間のルートにあるプロパティで、デフォルトの永続化ユニットを定義します。例えば、次のスニペットではデフォルトのデータソースとデフォルトの永続化ユニットを定義しています:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:225
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=h2\n"
"quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:227
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:230
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップをベースにした方法で名前付きの永続化ユニットを定義することができます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:235
#, no-wrap
msgid ""
"quarkus.datasource.\"users\".db-kind=h2 <1>\n"
"quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:238
#, no-wrap
msgid ""
"quarkus.datasource.\"inventory\".db-kind=h2 <2>\n"
"quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:242
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n"
"quarkus.hibernate-orm.\"users\".datasource=users <4>\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:246
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n"
"quarkus.hibernate-orm.\"inventory\".datasource=inventory\n"
"quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:248
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:249
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:250
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:251
msgid "Define the datasource used by the persistence unit."
msgstr "永続化ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:252
msgid "This configuration property is important, but we will discuss it a bit later."
msgstr "この設定プロパティは重要ですが、説明は少し後になります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:253
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`inventory` データソースを指す `inventory` という名前の永続化ユニットを定義します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:257
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトデータソースと名前付きデータソースを混在させることも、どちらか一方だけにすることもできます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:265
msgid "The default persistence unit points to the default datasource by default.  For named persistence units, the `datasource` property is mandatory.  You can point your persistence unit to the default datasource by setting it to `<default>` (which is the internal name of the default datasource)."
msgstr "デフォルトの永続化ユニットは、デフォルトでデフォルトデータソースを使用します。名前付きの永続化ユニットの場合は `datasource` プロパティが必須です。 `<default>` （デフォルトのデータソースの内部名）に設定することで、永続化ユニットをデフォルトデータソースに向けることができます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:267
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "複数の永続化ユニットが同じデータソースを使用することもできます。"

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:270
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスの永続化ユニットへのアタッチメント"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:273
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在できません:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:275
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティを使用します;"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:276
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` パッケージレベルのアノテーションを使用します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:278
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合はアノテーションが無視され、 `packages` の設定プロパティのみが考慮されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:280
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティは簡単です:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:285
#, no-wrap
msgid ""
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
"quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:289
#, no-wrap
msgid ""
"quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n"
"quarkus.hibernate-orm.\"users\".datasource=users\n"
"quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:292
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは2つの永続化ユニットを作成します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:294
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "デフォルトでは、 `org.acme.model.defaultpu` パッケージのすべてのモデルクラスが含まれ、サブパッケージも含まれます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:295
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr "`users` という名前の永続化ユニットで、 `org.acme.model.user` パッケージのすべてのモデルクラスを含み、サブパッケージも含まれています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:297
msgid "You can attach several packages to a persistence unit:"
msgstr "複数のpackageを永続化ユニットにアタッチできます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:301
#, no-wrap
msgid "quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:304
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr "`org.acme.model.shared` と `org.acme.model.user` パッケージの下にあるすべてのモデル・クラスは、 `users` 永続化ユニットにアタッチされます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:306
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "モデルクラスを複数の永続化ユニットにアタッチすることもサポートされます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:312
msgid "Model classes need to be consistently added to a given persistence unit.  That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.  As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr "モデルクラスは与えられた永続化ユニットに一貫して追加される必要があります。つまり、与えられたエンティティのすべての依存するモデルクラス（ `@MappedSuperClass` 、 `@Embeddable` ...）はすべて同じ永続化ユニットにアタッチされる必要があります。パッケージレベルで永続化ユニットを扱っているので簡単なことでしょう。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:317
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティは1つの永続化ユニットにのみアタッチできます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:320
msgid "For entities attached to several persistence units, you cannot use Panache.  You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr "複数の永続化ユニットに接続されたエンティティではPanacheを使用することはできません。しかし、この2つのアプローチを混在させることは可能で、Panacheエンティティと複数の永続化ユニットが必要な従来のエンティティを混在させることはできます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:323
msgid "If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach, contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr "もし、そのようなユースケースがあり、シンプルなPanacheのアプローチを乱すことなく実装する方法について素晴らしいアイデアがあれば、 link:{quarkus-mailing-list-index}[quarkus-dev メーリングリスト]までご連絡ください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:327
msgid "The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.  Again, the two approaches cannot be mixed."
msgstr "モデルクラスを永続化ユニットにアタッチする2つ目の方法は、パッケージレベルの `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することです。繰り返しになりますが、この2つのアプローチを混在させることはできません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:329
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr "上記のような構成を `packages` の設定プロパティで取得するには、以下の内容の `package-info.java` ファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:334
#, no-wrap
msgid ""
"@PersistenceUnit(\"users\") <1>\n"
"package org.acme.model.user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:336
#, no-wrap
msgid "import io.quarkus.hibernate.orm.PersistenceUnit;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:338
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one."
msgstr "JPAのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使うことに注意してください。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:343
msgid "We only support defining the `@PersistenceUnit` for model classes at the package level, using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr "モデルクラスの `@PersistenceUnit` はパッケージレベルで定義することのみサポートしています。この場合、クラスレベルで `@PersistenceUnit` アノテーションを使用することはサポートされていません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:346
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "設定プロパティで行うのと同様で、アノテーションのつけられたパッケージだけでなく、そのすべてのサブパッケージも入れていることに注意してください。"

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:347
#, no-wrap
msgid "CDI integration"
msgstr "CDI統合"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:350
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr "QuarkusでHibernate ORMを使用することに慣れている方は、CDIを使用して `EntityManager` をインジェクションしたことがあると思います:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:355
#, no-wrap
msgid ""
"@Inject\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:358
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:360
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr "名前付き永続化ユニット ( この例では `users` ) の `EntityManager` をインジェクトするのは簡単です:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:366
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\") <1>\n"
"EntityManager entityManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:368
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも同じ `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:370
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "全く同じ仕組みで名前付き永続化ユニットの `EntityManagerFactory` をインジェクトすることができます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:376
#, no-wrap
msgid ""
"@Inject\n"
"@PersistenceUnit(\"users\")\n"
"EntityManagerFactory entityManagerFactory;\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:379
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "`persistence.xml` を使用した場合のHibernate ORMのセットアップと設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:383
msgid "Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.  This is useful for:"
msgstr "また、 `META-INF/persistence.xml` を使用して、Hibernate ORM を設定することもできます。これは次のような場合に便利です:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:385
msgid "migrating existing code"
msgstr "既存コードの移行"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:386
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr "比較的複雑な設定をしていて、設定の柔軟性が必要な場合"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:387
msgid "or if you like it the good old way"
msgstr "または、昔ながらの方法が好みの場合"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:404
msgid "Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr "`pom.xml` の依存関係と Java コードは先の例と同じになります。唯一の違いは `META-INF/persistence.xml` で Hibernate ORM の設定を行うことだけです:"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:406
#, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xml リソースの例"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:413
#, no-wrap
msgid ""
"<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n"
"             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n"
"             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n"
"             version=\"2.1\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:415
#, no-wrap
msgid "    <persistence-unit name=\"CustomerPU\" transaction-type=\"JTA\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:417
#, no-wrap
msgid "        <description>My customer entities</description>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:421
#, no-wrap
msgid ""
"        <properties>\n"
"            <!-- Connection specific -->\n"
"            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL95Dialect\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:424
#, no-wrap
msgid ""
"            <property name=\"hibernate.show_sql\" value=\"true\"/>\n"
"            <property name=\"hibernate.format_sql\" value=\"true\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:430
#, no-wrap
msgid ""
"            <!--\n"
"                Optimistically create the tables;\n"
"                will cause background errors being logged if they already exist,\n"
"                but is practical to retain existing data across runs (or create as needed) -->\n"
"            <property name=\"jakarta.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:433
#, no-wrap
msgid ""
"            <property name=\"jakarta.persistence.validation.mode\" value=\"NONE\"/>\n"
"        </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:436
#, no-wrap
msgid ""
"    </persistence-unit>\n"
"</persistence>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:440
msgid "When using the `persistence.xml` configuration you are configuring Hibernate ORM directly, so in this case the appropriate reference is the link:{orm-doc-url-prefix}#configurations[documentation on hibernate.org]."
msgstr "`persistence.xml` で設定を使用する場合は、Hibernate ORM を直接設定することになるので、その場合は link:{orm-doc-url-prefix}#configurations[hibernate.org のドキュメント] を参照するのが適切です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:443
msgid "Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will the same defaults be applied."
msgstr "Quarkusの `{config-file}` で使用されているものと同じプロパティ名ではなく、同じデフォルト値が適用されるわけではありませんのでご注意ください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:445
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:451
msgid "Hibernate ORM in Quarkus supports XML mapping.  You can add mapping files following the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (JPA)] or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr "QuarkusのHibernate ORMは、XMLマッピングをサポートしています。 link:https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` 形式（JPA）] または link:http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` 形式（Hibernate ORM専用、非推奨）] に従ったマッピングファイルを追加できます:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:453
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr "`application.properties` で（ビルド時の） link:#quarkus-hibernate-orm_quarkus.hibernate-orm.mapping-files[`quarkus.hibernate-orm.mapping-files`]プロパティを使用して。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:454
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr "<<persistence-xml,`persistence.xml`>> の `<mapping-file>` の要素を使用して。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:456
msgid "XML mapping files are parsed at build time."
msgstr "XMLマッピングファイルは、ビルド時に解析されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:460
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr "`META-INF/orm.xml` ファイルがクラスパスに存在する場合は、常にデフォルトでインクルードされます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:462
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr "そうしたくない場合は、 `quarkus.hibernate-orm.mapping-files = no-file` や `<mapping-file>no-file</mapping-file>` を使用してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:464
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:468
msgid "Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORMは、エンティティに対するコンパイル時のバイトコード強化に依存しています。Quarkusアプリケーションを構築するのと同じプロジェクトでエンティティを定義すれば、すべてがうまく動作します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:471
msgid "If the entities come from external projects or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティが外部のプロジェクトやjarに含まれている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:473
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティが現在のプロジェクトの内部にあるかのようにインデックスを作成し、バイトコード強化をすることができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:475
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:478
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードはフロントエンドやサービス、データベースアクセスが混在するアプリケーションにとても便利です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:480
msgid "There are a few common approaches to make the best of it."
msgstr "それを生かすためにはいくつかの共通したアプローチがあります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:482
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr "1つ目の選択肢は、 `quarkus.hibernate-orm.database.generation=drop-and-create` と `import.sql` を併用することです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:487
msgid "That way for every change to your app and in particular to your entities, the database schema will be properly recreated and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.  This is best to perfectly control your environment and works magic with Quarkus live reload mode: your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "そうすることで、アプリケーション、特にエンティティに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ（ `import.sql` に保存）がゼロから再投入されます。これは環境を完全にコントロールするための最良の方法であり、Quarkusのライブリロードモードでは魔法のように機能します。エンティティの変更や `import.sql` へのあらゆる変更が即座に反映され、アプリケーションを再起動しなくてもスキーマが更新されます！"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:492
msgid "By default, in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).  You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "`dev` および `test` モードのデフォルトでは、Hibernate ORM は起動時に `/import.sql` ファイル内の SQL 文を読み込んで実行します（存在する場合）。 `application.properties` のプロパティ `quarkus.hibernate-orm.sql-load-script` を変更することで、ファイル名を変更することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:502
msgid "The second approach is to use `quarkus.hibernate-orm.database.generation=update`.  This approach is best when you do many entity changes but still need to work on a copy of the production data or if you want to reproduce a bug that is based on specific database entries.  `update` is a best effort from Hibernate ORM and will fail in specific situations including altering your database structure which could lead to data loss.  For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.  But for development, these limitations are acceptable."
msgstr "2つ目の選択肢は `quarkus.hibernate-orm.database.generation=update` を使用することです。 この方法は、多くのエンティティを変更するが本番データのコピーで作業する必要がある場合や、特定のデータベースのデータエントリーに基づくバグを再現する場合に最適です。 `update` は Hibernate ORM によってベストエフォートで実行され、データ損失につながるデータベース構造の変更を含む特定の状況では失敗します。 例えば、外部キー制約に違反する構造を変更する場合、Hibernate ORM の挙動を助けてあげなければならないかもしれません。 しかし、開発中だとこれらの制限は許容範囲内です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:506
msgid "The third approach is to use `quarkus.hibernate-orm.database.generation=none`.  This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.  Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr "3つ目の選択肢は `quarkus.hibernate-orm.database.generation=none` を使用することです。この方法は、本番データのコピーで作業しており、スキーマの変更を完全にコントロールしたい場合に最適です。あるいは、 xref:flyway.adoc[Flyway] や xref:liquibase.adoc[Liquibase]のようなデータベーススキーマ移行ツールを使用している場合です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:509
msgid "With this approach when making changes to an entity, make sure to adapt the database schema accordingly; you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr "この方法では、エンティティに変更を加える時にデータベーススキーマに確実に適合させる必要があります。また、 `validate` を使用して、Hibernateにスキーマが期待どおりかを確認させることもできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:511
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr "本番環境では、 `quarkus.hibernate-orm.database.generation` で `drop-and-create` と `update` は使用しないでください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:517
msgid "These approaches become really powerful when combined with Quarkus configuration profiles.  You can define different xref:config-reference.adoc#profiles[configuration profiles] to select different behaviors depending on your environment.  This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "これらの方法は、Quarkusの設定プロファイルと組み合わせることで非常に強力になります。異なる xref:config-reference.adoc#profiles[設定プロファイル]を定義して、環境に応じて異なる動作を選択することができます。これは、現在必要としている開発スタイルに合わせて、Hibernate ORMのプロパティの異なる組み合わせを定義できるという点で素晴らしいことです。"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:519
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:554
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:523
#, no-wrap
msgid ""
"%dev.quarkus.hibernate-orm.database.generation = drop-and-create\n"
"%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:526
#, no-wrap
msgid ""
"%dev-with-data.quarkus.hibernate-orm.database.generation = update\n"
"%dev-with-data.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:529
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:558
#, no-wrap
msgid ""
"%prod.quarkus.hibernate-orm.database.generation = none\n"
"%prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:532
msgid "You can start dev mode using a custom profile:"
msgstr "カスタムプロファイルを使用して開発モードを開始することができます:"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:537
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:541
msgid "Quarkus comes with default profiles (`dev`, `test` and `prod`).  And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr "Quarkusにはデフォルトのプロファイルが付属しています ( `dev` , `test` と `prod` )。また、様々な環境を記述するために独自のカスタムプロファイル ( `staging` 、 `prod-us` など )を追加することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:543
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:545
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:549
msgid "You can override it in your `application.properties` explicitly (e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)  but we wanted you to avoid overriding your database by accident in prod :)"
msgstr "ユーザーが `application.properties` で明示的にオーバーライドすることもできますが (例: `%prod.quarkus.hibernate-orm.sql-load-script = import.sql` )、prod で誤ってデータベースをオーバーライドしないようにしたいと思いました :)"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:552
msgid "Speaking of, make sure to not drop your database schema in production! Add the following in your properties file."
msgstr "そういえば、本番ではデータベーススキーマを落とさないようにしましょう！プロパティファイルに以下を追加します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:561
#, no-wrap
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr "スキーマを管理するためのFlywayへの自動移行"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:567
msgid "If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode, Quarkus provides a simple way to turn your Hibernate ORM auto generated schema into a Flyway migration file. This is intended to make is easy to move from the early development phase, where Hibernate can be used to quickly set up the schema, to the production phase, where Flyway is used to manage schema changes."
msgstr "開発モードで実行しているときに xref:flyway.adoc[Flywayエクステンション]がインストールされている場合、QuarkusはHibernate ORMで自動生成されたスキーマをFlyway移行ファイルに変換する簡単な方法を提供します。これは、Hibernateを使用してスキーマを迅速にセットアップする開発初期段階から、Flywayを使用してスキーマの変更を管理する本番段階への移行を容易にすることを目的としています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:570
msgid "To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources` link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr "この機能を使用するには、 `quarkus-flyway` エクステンションがインストールされている状態で Dev UI を開き、Flyway ペインの `Datasources` リンクをクリックします。 `Create Initial Migration` ボタンを押すと、次のようになります:"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:572
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr "スキーマを生成するためにHibernateが実行するSQLを含んだ `db/migration/V1.0.0__{appname}.sql` ファイルが作成されます"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:573
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr "`quarkus.flyway.baseline-on-migrate` が設定され、Flywayがベースラインとなるテーブルを自動的に作成するようになります"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:574
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr "`quarkus.flyway.migrate-at-start` が設定され、アプリケーションの起動時にFlywayが自動的にマイグレーションを適用するようになります"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:575
msgid "`%dev.quarkus.flyway.clean-at-start` and `%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr "dev/test モードでリロードした後、DB をクリーンにするために `%dev.quarkus.flyway.clean-at-start` と ``%test.quarkus.flyway.clean-at-start` が設定されます"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:578
msgid "This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr "このボタンはFlywayを素早く使い始めるためのものであり、本番環境でデータベーススキーマをどのように管理するかはユーザー次第です。特に `migrate-at-start` の設定はすべての環境に適しているとは限りません。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:580
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:583
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr "同じエンティティを頻繁に読み込むアプリケーションでは、Hibernate ORMのL2キャッシュを有効にするとパフォーマンスが向上します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:584
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティのキャッシュ"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:596
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    int dialInCode;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:599
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:601
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr "これは、データベースに問い合わせることなくエンティティをロードできることを意味しますが、ロードされたエンティティがデータベースの最近の変更を反映していない可能性があることを意味するので注意が必要です。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:602
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:605
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr "コレクションとリレーションはキャッシュするために個別にアノテーションする必要があります。この場合、Hibernate固有の `@org.hibernate.annotations.Cache` を使用する必要があり、さらに `CacheConcurrencyStrategy` を指定する必要があります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:609
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:614
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Country {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:618
#, no-wrap
msgid ""
"    @OneToMany\n"
"    @Cache(usage = CacheConcurrencyStrategy.READ_ONLY)\n"
"    List<City> cities;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:621
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:623
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:626
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリもL2キャッシュの恩恵を受けることができます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:628
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:630
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:635
#, no-wrap
msgid ""
"Query query = ...\n"
"query.setHint(\"org.hibernate.cacheable\", Boolean.TRUE);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:638
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` があれば、その定義で直接キャッシュを有効にすることができます。これは通常、エンティティ上で行われます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:647
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQuery(name = \"Fruits.findAll\",\n"
"      query = \"SELECT f FROM Fruit f ORDER BY f.name\",\n"
"      hints = @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\") )\n"
"public class Fruit {\n"
"   ...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:650
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr "以上です。キャッシュ技術はすでにQuarkusに統合されてデフォルトで有効になってるのでキャッシュしても問題ないものを設定するだけで十分です。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:651
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:654
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr "キャッシュはデータの異なる部分を分離するために別々の領域にデータを保存します。このような領域には名前が付けられ、各領域を独立して設定したり、統計を監視したりするのに役立ちます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:656
msgid "By default, entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr "デフォルトでは、エンティティは、その完全修飾名を冠した領域（例えば、 `org.acme.Country`）にキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:658
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr "`org.acme.Country#cities` コレクションは保持するエンティティの完全修飾名とコレクションのフィールド名を `#` 文字で区切った名前の領域にキャッシュされます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:660
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr "すべてのキャッシュされたクエリは、デフォルトでは、 `default-query-results-region` と呼ばれる一つの専用の領域に保存されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:662
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr "すべてのリージョンは、デフォルトではサイズと時間で制限されています。デフォルトでは、最大で `10000` のエントリ数、最大で `100` 秒のアイドル時間が設定されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:664
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr "各領域のサイズは、 `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` プロパティ（ _<region_name>_ を実際の領域名に置き換えてください）でカスタマイズできます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:666
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr "最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` プロパティ （_<region_name>_ を実際のリージョン名に置き換えてください）で時間（下記の時間のフォーマットに関する注意を参照）を指定します。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:670
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "領域名にドットが含まれている場合は二重引用符が必須です。次のようになります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:674
#, no-wrap
msgid "quarkus.hibernate-orm.cache.\"org.acme.MyEntity\".memory.object-count=1000\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:679
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシュの制限"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:682
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシュ技術は現在のところ非常に初歩的で制約があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:684
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr "Quarkusの開発チームは最初から _ある程度の_ キャッシュ機能があった方が何もないよりは良いと考えました。将来のリリースではより良いキャッシュソリューションが統合されることを期待しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:688
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr "これらのキャッシュはローカルに保持されているため、他のアプリケーションによって永続ストアに変更が加えられても無効化されたり更新されたりすることはありません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:690
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr "また、同じアプリケーションの複数のコピーを（Kubernetes/OpenShiftなどのクラスタで）実行している場合、アプリケーションの別々のコピーのキャッシュは同期されません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:692
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr "これらの理由から、ある種の仮定が成り立つ場合にのみキャッシュを有効にすることが適しています。私たちは、変化しないエンティティ、コレクション、およびクエリのみをキャッシュすることを強く推奨します。あるいは、そのようなエンティティが実際に変更され、古くなった（stale）ものを読み取ったとしても、アプリケーションの期待値に影響を与えないようにする必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:694
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションがL2キャッシュから最高のパフォーマンスを引き出し、かつ予期せぬ動作を避けることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:699
#, no-wrap
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data.\n"
msgstr "不変のデータだけでなく、ある文脈では、可変のデータに対してもキャッシュを有効にすることが許容されるかもしれません。これは、頻繁に読み込まれ、ある程度の陳腐化を許容できるようなエンティティを選択した場合、必要なトレードオフとなり得ます。この「許容される陳腐化の度合い」は、eviction プロパティを設定することで調整できます。しかし、これは推奨されておらず、データに予期せぬ影響を与える可能性があるため、細心の注意を払って行う必要があります。\n"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:701
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "理想的には、変更可能なデータでキャッシュを有効にするのではなく、クラスタ化されたキャッシュを使用することがより良い解決策です。しかし、現時点では、Quarkusはそのような実装を提供していません：この必要性を知らせれば、チームがこれを考慮することができますので、お気軽にご連絡ください。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:704
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr "最後に、 `hibernate.cache.use_second_level_cache` を `false` に設定することで、L2キャッシュをグローバルで無効化できます。この設定は、 `persistence.xml` 設定ファイルで指定する必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:706
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr "L2キャッシュを無効にすると、すべてのキャッシュアノテーションは無視され、すべてのクエリはキャッシュを無視して実行されます。これは通常、問題を診断する場合にのみ有効です。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:708
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:710
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティクラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:712
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus エクステンションがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:714
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:721
#, no-wrap
msgid ""
"    <!-- Add the Hibernate Envers extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-hibernate-envers</artifactId>\n"
"    </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:724
msgid "At this point the extension does not expose additional configuration properties."
msgstr "Quarkusの設定プロパティを使用して、複数の永続化ユニットを定義することができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:726
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr "Hibernate Enversの詳細については、 link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]を参照してください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:728
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:733
msgid "Either xref:micrometer.adoc[Micrometer] or xref:microprofile-metrics.adoc[SmallRye Metrics] are capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.  When using link:microprofile-metrics[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr "xref:micrometer.adoc[Micrometer] または xref:microprofile-metrics.adoc[SmallRye Metrics] は、Hibernate ORMが実行時に収集するメトリクスを公開することができます。 `/q/metrics` エンドポイントで Hibernate メトリクスを公開するには、プロジェクトがメトリクスエクステンションに依存していることを確認し、設定プロパティ `quarkus.hibernate-orm.metrics.enabled` を `true` に設定します。 link:microprofile-metrics[SmallRye Metrics] を使用する場合はメトリクスは `vendor` スコープで利用可能になります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:734
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:738
msgid "Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using this extension you will mostly have the same experience as using the original library."
msgstr "Quarkusは使用するライブラリを変更しません。このルールはHibernate ORMにも適用されます。このエクステンションを使用すると、元のライブラリを使用した場合とほとんど同じエクスペリエンスが得られます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:742
msgid "But while they share the same code, Quarkus does configure some components automatically and injects custom implementations for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to know what is being done."
msgstr "しかし、両者は同じコードを共有していますが、Quarkusはいくつかのコンポーネントを自動的に設定し、いくつかの拡張ポイントにカスタム実装をインジェクションしています。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:743
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:747
msgid "Hibernate ORM can use build time enhanced entities; normally this is not mandatory, but it's useful and will have your applications perform better."
msgstr "Hibernate ORMでは、ビルド時に拡張されたエンティティを使用できます。通常、これは必須ではありませんが便利でアプリケーションのパフォーマンスを向上させることができます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:750
msgid "Typically, you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr "通常は、ビルドスクリプトにHibernate Enhancementプラグインを含める必要がありますが、QuarkusではEnhancementステップがQuarkusアプリケーションのビルドと分析に統合されているため、その必要はありません。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:755
msgid "Due to the usage of enhancement, using the `clone()` method on entities is currently not supported as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr "Enhancement を使用しているため、エンティティで `clone()` メソッドを使用することは現在サポートされていません。これは、エンティティにEnhancement 固有のフィールドもクローンされるためです。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:757
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:759
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:761
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクションマネージャーの統合"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:765
msgid "You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.  The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.  All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr "これを設定する必要はありません。Quarkusは自動的にNarayana Transaction Managerへの参照をインジェクションします。この依存関係は、Hibernate ORMエクステンションの推移的依存関係として自動的に含まれます。すべての設定はオプションです。詳細は、 xref:transaction.adoc[Quarkusでのトランザクションの使用]を参照してください。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:766
#, no-wrap
msgid "Connection pool"
msgstr "コネクションプール"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:770
msgid "Don't need to choose one either. Quarkus automatically includes the Agroal connection pool; configure your datasource as in the above examples and it will set up Hibernate ORM to use Agroal.  More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr "どちらかを選択する必要はありません。上記の例のようにデータソースを設定するだけで、Hibernate ORMがAgroalを使用するように設定されます。このコネクションプールの詳細については、 xref:datasource.adoc[Quarkus - データソース]を参照してください。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:771
#, no-wrap
msgid "Second Level Cache"
msgstr "セカンドレベルキャッシュ"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:774
msgid "as explained above in section <<caching,Caching>>, you don't need to pick an implementation.  A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr "<<caching,キャッシング>> の項で説明したように、実装を選択する必要はありません。 link:https://infinispan.org/[Infinispan]と link:https://github.com/ben-manes/caffeine[Caffeine] の技術をベースにした適切な実装は、Hibernate ORM拡張の推移依存関係に含まれており、ビルド時に自動的に統合されます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:775
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:777
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr "クラスパスに重複したファイルがある場合のXMLマッピング"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:779
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr "<<xml-mapping,XML マッピング>> ファイルは一意のパスを持つことが期待されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:784
msgid "In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.  For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path, but in different JARs), then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml` **in the same JAR as the `META-INF/orm.xml` file**."
msgstr "実際には、クラスパスに XML マッピングファイルが重複して存在するのは、非常に特殊なシナリオの場合に限られます。 例えば、2つのJARに `META-INF/orm.xml` ファイルが含まれている場合（全く同じパスで、異なるJARに含まれている）、マッピングファイルのパス `META-INF/orm.xml` は、 **<code>META-INF/orm.xml</code>** ファイルと同じJARにある `persistence.xml` からしか参照できません。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:785
#, no-wrap
msgid "JMX"
msgstr "JMX"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:790
msgid "Management beans are not working in GraalVM native images; therefore Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.  This limitation is likely permanent, as it's not a goal for native images to implement support for JMX. All such metrics can be accessed in other ways."
msgstr "マネージメントBeanはGraalVMのネイティブイメージでは動作しません。したがって、ネイティブイメージにコンパイルした場合、JMX Beanに統計や管理操作を登録するHibernateの機能は無効になります。ネイティブイメージがJMXのサポートを実装することが目標ではないため、この制限はおそらく永久的なものです。このようなメトリクスはすべて他の方法でアクセスできます。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:791
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:794
msgid "Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images, as JACC is not available - nor useful - in native mode."
msgstr "GraalVMのネイティブイメージを構築する際には、JACCと統合するHibernate ORMの機能は無効になります。なぜなら、JACCはネイティブ・モードでは利用できず、有用でもないからです。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:795
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:800
msgid "It is not possible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.  Since Quarkus provides out of the box support for CDI, we believe using injection or programmatic CDI lookup to be a better approach.  This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.  If you badly need to bind it to a ThreadLocal it should be trivial to implement in your own code."
msgstr "Hibernate ORMの `ThreadLocalSessionContext` ヘルパーはサポートが実装されていないため、使用することはできません。QuarkusはCDIのアウトオブボックスサポートを提供しているため、インジェクションまたはプログラムによるCDIルックアップを使用する方が良いアプローチであると考えられます。また、この機能は、リアクティブコンポーネントやより現代的なコンテキストプロパゲーション技術とうまく統合されていないため、このレガシー機能には将来性がないと考えています。もし、ThreadLocal にバインドする必要があるのなら、あなた自身のコードで実装するのは簡単なはずです。"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:801
#, no-wrap
msgid "JNDI"
msgstr "JNDI"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:808
msgid "The JNDI technology is commonly used in other runtimes to integrate different components.  A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name, and then have Hibernate ORM configured to look these components up by name.  But in Quarkus this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.  As a precaution, to avoid unexpected use of JNDI, the whole support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.  This is both a security precaution and an optimisation."
msgstr "JNDI技術は、異なるコンポーネントを統合するために他のランタイムで一般的に使用されています。一般的な使用例は、Java Enterpriseサーバーで、TransactionManagerとDatasourceコンポーネントを名前にバインドし、Hibernate ORMがこれらのコンポーネントを名前で検索するように設定することです。しかし、Quarkusでは、コンポーネントが直接インジェクションされるため、このユースケースは適用されず、JNDIサポートは不要なレガシーとなります。JNDIの予期せぬ使用を避けるため、QuarkusのHibernate ORMエクステンションでは、JNDIのサポートはすべて無効化されています。これはセキュリティ上の予防策であり、最適化でもあります。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:809
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:811
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:815
msgid "When importing a `import.sql` to set up your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (`;`) to terminate each statement.  The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the `;` terminator character if you're reusing existing scripts.  This is useful so to allow multi-line statements and human friendly formatting."
msgstr "データベースをセットアップするために `import.sql` をインポートする際、QuarkusはHibernate ORMを再構成し、各ステートメントの最後にセミコロン（ ';' ）を必要とすることに留意してください。Hibernateのデフォルトでは、改行以外の終端文字を必要とせず、1行に1つのステートメントがあります。既存のスクリプトを再利用する場合は、終端文字として「;」を使用するようにスクリプトを変換することを忘れないでください。これは、複数行のステートメントを可能にし、人間が使いやすいフォーマットにするために役立ちます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:816
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "シンプルになったHibernate ORM with Panache"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:819
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] エクステンションはアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供してHibernate ORMを簡単に使えるようにし、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:820
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:824
msgid "Datasource configuration is extremely simple, but is covered in a different guide as technically it's implemented by the Agroal connection pool extension for Quarkus."
msgstr "データソースの設定は非常にシンプルですが、技術的にはQuarkus用のAgroal接続プールエクステンションによって実装されているため、別のガイドで説明します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:826
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr "詳細は xref:datasource.adoc[Quarkus - データソース]をご覧ください。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:828
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:831
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{orm-doc-url-prefix}#multitenacy[Hibernate User Guide])."
msgstr "「一般的にマルチテナンシーとは、ソフトウェア開発において、1つのアプリケーションのインスタンスが複数のクライアント（テナント）に同時にサービスを提供するアーキテクチャを示す言葉です。SaaSソリューションでは非常に一般的なものです。このようなシステムでは各テナントに関わる情報（データ、カスタマイズなど）を分離することが特に重要な課題となります。これには、データベースに保存されている各テナントが所有するデータも含まれます」（ link:{orm-doc-url-prefix}#multitenacy[Hibernate User Guide]）。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:833
msgid "Quarkus currently supports the link:{orm-doc-url-prefix}#multitenacy-separate-database[separate database] and the link:{orm-doc-url-prefix}#multitenacy-separate-schema[separate schema] approach."
msgstr "Quarkusは現在、 link:{orm-doc-url-prefix}#multitenacy-separate-database[独立したデータベース]と link:{orm-doc-url-prefix}#multitenacy-separate-schema[独立したスキーマ]のアプローチをサポートしています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:835
msgid "To see multitenancy in action, you can check out the {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr "マルチテナンシーの動作を確認するには、 {quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] クイックスタートをご覧ください。"

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:836
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:839
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "まずは `/{tenant}` エンドポイントを実装してみましょう。下のソースコードを見るとわかるように、これは通常の JAX-RS リソースです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:847
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.persistence.EntityManager;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:851
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/{tenant}\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:854
#, no-wrap
msgid ""
"    @Inject\n"
"    EntityManager entityManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:861
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"fruits\")\n"
"    public Fruit[] getFruits() {\n"
"        return entityManager.createNamedQuery(\"Fruits.findAll\", Fruit.class)\n"
"                .getResultList().toArray(new Fruit[0]);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:863
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:900
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:866
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr "受信したリクエストからテナントを解決し、特定のテナント構成にマッピングするためには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` インターフェースの実装を作成する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:870
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:873
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:917
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.runtime.tenant.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:877
#, no-wrap
msgid ""
"@PersistenceUnitExtension // <1>\n"
"@RequestScoped // <2>\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:880
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:885
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDefaultTenantId() {\n"
"        return \"base\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:890
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolveTenantId() {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:895
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant config\n"
"            return getDefaultTenantId();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:898
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:903
msgid "Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier to tell Quarkus it should be used in the default persistence unit."
msgstr "TenantResolverの実装に `@PersistenceUnitExtension` という修飾語を付けて、Quarkusにデフォルトの永続化ユニットで使用することを伝えます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:905
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr "<<multiple-persistence-units,名前付きの永続化ユニット>> には、 `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:906
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "Beanは、テナントの解決が入ってくるリクエストに依存するため `@RequestScoped` にします。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:908
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装ではテナントはリクエストパスから解決されるので、テナントが推測できない場合はデフォルトのテナント識別子が返されます。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:912
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナンシー]も使用していて、OIDCとHibernate ORMの両方のテナントIDが同じで、Vert.xの `RoutingContext` から抽出する必要がある場合は、OIDCテナントリゾルバからHibernate ORMテナントリゾルバに、 `RoutingContext` 属性としてテナントIDを渡すことができます。例:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:921
#, no-wrap
msgid ""
"@PersistenceUnitExtension\n"
"@RequestScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:931
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolveTenantId() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:934
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:939
msgid "In general, it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.  Therefore, you have to disable it, and you need to make sure that the tables are created per schema.  The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr "一般的に、Hibernate ORMのデータベース生成機能をマルチテナンシーのセットアップと組み合わせて使用することはできません。そのため、この機能を無効にして、テーブルがスキーマごとに作成されるようにする必要があります。以下のセットアップでは、 xref:flyway.adoc[Flyway] エクステンションを使用してこの目的を達成します。"

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:940
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:944
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source.  CAUTION: Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the DATABASE approach below."
msgstr "すべてのテナントに同じデータソースを使用し、そのデータソース内に各テナント用のスキーマを作成する必要があります。注意：MariaDB/MySQLのような一部のデータベースは、データベーススキーマをサポートしていません。このような場合には、以下のようなDATABASEアプローチを使用する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:949
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1004
#, no-wrap
msgid ""
"# Disable generation\n"
"quarkus.hibernate-orm.database.generation=none\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:954
#, no-wrap
msgid ""
"# Enable SCHEMA approach and use default datasource\n"
"quarkus.hibernate-orm.multitenant=SCHEMA\n"
"# You could use a non-default datasource by using the following setting \n"
"# quarkus.hibernate-orm.multitenant-schema-datasource=other\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:960
#, no-wrap
msgid ""
"# The default data source used for all tenant schemas\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:965
#, no-wrap
msgid ""
"# Enable Flyway configuration to create schemas\n"
"quarkus.flyway.schemas=base,mycompany\n"
"quarkus.flyway.locations=classpath:schema\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:968
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:981
#, no-wrap
msgid ""
"CREATE SEQUENCE base.known_fruits_id_seq;\n"
"SELECT setval('base.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE base.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO base.known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO base.known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:992
#, no-wrap
msgid ""
"CREATE SEQUENCE mycompany.known_fruits_id_seq;\n"
"SELECT setval('mycompany.\"known_fruits_id_seq\"', 3);\n"
"CREATE TABLE mycompany.known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO mycompany.known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:996
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:999
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1007
#, no-wrap
msgid ""
"# Enable DATABASE approach\n"
"quarkus.hibernate-orm.multitenant=DATABASE\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1013
#, no-wrap
msgid ""
"# Default tenant 'base'\n"
"quarkus.datasource.base.db-kind=postgresql\n"
"quarkus.datasource.base.username=quarkus_test\n"
"quarkus.datasource.base.password=quarkus_test\n"
"quarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1019
#, no-wrap
msgid ""
"# Tenant 'mycompany'\n"
"quarkus.datasource.mycompany.db-kind=postgresql\n"
"quarkus.datasource.mycompany.username=mycompany\n"
"quarkus.datasource.mycompany.password=mycompany\n"
"quarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5433/mycompany\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1023
#, no-wrap
msgid ""
"# Flyway configuration for the default datasource\n"
"quarkus.flyway.locations=classpath:database/default\n"
"quarkus.flyway.migrate-at-start=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1027
#, no-wrap
msgid ""
"# Flyway configuration for the mycompany datasource\n"
"quarkus.flyway.mycompany.locations=classpath:database/mycompany\n"
"quarkus.flyway.mycompany.migrate-at-start=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1030
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1032
msgid "Default schema (`src/main/resources/database/default/V1.0.0__create_fruits.sql`):"
msgstr "デフォルトスキーマ ( `src/main/resources/database/default/V1.0.0__create_fruits.sql` ):"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1045
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Banana');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1048
msgid "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "Mycompany schema (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1061
#, no-wrap
msgid ""
"CREATE SEQUENCE known_fruits_id_seq;\n"
"SELECT setval('known_fruits_id_seq', 3);\n"
"CREATE TABLE known_fruits\n"
"(\n"
"  id   INT,\n"
"  name VARCHAR(40)\n"
");\n"
"INSERT INTO known_fruits(id, name) VALUES (1, 'Avocado');\n"
"INSERT INTO known_fruits(id, name) VALUES (2, 'Apricots');\n"
"INSERT INTO known_fruits(id, name) VALUES (3, 'Blackberries');\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1063
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1071
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.  Creating an application-scoped bean that implements this interface and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a <<multiple-persistence-units,named persistence unit>>)  will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.  Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr "サポートするさまざまなテナントに対してより動的な設定が必要で、設定ファイルに複数のエントリを残したくない場合は、 `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` インターフェースを使用して接続を取得するための独自のロジックを実装することができます。このインターフェースを実装するアプリケーションスコープのBeanを作成し、 `@PersistenceUnitExtension` （または link:#multiple-persistence-units[名前付き永続化ユニット]の場合は `@PersistenceUnitExtension(\"nameOfYourPU\")` ）アノテーションを付けることで、現在のQuarkusのデフォルトの実装である `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver` を置き換えることができます。カスタムコネクションリゾルバを使用すると、例えばデータベースからテナント情報を読みとった情報に基づいて実行時にテナントごとに接続を作成することができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1073
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1077
msgid "You can assign an link:{orm-doc-url-prefix}#events-interceptors[`org.hibernate.Interceptor`] to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr "link:{orm-doc-url-prefix}#events-interceptors[`org.hibernate.Interceptor`]を `SessionFactory` に割り当てるには、適切な修飾子を持つ CDI Bean を定義するだけです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1089
#, no-wrap
msgid ""
"@PersistenceUnitExtension // <1>\n"
"public static class MyInterceptor extends EmptyInterceptor { // <2>\n"
"    @Override\n"
"    public boolean onLoad(Object entity, Serializable id, Object[] state, // <3>\n"
"            String[] propertyNames, Type[] types) {\n"
"        // ...\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1092
msgid "Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier to tell Quarkus it should be used in the default persistence unit."
msgstr "インターセプターの実装に `@PersistenceUnitExtension` の修飾子を付けて、Quarkusにデフォルトの永続化ユニットで使用されるように伝えます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1094
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr "<<multiple-persistence-units,名前付きの永続化ユニット>> には `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用する"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1095
msgid "Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly."
msgstr "`org.hibernate.EmptyInterceptor` を拡張するか、 `org.hibernate.Interceptor` を直接実装する。"

#. type: Plain text
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1096
msgid "Implement methods as necessary."
msgstr "必要に応じてメソッドを実装する。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1103
msgid "By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped, which means only one interceptor instance will be created per application and reused across all entity managers.  For this reason, the interceptor implementation must be thread-safe."
msgstr "デフォルトでは、 `@PersistenceUnitExtension` アノテーションの付けられたインターセプター Beanはアプリケーションスコープになります。つまり、アプリケーションごとにインターセプターのインスタンスが一つのみ作成され、すべてのエンティティマネージャーで再利用されます。このため、インターセプターの実装はスレッドセーフである必要があります。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1107
msgid "In order to create one interceptor instance per entity manager instead, annotate your bean with `@Dependent`.  In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr "エンティティマネージャーごとに1つのインターセプターのインスタンスを作成するには、Beanに `@Dependent` アノテーションを付けます。この場合はインターセプターの実装はスレッドセーフである必要はありません。"

#. type: delimited block =
#: upstream/_versions/3.0/guides/hibernate-orm.adoc:1113
msgid "Due to a limitation in Hibernate ORM itself, `@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr "Hibernate ORM 自体の制限により、 `@Dependent` スコープのインターセプターの `@PreDestroy` メソッドは決して呼び出されません。"
