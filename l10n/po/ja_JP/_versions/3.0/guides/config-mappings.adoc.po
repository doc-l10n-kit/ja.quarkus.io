msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/config-mappings.adoc:6
#, no-wrap
msgid "Mapping configuration to objects"
msgstr "設定をオブジェクトにマッピング"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:16
msgid "With config mappings it is possible to group multiple configuration properties in a single interface that share the same prefix."
msgstr "設定マッピングでは、同じプレフィックスを持つ複数の設定プロパティを1つのインターフェースにまとめることができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/config-mappings.adoc:18
#, no-wrap
msgid "`@ConfigMapping`"
msgstr "`@ConfigMapping`"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:22
msgid "A config mapping requires an interface with minimal metadata configuration and annotated with the `@io.smallrye.config.ConfigMapping` annotation."
msgstr "設定マッピングでは、最小メタデータ設定で、 `@io.smallrye.config.ConfigMapping` のアノテーションが付いたインターフェースが必要です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:28
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:31
#: upstream/_versions/3.0/guides/config-mappings.adoc:64
#: upstream/_versions/3.0/guides/config-mappings.adoc:148
#: upstream/_versions/3.0/guides/config-mappings.adoc:177
#, no-wrap
msgid ""
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:36
msgid "The `Server` interface is able to map configuration properties with the name `server.host` into the `Server.host()` method and `server.port` into `Server.port()` method. The configuration property name to look up is built from the prefix, and the method name with `.` (dot) as the separator."
msgstr "`Server` インターフェースは、 `server.host` という名前の設定プロパティを `Server.host()` メソッドに、 `server.port` を `Server.port()` メソッドにマッピングすることができます。検索する設定プロパティ名は、プレフィックスと、 `.` (ドット)をセパレータとするメソッド名から構築されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:39
msgid "If a mapping fails to match a configuration property a `NoSuchElementException` is thrown, unless the mapped element is an `Optional`."
msgstr "マッピングが設定プロパティと一致しない場合、マッピングされた要素が `Optional` でない限り、 `NoSuchElementException` がスローされます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:40
#, no-wrap
msgid "Registration"
msgstr "登録"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:44
msgid "When a Quarkus application starts, a config mapping can be registered twice. One time for _STATIC INIT_ and a second time for _RUNTIME INIT_:"
msgstr "Quarkusアプリケーションの起動時に、設定マッピングを2回登録することができます。1回は _STATIC INIT_用、2回目は _RUNTIME INIT_用です。"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:45
#, no-wrap
msgid "STATIC INIT"
msgstr "STATIC INIT"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:52
msgid "Quarkus starts some of its services during static initialization, and `Config` is usually one of the first things that is created. In certain situations it may not be possible to correctly initialize a config mapping. For instance, if the mapping requires values from a custom `ConfigSource`. For this reason, any config mapping requires the annotation `@io.quarkus.runtime.configuration.StaticInitSafe` to mark the mapping as safe to be used at this stage. Learn more about xref:config-extending-support.adoc#custom-config-source[registration] of a custom `ConfigSource`."
msgstr "Quarkusは静的初期化中にいくつかのサービスを開始しますが、 `Config` は通常、最初に作成されるものの1つです。状況によっては、設定マッピングを正しく初期化できない場合があります。例えば、マッピングがカスタム `ConfigSource` からの値を必要とする場合などです。このため、どのような設定マッピングでも、この段階でマッピングを安全に使用できるとマークするには、アノテーション `@io.quarkus.runtime.configuration.StaticInitSafe` が必要になります。カスタム `ConfigSource` の link:config-extending-support.html#custom-config-source[登録]についてはこちらをご覧ください。"

#. type: Title =====
#: upstream/_versions/3.0/guides/config-mappings.adoc:53
#, no-wrap
msgid "Example"
msgstr "例"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:61
#, no-wrap
msgid ""
"@StaticInitSafe\n"
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String host();\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:66
#, no-wrap
msgid "RUNTIME INIT"
msgstr "RUNTIME INIT"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:70
msgid "The _RUNTIME INIT_ stage happens after _STATIC INIT_. There are no restrictions at this stage, and any config mapping is added to the `Config` instance as expected."
msgstr "_RUNTIME INIT_ ステージは、 _STATIC INIT_ の後に起こります。この段階では何の制限もなく、あらゆる設定マッピングが期待通りに `Config` インスタンスに追加されます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:71
#, no-wrap
msgid "Retrieval"
msgstr "取得"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:74
msgid "A config mapping interface can be injected into any CDI aware bean:"
msgstr "設定マッピングインタフェースは，任意のCDI対応Beanに注入することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:80
#, no-wrap
msgid ""
"class BusinessBean {\n"
"    @Inject\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:85
#, no-wrap
msgid ""
"    public void businessMethod() {\n"
"        String host = server.host();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:89
msgid "In non-CDI contexts, use the API `io.smallrye.config.SmallRyeConfig#getConfigMapping` to retrieve the config mapping instance:"
msgstr "CDI以外のコンテキストでは、API `io.smallrye.config.SmallRyeConfig#getConfigMapping` を使用して、設定マッピングインスタンスを取得します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:94
#, no-wrap
msgid ""
"SmallRyeConfig config = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class);\n"
"Server server = config.getConfigMapping(Server.class);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:96
#, no-wrap
msgid "Nested groups"
msgstr "ネストされたグループ"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:99
msgid "A nested mapping provides a way to subgroup other config properties:"
msgstr "ネストされたマッピングは、他の設定プロパティをサブグループ化する方法を提供します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:105
#: upstream/_versions/3.0/guides/config-mappings.adoc:399
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface Server {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:107
#: upstream/_versions/3.0/guides/config-mappings.adoc:401
#, no-wrap
msgid "    int port();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:109
#, no-wrap
msgid "    Log log();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:112
#, no-wrap
msgid ""
"    interface Log {\n"
"        boolean enabled();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:114
#, no-wrap
msgid "        String suffix();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:118
#, no-wrap
msgid ""
"        boolean rotate();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.0/guides/config-mappings.adoc:120
#: upstream/_versions/3.0/guides/config-mappings.adoc:150
#: upstream/_versions/3.0/guides/config-mappings.adoc:183
#: upstream/_versions/3.0/guides/config-mappings.adoc:209
#: upstream/_versions/3.0/guides/config-mappings.adoc:228
#: upstream/_versions/3.0/guides/config-mappings.adoc:287
#: upstream/_versions/3.0/guides/config-mappings.adoc:341
#: upstream/_versions/3.0/guides/config-mappings.adoc:375
#: upstream/_versions/3.0/guides/config-mappings.adoc:406
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:128
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.log.enabled=true\n"
"server.log.suffix=.log\n"
"server.log.rotate=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:131
msgid "The method name of a mapping group acts as sub-namespace to the configurations properties."
msgstr "マッピンググループのメソッド名は、設定プロパティのサブネームスペースとして機能します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:132
#, no-wrap
msgid "Overriding property names"
msgstr "プロパティ名のオーバーライド"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:134
#, no-wrap
msgid "`@WithName`"
msgstr "`@WithName`"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:138
msgid "If a method name, or a property name do not match with each other, the `@WithName` annotation can override the method name mapping and use the name supplied in the annotation:"
msgstr "メソッド名やプロパティ名が互いに一致しない場合、 `@WithName` アノテーションはメソッド名のマッピングを上書きし、アノテーションで提供された名前を使用することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:145
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @WithName(\"name\")\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:155
#, no-wrap
msgid ""
"server.name=localhost\n"
"server.port=8080\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:157
#, no-wrap
msgid "`@WithParentName`"
msgstr "`@WithParentName`"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:161
msgid "The `@WithParentName` annotation allows to configurations mapping to inherit its container name, simplifying the configuration property name required to match the mapping:"
msgstr "`@WithParentName` アノテーションを使用すると、設定マッピングがそのコンテナー名を継承できるようになり、マッピングに一致させるために必要な設定プロパティ名が簡素化されます:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:167
#, no-wrap
msgid ""
"interface Server {\n"
"    @WithParentName\n"
"    ServerHostAndPort hostAndPort();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:171
#, no-wrap
msgid ""
"    @WithParentName\n"
"    ServerInfo info();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:174
#, no-wrap
msgid ""
"interface ServerHostAndPort {\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:181
#, no-wrap
msgid ""
"interface ServerInfo {\n"
"    String name();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:189
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.name=konoha\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:194
msgid "Without the `@WithParentName` the method `name()` requires the configuration property `server.info.name`. Because we use `@WithParentName`, the `info()` mapping will inherit the parent name from `Server` and `name()` maps to `server.name` instead."
msgstr "`@WithParentName` を使用しない場合、メソッド `name()` は設定プロパティ `server.info.name` を必要とします。 `@WithParentName` を使用しているため、 `info()` のマッピングは `Server` から親の名前を継承し、 `name()` は代わりに `server.name` にマッピングします。"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:195
#, no-wrap
msgid "NamingStrategy"
msgstr "ネーミング戦略"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:198
msgid "Method names in camelCase map to kebab-case property names:"
msgstr "キャメルケースのメソッド名は、ケバブケースのプロパティ名にマッピングされます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:204
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:207
#: upstream/_versions/3.0/guides/config-mappings.adoc:226
#, no-wrap
msgid ""
"    int thePort();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:214
#, no-wrap
msgid ""
"server.the-host=localhost\n"
"server.the-port=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:217
msgid "The mapping strategy can be adjusted by setting `namingStrategy` value in the `@ConfigMapping` annotation:"
msgstr "マッピング戦略は、 `@ConfigMapping` のアノテーションで `namingStrategy` の値を設定することで調整できます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:223
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\", namingStrategy = ConfigMapping.NamingStrategy.VERBATIM)\n"
"public interface ServerVerbatimNamingStrategy {\n"
"    String theHost();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:233
#, no-wrap
msgid ""
"server.theHost=localhost\n"
"server.thePort=8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:236
msgid "The `@ConfigMapping` annotation support the following naming strategies:"
msgstr "`@ConfigMapping` アノテーションは、以下のネーミング戦略をサポートします:"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:238
msgid "`KEBAB_CASE` (default) - The method name is derived by replacing case changes with a dash to map the configuration property."
msgstr "`KEBAB_CASE` （デフォルト） - メソッド名は、設定プロパティをマッピングするために、ケースの変更をダッシュに置き換えて導き出されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:239
msgid "`VERBATIM` - The method name is used as is to map the configuration property."
msgstr "`VERBATIM` - メソッド名は、設定プロパティをマッピングするためにそのまま使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:240
msgid "`SNAKE_CASE` - The method name is derived by replacing case changes with an underscore to map the configuration property."
msgstr "`SNAKE_CASE` - メソッド名は、設定プロパティをマッピングするためにケースの変更をアンダースコアで置き換えて導き出されます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:241
#, no-wrap
msgid "Conversions"
msgstr "変換"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:244
msgid "A config mapping class support automatic conversions of all types available for conversion in `Config`:"
msgstr "設定マッピングクラスは、 `Config` で変換可能なすべてのタイプの自動変換をサポートしています。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:251
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface SomeTypes {\n"
"    @WithName(\"int\")\n"
"    int intPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:254
#, no-wrap
msgid ""
"    @WithName(\"int\")\n"
"    Integer intWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:257
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    long longPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:260
#, no-wrap
msgid ""
"    @WithName(\"long\")\n"
"    Long longWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:263
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    float floatPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:266
#, no-wrap
msgid ""
"    @WithName(\"float\")\n"
"    Float floatWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:269
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    double doublePrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:272
#, no-wrap
msgid ""
"    @WithName(\"double\")\n"
"    Double doubleWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:275
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    char charPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:278
#, no-wrap
msgid ""
"    @WithName(\"char\")\n"
"    Character charWrapper();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:281
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    boolean booleanPrimitive();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:285
#, no-wrap
msgid ""
"    @WithName(\"boolean\")\n"
"    Boolean booleanWrapper();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:296
#, no-wrap
msgid ""
"int=9\n"
"long=9999999999\n"
"float=99.9\n"
"double=99.99\n"
"char=c\n"
"boolean=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:299
msgid "This is also valid for `Optional` and friends:"
msgstr "これは `Optional` と friends にも有効です。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:305
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Optionals {\n"
"    Optional<Server> server();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:307
#, no-wrap
msgid "    Optional<String> optional();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:310
#, no-wrap
msgid ""
"    @WithName(\"optional.int\")\n"
"    OptionalInt optionalInt();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:313
#, no-wrap
msgid ""
"    interface Server {\n"
"        String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:317
#, no-wrap
msgid ""
"        int port();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:320
msgid "In this case, the mapping won't fail if there is no configuration property to match the mapping."
msgstr "この場合、マッピングにマッチする設定プロパティがなければ、マッピングは失敗しません。"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:321
#, no-wrap
msgid "`@WithConverter`"
msgstr "`@WithConverter`"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:324
msgid "The `@WithConverter` annotation provides a way to set a `Converter` to use in a specific mapping:"
msgstr "`@WithConverter` アノテーションは、特定のマッピングで使用する `Converter` を設定する方法を提供します。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:332
#, no-wrap
msgid ""
"@ConfigMapping\n"
"public interface Converters {\n"
"    @WithConverter(FooBarConverter.class)\n"
"    String foo();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:339
#, no-wrap
msgid ""
"public static class FooBarConverter implements Converter<String> {\n"
"    @Override\n"
"    public String convert(final String value) {\n"
"        return \"bar\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:345
#, no-wrap
msgid "foo=foo\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:348
msgid "A call to `Converters.foo()` results in the value `bar`."
msgstr "`Converters.foo()` を呼び出すと、 `bar` という値が得られます。"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:349
#, no-wrap
msgid "Collections"
msgstr "Collections"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:352
msgid "A config mapping is also able to map collections types `List` and `Set`:"
msgstr "また、設定マッピングは、コレクションタイプ `List` と `Set` をマッピングすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:358
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface ServerCollections {\n"
"    Set<Environment> environments();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:361
#, no-wrap
msgid ""
"    interface Environment {\n"
"        String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:363
#, no-wrap
msgid "        List<App> apps();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:366
#, no-wrap
msgid ""
"        interface App {\n"
"            String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:368
#, no-wrap
msgid "            List<String> services();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:373
#, no-wrap
msgid ""
"            Optional<List<String>> databases();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:384
#, no-wrap
msgid ""
"server.environments[0].name=dev\n"
"server.environments[0].apps[0].name=rest\n"
"server.environments[0].apps[0].services=bookstore,registration\n"
"server.environments[0].apps[0].databases=pg,h2\n"
"server.environments[0].apps[1].name=batch\n"
"server.environments[0].apps[1].services=stock,warehouse\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:389
msgid "The `List` or `Set` mappings can use xref:config-reference.adoc#indexed-properties[indexed properties] to map configuration values in mapping groups. For collection with simple element types like `String`, their configuration value is a comma separated string."
msgstr "`List` や `Set` のマッピングでは、 link:config-reference.html#indexed-properties[インデックス付きのプロパティ]を使用して、マッピンググループの設定値をマッピングすることができます。 `String` のような単純な要素タイプを持つコレクションの場合、その設定値はコンマ区切りの文字列です。"

#. type: Title ====
#: upstream/_versions/3.0/guides/config-mappings.adoc:390
#, no-wrap
msgid "Maps"
msgstr "マップ"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:393
msgid "A config mapping is also able to map a `Map`:"
msgstr "また、設定マッピングは、 `Map` をマッピングすることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:404
#, no-wrap
msgid ""
"    Map<String, String> form();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:414
#, no-wrap
msgid ""
"server.host=localhost\n"
"server.port=8080\n"
"server.form.login-page=login.html\n"
"server.form.error-page=error.html\n"
"server.form.landing-page=index.html\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:418
msgid "The configuration property needs to specify an additional name to act as the key. In this case the `form()` `Map` will contain three elements with the keys `login-page`, `error-page` and `landing-page`."
msgstr "設定プロパティでは、キーとして機能する追加の名前を指定する必要があります。この場合、 `form()` `Map` には、 `login-page`, `error-page`, `landing-page` というキーを持つ3つの要素が含まれます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:419
#, no-wrap
msgid "Defaults"
msgstr "デフォルト"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:423
msgid "The `@WithDefault` annotation allows to set a default property into a mapping (and prevent and error if the configuration value is not available in any `ConfigSource`):"
msgstr "`@WithDefault` アノテーションにより、デフォルトのプロパティをマッピングに設定することができます（また、設定値がどの `ConfigSource` においても利用できない場合はエラーになりません）。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:429
#, no-wrap
msgid ""
"public interface Defaults {\n"
"    @WithDefault(\"foo\")\n"
"    String foo();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:433
#, no-wrap
msgid ""
"    @WithDefault(\"bar\")\n"
"    String bar();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:437
msgid "No configuration properties required. The `Defaults.foo()` will return the value `foo` and `Defaults.bar()` will return the value `bar`."
msgstr "設定プロパティは必要ありません。 `Defaults.foo()` は値 `foo` を、 `Defaults.bar()` は値 `bar` を返します。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:438
#, no-wrap
msgid "Validation"
msgstr "バリデーション"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:442
msgid "A config mapping may combine annotations from https://beanvalidation.org[Bean Validation] to validate configuration values:"
msgstr "設定マッピングは、設定値を検証するために link:https://beanvalidation.org[Bean Validation]からのアノテーションを組み合わせることができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:449
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"interface Server {\n"
"    @Size(min = 2, max = 20)\n"
"    String host();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:453
#, no-wrap
msgid ""
"    @Max(10000)\n"
"    int port();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:457
msgid "For validation to work, the `quarkus-hibernate-validator` extension is required, and it is performed automatically."
msgstr "検証が機能するためには、 `quarkus-hibernate-validator` のエクステンションが必要で、自動的に実行されます。"

#. type: Title ===
#: upstream/_versions/3.0/guides/config-mappings.adoc:458
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:462
msgid "A mapping interface implementation is not a proxy, so it cannot be mocked directly with `@InjectMock` like other CDI beans. One trick is to make it proxyable with a producer method:"
msgstr "マッピングインターフェースの実装はプロキシではありませんので、他のCDI Beanのように `@InjectMock` で直接モックすることはできません。一つの方法として、プロデューサ・メソッドでプロキシ可能にすることがあります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:468
#, no-wrap
msgid ""
"public class ServerMockProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:476
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    Server server() {\n"
"        return config.unwrap(SmallRyeConfig.class).getConfigMapping(Server.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:479
msgid "The `Server` can be injected as a mock into a Quarkus test class with `@InjectMock`:"
msgstr "`Server` は、モックとして `@InjectMock` でQuarkusのテストクラスに注入することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:486
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class ServerMockTest {\n"
"    @InjectMock\n"
"    Server server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:493
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(server.host()).thenReturn(\"localhost\");\n"
"        assertEquals(\"localhost\", server.host());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:496
msgid "The mock is just an empty shell without any actual configuration values."
msgstr "モックは、実際の設定値を持たない空のシェルに過ぎません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:499
msgid "If the goal is to only mock certain configuration values and retain the original configuration, the mocking instance requires a spy:"
msgstr "特定の設定値のみをモックし、元の設定を保持することが目的の場合、モックインスタンスにはスパイが必要となります。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:506
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"app\")\n"
"public interface AppConfig {\n"
"    @WithDefault(\"app\")\n"
"    String name();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:508
#, no-wrap
msgid "    Info info();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:516
#, no-wrap
msgid ""
"    interface Info {\n"
"        @WithDefault(\"alias\")\n"
"        String alias();\n"
"        @WithDefault(\"10\")\n"
"        Integer count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:520
#, no-wrap
msgid ""
"public static class AppConfigProducer {\n"
"    @Inject\n"
"    Config config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:532
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    @io.quarkus.test.Mock\n"
"    AppConfig appConfig() {\n"
"        AppConfig appConfig = config.unwrap(SmallRyeConfig.class).getConfigMapping(AppConfig.class);\n"
"        AppConfig appConfigSpy = Mockito.spy(appConfig);\n"
"        AppConfig.Info infoSpy = Mockito.spy(appConfig.info());\n"
"        Mockito.when(appConfigSpy.info()).thenReturn(infoSpy);\n"
"        return appConfigSpy;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:535
msgid "The `AppConfig` can be injected as a mock into a Quarkus test class with `@Inject`:"
msgstr "`AppConfig` は、モックとして `@Inject` でQuarkusのテストクラスに注入することができます。"

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:542
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class AppConfigTest {\n"
"    @Inject\n"
"    AppConfig appConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:547
#, no-wrap
msgid ""
"    @Test\n"
"    void localhost() {\n"
"        Mockito.when(appConfig.name()).thenReturn(\"mocked-app\");\n"
"        assertEquals(\"mocked-app\", server.host());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/config-mappings.adoc:552
#, no-wrap
msgid ""
"        Mockito.when(appConfig.info().alias()).thenReturn(\"mocked-alias\");\n"
"        assertEquals(\"mocked-alias\", server.info().alias());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/config-mappings.adoc:554
msgid "Nested elements need to be spied individually by Mockito."
msgstr "ネストされた要素は、Mockitoが個別にスパイする必要があります。"
