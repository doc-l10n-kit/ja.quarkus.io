msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.0/guides/rabbitmq.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with RabbitMQ"
msgstr "RabbitMQによるSmallRyeリアクティブメッセージング入門"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:11
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with RabbitMQ."
msgstr "このガイドでは、QuarkusアプリケーションがSmallRye Reactive Messagingを利用してRabbitMQと対話する方法を説明します。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:19
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:24
msgid "In this guide, we are going to develop two applications communicating with a RabbitMQ broker.  The first application sends a _quote request_ to the RabbitMQ _quote requests_ exchange and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr "このガイドでは、RabbitMQ ブローカーと通信する 2 つのアプリケーションを開発します。1つ目のアプリケーションは、RabbitMQの _見積要求_ エクスチェンジに _見積要求_ を送信し、 _見積_ キューからメッセージを消費します。2 番目のアプリケーションは、 _見積要求_ を受信し、 _見積_ を送り返します。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/rabbitmq.adoc:25
#, no-wrap
msgid "Architecture,"
msgstr "アーキテクチャ"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/rabbitmq.adoc:25
#, no-wrap
msgid "amqp-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:30
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent to the `quote-requests` exchange."
msgstr "最初のアプリケーションである `producer` では、ユーザーが HTTP エンドポイントを介していくつかの見積を要求することができます。各見積要求に対して、ランダムな識別子が生成され、ユーザーに返され、見積要求が _pending_ されます。同時に、生成されたリクエストIDは、 `quote-requests` のエクスチェンジに送信されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.0/guides/rabbitmq.adoc:31
#, no-wrap
msgid "Producer"
msgstr "プロデューサー"

#. type: Target for macro image
#: upstream/_versions/3.0/guides/rabbitmq.adoc:31
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:34
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to an exchange named `quotes`."
msgstr "2 番目のアプリケーションである `processor` は、 `quote-requests` のキューから読み取った見積にランダムな価格を付けて、 `quotes` という名前のエクスチェンジに送信します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:37
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最後に、 `producer` が見積を読み取り、server-sent event を使ってブラウザに送信します。そのため、ユーザーは見積が _pending_ から受信した価格にリアルタイムで更新されるのを見ることができます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitリポジトリをクローンする： `git clone {quickstarts-clone-url}` 、または{quickstarts-archive-url}[archive] をダウンロードする。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:46
msgid "The solution is located in the `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[directory]."
msgstr "このソリューションは `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:47
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:50
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "まず、_プロデューサー_ と _プロセッサー_ の 2 つのプロジェクトを作成する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:52
msgid "To create the _producer_ project, in a terminal run:"
msgstr "ターミナルで _プロデューサー_ プロジェクトを作成するには、次のコマンドを実行します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:59
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr "このコマンドは、プロジェクト構造を作成し、使用する2つのQuarkusエクステンションを選択します:"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:61
msgid "The Reactive Messaging RabbitMQ connector"
msgstr "Reactive Messaging RabbitMQコネクター"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:62
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr "RESTEasy ReactiveとJSONペイロードを扱うためのJacksonサポート"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:64
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "同じディレクトリーから _processor_ プロジェクトを作成するには、次のコマンドを実行します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:71
msgid "At that point you should have the following structure:"
msgstr "この時点では、以下のような構成になっているはずです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:97
#, no-wrap
msgid ""
".\n"
"├── rabbitmq-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── rabbitmq-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:100
msgid "Open the two projects in your favorite IDE."
msgstr "お気に入りの IDE で 2 つのプロジェクトを開きます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:101
#, no-wrap
msgid "The Quote object"
msgstr "見積オブジェクト"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:106
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/rabbitmq/model/Quote.java` file, with the following content:"
msgstr "`Quote` クラスは、 `producer` と `processor` の両方のプロジェクトで使用されます。楽をするためにこのクラスを複製します。両方のプロジェクトで、次のような内容の `src/main/java/org/acme/rabbitmq/model/Quote.java` ファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:110
#, no-wrap
msgid "package org.acme.rabbitmq.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:112
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:115
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:118
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:123
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:128
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:137
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:141
msgid "JSON representation of `Quote` objects will be used in messages sent to the RabbitMQ queues and also in the server-sent events sent to browser clients."
msgstr "`Quote` オブジェクトのJSON表現は、RabbitMQキューに送信されるメッセージや、ブラウザクライアントに送信されるserver-sent eventで使用されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:143
msgid "Quarkus has built-in capabilities to deal with JSON RabbitMQ messages."
msgstr "QuarkusにはJSONのRabbitMQメッセージを処理する機能が組み込まれています。"

#. type: Block title
#: upstream/_versions/3.0/guides/rabbitmq.adoc:145
#, no-wrap
msgid "@RegisterForReflection"
msgstr "@RegisterForReflection"

#. type: delimited block =
#: upstream/_versions/3.0/guides/rabbitmq.adoc:150
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブ実行可能ファイルをビルドする際に、クラス（フィールドとメソッドを含む）を含めるようにQuarkusに指示します。これは、後でアプリケーションをコンテナ内のネイティブ実行可能ファイルとして実行する際に役立ちます。これがないと、ネイティブのコンパイル時にデッドコードの除去段階でフィールドやメソッドが削除されてしまいます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:152
#, no-wrap
msgid "Sending quote request"
msgstr "見積リクエストの送信"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:155
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` file, and update the content to be:"
msgstr "`producer` プロジェクト内で、生成された `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` ファイルを探し、コンテンツを次のように更新します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:159
#, no-wrap
msgid "package org.acme.rabbitmq.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:161
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:167
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:171
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:173
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:176
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:178
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:192
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" channel (which\n"
"     * maps to the \"quote-requests\" RabbitMQ exchange) using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:194
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "リアクティブメッセージングの `Emitter` を挿入して、`quote-requests` チャネルにメッセージを送信します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:195
msgid "On a post request, generate a random UUID and send it to the RabbitMQ queue using the emitter."
msgstr "投稿リクエストで、ランダムなUUIDを生成し、エミッターを使ってRabbitMQのキューに送信します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:198
msgid "This channel is mapped to a RabbitMQ exchange using the configuration we will add to the `application.properties` file.  Open the `src/main/resource/application.properties` file and add:"
msgstr "このチャンネルは、 `application.properties` ファイルの設定を使用して、RabbitMQ のエクスチェンジにマッピングされます。 `src/main/resource/application.properties` ファイルを開き、次のように追加します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:204
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quote-requests`\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quote-requests.exchange.name=quote-requests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:208
msgid "All we need to specify is the `smallrye-rabbitmq` connector.  By default, reactive messaging maps the channel name `quote-requests` to the same RabbitMQ exchange name."
msgstr "指定する必要があるのは、 `smallrye-rabbitmq` のコネクタだけです。デフォルトでは、リアクティブ・メッセージングは、チャネル名 `quote-requests` を同じ RabbitMQ のエクスチェンジ名にマッピングします。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:209
#, no-wrap
msgid "Processing quote requests"
msgstr "見積リクエストの処理"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:213
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` file and add the following:"
msgstr "それでは、見積依頼を消費して、価格を出してみましょう。 `processor` プロジェクト内で、 `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` ファイルを探し、以下を追加します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:217
#, no-wrap
msgid "package org.acme.rabbitmq.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:219
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:221
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:225
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:227
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:234
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" RabbitMQ queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" RabbitMQ exchange.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:236
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:246
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard-working task\n"
"        Thread.sleep(1000);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:248
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr "メソッドが `requests` チャンネルのアイテムを消費することを示します"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:249
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr "メソッドが返すオブジェクトが `quotes` チャンネルに送信されることを示します"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:250
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "処理が _blocking_ であり、呼び出し元のスレッドで実行できないことを示します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:252
msgid "The `process` method is called for every RabbitMQ message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` exchange."
msgstr "`process` メソッドは、 `quote-requests` キューからの RabbitMQ のメッセージごとに呼び出され、 `Quote` オブジェクトを `quotes` エクスチェンジに送信します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:255
msgid "As with the previous example we need to configure the connectors in the `application.properties` file.  Open the `src/main/resources/application.properties` file and add:"
msgstr "前述の例と同様に、 `application.properties` ファイルでコネクタを設定する必要があります。 `src/main/resources/application.properties` ファイルを開き、次のように追加します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:262
#, no-wrap
msgid ""
"# Configure the incoming RabbitMQ queue `quote-requests`\n"
"mp.messaging.incoming.requests.connector=smallrye-rabbitmq\n"
"mp.messaging.incoming.requests.queue.name=quote-requests\n"
"mp.messaging.incoming.requests.exchange.name=quote-requests\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:266
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quotes`\n"
"mp.messaging.outgoing.quotes.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quotes.exchange.name=quotes\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:270
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr "この場合、1 つの受信コネクター設定と 1 つの送信コネクター設定があり、それぞれに異なる名前が付けられていることに注意してください。設定キーは次のように構成されています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:272
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:274
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` セグメントは、 `@Incoming` および `@Outgoing` アノテーションで設定された値と一致する必要があります。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:276
msgid "`quote-requests` -> RabbitMQ queue from which we read the quote requests"
msgstr "`quote-requests` → 見積依頼を読み出すRabbitMQのキュー"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:277
msgid "`quotes` -> RabbitMQ exchange in which we write the quotes"
msgstr "`quotes` → 見積を書き込むRabbitMQのエクスチェンジ"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:278
#, no-wrap
msgid "Receiving quotes"
msgstr "見積の受信"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:282
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr "`producer` プロジェクトに戻ります。見積を消費するために `QuotesResource` を変更して、イベントをクライアントに送信するためにHTTPエンドポイントにバインドしてみましょう:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:287
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:289
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:298
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:300
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "`@Channel` 修飾子を使用して `quotes` チャネルを挿入します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:301
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "`Server Sent Events` を使用してコンテンツが送信されたことを示します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:302
msgid "Returns the stream (_Reactive Stream_)"
msgstr "ストリーム (_Reactive Stream_) を返します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:305
msgid "Again we need to configure the incoming `quotes` channel inside `producer` project.  Add the following inside `application.properties` file:"
msgstr "再度、 `producer` プロジェクト内で `quotes` の受信チャンネルを設定する必要があります。 `application.properties` ファイル内に以下を追加します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:310
#, no-wrap
msgid ""
"# Configure the outgoing `quote-requests` queue\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:313
#, no-wrap
msgid ""
"# Configure the incoming `quotes` queue\n"
"mp.messaging.incoming.quotes.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:315
#, no-wrap
msgid "The HTML page"
msgstr "HTML ページ"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:318
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最後に、SSE を使って変換された価格を読み込む HTML ページです。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:320
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "`producer` プロジェクト中の `src/main/resources/META-INF/resources/quotes.html` に以下の内容のファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:324
#, no-wrap
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:360
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:364
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr "目を見張るものはありません。受け取った見積の内容が更新されていきます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:365
#, no-wrap
msgid "Get it running"
msgstr "起動"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:368
msgid "You just need to run both applications using:"
msgstr "両方のアプリケーションを実行するためには以下コマンドを打つだけです:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:372
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:375
msgid "And, in a separate terminal:"
msgstr "そして、別の端末で以下を実行します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:379
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:383
msgid "Quarkus starts a RabbitMQ broker automatically, configures the application and shares the broker instance between different applications.  See xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ] for more details."
msgstr "Quarkusは、RabbitMQブローカーを自動的に起動し、アプリケーションを構成し、異なるアプリケーション間でブローカーインスタンスを共有します。詳細は、 link:rabbitmq-dev-services.html[RabbitMQ用のDev Services]を参照してください。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:386
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "ブラウザーで `http://localhost:8080/quotes.html` を開き、ボタンをクリックして見積をリクエストします。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:387
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "JVM またはネイティブモードでの実行"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:391
msgid "When not running in dev or test mode, you will need to start your RabbitMQ broker.  You can follow the instructions from the https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] or create a `docker-compose.yaml` file with the following content:"
msgstr "開発モードやテストモードで実行していないときは、RabbitMQブローカーを起動する必要があります。 link:https://hub.docker.com/_/rabbitmq[RabbitMQ Dockerウェブサイト]の指示に従うか、以下の内容の `docker-compose.yaml` ファイルを作成します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:395
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:397
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:404
#, no-wrap
msgid ""
"  rabbit:\n"
"    image: rabbitmq:3.9-management\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:417
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:428
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:432
#, no-wrap
msgid ""
"networks:\n"
"  rabbitmq-quickstart-network:\n"
"    name: rabbitmq-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:436
msgid "Note how the RabbitMQ broker location is configured.  The `rabbitmq-host` and `rabbitmq-port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr "RabbitMQ ブローカーのロケーションがどのように構成されているかに注意してください。 `rabbitmq-host` と `rabbitmq-port` プロパティ( 環境変数だと `AMQP_HOST` と `AMQP_PORT` ) でロケーションを設定します。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:439
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "まず、アプリケーションが停止していることを確認し、両方のアプリケーションをJVMモードでビルドします:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:444
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer clean package\n"
"> mvn -f rabbitmq-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:448
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr "パッケージングされたら、 `docker compose up --build` を実行します。UI は http://localhost:8080/quotes.html で公開されます。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:450
msgid "To run your applications as native, first we need to build the native executables:"
msgstr "アプリケーションをネイティブで動作させるには、まず、ネイティブ実行可能ファイルをビルドする必要があります:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:455
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer package -Pnative  -Dquarkus.native.container-build=true\n"
"> mvn -f rabbitmq-quickstart-processor package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:459
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr "`-Dquarkus.native.container-build=true` は、Quarkusにコンテナ内で実行可能なLinux 64ビットのネイティブ実行可能ファイルをビルドするよう指示しています。その後、次を使用してシステムを実行します:"

#. type: delimited block -
#: upstream/_versions/3.0/guides/rabbitmq.adoc:464
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:467
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr "UIは前と同じように http://localhost:8080/quotes.html で公開されます。"

#. type: Title ==
#: upstream/_versions/3.0/guides/rabbitmq.adoc:468
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:472
msgid "This guide has shown how you can interact with RabbitMQ using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr "このガイドではQuarkusを使ってRabbitMQと対話する方法を紹介しました。 https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging]を利用して、データストリーミングアプリケーションを構築しています。"

#. type: Plain text
#: upstream/_versions/3.0/guides/rabbitmq.adoc:474
msgid "If you did the Kafka, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr "Kafkaを経験したことがある方は同じコードであることに気がついたと思います。違いはコネクタの設定とJSONのマッピングのみです。"
