msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:6
msgid "Simplified Hibernate Reactive with Panache"
msgstr "シンプルなHibernate Reactive with Panache"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:11
#, fuzzy
msgid ""
"link:http://hibernate.org/reactive/[Hibernate Reactive] is the only reactive JPA implementation and offers you the full\n"
"breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate link:http://hibernate.org/reactive/[Reactiveは] 唯一のリアクティブJPA実装であり、リアクティブドライバでデータベースにアクセスできるObject Relational Mapperの完全な幅を提供します。複雑なマッピングを可能にしますが、単純で一般的なマッピングを些細なものにするわけではありません。Hibernate Reactive with Panacheは、Quarkusでエンティティを簡単に、楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:16
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:18
#, fuzzy
msgid "What we're doing in Panache is allow you to write your Hibernate Reactive entities like this:"
msgstr "Panacheで行っているのは、HibernateのReactiveエンティティをこのように書くことができるようにすることです:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:42
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなっているかお気づきですか?面白いと思いませんか?読んでみてください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:45
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これは HQL (JP-QL) クエリの断片を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:47
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上記で説明したものは、基本的には link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] であり、エンティティーパターンと呼ばれることもあります。Hibernate with Panache は、 `PanacheRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン] を使用することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:50
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:52
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:55
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:57
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-reactive-panache-quickstart` {quickstarts-tree-url}/hibernate-reactive-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:60
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "PanacheによるHibernate Reactiveのセットアップと設定"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:62
msgid "To get started:"
msgstr "始めるには"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:64
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:65
msgid "annotate your entities with `@Entity`"
msgstr "エンティティに `@Entity` アノテーションを付けます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:66
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする（リポジトリパターンを使用している場合は非必須です）"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:68
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "すべての設定は、xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernateセットアップガイド]を確認してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:70
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "`pom.xml` で、以下の依存関係を追加します:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:72
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache エクステンション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:73
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "お使いのリアクティブドライバのエクステンション ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ... )"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:75
msgid "For instance:"
msgstr "例えば"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:898
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:908
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:103
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティを `{config-file}` に追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:117
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:244
msgid "Defining your entity"
msgstr "エンティティの定義"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:121
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "Panache エンティティーを定義するには、 `PanacheEntity` を拡張して `@Entity` とアノテーションを付け、列をパブリック フィールドとして追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:134
msgid ""
"You can put all your JPA column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "すべてのJPAのカラムアノテーションをパブリックフィールドにつけることができます。永続化されないフィールドが必要な場合は、 `@Transient` アノテーションを使用します。アクセサを書く必要があれば、それも可能です:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:157
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出されます。これはフィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:327
msgid "Most useful operations"
msgstr "最も便利な操作"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:163
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:213
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:215
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:241
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:246
msgid "When using the repository pattern, you can define your entities as regular JPA entities."
msgstr "リポジトリパターンを使用する場合、エンティティーを通常のJPAエンティティーとして定義することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:284
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "エンティティにゲッター/セッターを定義するのが面倒な場合は、 `PanacheEntityBase` を拡張するようにすればQuarkusが生成してくれます。また、 `PanacheEntity` を拡張して、デフォルトのIDを利用することもできます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:287
msgid "Defining your repository"
msgstr "リポジトリの定義"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:289
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "リポジトリを使用する場合、`PanacheRepository` を実装することでアクティブレコードパターンとまったく同じ便利なメソッドをリポジトリにインジェクションできます:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:313
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:329
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:379
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:383
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:385
msgid "Paging"
msgstr "ページング"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:387
msgid ""
"You should only use the `list` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list`  メソッドは、テーブルに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:420
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:422
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:424
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:443
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。`page(Page)` もしくは `page(int, int)` を使用してページングに切り換えられます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:447
msgid "Sorting"
msgstr "ソート"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:449
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリー文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリ形式も受け付けます:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:456
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows your to abstract your sorting:"
msgstr "しかし、これらのメソッドはオプションで `Sort` パラメータを受け付けるので、ソートを抽象化することができます:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:466
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:468
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:470
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常、HQLのクエリは `from EntityName [where …​] [order by …​]` というように最後にオプションの要素を持つという形式になっています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:473
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "選択クエリーが `from` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:475
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` は `from EntityName order by ...` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:476
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ は `from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:477
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は `from EntityName where <query>` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:479
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:481
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName ...` は `update from EntityName ...` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:482
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` （およびシングルパラメータ） は `update from EntityName set <singleColumnName> = ?` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:483
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? <update-query>` は `update from EntityName set <update-query>` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:485
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリが `delete` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:487
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` は `delete from EntityName ...` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:488
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` （およびシングルパラメータ）は `delete from EntityName where <singleColumnName> = ?` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:489
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` は `delete from EntityName where <query>` に展開されます"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:491
msgid ""
"You can also write your queries in plain\n"
"link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgstr "また、クエリーをプレーンな link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]で書くこともできます:"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:500
msgid "Named queries"
msgstr "名前付きクエリー"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:502
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリーは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリの代わりに参照することができます。また、名前付きのクエリは、カウント、更新、削除のクエリにも使用できます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:538
msgid ""
"Named queries can only be defined inside your JPA entity classes (being the Panache entity class, or the repository parameterized type),\n"
"or on one of its super classes."
msgstr "名前付きクエリーは、JPAのエンティティクラス（Panacheのエンティティクラスやリポジトリのパラメタライズドタイプ）の内部、またはそのスーパークラスのいずれかでしか定義できません。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:542
msgid "Query parameters"
msgstr "クエリパラメーター"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:544
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリーパラメーターを渡すことができます:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:551
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:561
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:574
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:576
msgid "Query projection"
msgstr "クエリの投影"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:578
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:580
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:582
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgstr "Hibernateは **DTO射影(DTOプロジェクション)** を使って射影クラスの属性を持つSELECT句を生成できます。これは、 **動的インスタンス化** または **コンストラクタ式** とも呼ばれます。詳細はHibernateガイドの link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select 句]を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:586
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "射影クラスは、有効な Java Bean であり、すべての属性を含むコンストラクタを持つ必要があります。このコンストラクタは、エンティティクラスを使用する代わりに、射影のDTOをインスタンス化するために使用されます。このクラスは、すべてのクラス属性をパラメータとして持つ一致するコンストラクタを持つ必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:605
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:606
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:607
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "このコンストラクタはHibernate によって使用されます。このコンストラクタはクラス内の唯一のコンストラクタであり、パラメータとしてクラスのすべての属性を持つ必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:612
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "`project(Class)` メソッドの実装では、コンストラクタのパラメータ名を使用してクエリーの select 節を構築するため、コンパイルされたクラスの中にパラメータ名を格納するようにコンパイラを設定する必要があります。Quarkus Mavenアーキタイプを使用している場合はデフォルトで有効になっています。使用していない場合はプロパティ `<maven.compiler.parameters>true</maven.compiler.parameters>` を `pom.xml` に追加してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:617
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO射影のオブジェクトから参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用してSELECT文のパスを提供することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:642
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは `owner.name` HQLプロパティから読み込まれます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:644
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:646
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "QuarkusのHibernate Reactiveは現時点では複数の永続化ユニットをサポートしていません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:648
msgid "Transactions"
msgstr "トランザクション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:650
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@ReactiveTransactional` will do that for you and make that method a transaction boundary. Alternatively,\n"
"you can use `Panache.withTransaction()` for the same effect. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) は必ずトランザクション内で行うようにしてください。CDI Beanの機能 `@ReactiveTransactional` アノテーションを使うことでそのメソッドをトランザクションの境界にすることができます。あるいは、 `Panache.withTransaction()` を使用しても同様の効果が得られます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:655
#, fuzzy
msgid ""
"You cannot use `@Transactional` with Hibernate Reactive for your transactions: you must use `@ReactiveTransactional`,\n"
"and your annotated method must return a `Uni` to be non-blocking. Otherwise it needs be called from a non-`VertxThread` thread\n"
"and will become blocking."
msgstr "トランザクションにHibernate Reactiveで `@Transactional` を使用することはできません。 `@ReactiveTransactional` を使用する必要があり、アノテーションメソッドは `Uni` を返してノンブロッキングである必要があります。そうでない場合は、 `VertxThread` 以外のスレッドから呼び出される必要があり、ブロッキングになります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:659
msgid ""
"JPA batches changes you make to your entities and sends changes (it's called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it's more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when JPA send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr "JPAはエンティティに加えた変更をバッチ処理し、トランザクションの最後やクエリの前に変更を送信します（フラッシュと呼びます）。これは効率的であるため、通常は良いことです。しかし、楽観ロックの失敗をチェックしたり、オブジェクトの検証をすぐに行ったり、一般的にはすぐにフィードバックを得たい場合には、 `entity.flush()` を呼び出して強制的にフラッシュ操作を行うか、あるいは `entity.persistAndFlush()` を使用して単一のメソッド呼び出しの中で行うことができます。これによりJPAが変更をデータベースに送信する際に発生する可能性のある `PersistenceException` をキャッチすることができます。ただし、これはあまり効率が良くないので悪用しないでください。また、トランザクションはまだコミットされていないはずです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:665
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは `PersistenceException` が発生した場合に特定の動作を行えるようにするための flush メソッドの使用例を示します:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:682
msgid ""
"The `@ReactiveTransactional` annotation will also work for testing.\n"
"This means that changes done during the test will be propagated to the database.\n"
"If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.\n"
"This will run the test method in a transaction, but roll it back once the test method is\n"
"complete to revert any database changes."
msgstr "`@ReactiveTransactional` アノテーションはテストにも有効です。これは、テスト中に行われた変更がデータベースに反映されることを意味します。テスト終了時に変更をロールバックしたい場合は、 `io.quarkus.test.TestReactiveTransaction` アノテーションを使用します。これは、トランザクション内でテストメソッドを実行しますが、テストメソッドの終了時にデータベースへの変更をロールバックします。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:689
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:691
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは `findById(Object, LockModeType)` や `find().withLock(LockModeType)` を使用してエンティティ/リポジトリでデータベースロックを直接サポートします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:693
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:695
msgid "First: Locking using findById()."
msgstr "1つ目: findById()を使ってロックする。"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:713
msgid "Second: Locking in a find()."
msgstr "2つ目: find()でロックする。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:732
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "トランザクションが終了するとロックが解放されるため、ロッククエリーを呼び出すメソッドはトランザクション内で呼び出す必要があることに注意してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:734
msgid "Custom IDs"
msgstr "カスタムID"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:736
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "IDは微妙な問題で、誰もがフレームワークに任せることができるわけではありませんが、今回も私たちはカバーします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:739
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "`PanacheEntity` の代わりに `PanacheEntityBase` を拡張することで独自のID戦略を指定することができます。そのあとに好きなIDをパブリック・フィールドとして宣言するだけです:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:760
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は `PanacheRepository` の代わりに `PanacheRepositoryBase` を拡張し、IDの型を追加の型パラメーターとして指定することになります:"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:771
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:773
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:775
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "アクティブレコードパターンを使用している場合、Mockitoは静的メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべての静的メソッドをモックすることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:779
msgid "Add this dependency to your build file:"
msgstr "この依存関係をビルドファイルに追加してください:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:913
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:940
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:865
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "`verify` と `do*` のメソッドは `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないとどのモックオブジェクトを渡せばいいのかわからなくなってしまいます。"

#. type: Title ====
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:868
msgid "Mocking `Mutiny.Session` and entity instance methods"
msgstr "`Mutiny.Session` とエンティティインスタンスのメソッドのモック化"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:870
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate Reactive `Mutiny.Session` object:"
msgstr "`persist()` のようなエンティティインスタンスのメソッドをモックにする必要がある場合は、Hibernate Reactive `Mutiny.Session` オブジェクトをモック化することで実現できます:"

#. type: Title ===
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:892
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:894
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:928
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:995
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "HibernateのReactiveマッピングを単純化する方法と理由"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:997
msgid ""
"When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "HibernateのReactiveエンティティを書くときに、ユーザーが不本意ながらも対処することに慣れてしまった、いくつかの厄介事があります:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1000
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1002
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr "ダサいゲッターとセッター：Javaは言語でプロパティをサポートしていないので、フィールドに対して読み書きを行わなかったとしてもフィールドを作成し、そのフィールドのためにゲッターとセッターを生成しなければなりません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1005
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr "従来のEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されていましたが、実際には、状態とその操作を不自然な形で分ける必要があります。状態とその操作が1つのクラスに存在するオブジェクト指向アーキテクチャでは通常そのようなことは行いません。さらに、エンティティごとに2つのクラスを必要とし、エンティティの操作を行う必要があるDAOやリポジトリをインジェクションする必要があります。これにより、編集フローが壊れ、インジェクションポイントを設定するために書いているコードから抜け出してから、それを使用するために戻ってこなければなりません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1011
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作には冗長すぎるため、すべての部分が必要ない場合でもクエリを書く必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1013
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の9割を占めるような些細な操作をしても些細にはなりません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1016
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1018
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheEntity` を拡張するようにしてください: 自動生成されるIDフィールドがあります。カスタムID戦略が必要な場合は代わりに `PanacheEntityBase` を拡張するとIDを自分で処理することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1020
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使ってください。無駄なゲッターとセッターを無くせます。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスを、アクセサ・メソッドを使用するように書き換えます。この方法では、必要なときに _便利な_ アクセサを書くことができ、エンティティ・ユーザーがフィールド・アクセスを使用していても、それが使用されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1023
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンの使用: アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1026
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "`Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` 、さらには `Person.find(\"name\", \"stef\")` のように、必要のない部分を書かないようにしましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1030
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上、Panacheを使えば、Hibernate Reactiveがこれほどまでにすっきりするのかということでした。"

#. type: Title ==
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1032
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1034
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate Reactive with Panacheは、コンパイル時のエンティティに対するバイトコード拡張に依存しています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1036
msgid ""
"It attempts to identify archives with Panache entities (and consumers of Panache entities)\n"
"by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an\n"
"annotation processor that will automatically create this file in archives that depend on\n"
"Panache (even indirectly). If you have disabled annotation processors you may need to create\n"
"this file manually in some cases."
msgstr "この機能は、マーカーファイル `META-INF/panache-archive.marker` の存在によって Panache エンティティー の存在するアーカイブ(および Panache エンティティーの消費者) を識別しようとします 。Panache にはアノテーション プロセッサーが含まれており、 (間接的であっても) Panache に依存しているアーカイヴでこのファイルを自動的に作成します。アノテーションプロセッサーを無効にしている場合は、場合によってはこのファイルを手動で作成する必要があるかもしれません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/hibernate-reactive-panache.adoc:1042
msgid ""
"If you include the jpa-modelgen annotation processor this will exclude the Panache\n"
"annotation processor by default. If you do this you should either create the marker file\n"
"yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "jpa-modelgenアノテーションプロセッサーをインクルードすると、デフォルトでPanacheアノテーションプロセッサが除外されます。この場合はマーカーファイルを自分で作成するか、以下のように `quarkus-panache-common` を追加する必要があります:"
