msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:6
msgid "Using Software Transactional Memory in Quarkus"
msgstr "Quarkus でのソフトウェアトランザクショナルメモリーの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:8
#, fuzzy
msgid ""
"link:./attributes.adoc[role=include]\n"
":extension-status: preview"
msgstr "./attributes.adoc :extension-status: プレビュー"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:11
msgid ""
"Software Transactional Memory (STM) has been around in research environments since the late\n"
"1990's and has relatively recently started to appear in products and various programming\n"
"languages. We won't go into all of the details behind STM but the interested reader could look at https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[this paper].\n"
"However, suffice it to say that STM offers an approach to developing transactional applications in a highly\n"
"concurrent environment with some of the same characteristics of ACID transactions, which you've probably already used\n"
"through JTA. Importantly though, the Durability property is relaxed (removed) within STM implementations,\n"
"or at least made optional. This is not the situation with JTA, where state changes are made durable\n"
"to a relational database which supports https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[the X/Open XA\n"
"standard]."
msgstr "ソフトウェア・トランザクション・メモリー(STM)は、1990 年代後半から研究環境に存在し、比較的最近になって製品や様々なプログラミング言語に登場し始めました。STM の背後にあるすべての詳細については触れませんが,興味のある方は link:https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[この論文] を参照してください.しかし、STM は、JTA を通じて既に使用されている ACID トランザクションと同じ特性を持つ、高度な同時実行環境でトランザクショ ン・アプリケーションを開発するためのアプローチを提供していることは言うまでもありません。しかし、重要なことは、STM の実装では Durability プロパティーが緩和(削除)されているか、少なくともオプションになっていることです。これは、 link:https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[X/Open XA 標準] をサポートするリレーショナル・データベースに対して状態の変更を耐久性のあるものにするという JTA の状況とは異なります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:21
msgid ""
"Note, the STM implementation provided by Quarkus is based on the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM] implementation. This document isn't meant to be a replacement for that project's documentation so you may want\n"
"to look at that for more detail. However, we will try to focus more on how you can combine some of the key capabilities\n"
"into Quarkus when developing Kubernetes native applications and microservices."
msgstr "Quarkusが提供するSTMの実装は、 link:https://narayana.io/docs/project/index.html#d0e16066[Narayana STM] の実装に基づいています。このドキュメントは、そのプロジェクトのドキュメントに代わるものではありませんので、詳細についてはそちらを参照してください。しかし、Kubernetesネイティブアプリケーションやマイクロサービスを開発する際に、主要な機能のいくつかをQuarkusにどのように組み合わせることができるかについて、より焦点を当ててみたいと思います。"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:25
msgid "Why use STM with Quarkus?"
msgstr "なぜQuarkusでSTMを使うのか?"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:27
msgid ""
"Now you may still be asking yourself \"Why STM instead of JTA?\" or \"What are the benefits\n"
"to STM that I don't get from JTA?\" Let's try to answer those or similar questions, with\n"
"a particular focus on why we think they're great for Quarkus, microservices and Kubernetes\n"
"native applications. So in no specific order ..."
msgstr "今、あなたはまだ「なぜJTAではなくSTMなのか?」や「JTAでは得られないSTMのメリットは何か?」と自問自答しているかもしれません。ここでは、Quarkus、マイクロサービス、Kubernetesネイティブアプリケーションに最適だと思う理由を中心に、これらの質問や似たような質問に答えてみましょう。ということで、順不同で ..."

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:32
msgid ""
"The goal of STM is to simplify object reads and writes from multiple threads/protect\n"
"state from concurrent updates. The Quarkus STM implementation will safely manage any conflicts between\n"
"these threads using whatever isolation model has been chosen to protect that specific state\n"
"instance (object in the case of Quarkus). In Quarkus STM, there are two isolation implementations,\n"
"pessimistic (the default), which would cause conflicting threads to be blocked until the original\n"
"has completed its updates (committed or aborted the transaction); then there's the optimistic\n"
"approach which allows all of the threads to proceed and checks for conflicts at commit time, where\n"
"one or more of the threads may be forced to abort if there have been conflicting updates."
msgstr "STM の目的は、オブジェクト読み込みを簡素化し、複数のスレッドから書き込みを行い、同時更新からの状態を保護することです。Quarkus の STM 実装では、特定のステートインスタンス (Quarkus の場合はオブジェクト) を保護するために選択された分離モデルを使用して、これらのスレッド間の競合を安全に管理します。Quarkus STM で は、2つの分離実装があります。ペシミスティックアプローチ (デフォルト) では、元のスレッドが更新を完了する (コミットまたはトランザクションを中止する) まで競合するスレッドがブロックされます。一方、オプティミスティックアプローチでは、すべてのスレッドの続行を許可し、同時に競合をチェックします。ここでは、競合更新がある場合は、1 つ以上のスレッドが強制的に中止されることがあります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:41
#, fuzzy
msgid ""
"STM objects have state but it doesn't need to be persistent (durable). In fact the\n"
"default behaviour is for objects managed within transactional memory to be volatile, such that\n"
"if the service or microservice within which they are being used crashes or is spawned elsewhere, e.g.,\n"
"by a scheduler, all state in memory is lost and the objects start from scratch. But surely you get this and more\n"
"with JTA (and a suitable transactional datastore) and don't need to worry about restarting your application?\n"
"Not quite. There's a trade-off here: we're doing away\n"
"with persistent state and the overhead of reading from and then writing (and sync-ing) to the datastore during each\n"
"transaction. This makes updates to (volatile) state very fast but you still get the benefits of atomic updates\n"
"across multiple STM objects (e.g., objects your team wrote then calling objects you inherited from another team and requiring\n"
"them to make all-or-nothing updates), as well as consistency\n"
"and isolation in the presence of concurrent threads/users (common in distributed microservices architectures).\n"
"Furthermore, not all stateful applications need to be durable - even when JTA transactions are used, it tends to be the\n"
"exception and not the rule. And as you'll see later, because applications can optionally start and control transactions, it's possible to build microservices which can undo state changes and try alternative paths."
msgstr "STMオブジェクトはステートを持つが、永続的（耐久的）である必要はない。実際、デフォルトの動作は、トランザクションメモリ内で管理されるオブジェクトが揮発性であることで、使用しているサービスやマイクロサービスがクラッシュしたり、スケジューラなどで別の場所にスポーンされたりすると、メモリ内のすべての状態が失われ、オブジェクトはゼロからスタートします。しかし、JTA（と適切なトランザクションデータストア）を使えば、このようなことが可能になり、アプリケーションの再起動を心配する必要はないのでしょうか。そうではありません。永続的な状態や、トランザクションごとにデータストアから読み込んで書き込み（そして同期）するオーバーヘッドを排除しているのですから、ここにはトレードオフがあります。これにより、（揮発性の）状態の更新が非常に速くなりますが、複数のSTMオブジェクト（例えば、自分のチームが書いたオブジェクトが他のチームから継承したオブジェクトを呼び出し、オール・オア・ナッシングの更新を要求する）に対するアトミック更新の利点や、（分散マイクロサービス・アーキテクチャでよくある）同時実行スレッド/ユーザがいる場合の一貫性と分離を得ることもできます。さらに、すべてのステートフル・アプリケーションが耐久性を必要とするわけではありません。JTAトランザクションが使用される場合でも、それは例外であり、ルールではない傾向があります。また、後述するように、アプリケーションはオプションでトランザクションを開始・制御できるため、状態の変更を元に戻して代替経路を試すことができるマイクロサービスを構築することが可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:55
msgid ""
"Another benefit of STM is composability and modularity. You can write concurrent Quarkus objects/services that\n"
"can be easily composed with any other services built using STM, without exposing the details of how the objects/services\n"
"are implemented. As we discussed earlier, this ability to compose objects you wrote with those other teams may have\n"
"written weeks, months or years earlier, and have A, C and I properties can be hugely beneficial. Furthermore, some\n"
"STM implementations, including the one Quarkus uses, support nested transactions and these allow changes made within\n"
"the context of a nested (sub) transaction to later be rolled back by the parent transaction."
msgstr "STM のもう 1 つの利点は、構成可能性とモジュール性です。オブジェクト/サービスの実装詳細を公開することなく、STM を使用して構築された他の任意のサービスと簡単に構成することができる Quarkus オブジェクト/サービスを並行して書くことができます。先ほど説明したように、他のチームと一緒に書いたオブジェクトを、数週間、数ヶ月、数年前に書いたかもしれない、A、C、I のプロパティーのあるオブジェクトをコンパイルできるこの機能は、非常に有益です。さらに、Quarkus が使用しているものを含むいくつかの STM 実装では、入れ子になったトランザクションをサポートしており、入れ子になった (サブ) トランザクションのコンテキスト内で行われた変更を、後で親トランザクションによってロールバックすることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:62
msgid ""
"Although the default for STM object state is volatile, it is possible to configure the STM implementation\n"
"such that an object's state is durable. Although it's possible to configure Narayana such that different\n"
"backend datastores can be used, including relational databases, the default is the local operating system\n"
"file system, which means you don't need to configure anything else with Quarkus such as a database."
msgstr "STMオ ブジェクトステートのデフォルトは揮発性ですが、オブジェクトの状態が耐久性を持つように STM の実装を構成することができます。リレーショナルデータベースなど、さまざまなバックエンドのデータストアを使用できるように Narayana を設定することは可能です。ただし、デフォルトはローカルのオペレーティングシステムのファイルシステムであり、データベースのように、Quarkus で他の何かを設定する必要はありません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:67
msgid ""
"Many STM implementations allow \"plain old language objects\" to be made STM-aware with little or no changes to\n"
"the application code. You can build, test and deploy applications without wanting them to be STM-aware and\n"
"then later add those capabilities if they become necessary and without much development overhead at all."
msgstr "多くの STM 実装では、アプリケーションコードをほとんど変更することなく、「古い言語オブジェクト」を STM 対応させることができます。アプリケーションを STM に対応させずに、アプリケーションの構築、テスト、デプロイし、必要になっときに、開発のオーバーヘッドがほとんどない状態で、これらの機能を後で追加することができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:71
msgid "Building STM applications"
msgstr "STM アプリケーションの構築"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:73
msgid ""
"There is also a fully worked example in the quickstarts which you may access by cloning the\n"
"Git repository: `git clone {quickstarts-clone-url}`, or by downloading an {quickstarts-archive-url}[archive].\n"
"Look for the `software-transactional-memory-quickstart` example. This will help to understand how you\n"
"can build STM-aware applications with Quarkus. However, before we do so there are a few basic concepts\n"
"which we need to cover."
msgstr "Quickstarts には完全に動作する例もあり、Git リポジトリーを複製してアクセスすることができます。`git clone {quickstarts-clone-url}` あるいは {quickstarts-archive-url}[archive] をダウンロードしてください。`software-transactional-memory-quickstart` の例を見てください。これで、Quarkus を使って STM を意識したアプリケーションを構築する方法を説明しています。しかし、その前に、いくつかの基本的な概念を知っておく必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:79
msgid ""
"Note, as you will see, STM in Quarkus relies on a number of annotations to define behaviours. The lack\n"
"of these annotations causes sensible defaults to be assumed but it is important for the developer to\n"
"understand what these may be. Please refer to the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM manual]\n"
"and the https://narayana.io//docs/project/index.html#d0e16133[STM annotations guide] for more details on\n"
"all of the annotations Narayana STM provides."
msgstr "ご覧のように、Quarkus の STM は、動作を定義するために多くのアノテーションに依存しています。これらのアノテーションがないために、適切なデフォルトが仮定されますが、開発者はこれらのアノテーションが何であるかを理解することが重要です。Narayana STM が提供するすべてのアノテーションの詳細については、https://narayana.io/docs/project/index.html#d0e16066[Narayana STM manual] と https://narayana.io//docs/project/index.html#d0e16133[STM アノテーションガイド] を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:85
#, fuzzy
msgid "link:./status-include.adoc[role=include]"
msgstr "./status-include.adoc"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:87
msgid "Setting it up"
msgstr "設定"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:89
msgid "To use the extension include it as a dependency in your build file:"
msgstr "このエクステンションを使用するには、アプリケーションの依存関係として以下をビルドファイルにインクルードしてください:"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:92
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:101
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:106
msgid "Defining STM-aware classes"
msgstr "STM を意識したクラスの定義"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:108
msgid ""
"In order for the STM subsystem to have knowledge about which classes are to be managed within the context\n"
"of transactional memory it is necessary to provide a minimal level of instrumentation. This occurs by\n"
"categorising STM-aware and STM-unaware classes through an interface boundary; specifically all STM-aware objects\n"
"must be instances of classes which inherit from interfaces that themselves have been annotated to identify them\n"
"as STM-aware. Any other objects (and their classes) which do not follow this rule will not be managed by the\n"
"STM subsystem and hence any of their state changes will not be rolled back, for example."
msgstr "STM サブシステムが、トランザクションメモリーのコンテキスト内でどのクラスが管理されるべきかを認識するには最低限の手段を提供する必要があります。これは、STM を意識したクラス STM を意識しないクラスをインターフェース境界で分類することで行います。特に、すべての STM 対応オブジェクトは、STM 対応として識別するためのアノテーションが付けられているインターフェースから継承するクラスのインストタンスである必要があります。このルールに従わない他のオブジェクト (およびそのクラス) は、STM サブシステムによって管理されません。そのため、それらの状態の変更はロールバックされません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:115
msgid ""
"The specific annotation that STM-aware application interfaces must use is `org.jboss.stm.annotations.Transactional`.\n"
"For example:"
msgstr "STM を意識したアプリケーションインターフェースが使用しなければならない特定のアノテーションは、`org.jboss.stm.annotations.Transactional` です。例を以下に示します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:127
msgid ""
"Classes which implement this interface are able to use additional annotations from Narayana to tell the STM\n"
"subsystem about things such as whether a method will modify the state of the object, or what state variables\n"
"within the class should be managed transactionally, e.g., some instance variables may not need to be rolled back\n"
"if a transaction aborts. As mentioned earlier, if those annotations are not present then defaults are chosen to\n"
"guarantee safety, such as assuming all methods will modify state."
msgstr "このインターフェースを実装したクラスは、Narayana からの追加のアノテーションを使用して、メソッドがオブジェクトの状態を変更するかどうかや、クラス内のどの状態変数をトランザクション的に管理すべきか (例えば、トランザクションが中断した場合にロールバックする必要のないインスタンス変数があるなど) を STM サブシステムに伝えることができます。前述のように、これらのアノテーションが存在しない場合は、すべてのメソッドが状態を変更すると仮定するなど、安全性を保証するためにデフォルトが選択されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:145
msgid ""
"For example, by using the `@ReadLock` annotation on the `getNumberOfBookings` method, we are able to tell the\n"
"STM subsystem that no state modifications will occur in this object when it is used in the transactional\n"
"memory. Also, the `@NotState` annotation tells the system to ignore `timesCalled` when transactions commit or\n"
"abort, so this value only changes due to application code."
msgstr "例えば、`getNumberOfBookings` メソッドに `@ReadLock` アノテーションを使用することで、このオブジェクトがトランザクションメモリーで使用されているときに、状態の変更がこのオブジェクトでは発生しないことを STM サブシステムに伝えることができます。また、`@NotState` アノテーションは、トランザクションがコミットまたは中止されたときに `timesCalled` を無視するようにシステムに指示するので、この値はアプリケーションコードによってのみ変化します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:150
msgid ""
"Please refer to the Narayana guide for details of how to exert finer grained control over the transactional\n"
"behaviour of objects that implement interfaces marked with the `@Transactional` annotation."
msgstr "`@Transactional` アノテーションでマークされたインターフェースを実装したオブジェクトのトランザクション動作をより細かく制御する方法の詳細は、Narayana を参照してください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:153
msgid "Creating STM objects"
msgstr "STM オブジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:155
msgid ""
"The STM subsystem needs to be told about which objects it should be managing. The Quarkus (aka Narayana) STM implementation\n"
"does this by providing containers of transactional memory within which these object instances reside. Until an object\n"
"is placed within one of these STM containers it cannot be managed within transactions and any state changes will\n"
"not possess the A, C, I (or even D) properties."
msgstr "STM サブシステムは、どのオブジェクトを管理すべきかを伝える必要があります。Quarkus (別名 Narayana) の STM 実装は、これらのオブジェクトインスタンスが存在するトランザクションメモリーのコンテナーを提供することでこれを行います。オブジェクトがこれらの STM コンテナー内に置かれるまでは、トランザクション内で管理することはできず、状態の変更は A、C、I (あるいは D) のプロパティーを持たないことになります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:160
msgid ""
"Note, the term \"container\" was defined within the STM implementation years before Linux containers came along. It may\n"
"be confusing to use especially in a Kubernetes native environment such as Quarkus, but hopefully\n"
"the reader can do the mental mapping."
msgstr "注意: \"コンテナー\" という用語は、Linux コンテナーが登場する何年も前に STM の実装で定義されていました。特に Quarkus のような Kubernetes ネイティブ環境で使用すると混乱するかもしれませんが、読者の方には柔軟に理解していただければと思います。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:164
msgid ""
"The default STM container (`org.jboss.stm.Container`) provides support for volatile objects that can only be shared between\n"
"threads in the same microservice/JVM instance. When a STM-aware object is placed into the container it returns a handle\n"
"through which that object should then be used in the future. It is important to use this handle as continuing to access\n"
"the object through the original reference will not allow the STM subsystem to track access and manage state and\n"
"concurrency control."
msgstr "デフォルトの STM コンテナー (`org.jboss.stm.Container`) は、同じマイクロサービス/JVM インスタンス内のスレッド間でのみ共有可能な揮発性オブジェクトをサポートしています。STM を意識したオブジェクトがコンテナーに置かれると、そのオブジェクトが将来的に使用されるべきハンドルを返します。元の参照を介してオブジェクトにアクセスし続けると、STM サブシステムがアクセスを追跡したり、状態や同時実行制御を管理したりすることができなくなるため、このハンドルを使用することが重要です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:181
msgid ""
"You need to tell each Container about the type of objects for which it will be responsible. In this example\n"
"it will be instances that implement the FlightService interface."
msgstr "各コンテナーに、処理するオブジェクトの種類を伝える必要があります。この例では、FlightService インターフェースを実装したインスタンスになります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:183
msgid ""
"Then you create an instance that implements `FlightService`. You should not use it directly at this stage because\n"
"access to it is not being managed by the STM subsystem."
msgstr "次に、`FlightService` を実装したインスタンスを作成します。この段階では、STM サブシステムによってアクセスが管理されていないため、直接使用してはいけません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:185
msgid ""
"To obtain a managed instance, pass the original object to the STM `container` which then returns a reference\n"
"through which you will be able to perform transactional operations. This reference can be used safely from multiple threads."
msgstr "管理されたインスタンスを取得するには、元のオブジェクトを STM `container` に渡します。すると、トランザクション的な操作を実行できるようになる参照を返します。この参照は、複数のスレッドから安全に使用することができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:188
msgid "Defining transaction boundaries"
msgstr "トランザクションの境界の定義"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:190
msgid ""
"Once an object is placed within an STM container the application developer can manage the scope of transactions\n"
"within which it is used. There are some annotations which can be applied to the STM-aware class to have the\n"
"container automatically create a transaction whenever a specific method is invoked."
msgstr "一度オブジェクトをSTMコンテナー内に配置すると、アプリケーション開発者はそれが使用されるトランザクションの範囲を管理することができます。特定のメソッドが呼び出されたときにコンテナーが自動的にトランザクションを作成するように、STM-aware クラスに適用できるアノテーションがいくつかあります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:194
msgid "Declarative approach"
msgstr "宣言的アプローチ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:196
msgid ""
"If the `@NestedTopLevel` or `@Nested` annotation is placed on a method signature then the STM container will\n"
"start a new transaction when that method is invoked and attempt to commit it when the method returns. If there is\n"
"a transaction already associated with the calling thread then each of these annotations behaves slightly differently:\n"
"the former annotation will always create a new top-level transaction within which the method will execute, so the enclosing\n"
"transaction does not behave as a parent, i.e., the nested top-level transaction will commit or abort independently; the\n"
"latter annotation will create a transaction with is properly nested within the calling transaction, i.e., that\n"
"transaction acts as the parent of this newly created transaction."
msgstr "`@NestedTopLevel` または `@Nested` アノテーションがメソッドのシグネチャーに配置されている場合、STM コンテナーは、そのメソッドが呼び出されたときに新しいトランザク ションを開始し、そのメソッドが戻ってきたときにコミットを試みます。呼び出したスレッドに既にトランザクションが関連付けられている場合、これらのアノテーションの動作はそれぞれ若干異なります。前者のアノテーションでは、メソッドが実行される新しいトップレベルのトランザクションが常に作成されるため、周囲のトランザクションは親として動作せず、入れ子になったトップレベルのトランザクションは独立してコミットまたはアボートします。後者のアノテーションでは、呼び出したトランザクションの中に適切に入れ子になったトランザクションが作成され、そのトランザクションが新しく作成されたトランザクションの親として動作します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:204
msgid "Programmatic approach"
msgstr "プログラム的アプローチ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:206
msgid "The application can programmatically start a transaction before accessing the methods of STM objects:"
msgstr "アプリケーションは、STM オブジェクトのメソッドにアクセスする前に、プログラム的にトランザクションを開始することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:226
msgid ""
"An object for manually controlling transaction boundaries (AtomicAction and many other useful\n"
"classes are included in the extension).\n"
"Refer https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[to the javadoc] for more detail."
msgstr "トランザクションの境界を手動で制御するためのオブジェクト (AtomicAction と他の多くの便利なクラスがエクステンションに含まれています)。詳細は https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[to the javadoc] を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:229
msgid "Programmatically begin a transaction."
msgstr "プログラムでトランザクションを開始します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:230
msgid ""
"Notice that object updates can be composed which means that updates to multiple objects can be committed together as a single action.\n"
"[Note that it is also possible to begin nested transactions so that you can perform speculative work which may then be abandoned\n"
"without abandoning other work performed by the outer transaction]."
msgstr "また、オブジェクトの更新を構成することが可能です。つまり、複数のオブジェクトの更新を 1 つのアクションとしてまとめてコミットすることができます。[なお、ネストしたトランザクションを開始することで、推論的な作業を行うことも可能です。これは、その後、外側のトランザクションで行われた他の作業を放棄することなく、破棄できます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:233
msgid "Since the transaction has not yet been committed the changes made by the flight and taxi services are not visible outside of the transaction."
msgstr "このトランザクションはまだコミットされていないため、フライトやタクシーサービスによって行われた変更は、トランザクションの外からは見えません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:234
msgid ""
"Since the commit was successful the changes made by the flight and taxi services are now visible to other threads.\n"
"Note that other transactions that relied on the old state may or may not now incur conflicts when they commit (the STM library\n"
"provides a number of features for managing conflicting behaviour and these are covered in the Narayana STM manual)."
msgstr "コミットが成功したので、フライトサービスやタクシーサービスで行われた変更が他のスレッドからも見えるようになりました。古い状態に依存していた他のトランザクションがコミットする際に競合が発生する可能性があることに注意してください (STM ライブラリーは競合する動作を管理するための多くの機能を提供しており、これらについては Narayana STM マニュアルに記載されています)。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:237
msgid "Programmatically decide to abort the transaction which means that the changes made by the flight and taxi services are discarded."
msgstr "プログラム的には、フライトやタクシーサービスによって行われた変更が破棄されることを意味するトランザクションの中止を決定します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:239
msgid "Distributed transactions"
msgstr "分散型トランザクション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/software-transactional-memory.adoc:241
msgid ""
"Sharing a transaction between multiple services is possible but is currently\n"
"an advanced use case only and the Narayana documentation should be consulted\n"
"if this behaviour is required. In particular, STM does not yet support the features\n"
"described in the xref:context-propagation.adoc[Context Propagation guide]."
msgstr "複数のサービス間でトランザクションを共有することは可能ですが、これは現在のところ高度なユースケースであり、この動作が必要な場合はNarayanaのドキュメントを参照してください。特に、STM は link:context-propagation.html[Context Propagation ガイド]で説明されている機能をまだサポートしていません。"
