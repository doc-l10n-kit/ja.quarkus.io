msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/vertx-reference.adoc:6
msgid "Vert.x Reference Guide"
msgstr "Vert.x リファレンスガイド"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:10
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x]は、リアクティブなアプリケーションを構築するためのツールキットです。 link:quarkus-reactive-architecture.html[Quarkus Reactive Architecture]に記載されているように、QuarkusではVert.xを下地に使用しています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:13
msgid ""
"This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.\n"
"It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr "このガイドは、 link:vertx.html[QuarkusアプリケーションからEclipse Vert.x APIの使用] ガイドの姉妹編です。Quarkusで使用されるVert.xインスタンスの使用方法や設定について、より詳細に説明しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:18
msgid "Accessing the Vert.x instance"
msgstr "Vert.xインスタンスへのアクセス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:20
msgid ""
"To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.\n"
"Note that this dependency may already be installed (as a transitive dependency)."
msgstr "マネージドVert.xインスタンスにアクセスするには、 `quarkus-vertx` エクステンションをプロジェクトに追加してください。この依存関係がすでにインストールされている可能性があることに注意してください（推移的依存関係として）。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:23
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "このエクステンションでは、フィールドまたはコンストラクタ・インジェクションのいずれかを使用して、Vert.xのマネージドインスタンスを取得できます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:40
msgid "You can inject either the:"
msgstr "以下のどちらかを注入することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:42
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr "_裸の_ Vert.x APIを公開する `io.vertx.core.Vertx` インスタンス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:43
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr "_Mutiny_ APIを公開する `io.vertx.mutiny.core.Vertx` インスタンス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:45
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "Mutiny variantは、Quarkusが提供する他のリアクティブAPIと統合されているため、Mutiny variantの使用をお勧めします。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:554
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:50
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:53
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny バリアントに関するドキュメントは https://smallrye.io/smallrye-mutiny-vertx-bindings にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:56
msgid "Configuring the Vert.x instance"
msgstr "Vert.xインスタンスの設定"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:58
msgid ""
"You can configure the Vert.x instance from the `application.properties` file.\n"
"The following table lists the supported properties:"
msgstr "`application.properties` ファイルから Vert.x インスタンスを設定することができます。次の表は、サポートされているプロパティの一覧です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:65
msgid "Using Vert.x clients"
msgstr "Vert.xクライアントの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:67
msgid ""
"In addition to Vert.x core, you can use most Vert.x ecosystem libraries.\n"
"Some Quarkus extension already wraps Vert.x libraries."
msgstr "Vert.xコアに加えて、ほとんどのVert.xエコシステムライブラリを使用することができます。いくつかのQuarkusエクステンションは、すでにVert.xライブラリをラップしています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:70
msgid "Available APIs"
msgstr "利用可能なAPI"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:72
msgid ""
"The following table lists the most used libraries from the Vert.x ecosystem.\n"
"To access these APIs, add the indicated extension or dependency to your project.\n"
"Refer to the associated documentation to learn how to use them."
msgstr "次の表は、Vert.xエコシステムで最も使用されているライブラリの一覧です。これらのAPIにアクセスするには、指定されたエクステンションまたは依存関係をプロジェクトに追加します。使用方法については、関連ドキュメントを参照してください。"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:78
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:79
msgid "Extension or Dependency"
msgstr "エクステンションか依存関係"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:80
msgid "Documentation"
msgstr "ドキュメント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:82
msgid "AMQP Client"
msgstr "AMQPクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:83
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:84
msgid "https://quarkus.io/guides/amqp"
msgstr "https://quarkus.io/guides/amqp"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:86
msgid "Circuit Breaker"
msgstr "サーキットブレーカー"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:87
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:88
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr "https://vertx.io/docs/vertx-circuit-breaker/java/"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:90
msgid "Consul Client"
msgstr "Consul クライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:91
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:92
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr "https://vertx.io/docs/vertx-consul-client/java/"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:94
msgid "DB2 Client"
msgstr "DB2クライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:95
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-db2-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:124
msgid "https://quarkus.io/guides/reactive-sql-clients"
msgstr "https://quarkus.io/guides/reactive-sql-clients"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:98
msgid "Kafka Client"
msgstr "Kafkaクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:99
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:100
msgid "https://quarkus.io/guides/kafka"
msgstr "https://quarkus.io/guides/kafka"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:102
msgid "Mail Client"
msgstr "メールクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:103
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr "`io.quarkus:quarkus-mailer` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:104
msgid "https://quarkus.io/guides/mailer"
msgstr "https://quarkus.io/guides/mailer"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:106
msgid "MQTT Client"
msgstr "MQTTクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:107
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:108
msgid "https://quarkus.io/guides/mqtt"
msgstr "https://quarkus.io/guides/mqtt"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:110
msgid "MS SQL Client"
msgstr "MS SQLクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:111
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mssql-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:114
msgid "MySQL Client"
msgstr "MySQLクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:115
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mysql-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:118
msgid "Oracle Client"
msgstr "Oracleクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:119
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-oracle-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:122
msgid "PostgreSQL Client"
msgstr "PostgreSQLクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:123
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-pg-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:126
msgid "RabbitMQ Client"
msgstr "RabbitMQクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:127
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:128
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr "https://vertx.io/docs/vertx-rabbitmq-client/java"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:130
msgid "Redis Client"
msgstr "Redisクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:131
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr "`io.quarkus:quarkus-redis-client` (extension)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:132
msgid "https://quarkus.io/guides/redis"
msgstr "https://quarkus.io/guides/redis"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:134
msgid "Web Client"
msgstr "ウェブクライアント"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:135
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"

#. type: Table
#: upstream/_versions/2.7/guides/vertx-reference.adoc:136
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr "https://vertx.io/docs/vertx-web-client/java/"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:140
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Vert.x Mutiny APIの使用方法について詳しくは、 https://smallrye.io/smallrye-mutiny-vertx-bindings を参照してください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:142
msgid "Example of usage"
msgstr "使用例"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:144
msgid ""
"This section gives an example using the Vert.x `WebClient`.\n"
"As indicated in the table above, add the following dependency to your project:"
msgstr "このセクションでは、Vert.x `WebClient` を使った例を紹介します。上の表にあるように、プロジェクトに以下の依存関係を追加します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:927
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:943
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:162
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "さて、コードの中で、 `WebClient` のインスタンスを作成することが可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:215
msgid ""
"This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.\n"
"Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.\n"
"The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "このリソースは、 `WebClient` を作成し、リクエストに応じて、このクライアントを使用してリモート HTTP API を呼び出します。結果に応じて、レスポンスは受信したまま転送されるか、エラーをラップしたJSONオブジェクトが作成されます。 `WebClient` は非同期（かつノンブロッキング）で、エンドポイントからは `Uni` が返されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:219
msgid ""
"The application can also run as a native executable.\n"
"But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).\n"
"Open the `src/main/resources/application.properties` and add:"
msgstr "このアプリケーションは、ネイティブ実行可能ファイルとしても実行できます。しかし、その前に、Quarkusに _ssl_ を有効にするよう指示する必要があります（リモートAPIがHTTPSを使用している場合）。 `src/main/resources/application.properties` を開き、以下を追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:228
msgid "Then, create the native executable with:"
msgstr "そして、ネイティブ実行可能ファイルを作成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:233
msgid "Using Vert.x JSON"
msgstr "Vert.x JSONの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:235
msgid ""
"Vert.x APIs often rely on JSON.\n"
"Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr "Vert.xのAPIはしばしばJSONに依存しています。Vert.xは、JSONドキュメントを操作する2つの便利なクラスを提供しています： `io.vertx.core.json.JsonObject` および `io.vertx.core.json.JsonArray` 。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:238
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` は、オブジェクトをJSON表現にマッピングしたり、JSONドキュメントからオブジェクトを構築するために使用できます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:251
msgid ""
"Note that these features use the mapper managed by the `quarkus-jackson` extension.\n"
"Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr "なお、これらの機能は、 `quarkus-jackson` エクステンションで管理されているマッパーを使用しています。マッピングをカスタマイズするには link:rest-json.html#json[Jacksonの設定] を参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:255
msgid ""
"JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).\n"
"Consider these endpoints:"
msgstr "JSON ObjectとJSON Arrayは、QuarkusのHTTPエンドポイントのリクエストとレスポンスボディとしてサポートされています（従来のRESTEasyとRESTEasy Reactiveを使用）。これらのエンドポイントについて考えてみましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:291
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr "http://localhost:8080/hello/Quarkus/object は次を返却します"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:298
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr "http://localhost:8080/hello/Quarkus/array は次を返却します"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:305
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "これは、JSONコンテンツがリクエストボディである場合や、 `Uni`, `Multi`, `CompletionStage`, `Publisher` で包まれている場合にも同様に機能します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:307
msgid "Using verticles"
msgstr "verticleの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:309
msgid ""
"link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n"
"This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.\n"
"To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] は、 _Vert.x_ が提供する「シンプルでスケーラブルな、アクターのようなデプロイ・並行性モデル」です。このモデルは、厳密なアクターモデルの実装を主張するものではありませんが、特に並行性、スケーリング、デプロイに関する類似性を共有しています。このモデルを使用するには、バーティクルを書いて _デプロイ_ し、イベントバスにメッセージを送信することで通信します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:313
msgid ""
"You can deploy _verticles_ in Quarkus.\n"
"It supports:"
msgstr "Quarkusで _verticles_ をデプロイすることができます。次をサポートしています:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:316
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_生の_ verticle - `io.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:317
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr "_Mutiny_ verticle - `io.smallrye.mutiny.vertx.core.AbstractVerticle` を拡張するJavaクラス"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:319
msgid "Deploying verticles"
msgstr "verticleの展開"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:321
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr "verticleを展開するには、`deployVerticle` メソッドを使用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:332
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr "Vert.x の Mutiny 版を使用する場合、 `deployVerticle` メソッドは `Uni` を返すため、実際のデプロイメントを行うにはサブスクリプションをトリガーする必要があることに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:334
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "アプリケーションの初期化時にVerticleをデプロイする方法については、次の例で説明します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:336
msgid "Using @ApplicationScoped Beans as Verticle"
msgstr "Verticleとしての@ApplicationScoped Beansの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:338
msgid ""
"In general, Vert.x verticles are not CDI beans.\n"
"And so cannot use injection.\n"
"However, in Quarkus, you can deploy verticles as beans.\n"
"Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr "一般的に、Vert.xのバーティクルはCDI Beanではありません。そのため、依存性注入は使用できません。しかし、QuarkusではVerticleをBeanとしてデプロイすることができます。この場合、CDI（QuarkusではArc）がインスタンスの作成を担当することに注意してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:343
msgid "The following snippet provides an example:"
msgstr "次のスニペットはその例です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:369
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr "`vertx` のインスタンスを注入する必要はなく、代わりに `AbstractVerticle` の protected フィールドを利用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:371
msgid "Then, deploy the verticle instances with:"
msgstr "そして、バーティクルインスタンスをデプロイします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:392
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "露出しているすべての `AbstractVerticle` をデプロイしたい場合は、次のようにします。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:403
msgid "Using multiple verticles instances"
msgstr "そして、Verticleインスタンスをデプロイします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:405
msgid ""
"When using `@ApplicationScoped`, you will get a single instance for your verticle.\n"
"Having multiple instances of verticles can be helpful to share the load among them.\n"
"Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr "`@ApplicationScoped` を使用する場合、Verticleのインスタンスは1つになります。複数のVerticleのインスタンスを持つことは、それらの間で負荷を共有するのに役立ちます。各々のインスタンスは、異なるI/Oスレッド（Vert.xイベントループ）に関連付けられます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:409
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr "Verticleの複数のインスタンスをデプロイするには、 `@ApplicationScoped` の代わりに `@Dependent` スコープを使用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:433
msgid "Then, deploy your verticle as follows:"
msgstr "そして、verticleをデプロイします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:460
msgid ""
"The `init` method receives an `Instance<MyVerticle>`.\n"
"Then, you pass a supplier to the `deployVerticle` method.\n"
"The supplier is just calling the `get()` method.\n"
"Thanks to the `@Dependent` scope, it returns a new instance on every call.\n"
"Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.\n"
"It will call the supplier twice, which will create two instances of your verticle."
msgstr "`init` メソッドは、 `Instance<MyVerticle>` を受け取ります。そして、 `deployVerticle` メソッドにサプライヤーを渡します。サプライヤーは `get()` メソッドを呼び出しているだけです。 `@Dependent` スコープのおかげで、呼び出すたびに新しいインスタンスが返されます。最後に、希望する数のインスタンスを `DeploymentOptions` に渡します。例えば、前の例では2つです。サプライヤーを2回呼び出し、Verticleの2つのインスタンスを作成します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:468
msgid "Using the event bus"
msgstr "イベントバスの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:470
msgid ""
"Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.\n"
"So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr "Vert.xには、Quarkusアプリケーションから使用できる link:https://vertx.io/docs/vertx-core/java/#event_bus[イベントバス]が組み込まれています。そのため、アプリケーションコンポーネント（CDI Bean、リソース...）は、非同期イベントを使用して相互に作用することができ、疎結合を促進します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:473
msgid ""
"With the event bus, you send _messages_ to _virtual addresses_.\n"
"The event bus offers three types of delivery mechanisms:"
msgstr "イベントバスでは、 _仮想アドレス_ に _メッセージ_ を送信します。イベントバスには、3種類の配送メカニズムが用意されています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:476
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - メッセージを送信すると、1人の消費者がそれを受信します。複数の消費者がそのアドレスを聞く場合は、ラウンドロビンが適用されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:477
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - メッセージを発行し、そのアドレスを聞いているすべてのコンシューマーがメッセージを受信します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:478
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "request/reply - メッセージを送信し、応答を期待します。受信者は非同期的にメッセージに応答することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:480
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、リアクティブなアプリケーションを構築するための基本的な要素の一つとなっています。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:482
msgid "Consuming events"
msgstr "イベントのコンシューム"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:484
msgid ""
"While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.\n"
"To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "Vert.x APIを使用してコンシューマーを登録することができますが、Quarkusには宣言型のサポートがあります。イベントを消費するには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:504
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "設定されていない場合、アドレスはBeanの完全修飾名となります。例えば、このスニペットでは、 `org.acme.vertx.GreetingService` となります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:505
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "メソッドのパラメータはメッセージボディです。メソッドが _何か_ を返す場合は、それがメッセージのレスポンスとなります。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:507
msgid "Configuring the address"
msgstr "アドレスの設定"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:509
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:518
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:520
msgid "Asynchronous processing"
msgstr "非同期処理"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:522
msgid ""
"The previous examples use synchronous processing.\n"
"Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "これまでの例では、同期処理を行っています。 `io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage` を返却することで、非同期処理も可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:556
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前の例はMutinyリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:560
msgid "Blocking processing"
msgstr "ブロッキング処理"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:562
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.\n"
"If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr "デフォルトでは、イベントを消費するコードは、I/Oスレッドで呼び出されるため、 _ノンブロッキング_ でなければなりません。処理がブロッキングの場合は、 `@io.smallrye.common.annotation.Blocking` アノテーションを使用してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:574
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "あるいは、 `@ConsumeEvent` アノテーションの `blocking` 属性を使用することもできます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:584
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "`@Blocking` を使用する場合、 `@ConsumeEvent` の `blocking` 属性の値は無視されます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:586
msgid "Replying to messages"
msgstr "メッセージへの返信"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:588
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr "`@ConsumeEvent` でアノテーションされたメソッドの _戻り_ 値は、受信したメッセージへの応答に使用されます。たとえば、次のスニペットでは、返された `String` が応答となります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:599
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "また、 `Uni<T>` や `CompletionStage<T>` を返すことで、非同期応答を扱うこともできます。。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:611
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation エクステンションを使えば、 `executor` を注入することができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:618
msgid "Implementing fire and forget interactions"
msgstr "fire and forget インタラクションの実装"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:620
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.\n"
"To implement this pattern, your consumer method returns `void`."
msgstr "受信したメッセージに返信する必要はありません。通常、 _fire and forget_ のインタラクションでは、メッセージは消費され、送信者はそのことを知る必要はありません。このパターンを実装するために、コンシューマー・メソッドは `void` を返します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:632
msgid "Dealing with messages"
msgstr "メッセージの処理"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:634
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "_ペイロード_ を直接使用する前の例とは異なり、 `Message` を直接使用することもできます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:645
msgid "Handling Failures"
msgstr "失敗のハンドリング"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:647
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "`@ConsumeEvent` でアノテーションされたメソッドが例外を発生させた場合、"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:649
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "返信ハンドラが設定されている場合、失敗はコード `ConsumeEvent#FAILURE_CODE` と例外メッセージを含む `io.vertx.core.eventbus.ReplyException` を通じて送信者に伝えられます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:650
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "応答ハンドラが設定されていない場合、例外は再スローされ（必要に応じて `RuntimeException` でラップされる）、デフォルトの例外ハンドラ、すなわち `io.vertx.core.Vertx#exceptionHandler()` で処理することができます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:652
msgid "Sending messages"
msgstr "メッセージの送信"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:654
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "メッセージの送信と公開にはVert.x Event busを使用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:686
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:687
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信。メッセージのペイロードは `name`"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:689
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:691
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人のコンシューマーがメッセージを受信する。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:692
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべてのコンシューマーがメッセージを受け取る。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:693
msgid "`request` a message and expect a reply"
msgstr "`request` メッセージを送って返信を期待する"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:706
msgid "Using codecs"
msgstr "コーデックを使う"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:708
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.xイベントバス] では、コーデックを使用してオブジェクトの _シリアライズ_ と _デシリアライズ_ を行います。Quarkusでは、ローカル配信用のデフォルトのコーデックを提供しています。そのため、以下のようにオブジェクトを交換することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:728
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "特定のコーデックを使用したい場合は、両サイドで明示的に設定する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:746
msgid "Set the name of the codec to use to send the message"
msgstr "メッセージの送信に使用するコーデックの名前を設定します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:747
msgid "Set the codec to use to receive the message"
msgstr "メッセージの受信に使用するコーデックを設定します。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:749
msgid "Combining HTTP and the event bus"
msgstr "HTTPとイベントバスの融合"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:751
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the JAX-RS endpoint, we are sending a message.\n"
"Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr "greeting HTTPエンドポイントに戻り、非同期メッセージパッシングを使用して呼び出しを別のBeanに委譲しましょう。 要求/応答ディスパッチメカニズムを使用します。 JAX-RSエンドポイント内にビジネスロジックを実装する代わりに、メッセージを送信しています。 別のBeanがこのメッセージを消費し、_応答_ メカニズムを使用して応答が送信されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:756
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "HTTPエンドポイントクラスでは、イベントバスを注入し、 `request` メソッドを使用して、イベントバスにメッセージを送信し、応答を期待します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:788
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`greeting` アドレスに  `name`  を送信し、レスポンスを要求します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:789
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、ボディを抽出してユーザーに送信します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:791
msgid ""
"the HTTP method returns a `Uni`.\n"
"If you are using RESTEasy Reactive, `Uni` support is built-in.\n"
"If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr "HTTP メソッドは `Uni` を返します。RESTEasy Reactive を使用している場合は、 `Uni` のサポートが組み込まれています。 _従来の_ RESTEasyを使用している場合は、 `quarkus resteasy-mutiny` エクステンションをプロジェクトに追加する必要があります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:795
msgid ""
"We need a consumer listening on the `greeting` address.\n"
"This consumer can be in the same class or another bean such as:"
msgstr "`greeting` のアドレスをリッスンするコンシューマーが必要です。このコンシューマーは、同じクラスでも、次のような別のBeanでも構いません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:817
msgid "This bean receives the name and returns the greeting message."
msgstr "このBeanは、名前を受け取り、グリーティングメッセージを返します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:819
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "これにより、 `/bus/quarkus` のすべてのHTTPリクエストは、イベントバスにメッセージを送信し、応答を待ち、その応答が到着すると、HTTPレスポンスを書き込みます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:826
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "より理解しやすくするために、HTTP リクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:828
msgid "The request is received by the `greeting` method"
msgstr "リクエストは、 `greeting` メソッドで受信されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:829
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_name_ を含むメッセージがイベントバスに送信されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:830
msgid "Another bean receives this message and computes the response"
msgstr "別の Bean がこのメッセージを受信して、レスポンスを計算します."

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:831
msgid "This response is sent back using the reply mechanism"
msgstr "このレスポンスは、応答メカニズムを使用して返信されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:832
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "送信者が応答を受信すると、HTTP レスポンスに内容が書き込まれます。"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:835
msgid "Bi-directional communication with browsers using SockJS"
msgstr "SockJSによるブラウザとの双方向通信"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:837
msgid ""
"The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.\n"
"It connects both sides.\n"
"So, both sides can send messages received on the other side.\n"
"It supports the three delivery mechanisms."
msgstr "Vert.xが提供するSockJSブリッジは、ブラウザアプリケーションとQuarkusアプリケーションがイベントバスを使って通信できるようにします。双方を接続します。そのため、双方が相手側で受信したメッセージを送信することができます。3つの配信メカニズムをサポートしています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:842
msgid ""
"SockJS negotiates the communication channel between the Quarkus application and the browser.\n"
"If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr "SockJSは、Quarkusアプリケーションとブラウザの間の通信チャネルをネゴシエートします。WebSocketがサポートされている場合はそれを使用し、そうでない場合はSSEや長いポーリングなどにダウングレードします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:845
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "SockJSを使用するためには、ブリッジの設定、特に通信に使用されるアドレスの設定が必要です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:878
msgid ""
"This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.\n"
"More detailled explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr "このコードは、SockJSブリッジが接続されたブラウザに `ticks` のアドレスをターゲットとしたすべてのメッセージを送信するように設定します。設定についての詳細な説明は、 link:https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[Vert.x SockJS Bridge のドキュメント]にあります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:881
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "ブラウザは、メッセージを消費するために、 `vertx-eventbus` JavaScriptライブラリを使用する必要があります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:917
msgid "Native Transport"
msgstr "ネイティブトランスポート"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:919
msgid "Native transports are not supported in GraalVM produced binaries."
msgstr "GraalVMで作られたバイナリでは、ネイティブトランスポートはサポートされていません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:921
msgid ""
"Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers\n"
"performance improvements on specific platforms.To enable them, you must include the appropriate dependency for your\n"
"platform. It's usually a good idea to have both to keep your application platform agnostic. Netty is smart enough\n"
"to use the correct one, that includes none at all on unsupported platforms:"
msgstr "Vert.xは link:https://netty.io/wiki/native-transports.html[Nettyのネイティブトランスポート]を使用することができ、特定のプラットフォームでパフォーマンスを向上させることができます。これらを有効にするには、お使いのプラットフォームに適切な依存関係を含める必要があります。これらを有効にするには、プラットフォームに適した依存関係を含める必要があります。通常、アプリケーションをプラットフォームに依存しないようにするためには、両方を持つことが良いアイデアです。Nettyは賢いので、サポートされていないプラットフォームでは一切使用しないなど、適切な方を使用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:950
msgid ""
"You will also have to explicitly configure Vert.x to use the native transport.\n"
"In `application.properties` add:"
msgstr "また、Vert.xでネイティブトランスポートを使用するように明示的に設定する必要があります。 `application.properties` に次を追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:958
msgid "Or in `application.yml`:"
msgstr "あるいは、 `application.yml` で次のように設定します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:967
msgid "If all is well quarkus will log:"
msgstr "すべてがうまくいけば、quarkusは以下のログ出力を行います。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:969
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true"
msgstr "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:973
msgid "Native Linux Transport"
msgstr "ネイティブLinuxトランスポート"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:975
msgid "On Linux you can enable the following socket options:"
msgstr "Linuxでは、以下のソケットオプションを有効にすることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:998
msgid "SO_REUSEPORT"
msgstr "SOREUSEPORT"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:999
msgid "quarkus.http.so-reuse-port=true"
msgstr "quarkus.http.so-reuse-port=true"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:981
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:982
msgid "quarkus.http.tcp-quick-ack=true"
msgstr "quarkus.http.tcp-quick-ack=true"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:985
msgid "TCP_CORK"
msgstr "TCP_CORK"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:986
msgid "quarkus.http.tcp-cork=true"
msgstr "quarkus.http.tcp-cork=true"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:989
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:990
msgid "quarkus.http.tcp-fast-open=true"
msgstr "quarkus.http.tcp-fast-open=true"

#. type: Title ===
#: upstream/_versions/2.7/guides/vertx-reference.adoc:994
msgid "Native MacOS Transport"
msgstr "ネイティブMacOSトランスポート"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:996
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr "MacOS Sierra以上では、以下のソケットオプションを有効にすることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1004
msgid "Listening to a Unix Domain Socket"
msgstr "Unixドメインソケットのリスニング"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1006
msgid ""
"Listening on a Unix domain socket allows us to dispense with the overhead of TCP\n"
"if the connection to the quarkus service is established from the same host. This can happen\n"
"if access to the service goes through a proxy which is often the case\n"
"if you're setting up a service mesh with a proxy like Envoy."
msgstr "Unixドメインソケットでリスニングすることにより、quarkusサービスへの接続が同じホストから確立されている場合、TCPのオーバーヘッドを省略することができます。これは、サービスへのアクセスがプロキシを経由する場合に起こります。Envoyのようなプロキシを使ってサービスメッシュを設定している場合によく見られます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1011
msgid "This will only work on platforms that support <<native-transport>>."
msgstr "これは、 link:#native-transport[[native-transport]] をサポートするプラットフォームでのみ動作します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1013
msgid ""
"Enable the appropriate <<native-transport>> and set the following\n"
"environment property:"
msgstr "適切な <<native-transport>> を有効にし、以下の環境プロパティを設定します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1016
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true"
msgstr ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1021
msgid ""
"By itself this will not disable the tcp socket which by default will open on\n"
"`0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "これだけでは、デフォルトで `0.0.0.0:8080` で開かれる tcp ソケットを無効にすることはできません。これは次のように明示的に無効にすることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1024
msgid "quarkus.http.host-enabled=false"
msgstr "quarkus.http.host-enabled=false"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1028
msgid ""
"These properties can be set through Java's `-D` command line parameter or\n"
"on `application.properties`."
msgstr "これらのプロパティは、Javaの `-D` コマンドライン・パラメータまたは `application.properties` で設定できます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1031
msgid "Read only deployment environments"
msgstr "読み取り専用のデプロイメント環境"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1033
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "ファイルシステムが読み取り専用の環境では、次のようなエラーが発生することがあります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx-reference.adoc:1040
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "`/tmp/` が書き込み可能である場合、これは `vertx.cacheDirBase` プロパティが `/tmp/` のディレクトリを指すように設定することで修正できます。例えば、OpenShift では環境変数 `JAVA_OPTS` を作成して `-Dvertx.cacheDirBase=/tmp/vertx` という値を設定します。"
