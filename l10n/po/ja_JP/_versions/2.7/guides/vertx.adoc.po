msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/vertx.adoc:6
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "QuarkusアプリケーションからのEclipse Vert.x APIの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:8
msgid "link:./attributes.adoc[role=include]"
msgstr "link:./attributes.adoc[role=include]"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:10
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x]は、リアクティブなアプリケーションを構築するためのツールキットです。 link:quarkus-reactive-architecture.html[Quarkus Reactive Architecture]に記載されているように、QuarkusではVert.xを下地に使用しています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:15
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "QuarkusのアプリケーションはVert.xのAPIにアクセスして使用することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:17
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "このガイドでは、Quarkusのアプリケーションで次を使って構築する方法を紹介します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:19
msgid "the managed instance of Vert.x"
msgstr "Vert.xのマネージドインスタンス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:20
msgid "the Vert.x event bus"
msgstr "Vert.x イベントバス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:21
msgid "the Vert.x Web Client"
msgstr "Vert.x Webクライアント"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:23
msgid ""
"It's an introductory guide.\n"
"The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr "これは入門ガイドです。 link:vertx-reference.html[Vert.xリファレンスガイド]では、バーティクルやネイティブトランスポートなど、より高度な機能について説明しています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:26
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:28
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "ここでは、4つのHTTPエンドポイントを公開するシンプルなアプリケーションを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:30
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` 小さなファイルからコンテンツを返す"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:31
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` 大きなファイル（本）からコンテンツを返す"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:32
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` は、Vert.x イベントバスを使用してレスポンスを生成します"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:33
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` は、Vert.x Web クライアントを使用して Wikipedia からデータを取得します"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:37
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:39
msgid ""
"We recommend that you follow the instructions in the following sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:44
msgid "The solution is located in the `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "このソリューションは `vertx-quickstart` {quickstarts-tree-url}/vertx-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:47
msgid "Mutiny"
msgstr "Mutiny"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:49
msgid ""
"This guide uses the Mutiny API.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr "このガイドでは、Mutiny APIを使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:54
msgid "Bootstrapping the application"
msgstr "アプリケーションの起動"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:56
msgid ""
"Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[this link] to configure your application.\n"
"It selected a few extensions:"
msgstr "https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=resteasy-reactive-jackson&e=vertx[このリンク]をクリックして、アプリケーションを設定してください。いくつかのエクステンションが選択されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:59
msgid "`resteasy-reactive-jackson`, which also brings `resteasy-reactive`. We are going to use it to expose our HTTP endpoints."
msgstr "`resteasy-reactive-jackson` 。これは `resteasy-reactive` も持ち込みます。これを使って、HTTPエンドポイントを公開します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:60
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx` 、下地となるマネージドVert.xへのアクセスを提供します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:62
msgid ""
"Click on the `Generate your application` button, download the zip file and unzip it.\n"
"Then, open the project in your favorite IDE."
msgstr "`Generate your application` ボタンをクリックし、ZIPファイルをダウンロードして解凍します。その後、お好きなIDEでプロジェクトを開いてください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:65
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "生成されたビルドファイルを開くと、選択されたエクステンションが表示されます:"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:90
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:99
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:87
msgid "While you are in your build file, add the following dependency:"
msgstr "ビルドファイルの中で、以下の依存関係を追加してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:104
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "この依存関係は、Vert.x Web クライアントを提供し、 `/web` エンドポイントの実装に使用されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:107
msgid "Accessing the managed Vert.x instance"
msgstr "Vert.xマネージドインスタンスへのアクセス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:109
msgid ""
"Create the `src/main/java/org/acme/VertxResource.java` file.\n"
"It will contain our HTTP endpoints."
msgstr "`src/main/java/org/acme/VertxResource.java` ファイルを作成します。このファイルには、HTTPエンドポイントが含まれます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:112
msgid "In this file, copy the following code:"
msgstr "このファイルに、以下のコードをコピーします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:134
msgid "Declare the root HTTP path."
msgstr "ルートHTTPパスを宣言します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:135
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "コンストラクタ・インジェクションを使用して、マネージドVert.xインスタンスを受け取ります。フィールド・インジェクションも有効です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:136
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "コンストラクタのパラメータとしてVert.xインスタンスを受け取ります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:137
msgid "Store the managed Vert.x instance into a field."
msgstr "マネージドVert.xインスタンスをフィールドに格納します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:139
msgid "With this, we can start implementing the endpoints."
msgstr "これで、エンドポイントの実装を始めることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:141
msgid "Using Vert.x Core API"
msgstr "Vert.x Core APIの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:143
msgid ""
"The injected Vert.x instance provides a set of APIs you can use.\n"
"The one we are going to use in this section is the Vert.x File System.\n"
"It provides a non-blocking API to access files."
msgstr "インジェクションされたVert.xインスタンスは、利用可能なAPIのセットを提供します。このセクションで使用するのはVert.x File Systemです。これは、ファイルにアクセスするためのノンブロッキングAPIを提供します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:148
msgid "In the `src/main/resource` directory, create a `lorem.txt` file with the following content:"
msgstr "`src/main/resource` ディレクトリに `lorem.txt` ファイルを次の内容で作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:155
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "そして、 `VertxResource` ファイルに以下のメソッドを追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:166
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "このエンドポイントは、パス `/lorem` に対する HTTP `GET` リクエストを処理します（そのため、フルパスは `vertx/lorem` となります）。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:167
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "Vert.x APIは非同期なので、このメソッドは `Uni` を返却します。Uniで表される非同期操作が完了すると、その内容がHTTPレスポンスに書き込まれます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:168
msgid "We use the Vert.x file system API to read the created file"
msgstr "Vert.xのファイルシステムAPIを使用して、作成されたファイルを読み取ります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:169
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "ファイルが読み込まれると、その内容がメモリ内のバッファに格納されます。このバッファをStringに変換します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:171
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "ターミナルで、プロジェクトのルートに移動して次を実行します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:173
#, fuzzy
msgid "link:includes/devtools/dev.adoc[role=include]"
msgstr "includes/devtools/dev.adoc"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:175
msgid "In another terminal, run:"
msgstr "別の端末で、次を実行します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:182
msgid "You should see the content of the file printed in the console."
msgstr "コンソールにファイルの内容が表示されるはずです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:184
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkusは、静的ファイルを提供する他の方法を提供しています。これはガイドのために作られた例です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:186
msgid "Using Vert.x stream capability"
msgstr "Vert.x stream の能力の使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:188
msgid ""
"Reading a file and storing the content in memory works for small files, but not big ones.\n"
"In this section, we will see how you can use Vert.x streaming capability."
msgstr "ファイルを読み込んで内容をメモリに保存する方法は、小さなファイルには有効ですが、大きなファイルには使えません。このセクションでは、Vert.xのストリーミング機能をどのように使用するかを説明します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:191
msgid ""
"First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.\n"
"It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.\n"
"This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr "まず、 link:https://www.gutenberg.org/files/2600/2600-0.txt[戦争と平和]をダウンロードして、 `src/main/resources/book.txt` に保存します。これは3.2Mbのファイルで、巨大ではありませんが、ストリームの目的を説明しています。今回は、ファイルの内容をメモリに蓄積して一括して書き込むのではなく、チャンクごとに読み込んで、そのチャンクを1つずつHTTPレスポンスに書き込んでいきます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:195
msgid "So, you should have the following files in your project:"
msgstr "そこで、プロジェクト内に以下のファイルを用意しておきます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:219
msgid "Add the following method to the `VertxResource` class:"
msgstr "`VertxResource` クラスに以下のメソッドを追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:234
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "今回は、チャンクをストリーミングしたいので、Multiを返します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:235
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "`open` メソッドを使ってファイルを開きます。このメソッドは `Uni<AsyncFile>` を返却します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:236
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "ファイルが開かれると、チャンクを含む `Multi` が取得できます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:237
msgid "For each chunk, we produce a String"
msgstr "各チャンクは、String を生成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:238
msgid "To visually see the chunks in the response, we append a separator"
msgstr "レスポンス内のチャンクを視覚的に確認するために、セパレーターを追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:240
msgid "Then, in a terminal, run:"
msgstr "そして、ターミナルで、次を実行します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:247
msgid ""
"It should retrieve the book content.\n"
"In the output you should see the separator like:"
msgstr "ブックの内容を取得します。出力には次のようなセパレータが表示されるはずです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:263
msgid "Using the event bus"
msgstr "イベントバスの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:265
#, fuzzy
msgid ""
"One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].\n"
"It provides a message-based backbone to your application.\n"
"So, you can have components interacting using asynchronous message passing, and so decouple your components.\n"
"You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.\n"
"This is what we are going to use in this section.\n"
"Our `VertxResource` will send a message containing a name to the `greetings` address.\n"
"Another component will receive the message and produce the \"hello $name\" response.\n"
"The `VertxResource` will receive the response and return it as the HTTP response."
msgstr "Vert.xのコア機能のひとつに link:https://vertx.io/docs/vertx-core/java/#event_bus[イベントバスが] ある。これは、アプリケーションにメッセージベースのバックボーンを提供する。そのため、非同期メッセージパッシングを使用して相互作用するコンポーネントを持つことができ、コンポーネントを分離することができる。単一のコンシューマーにメッセージを送信することも、複数のコンシューマーにディスパッチすることも、メッセージ（リクエスト）を送信してレスポンスを期待するリクエスト・リプライ型のインタラクションを実装することもできる。このセクションではこれを使用します。 `VertxResource` は、名前を含むメッセージを `greetings` のアドレスに送信します。別のコンポーネントがそのメッセージを受け取り、\"hello $name \"というレスポンスを返す。 `VertxResource` はそのレスポンスを受け取り、HTTPレスポンスとして返します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:274
#, fuzzy
msgid "So, first, let's extend our `VertxResource` class with the following code:"
msgstr "それではまず、 `VertxResource` クラスを以下のコードで拡張してみよう："

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:289
#, fuzzy
msgid "Inject the event bus. Alternatively you can use `vertx.eventBus()`."
msgstr "イベントバスに注入する。あるいは、 `vertx.eventBus()` 。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:290
#, fuzzy
msgid "We receive a _name_ as a query parameter"
msgstr "クエリーパラメーターとして _名前を_ 受け取る"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:291
#, fuzzy
msgid "We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address."
msgstr "`request` メソッドを使用して、リクエストとリプライのやりとりを開始します。名前を \"greetings \"アドレスに送ります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:292
#, fuzzy
msgid "When the response is received, we extract the body and return it as the HTTP response"
msgstr "レスポンスを受信したら、ボディを抽出してHTTPレスポンスとして返す。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:294
#, fuzzy
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr "さて、もう一方の側、つまり名前を受け取って返信するコンポーネントが必要だ。以下の内容で `src/main/java/org/acme/GreetingService.java` ："

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:314
#, fuzzy
msgid "Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class."
msgstr "アプリケーションスコープでCDI Beanを宣言します。Quarkusはこのクラスのインスタンスを1つ作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:315
#, fuzzy
msgid "Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too."
msgstr "コンシューマを宣言するには、 `@ConsumeEvent` アノテーションを使用します。Vert.x API を link:https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[直接] 使用することも可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:316
#, fuzzy
msgid "Receive the message payload as a method parameter. The returned object will be the reply."
msgstr "メッセージのペイロードをメソッドのパラメーターとして受け取る。返されたオブジェクトがリプライとなる。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:317
#, fuzzy
msgid "Return the response. This response is sent back to the `VertxResource` class"
msgstr "レスポンスを返します。このレスポンスは `VertxResource` クラスに送り返される。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:319
#, fuzzy
msgid ""
"Let's try this.\n"
"In a terminal, run:"
msgstr "試してみよう。ターミナルで"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:328
#, fuzzy
msgid "You should get the expected `Hello bob` message back."
msgstr "期待通りの `Hello bob` 。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:330
msgid "Using Vert.x Clients"
msgstr "Vert.x クライアントの使用"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:332
#, fuzzy
msgid ""
"So far, we have used the Vert.x Core API.\n"
"Vert.x offers much more.\n"
"It provides a vast ecosystem.\n"
"In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr "ここまでは、Vert.x Core APIを使ってきた。Vert.xはそれ以上のものを提供している。Vert.xは広大なエコシステムを提供します。ここでは、リアクティブHTTPクライアントであるVert.x Web Clientの使い方を説明します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:337
#, fuzzy
msgid ""
"Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.\n"
"That's the case for the reactive data sources, Redis, mail...\n"
"That's not the case with the Web Client."
msgstr "Quarkusの拡張機能の中には、Vert.xクライアントをラッピングして管理してくれるものがあります。リアクティブデータソース、Redis、メールなどがそうです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:341
#, fuzzy
msgid ""
"Remember, at the beginning of the guide,  we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.\n"
"It's now time to use it."
msgstr "このガイドの冒頭で、 `pom.xml` ファイルに `smallrye-mutiny-vertx-web-client` 依存関係を追加したことを思い出してほしい。今度はそれを使う番だ。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:344
#, fuzzy
msgid ""
"First, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr "まず、 `WebClient` のインスタンスを作成する必要があります。 `client` フィールドとウェブクライアントの作成をコンストラクタに追加して、 `VertxResource` クラスを拡張します："

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:358
#, fuzzy
msgid "Store the `WebClient`, so we will be able to use it in our HTTP endpoint"
msgstr "HTTPエンドポイントで使用できるように、 `WebClient` 。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:359
#, fuzzy
msgid "Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class"
msgstr "`WebClient` 必ず `io.vertx.mutiny.ext.web.client.WebClient` クラスを使用してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:361
#, fuzzy
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:"
msgstr "それでは、Wikipedia APIに問い合わせ、Quarkusに関するさまざまな言語のページを取得する新しいHTTPエンドポイントを実装してみましょう。 `VertxResource` クラスに以下のメソッドを追加します："

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:377
#, fuzzy
msgid "This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide]."
msgstr "このエンドポイントは、JSON Array を返します。Vert.x は、JSON Object と Array を操作する便利な方法を提供します。これらの詳細については、 xref:vertx-reference.adoc#using-vert-x-json[リファレンスガイドを] 参照してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:378
#, fuzzy
msgid "Send a `GET` request to the Wikipedia API"
msgstr "Wikipedia APIに `GET` 。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:379
#, fuzzy
msgid "Once the response is received, extract it as a JSON Object"
msgstr "レスポンスを受信したら、それをJSONオブジェクトとして取り出す。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:380
#, fuzzy
msgid "Extract the `langlinks` array from the response."
msgstr "レスポンスから `langlinks` 配列を取り出す。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:382
#, fuzzy
msgid "Then, invoke the endpoint using:"
msgstr "そして、次のようにしてエンドポイントを呼び出す："

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:390
#, fuzzy
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia."
msgstr "返答によると、英語のページに加えて、ドイツ語とフランス語のクアルカスに関するページがウィキペディアにある。"

#. type: Title ==
#: upstream/_versions/2.7/guides/vertx.adoc:392
msgid "Going further"
msgstr "さらに詳しく"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:394
#, fuzzy
msgid ""
"This guide introduced how you can use Vert.x APIs from a Quarkus application.\n"
"It's just a brief overview.\n"
"If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr "このガイドでは、QuarkusアプリケーションからVert.x APIを使用する方法を紹介しました。簡単な概要に過ぎません。もっと詳しく知りたい方は、 xref:vertx-reference.adoc[QuarkusのVert.xに関するリファレンスガイドを] ご覧ください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:398
#, fuzzy
msgid ""
"As we have seen, the event bus is the connecting tissue of Vert.x applications.\n"
"Quarkus integrates it so different beans can interact with asynchronous messages.\n"
"This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr "これまで見てきたように、イベントバスはVert.xアプリケーションの接続組織です。Quarkusはこれを統合し、異なるBeanが非同期メッセージでやり取りできるようにします。この部分は xref:reactive-event-bus.adoc[イベントバスのドキュメントで] カバーされています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/vertx.adoc:402
#, fuzzy
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr "Quarkusで xref:reactive-sql-clients.adoc[Reactive SQLクライアントを] 使用して、パフォーマンスが高く、オーバーヘッドの少ないデータベースアプリケーションを実装する方法をご紹介します。"
