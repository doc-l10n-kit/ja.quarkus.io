msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/smallrye-health.adoc:6
msgid "SmallRye Health"
msgstr "SmallRye Health"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:10
msgid ""
"This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-health/[SmallRye Health]\n"
"an implementation of the https://github.com/eclipse/microprofile-health/[MicroProfile Health] specification."
msgstr "このガイドでは、 link:https://github.com/eclipse/microprofile-health/[MicroProfile Health]仕様の実装である link:https://github.com/smallrye/smallrye-health/[SmallRye Health]をQuarkusアプリケーションで使用する方法を説明します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:13
msgid ""
"SmallRye Health allows applications to provide information about their state\n"
"to external viewers which is typically useful in cloud environments where automated\n"
"processes must be able to determine whether the application should be discarded\n"
"or restarted."
msgstr "SmallRye Healthは、アプリケーションがその状態に関する情報を外部のビューアーに提供することを可能にします。これは、典型的には自動化されたプロセスがアプリケーションを破棄すべきか再起動すべきかを判断できなければならないクラウド環境において、有用です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:18
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:22
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:24
msgid ""
"In this guide, we build a simple REST application that exposes MicroProfile Health\n"
"functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the\n"
"specification."
msgstr "このガイドでは、仕様に従って `/q/health/live` および `/q/health/ready` エンドポイントで MicroProfile Health 機能を公開するシンプルな REST アプリケーションを構築します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:28
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:30
msgid ""
"We recommend that you follow the instructions in the next sections and create the\n"
"application step by step. However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:33
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an\n"
"{quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:36
msgid ""
"The solution is located in the `microprofile-health-quickstart`\n"
"{quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr "ソリューションは `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:39
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:41
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:47
msgid "This command generates a project, importing the `smallrye-health` extension."
msgstr "このコマンドは、 `smallrye-health` エクステンションをインポートしたプロジェクトを生成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:49
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-health` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `smallrye-health` エクステンションをプロジェクトに追加することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:55
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:431
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:440
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:72
msgid "Running the health check"
msgstr "ヘルスチェックの実行"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:74
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr "`smallrye-health` エクステンションを直接インポートすると、3つのRESTエンドポイントが公開されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:76
msgid "`/q/health/live` - The application is up and running."
msgstr "`/q/health/live` - アプリケーションが起動していること"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:77
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr "`/q/health/ready` - アプリケーションは、リクエストに対応する準備ができていること"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:78
msgid "`/q/health/started` - The application is started."
msgstr "`/q/health/live` - アプリケーションが起動していること"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:79
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr "`/q/health` - アプリケーションのすべてのヘルスチェック手順の累積"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:81
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr "`smallrye-health` エクステンションが期待通りに動作しているかのチェック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:85
msgid "start your Quarkus application with:"
msgstr "Quarkusアプリケーションを次のように起動します:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:88
msgid ""
"access the `http://localhost:8080/q/health/live` endpoint using your browser or\n"
"`curl http://localhost:8080/q/health/live`"
msgstr "`http://localhost:8080/q/health/live` エンドポイントにブラウザか、 `curl http://localhost:8080/q/health/live` でアクセス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:93
msgid "All of the health REST endpoints return a simple JSON object with two fields:"
msgstr "すべてのヘルスRESTエンドポイントは、2つのフィールドを持つシンプルなJSONオブジェクトを返します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:95
msgid "`status` -- the overall result of all the health check procedures"
msgstr "`status` -- the overall result of all the health check procedures"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:96
msgid "`checks` -- an array of individual checks"
msgstr "`checks` -- an array of individual checks"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:98
msgid ""
"The general `status` of the health check is computed as a logical AND of all the\n"
"declared health check procedures. The `checks` array is empty as we have not specified\n"
"any health check procedure yet so let's define some."
msgstr "ヘルスチェックの一般的な `status` は、宣言されたすべてのヘルスチェックの論理的な AND として計算されます。 `checks` 配列は、まだヘルスチェックの手順を指定していないので空ですが、いくつか定義してみましょう。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:102
msgid "Creating your first health check"
msgstr "初めてのヘルスチェックの作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:104
msgid "In this section, we create our first simple health check procedure."
msgstr "このセクションでは、最初の簡単なヘルスチェック手順を作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:106
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr "`org.acme.microprofile.health.SimpleHealthCheck` クラスを作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:128
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr "すべてのヘルスチェック要求に単一のBeanインスタンスが使用されるように、ヘルスチェッククラスに `@ApplicationScoped` または `@Singleton` のスコープでアノテーションを付けることをお勧めします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:129
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr "ヘルスチェックアノテーションの1つでアノテーションされたBeanクラスがスコープを宣言していない場合、 `@Singleton` のスコープが自動的に使用されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:131
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr "ご覧のように、ヘルスチェック・プロシージャは、 `HealthCheck` インターフェースを実装するCDI Beanとして定義され、次のようなヘルスチェック修飾子の1つでアノテーションされています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:133
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr "`@Liveness` - `/q/health/live` でアクセス可能なLivenessチェック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:134
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr "`@Readiness` - `/q/health/ready` でアクセス可能なReadinessチェック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:136
msgid ""
"`HealthCheck` is a functional interface whose single method `call` returns a\n"
"`HealthCheckResponse` object which can be easily constructed by the fluent builder\n"
"API shown in the example."
msgstr "`HealthCheck` は関数インターフェースで、その単一のメソッド `call` は `HealthCheckResponse` オブジェクトを返します。このオブジェクトは、例で示した fluent builder API で簡単に構築することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:140
msgid ""
"As we have started our Quarkus application in dev mode simply repeat the request\n"
"to `http://localhost:8080/q/health/live` by refreshing your browser window or by\n"
"using `curl http://localhost:8080/q/health/live`. Because we defined our health check\n"
"to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure\n"
"is now present in the `checks` array."
msgstr "Quarkusアプリケーションを開発モードで起動しているので、 `http://localhost:8080/q/health/live` へのリクエストを ブラウザウィンドウを更新するか `curl http://localhost:8080/q/health/live` で単に繰り返してください。ヘルスチェックをlivenessプロシージャ（ `@Liveness` 修飾子付き）と定義したため、新しいヘルスチェックプロシージャが `checks` 配列に存在するようになりました。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:146
msgid ""
"Congratulations! You've created your first Quarkus health check procedure. Let's\n"
"continue by exploring what else can be done with SmallRye Health."
msgstr "おめでとうございます。初めてのQuarkus Health Checkプロシージャを作成しました。続けて、SmallRye Healthで他にどのようなことができるかを調べてみましょう。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:149
msgid "Adding a readiness health check procedure"
msgstr "レディネス・ヘルスチェック手順の追加"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:151
msgid ""
"In the previous section, we created a simple liveness health check procedure which states\n"
"whether our application is running or not. In this section, we will create a readiness\n"
"health check which will be able to state whether our application is able to process\n"
"requests."
msgstr "前のセクションでは、アプリケーションが実行されているかどうかを示す単純な liveness ヘルスチェックプロシージャを作成しました。このセクションでは、アプリケーションがリクエストを処理することができるかどうかを示すことができるReadinessヘルスチェックを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:156
msgid ""
"We will create another health check procedure that simulates a connection to\n"
"an external service provider such as a database. For starters, we will always return\n"
"the response indicating the application is ready."
msgstr "ここでは、データベースなどの外部サービスプロバイダへの接続をシミュレートする別のヘルスチェックプロシージャを作成します。まずは、アプリケーションの準備ができていることを示すレスポンスを常に返すようにします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:160
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:184
msgid ""
"If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks`\n"
"array will contain only the previously defined `SimpleHealthCheck` as it is the only\n"
"check defined with the `@Liveness` qualifier. However, if you access\n"
"`http://localhost:8080/q/health/ready` (in the browser or with\n"
"`curl http://localhost:8080/q/health/ready`) you will see only the\n"
"`Database connection health check` as it is the only health check defined with the\n"
"`@Readiness` qualifier as the readiness health check procedure."
msgstr "`http://localhost:8080/q/health/live`のヘルスチェックを再実行すると、 `checks` の配列には、以前に定義した `SimpleHealthCheck` のみが含まれます。これは `@Liveness` という修飾子で定義された唯一のチェックだからです。しかし、次のようにアクセスすると `http://localhost:8080/q/health/ready` (ブラウザや `curl http://localhost:8080/q/health/ready`)にアクセスすると、 `Database connection health check` のみが表示されます。これは、Readinessヘルスチェック手順として `@Readiness` の修飾子で定義された唯一のヘルスチェックだからです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:192
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr "`http://localhost:8080/q/health` にアクセスすると、両方のチェックが戻ってきます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:194
msgid ""
"More information about which health check procedures should be used in which situation\n"
"is detailed in the MicroProfile Health specification. Generally, the liveness\n"
"procedures determine whether the application should be restarted while readiness\n"
"procedures determine whether it makes sense to contact the application with requests."
msgstr "どのような状況でどのヘルスチェック手順を使用すべきかについての詳細は、MicroProfile Health 仕様に記載されています。一般的には、liveness手続きはアプリケーションを再起動すべきかどうかを判断し、readiness手続きはアプリケーションにリクエストを出すことが意味のあることかどうかを判断します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:199
msgid "Adding a startup health check procedure"
msgstr "スタートアップヘルスチェックプロシージャの追加"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:201
msgid "The third and final type of health check procedures is startup. Startup procedures are defined as an option for slow starting containers (should not be needed in Quarkus) to delay the invocations of liveness probe which will take over from startup once the startup responds UP for the first time. Startup health checks are defined with the `@Startup` qualifier."
msgstr "ヘルスチェックプロシージャの最後の3つ目のタイプはスタートアップです。スタートアッププロシージャは、起動が遅いコンテナ（Quarkusでは必要ないはず）のオプションとして定義されており、起動が初めてUPに応答すると起動から引き継がれるliveness probeの呼び出しを遅らせることができます。スタートアップのヘルスチェックは、 `@Startup` で定義されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:203
msgid "Please make sure that you import the microprofile `org.eclipse.microprofile.health.Startup` annotation since there is an unfortunate clash with `io.quarkus.runtime.Startup`."
msgstr "`io.quarkus.runtime.Startup` と不幸にも衝突してしまうため、microprofile `org.eclipse.microprofile.health.Startup` のアノテーションを必ずインポートしてください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:205
msgid "Create `org.acme.microprofile.health.StartupHealthCheck` class:"
msgstr "`org.acme.microprofile.health.SimpleHealthCheck` クラスを作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:228
msgid "The startup health check will be available either at `http://localhost:8080/q/health/started` or together with other health check procedure at `http://localhost:8080/q/health`."
msgstr "`http://localhost:8080/q/health/live` エンドポイントにブラウザか、 `curl http://localhost:8080/q/health/live` でアクセスします:"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:230
msgid "Negative health check procedures"
msgstr "ネガティブヘルスチェックの手順"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:232
msgid ""
"In this section, we extend our `Database connection health check` with the option of\n"
"stating that our application is not ready to process requests as the underlying\n"
"database connection cannot be established. For simplicity reasons, we only determine\n"
"whether the database is accessible or not by a configuration property."
msgstr "このセクションでは、 `Database connection health check` を拡張して、基礎となるデータベース接続が確立できないために、アプリケーションがリクエストを処理する準備ができていないことを示すオプションを追加します。簡略化のため、データベースにアクセスできるかどうかの判断は、設定プロパティでのみ行います。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:237
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "`org.acme.microprofile.health.DatabaseConnectionHealthCheck` クラスを以下のように更新します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:282
msgid ""
"Until now we used a simplified method of building a `HealthCheckResponse`\n"
"through the `HealthCheckResponse#up(String)` (there is also\n"
"`HealthCheckResponse#down(String)`) which will directly build the response object.\n"
"From now on, we utilize the full builder capabilities provided by the\n"
"`HealthCheckResponseBuilder` class."
msgstr "これまでは、レスポンスオブジェクトを直接構築する `HealthCheckResponse#up(String)` （ `HealthCheckResponse#down(String)` もあります）を通して `HealthCheckResponse` を構築するという単純な方法を使っていました。今後は、 `HealthCheckResponseBuilder` クラスが提供する完全なビルダー機能を利用します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:288
msgid ""
"If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)\n"
"the overall `status` should be DOWN. You can also check the liveness check at\n"
"`http://localhost:8080/q/health/live` which will return the overall `status` UP because\n"
"it isn't influenced by the readiness checks."
msgstr "再度、Readinessヘルスチェック `http://localhost:8080/q/health/ready`)を再実行すると、全ての `status` がDOWNするはずです。また、以下の場所でlivenessチェックを行うこともできます。 `http://localhost:8080/q/health/live`この場合、全体の `status` はUPです。これは、Readinessチェックの影響を受けないためです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:293
msgid ""
"As we shouldn't leave this application with a readiness check in a DOWN state and\n"
"because we are running Quarkus in dev mode you can add `database.up=true` in\n"
"`src/main/resources/application.properties` and rerun the readiness health check again\n"
"-- it should be up again."
msgstr ""
"アプリケーションをReadinessチェックがDOWNの状態のままにしておくべきではない為、また、Quarkusを開発モードで実行しているため、 `src/main/resources/application.properties` に `database.up=true` を追加して、レディネスチェックを再実行してください。\n"
"-- 再び起動する筈です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:299
msgid "Adding user-specific data to the health check response"
msgstr "ヘルスチェックのレスポンスにユーザー固有のデータを追加"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:301
msgid ""
"In previous sections, we saw how to create simple health checks with only the minimal\n"
"attributes, namely, the health check name and its status (UP or DOWN). However, the\n"
"MicroProfile Health specification also provides a way for the applications to supply\n"
"arbitrary data in the form of key-value pairs sent to the consuming end. This can be\n"
"done by using the `withData(key, value)` method of the health check response\n"
"builder API."
msgstr "前のセクションでは、最小限の属性、すなわちヘルスチェック名とそのステータス（UPまたはDOWN）のみを持つ単純なヘルスチェックを作成する方法を説明しました。しかし、MicroProfile Health仕様では、アプリケーションが任意のデータを、コンシューマーに送信されるキー・バリュー・ペアの形で供給する方法も提供しています。これは、ヘルスチェックレスポンスビルダーAPIの `withData(key, value)` メソッドを使用することで可能です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:308
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr "新しいヘルスチェック・プロシージャ `org.acme.microprofile.health.DataHealthCheck` を作成してみましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:335
msgid ""
"If you rerun the liveness health check procedure by accessing the `/q/health/live`\n"
"endpoint you can see that the new health check `Health check with data` is present\n"
"in the `checks` array. This check contains a new attribute called `data` which is a\n"
"JSON object consisting of the properties we have defined in our health check procedure."
msgstr "`/q/health/live` エンドポイントにアクセスしてLivenessヘルスチェック・プロシージャを再実行すると、新しいヘルスチェック `Health check with data` が `checks` 配列に存在していることがわかります。このチェックには、 `data` という新しい属性が含まれています。この属性は、ヘルスチェック手順で定義したプロパティで構成されるJSONオブジェクトです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:340
msgid ""
"This functionality is specifically useful in failure scenarios where you can pass the\n"
"error along with the health check response."
msgstr "この機能は、ヘルスチェックの応答と一緒にエラーを渡すことができる障害シナリオで特に有用です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:356
msgid "Context propagation into the health check invocations"
msgstr "ヘルスチェック呼び出しへのコンテキストの伝搬"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:358
#, fuzzy
msgid "For the perfomance reasons the context (e.g., CDI or security context) is not propagated into each health check invocation. However, if you need to enable this functionality you can set the config property `quarkus.smallrye-health.context-propagation=true` to allow the context propagation into every health check call."
msgstr "パフォーマンス上の理由から、コンテキスト（CDIまたはセキュリティ・コンテキストなど）は、各ヘルスチェック呼び出しに伝搬されません。ただし、この機能を有効にする必要がある場合は、構成プロパティ（ `quarkus.smallrye-health.context-propagation=true` ）を設定して、すべてのヘルスチェック呼び出しにコンテキストが伝搬されるようにすることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:360
msgid "Reactive health checks"
msgstr "リアクティブヘルスチェック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:362
msgid "MicroProfile Health currently doesn't support returning reactive types, but SmallRye Health does."
msgstr "MicroProfile Healthは現在、リアクティブタイプのリターンをサポートしていませんが、SmallRye Healthはサポートしています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:364
msgid ""
"If you want to provide a reactive health check, you can implement the `io.smallrye.health.api.AsyncHealthCheck` interface instead of the `org.eclipse.microprofile.health.HealthCheck` one.\n"
"The `io.smallrye.health.api.AsyncHealthCheck` interface allows you to return a `Uni<HealthCheckResponse>`."
msgstr "リアクティブなヘルスチェックを行いたい場合は、 `org.eclipse.microprofile.health.HealthCheck` の代わりに `io.smallrye.health.api.AsyncHealthCheck` のインターフェイスを実装することができます。 `io.smallrye.health.api.AsyncHealthCheck` インターフェイスでは、 `Uni<HealthCheckResponse>` を返すことができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:367
msgid "The following example shows a reactive liveness check:"
msgstr "以下の例では、リアクティブなLivenessチェックを行っています。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:390
msgid "Extension health checks"
msgstr "エクステンションのヘルスチェック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:392
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr "一部のエクステンションでは、デフォルトのヘルスチェックを提供している場合があり、その場合、エクステンションは自動的にヘルスチェックを登録します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:394
msgid ""
"For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check\n"
"that will validate each datasources: xref:datasource.adoc#datasource-health-check[Datasource Health Check]."
msgstr "例えば、Quarkusのデータソースを管理するために使用される `quarkus-agroal` は、各 link:datasource.html#datasource-health-check[データソースのヘルスチェック]を検証するReadinessのヘルスチェックを自動的に登録します。 。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:397
msgid "You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr "エクステンションのヘルスチェックは、プロパティ（ `quarkus.health.extensions.enabled` ）で無効にすることができ、自動的に登録されることはありません。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:400
msgid "Health UI"
msgstr "Health UI"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:402
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験的 - MicroProfileの仕様に含まれません"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:404
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr "`health-ui` はヘルスチェックの内容をWeb GUIで確認することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:406
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr "Quarkusの `smallrye-health` エクステンションは、 `health-ui` を同梱しており、devおよびtestモードでデフォルトで有効になりますが、productionモードでも同様に明示的に設定することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:408
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr "`health-ui` は、 http://localhost:8080/q/health-ui/ からアクセスできます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:410
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr "image:health-ui-screenshot01.png[alt=Health UI]"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:412
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:414
msgid ""
"SmallRye Health provides a way for your application to distribute information\n"
"about its healthiness state to state whether or not it is able to function properly.\n"
"Liveness checks are utilized to tell whether the application should be restarted and\n"
"readiness checks are used to tell whether the application is able to process requests."
msgstr "SmallRye Healthは、アプリケーションが正常に機能できるかどうかを表明するために、その健全性の状態に関する情報を配布する方法を提供します。Liveness チェックは、アプリケーションを再起動すべきかどうかを判断するために使用され、Readinessチェックは、アプリケーションがリクエストを処理できるかどうかを判断するために使用されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:419
msgid "All that is needed to enable the SmallRye Health features in Quarkus is:"
msgstr "QuarkusでSmallRye Healthの機能を有効にするために必要なのは"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:422
msgid ""
"adding the `smallrye-health` Quarkus extension to your project using the\n"
"`quarkus-maven-plugin`:"
msgstr " `quarkus-maven-plugin` で `smallrye-health` Quarkusエクステンションをプロジェクトに追加:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-health.adoc:428
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-health.adoc:445
msgid "Configuration Reference"
msgstr "設定リファレンス"
