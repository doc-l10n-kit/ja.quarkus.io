msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Title =
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:6
msgid "SmallRye Fault Tolerance"
msgstr "SmallRyeのフォールト・トレランス"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:8
#, fuzzy
msgid "link:./attributes.adoc[role=include]"
msgstr "./attributes.adoc"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:10
msgid ""
"One of the challenges brought by the distributed nature of microservices is that communication with external systems is\n"
"inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient\n"
"applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] an\n"
"implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]\n"
"specification."
msgstr "マイクロサービスの分散した性質がもたらす課題の1つは、外部システムとの通信が本質的に信頼できないことです。これにより、アプリケーションの耐障害性に対する要求が高まります。耐障害性の高いアプリケーションを簡単に作るために、Quarkusは link:https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]仕様の実装である link:https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance]を提供します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:16
msgid ""
"In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`,\n"
"`@Retry` and `@CircuitBreaker`."
msgstr "このガイドでは、 `@Timeout` , `@Fallback` , `@Retry` および `@CircuitBreaker` などの MicroProfile Fault Tolerance アノテーションの使用法を説明します。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:19
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:21
#, fuzzy
msgid "link:includes/devtools/prerequisites.adoc[role=include]"
msgstr "includes/devtools/prerequisites.adoc"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:23
msgid "The Scenario"
msgstr "シナリオ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:25
msgid ""
"The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST\n"
"endpoint providing information about coffee samples we have on store."
msgstr "このガイドで構築されたアプリケーションは、グルメコーヒーのeショップのためのシンプルなバックエンドをシミュレートします。これは、店舗にあるコーヒーサンプルに関する情報を提供する REST エンドポイントを実装しています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:28
msgid ""
"Let's imagine, although it's not implemented as such, that some of the methods in our endpoint require communication\n"
"to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "このように実装されてはいませんが、エンドポイント内のメソッドの一部がデータベースや外部マイクロサービスなどの外部サービスとの通信を必要とし、信頼性の低い要素を導入していることを想像してみましょう。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:31
msgid "Solution"
msgstr "ソリューション"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:33
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:38
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "ソリューションは `microprofile-fault-tolerance-quickstart` {quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:40
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:46
#, fuzzy
msgid "link:includes/devtools/create-app.adoc[role=include]"
msgstr "includes/devtools/create-app.adoc"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:48
#, fuzzy
msgid "This command generates a project, importing the extensions for RESTEasy/JAX-RS and SmallRye Fault Tolerance."
msgstr "このコマンドは、RESTEasy/JAX-RSとSmallRye Fault Toleranceのエクステンションをインポートして、プロジェクトを生成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:50
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-fault-tolerance` エクステンションを追加することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:483
#, fuzzy
msgid "link:includes/devtools/extension-add.adoc[role=include]"
msgstr "includes/devtools/extension-add.adoc"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:56
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:487
msgid "pom.xml"
msgstr "pom.xml"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:496
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:73
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "アプリケーションの準備: RESTエンドポイントとCDI Bean"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:75
msgid ""
"In this section we create a skeleton of our application, so that we have something that we can extend and to which\n"
"we can add fault tolerance features later on."
msgstr "このセクションでは、後でフォールトトレランス機能を追加できるよう、拡張可能なようにアプリケーションの骨組を作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:78
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "まず、店舗内のコーヒーサンプルを表すシンプルなエンティティーを作成します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:103
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "コーヒーサンプルのリポジトリとして機能するシンプルな CDI Beanを続けてみましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:148
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最後に、 `org.acme.microprofile.faulttolerance.CoffeeResource` クラスを以下のように作成します。 :"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:192
msgid ""
"At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note\n"
"that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures\n"
"in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "この時点で、コーヒーサンプルのリストを JSON 形式で表示する単一の REST メソッドを公開しています。 `CoffeeResource#maybeFail()` メソッドにいくつかの障害を発生させるコードを導入したことに注意してください。これにより、リクエストの約 50 % で `CoffeeResource#coffees()` エンドポイントメソッドに障害が発生します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:196
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "アプリケーションが動作することを確認してみませんか? Quarkus開発サーバーを以下のコマンドで実行します:"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:198
#, fuzzy
msgid "link:includes/devtools/dev.adoc[role=include]"
msgstr "includes/devtools/dev.adoc"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:200
msgid ""
"and open `http://localhost:8080/coffee` in your browser. Make couple of requests (remember, some of them we expect\n"
"to fail). At least some of the requests should show us the list of our coffee samples in JSON, the rest will fail\n"
"with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "そして `http://localhost:8080/coffee` をブラウザで開いてください。いくつかのリクエストをしてみてください (いくつかは失敗することが予想されることを覚えておいてください)。少なくともいくつかのリクエストでは、コーヒーサンプルのリストを JSON で表示するでしょう、そして残りのリクエストでは `RuntimeException` が `CoffeeResource#maybeFail()` で発生するでしょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:204
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "おめでとうございます。（いくらか不安定ですが）動作するQuarkus アプリケーションが出来ました!"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:206
msgid "Adding Resiliency: Retries"
msgstr "レジリエンスの追加: 再試行"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:208
msgid ""
"Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()`\n"
"method as follows and save the file:"
msgstr "Quarkusの開発サーバーを稼働させ、IDEで以下のように `CoffeeResource#coffees()` メソッドに `@Retry` アノテーションを追加し、ファイルを保存します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:227
msgid ""
"Hit refresh in your browser. The Quarkus development server will automatically detect the changes\n"
"and recompile the app for you, so there's no need to restart it."
msgstr "ブラウザの更新を実行します。Quarkusの開発サーバーが自動的に変更を検出してアプリを再コンパイルしてくれるので、再起動する必要はありません。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:230
msgid ""
"You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()`\n"
"method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry\n"
"the call!"
msgstr "もう何度か更新ボタンを押してください。実質的にすべてのリクエストが成功しているはずです。 `CoffeeResource#coffees()` メソッドは、実際にはまだ約 50% の時間で失敗していますが、そのたびにプラットフォームは自動的に呼び出しを再試行します!"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:234
msgid ""
"To see that that the failures still happen, check the output of the development server. The log messages should be\n"
"similar to these:"
msgstr "障害がまだ発生していることを確認するには、開発サーバーの出力を確認してください。ログメッセージは以下のようになっているはずです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:246
msgid ""
"You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.\n"
"Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed\n"
"to a failure. Which is fairly unlikely to happen."
msgstr "呼び出しが失敗するたびに、すぐに別の呼び出しが成功するまで続いていることがわかります。4回のリトライを許可しているので、ユーザーが実際に失敗にさらされるためには、5回の呼び出しが連続して失敗する必要があります。これは起こりそうもないことです。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:250
msgid "Adding Resiliency: Timeouts"
msgstr "レジリエンスの追加: タイムアウト"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:252
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "では、MicroProfile の耐障害性には他に何があるのでしょうか?タイムアウトについて見てみましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:254
msgid ""
"Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code\n"
"and save the file."
msgstr "`CoffeeResource` エンドポイントに以下の 2 つのメソッドを追加します。ここでもサーバーを再起動する必要はなく、コードを貼り付けてファイルを保存するだけです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:288
msgid ""
"We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user\n"
"is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the\n"
"logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without\n"
"recommendations."
msgstr "いくつかの新しい機能を追加しました。ユーザーが現在見ているコーヒーに基づいて、関連するコーヒーをお勧めできるようにしたいのです。これは重要な機能ではなく、あれば望ましい機能です。システムに負荷がかかり、おすすめ情報を得るためのロジックの実行に時間がかかりすぎる場合は、むしろタイムアウトしておすすめ情報のないUIを表示したいと考えています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:293
msgid ""
"Note that the timeout was configured to 250 ms, and a random artificial delay between 0 to 500 ms was introduced\n"
"into the `CoffeeResource#recommendations()` method."
msgstr "なお、タイムアウトは250msに設定し、0～500msのランダムな人工的な遅延を `CoffeeResource#recommendations()` メソッドに導入しました。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:296
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "お使いのブラウザで `http://localhost:8080/coffee/2/recommendations` にアクセスして、2、3回更新してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:298
msgid ""
"You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.\n"
"Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "`org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` でいくつかのリクエストがタイムアウトになるはずです。タイムアウトにならなかったリクエストでは、JSONに2つのおすすめコーヒーサンプルが表示されます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:301
msgid "Adding Resiliency: Fallbacks"
msgstr "レジリエンスの追加: フォールバック"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:303
msgid ""
"Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related\n"
"coffees."
msgstr "関連するコーヒーを入手するための代替手段（おそらくより迅速な方法）を提供することで、おすすめ機能をさらに改善しましょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:306
msgid ""
"Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method\n"
"as follows:"
msgstr "`CoffeeResource` にフォールバック・メソッドを、 `CoffeeResource#recommendations()` メソッドに `@Fallback` アノテーションを以下のように追加します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:332
msgid ""
"Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.\n"
"The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will\n"
"display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than\n"
"two recommendations returned by the original method."
msgstr "`http://localhost:8080/coffee/2/recommendations` を何回も更新してください。 `TimeoutException` はもう表示されないはずです。代わりに、タイムアウトが発生した場合、元のメソッドが返す2つのレコメンデーションではなく、フォールバックメソッド `fallbackRecommendations()` にハードコードされた1つのレコメンデーションが表示されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:337
msgid "Check the server output to see that fallback is really happening:"
msgstr "フォールバックが本当に行われているかどうか、サーバーの出力を確認してください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:346
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "フォールバックメソッドには、元のメソッドと同じパラメータが必要です。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:348
msgid "Adding Resiliency: Circuit Breaker"
msgstr "レジリエンスの追加: サーキットブレーカー"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:350
msgid ""
"A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes\n"
"temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio\n"
"of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations\n"
"of that method for a given time."
msgstr "サーキットブレーカーは，システムの一部が一時的に不安定になったときに，システム内で発生する障害の数を制限するのに有効です。サーキットブレーカーは、あるメソッドの成功と失敗を記録し、失敗したメソッドの割合が指定された閾値に達すると、サーキットブレーカーが _開き_、それ以降のメソッドの呼び出しを一定時間ブロックします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:355
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "次のコードを `CoffeeRepositoryService` ビーンに追加して、サーキットブレーカーの動作をデモできるようにします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:384
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "そして、以下のコードを `CoffeeResource` のエンドポイントに注入します。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:418
msgid ""
"We added another functionality - the application can return the amount of remaining packages of given coffee on our store\n"
"(just a random number)."
msgstr "もう一つの機能を追加しました。このアプリケーションは、私たちの店における、指定されたコーヒーの残りのパッケージの量を返すことができます（単なる乱数です）。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:421
msgid ""
"This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is\n"
"going to alternate between two successful and two failed invocations."
msgstr "今回は、CDIビーンに人工的な失敗を導入しました。 `CoffeeRepositoryService#getAvailability()` メソッドは、2回の成功と2回の失敗の呼び出しを交互に行うことになります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:424
msgid ""
"We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is\n"
"by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open\n"
"when 2 of the last 4 invocations failed and it will stay open for 5 seconds."
msgstr "また、 `requestVolumeThreshold = 4` と一緒に `@CircuitBreaker` のアノテーションを追加しました。 `CircuitBreaker.failureRatio` はデフォルトで 0.5 秒、 `CircuitBreaker.delay` はデフォルトで 5 秒です。つまり、過去4回の起動のうち2回が失敗したときにサーキットブレーカーが開き、5秒間その状態が続くということです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:428
msgid "To test this out, do the following:"
msgstr "これを試すには、次のようにします。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:430
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr " `http://localhost:8080/coffee/2/availability` をブラウザで開いて下さい。数字が返ってくるのが見えるでしょう。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:431
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "リフレッシュすると、この2回目のリクエストが再び成功し、数字が返ってくるはずです。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:432
msgid ""
"Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception\n"
"thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "さらに2回リフレッシュします。2回とも、\"RuntimeException:Service failed.\" というテキストが表示されます。これは、 `CoffeeRepositoryService#getAvailability()` によってスローされる例外です。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:434
msgid ""
"Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's\n"
"\"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened\n"
"and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "さらに数回更新します。長く待ちすぎていなければ、再び例外が表示されるはずですが、今回は \"CircuitBreakerOpenException: getAvailability\" となっています。この例外は、サーキットブレーカーが開き、 `CoffeeRepositoryService#getAvailability()` メソッドが呼び出されなくなったことを示しています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:437
msgid ""
"Give it 5 seconds during which circuit breaker should close and you should be able to make two successful requests\n"
"again."
msgstr "5秒後にサーキットブレーカーが閉じて、再び2回のリクエストを成功させることができます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:440
msgid "Runtime configuration"
msgstr "ランタイム設定"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:442
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "`application.properties` ファイルの中で、実行時にアノテーションパラメータをオーバーライドすることができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:444
msgid "If we take the retry example that we already saw:"
msgstr "先ほどのリトライの例で言えば"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:464
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "以下の設定項目により、 `maxRetries` パラメータをオーバーライドして、リトライ回数を4回から6回に変更することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:470
msgid ""
"The format is `fully-qualified-class-name/method-name/annotation-name/property-name=value`.\n"
"You can also configure a property for all the annotation via `annotation-name/property-name=value`."
msgstr "フォーマットは `fully-qualified-class-name/method-name/annotation-name/property-name=value` です。また、 `annotation-name/property-name=value` を通じて、すべてのアノテーションに対するプロパティを設定することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:473
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:475
msgid ""
"SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity\n"
"of our business logic."
msgstr "SmallRye Fault Toleranceは、ビジネスロジックの複雑さに影響を与えることなく、アプリケーションの耐障害性を向上させます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:478
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "Quarkusのフォールトトレランス機能を有効にするために必要なのは"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:481
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-fault-tolerance` Quarkus エクステンションをプロジェクトに追加することです :"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:484
msgid "or simply adding the following Maven dependency:"
msgstr "または、以下のMavenの依存関係を単純に追加することもできます。"

#. type: Title ==
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:502
msgid "Additional resources"
msgstr "その他のリソース"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:504
#, fuzzy
msgid ""
"SmallRye Fault Tolerance has more features than shown here.\n"
"Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr "SmallRye Fault Toleranceには、ここで紹介した以外にも様々な機能があります。それらについては、SmallRye link:https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/index.html[Fault Toleranceのドキュメントを] ご確認ください。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:507
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "Quarkusでは、SmallRye Fault Toleranceのオプション機能をすぐに使用することができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:509
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "Mutinyがサポートされているので、非同期のメソッドは `CompletionStage` だけでなく `Uni` を返すことができます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:511
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile Context PropagationはFault Toleranceと統合されているので、既存のコンテキストは自動的に非同期メソッドに伝搬されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:515
msgid ""
"This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.\n"
"This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr "これは CDI リクエストコンテキストにも当てはまります。もしオリジナルのスレッドでアクティブであれば、新しいスレッドに伝搬されますが、もしそうでなければ、新しいスレッドはそれを持ちません。 これは MicroProfile Fault Tolerance 仕様に反しており、  `@Asynchronous`  メソッド呼び出しの間はリクエストコンテキストがアクティブでなければならないとされています。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:518
msgid ""
"We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.\n"
"The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr "MicroProfile Context Propagationがある場合、この要件は適用されるべきではないと考えています。コンテキスト伝搬の主な目的は、新しいスレッドが元のスレッドと同じコンテキストを持っていることを確認することにあります。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:522
#, fuzzy
msgid "Non-compatible mode is enabled by default, so methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without any `@Asynchronous`, `@Blocking` or `@NonBlocking` annotation."
msgstr "非互換モードはデフォルトで有効なので、 `CompletionStage` (または `Uni` ) を返すメソッドには、 `@Asynchronous` , `@Blocking` , `@NonBlocking` のアノテーションがなくても非同期フォールトトレランスが適用されます。"

#. type: Plain Text
#: upstream/_versions/2.7/guides/smallrye-fault-tolerance.adoc:526
msgid ""
"This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.\n"
"To restore full compatibility, add this configuration property:"
msgstr "このモードは、非互換性は非常に小さいものの、MicroProfile Fault Tolerance仕様と互換性がありません。 完全な互換性を回復するには、このコンフィギュレーションプロパティを追加してください。 :"
