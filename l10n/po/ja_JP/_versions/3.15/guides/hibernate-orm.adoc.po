msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Using Hibernate ORM and Jakarta Persistence"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM is the de facto standard Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It works beautifully in Quarkus."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Solution"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The solution is located in the `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Setting up and configuring Hibernate ORM"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs;\n"
"so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "In Quarkus, you only need to:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "add your configuration settings in `{config-file}`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Add the following dependencies to your project:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "your JDBC driver extension; the following options are available:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For instance:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Annotate your persistent objects with `@Entity`,\n"
"then add the relevant configuration properties in `{config-file}`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Example `{config-file}`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "xref:datasource.adoc[Configure the datasource]."
msgstr "xref:datasource.adoc[データソースを設定] します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Drop and create the database at startup (use `update` to only update the schema)."
msgstr "起動時にデータベースをドロップして作成します（ `update` を使用してスキーマのみを更新します）。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.\n"
"They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "For a list of the items that you can set in `{config-file}`, see <<hibernate-configuration-properties,Hibernate ORM configuration properties>>."
msgstr "`{config-file}` で設定できる項目の一覧については、 xref:hibernate-configuration-properties[Hibernate ORM 設定プロパティ] を参照してください。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"The dialect will be selected and configured automatically based on your datasource;\n"
"you may want to <<hibernate-dialect,configure it to more precisely match your database>>."
msgstr "方言は、データソースに基づいて自動的に選択および設定 xref:hibernate-dialect[さ] れます。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can then happily inject your `EntityManager`:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Example application bean using Hibernate"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Inject your entity manager and have fun"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Example Entity"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your `resources` directory.\n"
"This script can contain any SQL DML statements.\n"
"Make sure to terminate each statement with a semicolon."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This is useful to have a data set ready for your tests or demos."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Dialect"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Supported databases"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"For xref:datasource.adoc#extensions-and-database-drivers-reference[supported databases],\n"
"the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect]\n"
"does not need to be set explicitly:\n"
"it is selected automatically based on the datasource."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "By default, the dialect is configured to target the minimum supported version of the database."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"In order for Hibernate ORM to generate more efficient SQL,\n"
"to avoid workarounds and to take advantage of more database features,\n"
"you can set the database version explicitly:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`{config-file}` with an explicit `db-version`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Set the database version. The Hibernate ORM dialect will target that version."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"As a rule, the version set here should be as high as possible,\n"
"but must be lower than or equal to the version of any database your application will connect to."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"As described above, the version can either be preconfigured explicitly via a `quarkus.datasource.db-version` configuration property,\n"
"or implicitly set by the Quarkus build process to a minimum supported version of the database.\n"
"Quarkus will try to check this preconfigured version against the actual database version on startup,\n"
"leading to a startup failure when the actual version is lower."
msgstr "上述したように、バージョンは `quarkus.datasource.db-version` 構成プロパティによって明示的に事前設定することも、Quarkusのビルドプロセスによって暗黙的にデータベースの最小サポートバージョンに設定することもできます。Quarkusは、起動時にこの事前設定されたバージョンを実際のデータベースバージョンと照合しようとします。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"This is because Hibernate ORM may generate SQL that is invalid\n"
"for versions of the database older than what is configured,\n"
"which would lead to runtime exceptions."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If the database cannot be reached, a warning will be logged but startup will proceed."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Other databases"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If xref:datasource.adoc#other-databases[your database does not have a corresponding Quarkus extension],\n"
"or if the defaults do not match your needs for some reason,\n"
"you will need to set the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect] explicitly:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`{config-file}` with an explicit `dialect`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Set the Hibernate ORM dialect."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"For built-in dialects, the expected value is one of the names\n"
"in the link:{hibernate-orm-dialect-docs-url}[official list of dialects], *without* the `Dialect` suffix,\n"
"for example `Cockroach` for `CockroachDialect`."
msgstr "ビルトイン方言の場合、期待される値は、 link:{hibernate-orm-dialect-docs-url}[公式の方言リストに] ある名前のうち、 `Dialect` の接尾辞を *除いた* ものです。例えば、 `CockroachDialect` の場合は `Cockroach` 。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"For third-party dialects, the expected value is the fully-qualified class name,\n"
"for example `com.acme.hibernate.AcmeDbDialect`."
msgstr "サードパーティの方言の場合、期待される値は完全修飾クラス名、例えば `com.acme.hibernate.AcmeDbDialect` 。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"In that case, keep in mind that the JDBC driver or Hibernate ORM dialect\n"
"may not work properly in GraalVM native executables."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"As with <<hibernate-dialect-supported-databases,supported databases>>,\n"
"you can configure the DB version explicitly to get the most out of Hibernate ORM:"
msgstr "xref:hibernate-dialect-supported-databases[サポートされているデータベースと] 同様に、Hibernate ORM を最大限に活用するために DB のバージョンを明示的に設定することができます："

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`{config-file}` with an explicit `dialect` and `db-version`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Set the database version. The Hibernate ORM dialect will target that version.\n"
"Since we're targeting CockroachDB here, we're passing the CockroachDB version, not the PostgreSQL version."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Varying database"
msgstr "変化するデータベース"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"When enabling <<database-approach,database multi-tenancy>>,\n"
"Hibernate ORM will use multiple datasources at runtime for the same persistence unit,\n"
"and by default Quarkus cannot tell which datasource is going to be used,\n"
"so it will not be able to detect a dialect to use in Hibernate ORM."
msgstr "xref:database-approach[データベースのマルチテナントを] 有効にすると、Hibernate ORMは同じ永続化ユニットに対して複数のデータソースを実行時に使用します。デフォルトでは、Quarkusはどのデータソースが使用されるかを判断できないため、Hibernate ORMで使用する方言を検出できません。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"For that reason, when enabling <<database-approach,database multi-tenancy>>,\n"
"it is recommended to explicitly point the Hibernate ORM configuration to one datasource\n"
"among those that will be used at runtime, e.g. with `quarkus.hibernate-orm.datasource=base`\n"
"(`base` being the name of a datasource)."
msgstr "そのため、 xref:database-approach[データベースのマルチテナントを] 有効にする場合は、実行時に使用するデータソースのうち1つをHibernate ORMの設定に明示的に指定することをお勧めします。例えば、 `quarkus.hibernate-orm.datasource=base` ( `base` はデータソースの名前です)。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"When doing so, Quarkus will infer the database version and (if possible) dialect from that datasource.\n"
"For unsupported databases, you may still need to set the Hibernate ORM dialect explicitly,\n"
"as explained in <<hibernate-dialect-other-databases,this section>>."
msgstr "その際、Quarkusはデータソースからデータベースのバージョンと（可能であれば）方言を推測します。サポートされていないデータベースの場合は、 xref:hibernate-dialect-other-databases[このセクションで] 説明するように、明示的にHibernate ORMの方言を設定する必要があります。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Hibernate ORM configuration properties"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "There are no required properties, as long as a default datasource is configured."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"When no property is set, Quarkus can typically infer everything it needs to set up Hibernate ORM\n"
"and will have it use the default datasource."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The configuration properties listed here allow you to override such defaults, and customize and tune various aspects."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Do not mix <<persistence-xml,`persistence.xml`>> and `quarkus.hibernate-orm.*` properties in `{config-file}`.\n"
"Quarkus will raise an exception.\n"
"Make up your mind on which approach you want to use."
msgstr "を混ぜないでください。 xref:persistence-xml[persistence.xml] `{config-file}` と `quarkus.hibernate-orm.*` のプロパティを混在させないでください。Quarkusは例外を発生させます。どちらのアプローチを使用するか決めてください。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If your classpath contains a `persistence.xml` that you want to ignore,\n"
"set the following configuration property:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Want to start a PostgreSQL server on the side with Docker?"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This will start a non-durable empty database: ideal for a quick experiment!"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Multiple persistence units"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Setting up multiple persistence units"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n"
"For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Define a datasource named `users`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Define a datasource named `inventory`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Define a persistence unit called `users`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Define the datasource used by the persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This configuration property is important, but we will discuss it a bit later."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The default persistence unit points to the default datasource by default.\n"
"For named persistence units, the `datasource` property is mandatory.\n"
"You can point your persistence unit to the default datasource by setting it to `<default>`\n"
"(which is the internal name of the default datasource)."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Attaching model classes to persistence units"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Via the `packages` configuration property;"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Using the `packages` configuration property is simple:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This configuration snippet will create two persistence units:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can attach several packages to a persistence unit:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "It is also supported to attach a given model class to several persistence units."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Model classes need to be consistently added to a given persistence unit.\n"
"That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n"
"As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Panache entities can be attached to only one persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"For entities attached to several persistence units, you cannot use Panache.\n"
"You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach,\n"
"contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.\n"
"Again, the two approaches cannot be mixed."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the Jakarta Persistence one."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"We only support defining the `@PersistenceUnit` for model classes at the package level,\n"
"using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "CDI integration"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Activate/deactivate persistence units"
msgstr "永続化ユニットのアクティブ化/非アクティブ化"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"If a persistence unit is configured at build time,\n"
"by default it is active at runtime,\n"
"that is Quarkus will start the corresponding Hibernate ORM `SessionFactory` on application startup."
msgstr "つまり、Quarkusはアプリケーションの起動時に、対応するHibernate ORM `SessionFactory` を起動します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"To deactivate a persistence unit at runtime, set `quarkus.hibernate-orm[.optional name].active` to `false`.\n"
"Then Quarkus will not start the corresponding Hibernate ORM `SessionFactory` on application startup.\n"
"Any attempt to use the corresponding persistence unit at runtime will fail with a clear error message."
msgstr "実行時に永続化ユニットを非アクティブにするには、 `quarkus.hibernate-orm[.optional name].active` を `false` に設定します。そうすると、Quarkusはアプリケーションの起動時に、対応するHibernate ORM `SessionFactory` を起動しません。実行時に対応する永続化ユニットを使用しようとすると、明確なエラーメッセージとともに失敗します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"This is in particular useful when you want an application to be able\n"
"to xref:datasource.adoc#datasource-active[use one of a pre-determined set of datasources at runtime]."
msgstr "これは特に、アプリケーションの xref:datasource.adoc#datasource-active[実行時に、あらかじめ決められたデータソースのうちの1] つを使用できるようにしたい場合に便利です。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For example, with the following configuration:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"xref:config-reference.adoc#configuration-sources[Setting] `quarkus.hibernate-orm.\"pg\".active=true` and `quarkus.datasource.\"pg\".active=true` at runtime\n"
"will make only the PostgreSQL persistence unit and datasource available,\n"
"and setting `quarkus.hibernate-orm.\"oracle\".active=true` and `quarkus.datasource.\"oracle\".active=true` at runtime\n"
"will make only the Oracle persistence unit and datasource available."
msgstr "実行時に `quarkus.hibernate-orm.\"pg\".active=true` と `quarkus.datasource.\"pg\".active=true` を xref:config-reference.adoc#configuration-sources[設定] すると、PostgreSQL の永続化ユニットとデータソースだけが利用可能になり、実行時に `quarkus.hibernate-orm.\"oracle\".active=true` と `quarkus.datasource.\"oracle\".active=true` を設定すると、Oracle の永続化ユニットとデータソースだけが利用可能になります。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"xref:config-reference.adoc#custom-profiles[Custom configuration profiles] can help simplify such a setup.\n"
"By appending the following profile-specific configuration to the one above,\n"
"you can select a persistence unit/datasource at runtime simply by\n"
"xref:config-reference.adoc#multiple-profiles[setting `quarkus.profile`]:\n"
"`quarkus.profile=prod,pg` or `quarkus.profile=prod,oracle`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"It can also be useful to define a xref:cdi.adoc#ok-you-said-that-there-are-several-kinds-of-beans[CDI bean producer] redirecting to the currently active persistence unit,\n"
"like this:"
msgstr "次のように、現在アクティブな永続ユニットにリダイレクトする xref:cdi.adoc#ok-you-said-that-there-are-several-kinds-of-beans[CDI Beanプロデューサ] を定義することも便利です："

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Alternatively, you can use a `META-INF/persistence.xml` to set up Hibernate ORM.\n"
"This is useful for:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "migrating existing code"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "when you have relatively complex settings requiring the full flexibility of the configuration"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "or if you like it the good old way"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If you use a `persistence.xml`, then you cannot use the `quarkus.hibernate-orm.*` properties\n"
"and only persistence units defined in `persistence.xml` will be taken into account."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only\n"
"difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Example persistence.xml resource"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"When using the `persistence.xml` configuration you are configuring Hibernate ORM directly,\n"
"so in this case the appropriate reference is the link:{hibernate-orm-docs-url}#configurations[documentation on hibernate.org]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will\n"
"the same defaults be applied."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "XML mapping"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus supports XML mapping.\n"
"You can add mapping files following\n"
"the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (Jakarta Persistence)]\n"
"or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus-hibernate-orm-mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr "`application.properties` の (build-time) link:#quarkus-hibernate-orm_quarkus-hibernate-orm-mapping-files[quarkus.hibernate-orm.mapping-files] プロパティを使います。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "XML mapping files are parsed at build time."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Defining entities in external projects or jars"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Hibernate ORM in development mode"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "There are a few common approaches to make the best of it."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live reload mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"By default, in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"With this approach when making changes to an entity, make sure to adapt the database schema accordingly;\n"
"you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"These approaches become really powerful when combined with Quarkus configuration profiles.\n"
"You can define different xref:config-reference.adoc#profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "application.properties"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can start dev mode using a custom profile:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Hibernate ORM in production mode"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Quarkus comes with default profiles (`dev`, `test` and `prod`).\n"
"And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"You can override it in your `application.properties` explicitly\n"
"(e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)\n"
"but we wanted you to avoid overriding your database by accident in prod :)"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Speaking of, make sure to not drop your database schema in production!\n"
"Add the following in your properties file."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode,\n"
"Quarkus provides a simple way to initialize your Flyway configuration\n"
"using the schema generated automatically by Hibernate ORM.\n"
"This is intended to ease the move from\n"
"the early development phase, where Hibernate can be used to quickly set up the schema, to the production phase, where\n"
"Flyway is used to manage schema changes."
msgstr "開発モードで実行しているときに xref:flyway.adoc[Flyway拡張機能が] インストールされている場合、Quarkusは、Hibernate ORMによって自動的に生成されたスキーマを使用してFlywayの設定を初期化する簡単な方法を提供します。これは、Hibernateを使用してスキーマを迅速に設定する初期の開発フェーズから、Flywayを使用してスキーマの変更を管理する本番フェーズへの移行を容易にすることを目的としています。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources`\n"
"link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "`%dev.quarkus.flyway.clean-at-start` and `%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to\n"
"manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Caching"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Caching of entities"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "To enable second-level cache, mark the entities that you want cached with `@jakarta.persistence.Cacheable`:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Caching of collections and relations"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Caching of queries"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Tuning of Cache Regions"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "By default, entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Limitations of Caching"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Hibernate Envers"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Additional dependency to enable Hibernate Envers"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "At this point the extension does not expose additional configuration properties."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Metrics"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Either xref:telemetry-micrometer.adoc[Micrometer] or xref:smallrye-metrics.adoc[SmallRye Metrics] are\n"
"capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics\n"
"on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.\n"
"When using xref:smallrye-metrics.adoc[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr "xref:telemetry-micrometer.adoc[Micrometer] または xref:smallrye-metrics.adoc[SmallRye Metrics] のいずれかを使用すると、Hibernate ORM が実行時に収集するメトリクスを公開できます。 `/q/metrics` エンドポイントで Hibernate メトリクスの公開を有効にするには、プロジェクトがメトリクス拡張に依存していることを確認し、構成プロパティ `quarkus.hibernate-orm.metrics.enabled` を `true` に設定します。 xref:smallrye-metrics.adoc[SmallRye Metrics] を使用する場合、メトリクスは `vendor` スコープで利用可能になります。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Limitations and other things you should know"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using\n"
"this extension you will mostly have the same experience as using the original library."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"But while they share the same code, Quarkus does configure some components automatically and injects custom implementations\n"
"for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to\n"
"know what is being done."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Automatic build time enhancement"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM can use build time enhanced entities; normally this is not mandatory, but it's useful and will have your\n"
"applications perform better."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Typically, you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is\n"
"not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Due to the usage of enhancement, using the `clone()` method on entities is currently not supported\n"
"as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "This limitation might be removed in the future."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Automatic integration"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Transaction Manager integration"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.\n"
"The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.\n"
"All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Connection pool"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Don't need to choose one either. Quarkus automatically includes the Agroal connection pool;\n"
"configure your datasource as in the above examples and it will set up Hibernate ORM to use Agroal.\n"
"More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Second Level Cache"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"As explained earlier in the <<caching,Caching section>>, you don't need to pick an implementation.\n"
"A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr "xref:caching[キャッシュのセクション] で説明したように、実装を選択する必要はありません。 link:https://infinispan.org/[Infinispanと] link:https://github.com/ben-manes/caffeine[Caffeine] の技術に基づいた適切な実装は、Hibernate ORM拡張の推移的依存関係として含まれており、ビルド中に自動的に統合されます。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Limitations"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "XML mapping with duplicate files in the classpath"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.\n"
"For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path but in different JARs),\n"
"then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml`\n"
"**in the same JAR as the `META-INF/orm.xml` file**."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "JMX"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Management beans are not working in GraalVM native images;\n"
"therefore, Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.\n"
"This limitation is likely permanent, as it's not a goal for native images\n"
"to implement support for JMX. All such metrics can be accessed in other ways."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "JACC Integration"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images,\n"
"as JACC is not available - nor useful - in native mode."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Binding the Session to ThreadLocal context"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"It is impossible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.\n"
"Since Quarkus provides out-of-the-box CDI support, injection or programmatic CDI lookup is a better approach.\n"
"This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.\n"
"If you badly need to bind it to a ThreadLocal, it should be trivial to implement in your own code."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "JNDI"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"The JNDI technology is commonly used in other runtimes to integrate different components.\n"
"A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name and then have Hibernate ORM configured to look these components up by name.\n"
"But in Quarkus, this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.\n"
"To avoid unexpected use of JNDI, full support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.\n"
"This is both a security precaution and an optimization."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Other notable differences"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Format of `import.sql`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"When importing a `import.sql` to set up your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (`;`) to terminate each statement.\n"
"The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the `;` terminator character if you're reusing existing scripts.\n"
"This is useful so to allow multi-line statements and human friendly formatting."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Simplifying Hibernate ORM with Panache"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Configure your datasource"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Datasource configuration is extremely simple, but is covered in a different guide as technically\n"
"it's implemented by the Agroal connection pool extension for Quarkus."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Multitenancy"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{hibernate-orm-docs-url}#multitenacy[Hibernate User Guide])."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Quarkus currently supports the link:{hibernate-orm-docs-url}#multitenacy-separate-database[separate database] approach, the link:{hibernate-orm-docs-url}#multitenacy-separate-schema[separate schema] approach and the link:{hibernate-orm-docs-url}#multitenacy-discriminator[discriminator] approach."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "To see multitenancy in action, you can check out the link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-quickstart[hibernate-orm-multi-tenancy-quickstart] quickstart."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"In general, it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.\n"
"Therefore, you have to disable it, and you need to make sure that the tables are created per schema.\n"
"The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "SCHEMA approach"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source."
msgstr "同じデータソースがすべてのテナントに使用され、そのデータソース内にテナントごとにスキーマを作成する必要があります。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Some databases like MariaDB/MySQL do not support database schemas. In these cases you have to use the <<database-approach,database approach>>."
msgstr "MariaDB/MySQLのように、データベーススキーマをサポートしていないデータベースもあります。このような場合は、 xref:database-approach[データベースアプローチを] 使用する必要があります。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Disable schema generation, because it is not supported by Hibernate ORM for schema multi-tenancy.\n"
"We'll use Flyway instead, see further down."
msgstr "スキーマ生成はHibernate ORMでスキーマのマルチテナンシーがサポートされていないため、無効にします。代わりにFlywayを使用します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Enable schema multi-tenancy."
msgstr "スキーマのマルチテナンシーを有効にします。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"We use the default datasource here, but could use a named datasource if we wanted to,\n"
"by following instructions <<multiple-persistence-units,there>>."
msgstr "ここではデフォルトのデータソースを使用していますが、必要であれば xref:multiple-persistence-units[その] 指示に従って名前付きのデータソースを使用することもできます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr "この場合、Hibernate ORMによるスキーマ生成はサポートされないため、データベースの初期化用に xref:flyway.adoc[Flywayを] 設定します。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "DATABASE approach"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"With this approach, all datasources used by the same persistence unit\n"
"are assumed to point to a database of the same vendor (same `db-kind`) and version."
msgstr "このアプローチでは、同じ永続化ユニットで使用されるすべてのデータソースは、同じベンダー（同じ `db-kind` ）とバージョンのデータベースを指すと仮定されます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Mismatches will not be detected, and may result in unpredictable behavior."
msgstr "ミスマッチは検出されず、予測できない動作になる可能性があります。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Disable schema generation, because it is not supported by Hibernate ORM for database multi-tenancy.\n"
"We'll use Flyway instead, see further down."
msgstr "スキーマ生成はHibernate ORMではデータベースのマルチテナント化に対応していないため、無効にします。代わりにFlywayを使用します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Enable database multi-tenancy."
msgstr "データベースのマルチテナンシーを有効にします。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Select a datasource for the persistence unit."
msgstr "永続化ユニットのデータソースを選択します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"This is only to allow Quarkus to determine the Hibernate ORM dialect to use;\n"
"see <<hibernate-dialect-varying-database,this section>> for details."
msgstr "詳細は xref:hibernate-dialect-varying-database[このセクションを] 参照してください。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "xref:datasource.adoc[Configure the datasource] for one tenant, `base`."
msgstr "`base` 、1つのテナントに xref:datasource.adoc[データソースを設定] します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization for tenant `base`,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr "この場合、Hibernate ORMによるスキーマ生成はサポートされないため、テナント `base` のデータベース初期化用に xref:flyway.adoc[Flywayを] 設定します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "xref:datasource.adoc[Configure the datasource] for another tenant."
msgstr "別のテナント用に xref:datasource.adoc[データソースを設定] します。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "There could be more tenants, but here we're stopping at two."
msgstr "もっとテナントがあってもいいのですが、ここでは2つで止めておきます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization for tenant `mycompany`,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr "この場合、Hibernate ORMによるスキーマ生成はサポートされないため、テナント `mycompany` のデータベース初期化用に xref:flyway.adoc[Flywayを] 設定します。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Schema for tenant `base` (`src/main/resources/database/base/V1.0.0__create_fruits.sql`):"
msgstr "テナントのスキーマ `base` ( `src/main/resources/database/base/V1.0.0__create_fruits.sql` )："

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Schema for tenant `mycompany` (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "テナントのスキーマ `mycompany` ( `src/main/resources/database/mycompany/V1.0.0__create_fruits.sql` )："

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "DISCRIMINATOR approach"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "The default data source will be used for all tenants. All entities defining a field annotated with `@TenantId` will have that field populated automatically, and will get filtered automatically in queries."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Enable discriminator multi-tenancy."
msgstr "識別器のマルチテナンシーを有効にします。"

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Programmatically Resolving Tenants Connections"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file,\n"
"you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.\n"
"Creating an application-scoped bean that implements this interface\n"
"and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a <<multiple-persistence-units,named persistence unit>>)\n"
"will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.\n"
"Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Interceptors"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"You can assign an link:{hibernate-orm-docs-url}#events-interceptors[`org.hibernate.Interceptor`]\n"
"to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Either extend `org.hibernate.EmptyInterceptor` or implement `org.hibernate.Interceptor` directly."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Implement methods as necessary."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped,\n"
"which means only one interceptor instance will be created per application\n"
"and reused across all entity managers.\n"
"For this reason, the interceptor implementation must be thread-safe."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"In order to create one interceptor instance per entity manager instead,\n"
"annotate your bean with `@Dependent`.\n"
"In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Due to a limitation in Hibernate ORM itself,\n"
"`@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Statement Inspectors"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "You can assign a `org.hibernate.engine.jdbc.spi.StatementInspector` to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid ""
"Annotate the statement inspector implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
msgid "Implement `org.hibernate.engine.jdbc.spi.StatementInspector`."
msgstr ""

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Customizing JSON/XML serialization/deserialization"
msgstr "JSON/XMLのシリアライズ/デシリアライズのカスタマイズ"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"By default, Quarkus will try to automatically configure format mappers depending on available extensions.\n"
"Globally configured `ObjectMapper` (or `Jsonb`) will be used for serialization/deserialization operations when Jackson (or JSON-B) is available.\n"
"Jackson will take precedence if both Jackson and JSON-B are available at the same time."
msgstr "デフォルトでは、Quarkusは利用可能なエクステンションに応じて、フォーマットマッパーを自動的に設定しようとします。Jackson（またはJSON-B）が使用可能な場合、グローバルに設定された `ObjectMapper` （または `Jsonb` ）がシリアライズ/デシリアライズ操作に使用されます。JacksonとJSON-Bの両方が同時に利用可能な場合は、Jacksonが優先されます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"JSON and XML serialization/deserialization in Hibernate ORM can be customized by implementing a `org.hibernate.type.format.FormatMapper`\n"
"and annotating the implementation with the appropriate qualifiers:"
msgstr "Hibernate ORM での JSON および XML のシリアライズ/デシリアライズは、 `org.hibernate.type.format.FormatMapper` を実装し、適切な修飾子で実装にアノテーションを付けることでカスタマイズできます："

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Annotate the format mapper implementation with the `@JsonFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to JSON serialization/deserialization."
msgstr "フォーマットマッパーの実装に `@JsonFormat` 修飾子をアノテーションして、このマッパーがJSONシリアライズ/デシリアライズに特化していることをQuarkusに伝えます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Make sure the Quarkus-specific `@io.quarkus.hibernate.orm.JsonFormat` annotation is used\n"
"and not the one from Jackson."
msgstr "Jacksonのものではなく、Quarkus固有の `@io.quarkus.hibernate.orm.JsonFormat` アノテーションが使用されていることを確認してください。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Annotate the format mapper implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr "Quarkusにデフォルトの永続化ユニットで使用するよう指示するために、 `@PersistenceUnitExtension` 修飾子でフォーマットマッパー実装をアノテーションします。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Implement `org.hibernate.type.format.FormatMapper`."
msgstr "実装 `org.hibernate.type.format.FormatMapper` ."

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "In case of a custom XML format mapper, a different CDI qualifier must be applied:"
msgstr "カスタムXMLフォーマットマッパーの場合は、別のCDI修飾子を適用する必要があります："

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Annotate the format mapper implementation with the `@XmlFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to XML serialization/deserialization."
msgstr "フォーマットマッパーの実装に `@XmlFormat` 修飾子をアノテーションして、このマッパーがXMLシリアライズ/デシリアライズに特化していることをQuarkusに伝えます。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Format mappers *must* have both `@PersistenceUnitExtension` and either `@JsonFormat` or `@XmlFormat` CDI qualifiers applied."
msgstr "フォーマットマッパーは、 `@PersistenceUnitExtension` と `@JsonFormat` または `@XmlFormat` CDI修飾子の両方を適用する *必要が* あります。"

#: _versions/3.15/guides/hibernate-orm.adoc
#, fuzzy
msgid "Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity."
msgstr "同じ永続性ユニットに対して複数のJSON（またはXML）形式マッパーが登録されていると、あいまいさのために例外が発生します。"
