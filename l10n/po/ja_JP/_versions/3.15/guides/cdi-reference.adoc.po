msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Contexts and Dependency Injection"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Quarkus DI solution (also called ArC) is based on the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1, window=\"_blank\"] specification.\n"
"It implements the CDI Lite specification, with selected improvements on top, and passes the CDI Lite TCK.\n"
"It does not implement CDI Full.\n"
"See also <<supported_features_and_limitations,the list of supported features and limitations>>.\n"
"Most of the existing CDI code should work just fine but there are some small differences which follow from the Quarkus architecture and goals."
msgstr "Quarkus DIソリューション（ArCとも呼ばれる）は、 link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1] 仕様に基づいています。CDI Lite仕様を実装し、その上で改良を加え、CDI Lite TCKに準拠しています。CDI Fullは実装していません。 xref:supported_features_and_limitations[サポートされる機能と制限のリストも] 参照してください。既存のCDIコードのほとんどは問題なく動作するはずですが、Quarkusのアーキテクチャと目標に従った小さな違いがいくつかあります。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "If you're new to CDI we recommend you to read the xref:cdi.adoc[Introduction to CDI] first."
msgstr "CDIが初めての方は、まず xref:cdi.adoc[CDI入門を] お読みになることをお勧めします。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The xref:cdi-integration.adoc[CDI integration guide] has more detail on common CDI-related integration use cases, and example code for solutions."
msgstr "xref:cdi-integration.adoc[CDI統合ガイドには] 、一般的なCDI関連の統合ユースケースの詳細と、ソリューションのサンプルコードがあります。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Bean Discovery"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Bean discovery in CDI is a complex process which involves legacy deployment structures and accessibility requirements of the underlying module architecture.\n"
"However, Quarkus is using a *simplified bean discovery*.\n"
"There is only single bean archive with the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"] and no visibility boundaries."
msgstr "CDIにおけるBeanディスカバリーは、レガシーなデプロイメント構造と、基礎となるモジュールアーキテクチャのアクセシビリティ要件が関係する複雑なプロセスです。しかし、Quarkusでは *簡素化されたビーンディスカバリーを* 使用しています。 link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#default_bean_discovery[ビーンディスカバリーモードannotated] 、可視性の境界がない単一のビーンアーカイブのみです。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The bean archive is synthesized from:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "the application classes,"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "dependencies that contain a `beans.xml` descriptor (content is ignored),"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "dependencies that contain a Jandex index - `META-INF/jandex.idx`,"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "dependencies referenced by `quarkus.index-dependency` in `application.properties`,"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "and Quarkus integration code."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Bean classes that don't have a https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are not discovered.\n"
"This behavior is defined by CDI.\n"
"But producer methods and fields and observer methods are discovered even if the declaring class is not annotated with a bean defining annotation (this behavior is different to what is defined in CDI).\n"
"In fact, the declaring bean classes are considered annotated with `@Dependent`."
msgstr "link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[Bean 定義アノテーションを] 持たない Bean クラスは検出されません。この動作はCDIによって定義されています。しかし，宣言クラスがビーン定義アノテーションでアノテーションされていなくても，プロデューサメソッド及びフィールド，オブザーバメソッドは発見されます(この振る舞いは，CDIで定義されているものとは異なります)。実際，宣言ビーンクラスは， `@Dependent` でアノテーションされているとみなされます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Quarkus extensions may declare additional discovery rules. For example, `@Scheduled` business methods are registered even if the declaring class is not annotated with a bean defining annotation."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "How to Generate a Jandex Index"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"A dependency with a Jandex index is automatically scanned for beans.\n"
"To generate the index just add the following plugin to your build file:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Maven"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Gradle (Groovy DSL)"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "You can find the latest plugin version in the https://plugins.gradle.org/plugin/org.kordamp.gradle.jandex[Gradle Plugin Portal]"
msgstr "プラグインの最新バージョンは link:https://plugins.gradle.org/plugin/org.kordamp.gradle.jandex[Gradle Plugin Portal] で確認できます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Gradle (Kotlin DSL)"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "If you can't modify the dependency, you can still index it by adding `quarkus.index-dependency` entries to your `application.properties`:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "If no `artifact-id` is specified then all dependencies with the specificed `group-id` are indexed."
msgstr "`artifact-id` が指定されていない場合、指定された `group-id` を持つすべての依存関係がインデックス化されます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "For example, the following entries ensure that the `org.acme:acme-api` dependency is indexed:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Example application.properties"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Value is a group id for a dependency identified by name `acme`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Value is an artifact id for a dependency identified by name `acme`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "How To Exclude Types and Dependencies from Discovery"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"It may happen that some beans from third-party libraries do not work correctly in Quarkus.\n"
"A typical example is a bean injecting a portable extension.\n"
"In such case, it's possible to exclude types and dependencies from the bean discovery.\n"
"The `quarkus.arc.exclude-types` property accepts a list of string values that are used to match classes that should be excluded."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Value Examples"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Value"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Description"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`org.acme.Foo`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the class"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`org.acme.*`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match classes with package `org.acme`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`org.acme.**`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match classes where the package starts with `org.acme`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`Bar`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the simple name of the class"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Exclude the type `org.acme.Foo`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Exclude all types from the `org.acme` package."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Exclude all types whose simple name is `Bar`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"It is also possible to exclude a dependency artifact that would be otherwise scanned for beans.\n"
"For example, because it contains a `beans.xml` descriptor."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Native Executables and Private Members"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Quarkus is using GraalVM to build a native executable.\n"
"One of the limitations of GraalVM is the usage of link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/Reflection/[Reflection, window=\"_blank\"].\n"
"Reflective operations are supported but all relevant members must be registered for reflection explicitly.\n"
"Those registrations result in a bigger native executable."
msgstr "QuarkusはGraalVMを使ってネイティブ実行可能ファイルをビルドしています。GraalVMの制限の1つは、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/Reflection/[Reflection] の使用です。リフレクション操作はサポートされていますが、関連するすべてのメンバーを明示的にリフレクション用に登録する必要があります。これらの登録は、より大きなネイティブ実行ファイルになります。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"And if Quarkus DI needs to access a private member it *has to use reflection*.\n"
"That's why Quarkus users are encouraged __not to use private members__ in their beans.\n"
"This involves injection fields, constructors and initializers, observer methods, producer methods and fields, disposers and interceptor methods."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"How to avoid using private members?\n"
"You can use package-private modifiers:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A package-private injection field."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A package-private observer method."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Or constructor injection:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A package-private constructor injection. `@Inject` is optional in this particular case."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "[[supported_features]][[limitations]] Supported Features and Limitations"
msgstr "  サポートされる機能と制限"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The CDI Lite specification is fully supported.\n"
"The following features from CDI Full are also supported:"
msgstr "CDI Lite仕様は完全にサポートされています。CDI Fullの以下の機能もサポートされています："

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Decorators"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Decoration of built-in beans, such as `Event`, is not supported"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "`BeanManager`"
msgstr "`BeanManager`"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "In addition to the `BeanContainer` methods, the following methods are supported: `getInjectableReference()`, `resolveDecorators()`"
msgstr "`BeanContainer` メソッドに加え、以下のメソッドがサポートされています： `getInjectableReference()` , `resolveDecorators()`"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "`@SessionScoped`"
msgstr "`@SessionScoped`"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Only with the Undertow extension; see xref:cdi.adoc#bean-scope-available[here] for details"
msgstr "Undertowエクステンション使用時のみ。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The _method invokers_ implementation supports asynchronous methods.\n"
"The following methods are considered asynchronous and `@Dependent` instances are only destroyed when the asynchronous action completes:"
msgstr "_メソッド・インボーカの_ 実装は非同期メソッドをサポートしています。以下のメソッドは非同期とみなされ、 `@Dependent` インスタンスは非同期アクションが完了したときにのみ破棄されます："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "methods that declare a return type of `CompletionStage`, `Uni`, or `Multi`"
msgstr "`CompletionStage` 、 `Uni` 、または `Multi`"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "These additional features are not covered by the CDI Lite TCK."
msgstr "これらの追加機能はCDI Lite TCKではカバーされていません。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Non-standard Features"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Eager Instantiation of Beans"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Lazy By Default"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"By default, CDI beans are created lazily, when needed.\n"
"What exactly \"needed\" means depends on the scope of a bean."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A *normal scoped bean* (`@ApplicationScoped`, `@RequestScoped`, etc.) is needed when a method is invoked upon an injected instance (contextual reference per the specification)."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In other words, injecting a normal scoped bean will not suffice because a _client proxy_ is injected instead of a contextual instance of the bean."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A *bean with a pseudo-scope* (`@Dependent` and `@Singleton` ) is created when injected."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Lazy Instantiation Example"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Injection triggers the instantiation of `AmazingService`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Injection itself does not result in the instantiation of `CoolService`. A client proxy is injected."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The first invocation upon the injected proxy triggers the instantiation of `CoolService`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Startup Event"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "However, if you really need to instantiate a bean eagerly you can:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Declare an observer of the `StartupEvent` - the scope of the bean does not matter in this case:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "A `CoolService` is created during startup to service the observer method invocation."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Use the bean in an observer of the `StartupEvent` - normal scoped beans must be used as described in <<lazy_by_default>>:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The `AmazingService` is created during injection."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The `CoolService` is a normal scoped bean, so we have to invoke a method upon the injected proxy to force the instantiation."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Annotate the bean with `@io.quarkus.runtime.Startup` as described in xref:lifecycle.adoc#startup_annotation[Startup annotation]:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Quarkus users are encouraged to always prefer the `@Observes StartupEvent` to `@Initialized(ApplicationScoped.class)` as explained in the xref:lifecycle.adoc[Application Initialization and Termination] guide."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Request Context Lifecycle"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The request context is also active:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "during notification of a synchronous observer method."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The request context is destroyed:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "after the observer notification completes for an event, if it was not already active when the notification started."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "An event with qualifier `@Initialized(RequestScoped.class)` is fired when the request context is initialized for an observer notification. Moreover, the events with qualifiers `@BeforeDestroyed(RequestScoped.class)` and `@Destroyed(RequestScoped.class)` are fired when the request context is destroyed."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "How to Enable Trace Logging for Request Context Activation"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "You can set the `TRACE` level for the logger `io.quarkus.arc.requestContext` and try to analyze the log output afterwards."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`application.properties` Example"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "You also need to adjust the minimum log level for the relevant category."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Qualified Injected Fields"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In CDI, if you declare a field injection point you need to use `@Inject` and optionally a set of qualifiers."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In Quarkus, you can skip the `@Inject` annotation completely if the injected field declares at least one qualifier."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "With the notable exception of one special case discussed below, `@Inject` is still required for constructor and method injection."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Simplified Constructor Injection"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).\n"
"However, this requirement complicates constructor injection - you need to provide a dummy no-args constructor to make things work in CDI."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.\n"
"Also, if there's only one constructor there is no need for `@Inject`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "We don't generate a no-args constructor automatically if a bean class extends a class that does not declare a no-args constructor."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Removing Unused Beans"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"The container attempts to remove all unused beans, interceptors and decorators during build by default.\n"
"This optimization helps to minimize the amount of generated classes, thus conserving memory.\n"
"However, Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.\n"
"Therefore, it is possible that a removal results in a false positive error, i.e. a bean is removed although it's actually used.\n"
"In such cases, you'll notice a big warning in the log.\n"
"Users and extension authors have several options <<eliminate_false_positives,how to eliminate false positives>>."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"The optimization can be disabled by setting `quarkus.arc.remove-unused-beans` to `none` or `false`.\n"
"Quarkus also provides a middle ground where application beans are never removed whether or not they are unused, while the optimization proceeds normally for non application classes.\n"
"To use this mode, set `quarkus.arc.remove-unused-beans` to `fwk` or `framework`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "What's Removed?"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.\n"
"A good example is a Jakarta REST resource class or a bean which declares a `@Scheduled` method."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "An _unremovable_ bean:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "is <<eliminate_false_positives,excluded from removal>>, or"
msgstr "xref:eliminate_false_positives[削除から除外さ] れる場合、または"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "has a name designated via `@Named`, or"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "declares an observer method."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "An _unused_ bean:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "is not _unremovable_, and"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "is not eligible for injection to any injection point in the dependency tree of _unremovable_ beans, and"
msgstr "は， _除去不可能な_ Beanの依存性ツリーのどの注入点への注入にも適格でなく"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "is not eligible for injection into any `jakarta.enterprise.inject.Instance` or `jakarta.inject.Provider` injection point, and"
msgstr "は、 `jakarta.enterprise.inject.Instance` または `jakarta.inject.Provider` 注射ポイントへの注射の対象にはなりません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "is not eligible for injection into any <<injecting-multiple-bean-instances-intuitively,`@Inject @All List<>`>> injection point."
msgstr "への注入はできません。 xref:injecting-multiple-bean-instances-intuitively[@Inject @All List<>] への注入はできません。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Unused interceptors and decorators are not associated with any bean."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "When using the dev mode (running `./mvnw clean compile quarkus:dev`), you can see more information about which beans are being removed:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In the console - just enable the DEBUG level in your `application.properties`, i.e. `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In the relevant Dev UI page"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "How To Eliminate False Positives"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Users can instruct the container to not remove any of their specific beans (even if they satisfy all the rules specified above) by annotating them with `@io.quarkus.arc.Unremovable`.\n"
"This annotation can be declared on a class, a producer method or field."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Since this is not always possible, there is an option to achieve the same via `application.properties`.\n"
"The `quarkus.arc.unremovable-types` property accepts a list of string values that are used to match beans based on their name or package."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the bean class"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match beans where the package of the bean class is `org.acme`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match beans where the package of the bean class starts with `org.acme`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the simple name of the bean class"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Furthermore, extensions can eliminate false positives by producing an `UnremovableBeanBuildItem`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Default Beans"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally declare a bean if no other bean with equal types and qualifiers was declared by any available means (bean class, producer, synthetic bean, ...)\n"
"This is done using the `@io.quarkus.arc.DefaultBean` annotation and is best explained with an example."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Say there is a Quarkus extension that among other things declares a few CDI beans like the following code does:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"The idea is that the extension autoconfigures things for the user, eliminating a lot of boilerplate - we can just `@Inject` a `Tracer` wherever it is needed.\n"
"Now imagine that in our application we would like to utilize the configured `Tracer`, but we need to customize it a little, for example by providing a custom `Reporter`.\n"
"The only thing that would be needed in our application would be something like the following:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"`@DefaultBean` allows extensions (or any other code for that matter) to provide defaults while backing off if beans of that type are supplied in any\n"
"way Quarkus supports."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Default beans can optionally declare `@jakarta.annotation.Priority`.\n"
"If there is no priority defined, `@Priority(0)` is assumed.\n"
"Priority value is used for bean ordering and during typesafe resolution to disambiguate multiple matching default beans."
msgstr "デフォルト Bean は，オプションで `@jakarta.annotation.Priority` を宣言することができます。優先度が定義されていない場合は、 `@Priority(0)` 。優先度値は、Beanの順序付けと、複数の一致するデフォルトBeanの曖昧性を解消するためのタイプセーフ解決時に使用されます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Enabling Beans for Quarkus Build Profile"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time profile is enabled,\n"
"via the `@io.quarkus.arc.profile.IfBuildProfile` and `@io.quarkus.arc.profile.UnlessBuildProfile` annotations.\n"
"When used in conjunction with `@io.quarkus.arc.DefaultBean`, these annotations allow for the creation of different bean configurations for different build profiles."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Imagine for instance that an application contains a bean named `Tracer`, which needs to do nothing when in tests or in dev mode, but works in its normal capacity for the production artifact.\n"
"An elegant way to create such beans is the following:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "If instead, it is required that the `Tracer` bean also works in dev mode and only default to doing nothing for tests, then `@UnlessBuildProfile` would be ideal. The code would look like:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The runtime profile has absolutely no effect on the bean resolution using `@IfBuildProfile` and `@UnlessBuildProfile`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "It is also possible to use `@IfBuildProfile` and `@UnlessBuildProfile` on stereotypes."
msgstr "また、ステレオタイプに `@IfBuildProfile` や `@UnlessBuildProfile` を使用することもできます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Enabling Beans for Quarkus Build Properties"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time property has/has not a specific value,\n"
"via the `@io.quarkus.arc.properties.IfBuildProperty` and `@io.quarkus.arc.properties.UnlessBuildProperty` annotations.\n"
"When used in conjunction with `@io.quarkus.arc.DefaultBean`, this annotation allow for the creation of different bean configurations for different build properties."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The scenario we mentioned above with `Tracer` could also be implemented in the following way:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`@IfBuildProperty` and `@UnlessBuildProperty` are repeatable annotations, i.e. a bean will only be enabled if **all** the conditions defined by these annotations are satisfied."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "If instead, it is required that the `RealTracer` bean is only used if the `some.tracer.enabled` property is not `false`, then `@UnlessBuildProperty` would be ideal. The code would look like:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Properties set at runtime have absolutely no effect on the bean resolution using `@IfBuildProperty`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "It is also possible to use `@IfBuildProperty` and `@UnlessBuildProperty` on stereotypes."
msgstr "また、ステレオタイプに `@IfBuildProperty` や `@UnlessBuildProperty` を使用することもできます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Declaring Selected Alternatives"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"In CDI, an alternative bean may be selected either globally for an application by means of `@Priority`, or for a bean archive using a `beans.xml` descriptor.\n"
"Quarkus has a simplified bean discovery and the content of `beans.xml` is ignored."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"However, it is also possible to select alternatives for an application using the unified configuration.\n"
"The `quarkus.arc.selected-alternatives` property accepts a list of string values that are used to match alternative beans.\n"
"If any value matches then the priority of `Integer#MAX_VALUE` is used for the relevant bean.\n"
"The priority declared via `@Priority` or inherited from a stereotype is overridden."
msgstr "しかし、統一構成を使用してアプリケーションの代替を選択することも可能です。 `quarkus.arc.selected-alternatives` プロパティは、代替 Bean にマッチする文字列値のリストを受け付けます。どの値も一致する場合、 `Integer#MAX_VALUE` の優先度が関連する Bean に使用されます。 `@Priority` で宣言された優先度や、ステレオタイプから継承された優先度は、オーバーライドされます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the bean class or the bean class of the bean that declares the producer"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Match the simple name of the bean class or the bean class of the bean that declares the producer"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Simplified Producer Method Declaration"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In CDI, a producer method must be always annotated with `@Produces`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "In Quarkus, you can skip the `@Produces` annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Interception of Static Methods"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"The Interceptors specification is clear that _around-invoke_ methods must not be declared static.\n"
"However, this restriction was driven mostly by technical limitations.\n"
"And since Quarkus is a build-time oriented stack that allows for additional class transformations, those limitations don't apply anymore.\n"
"It's possible to annotate a non-private static method with an interceptor binding:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`Logged` is an interceptor binding."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Each method invocation is intercepted if there is an interceptor associated with `Logged`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Limitations"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Only *method-level bindings* are considered for backward compatibility reasons (otherwise static methods of bean classes that declare class-level bindings would be suddenly intercepted)"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Private static methods are never intercepted"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`InvocationContext#getTarget()` returns `null` for obvious reasons; therefore not all existing interceptors may behave correctly when intercepting static methods"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Interceptors can use `InvocationContext.getMethod()` to detect static methods and adjust the behavior accordingly."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Ability to handle 'final' classes and methods"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"In normal CDI, classes that are marked as `final` and / or have `final` methods are not eligible for proxy creation,\n"
"which in turn means that interceptors and normal scoped beans don't work properly.\n"
"This situation is very common when trying to use CDI with alternative JVM languages like Kotlin where classes and methods are `final` by default."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value)."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Container-managed Concurrency"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"There is no standard concurrency control mechanism for CDI beans.\n"
"Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.\n"
"In that case it should be thread-safe.\n"
"You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access.\n"
"Quarkus provides `@io.quarkus.arc.Lock` and a built-in interceptor for this interceptor binding.\n"
"Each interceptor instance associated with a contextual instance of an intercepted bean holds a separate `ReadWriteLock` with non-fair ordering policy."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`io.quarkus.arc.Lock` is a regular interceptor binding and as such can be used for any bean with any scope. However, it is especially useful for \"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Container-managed Concurrency Example"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Repeatable interceptor bindings"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Quarkus has limited support for `@Repeatable` interceptor binding annotations."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"When binding an interceptor to a component, you can declare multiple `@Repeatable` annotations on methods.\n"
"Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.\n"
"This might be added in the future."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"As an example, suppose we have an interceptor that clears a cache.\n"
"The corresponding interceptor binding would be called `@CacheInvalidateAll` and would be declared as `@Repeatable`.\n"
"If we wanted to clear two caches at the same time, we would add `@CacheInvalidateAll` twice:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"This is how interceptors are used.\n"
"What about creating an interceptor?"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"When declaring interceptor bindings of an interceptor, you can add multiple `@Repeatable` annotations to the interceptor class as usual.\n"
"This is useless when the annotation members are `@Nonbinding`, as would be the case for the `@Cached` annotation, but is important otherwise."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"For example, suppose we have an interceptor that can automatically log method invocations to certain targets.\n"
"The interceptor binding annotation `@Logged` would have a member called `target`, which specifies where to store the log.\n"
"Our implementation could be restricted to console logging and file logging:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Other interceptors could be provided to log method invocations to different targets."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Caching the Result of Programmatic Lookup"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"In certain situations, it is practical to obtain a bean instance programmatically via an injected `jakarta.enterprise.inject.Instance` and `Instance.get()`.\n"
"However, according to the specification the `get()` method must identify the matching bean and obtain a contextual reference.\n"
"As a consequence, a new instance of a  `@Dependent` bean is returned from each invocation of `get()`.\n"
"Moreover, this instance is a dependent object of the injected `Instance`.\n"
"This behavior is well-defined, but it may lead to unexpected errors and memory leaks.\n"
"Therefore, Quarkus comes with the `io.quarkus.arc.WithCaching` annotation.\n"
"An injected `Instance` annotated with this annotation will cache the result of the `Instance#get()` operation.\n"
"The result is computed on the first call and the same value is returned for all subsequent calls, even for `@Dependent` beans."
msgstr "ある状況では，注入された `jakarta.enterprise.inject.Instance` 及び `Instance.get()` を介して，プログラム的にBeanインスタンスを取得することが現実的です。 しかし，仕様によると， `get()` メソッドは，一致するBeanを識別し，文脈参照を取得しなければなりません。結果として， `get()` の各呼び出しから， `@Dependent` Beanの新しいインスタンスが返される。 さらに，このインスタンスは，注入された `Instance` の従属オブジェクトとなる。この動作は十分に定義されていますが、予期しないエラーやメモリリークにつながる可能性があります。そのため、Quarkusには `io.quarkus.arc.WithCaching` のアノテーションが付属しています。このアノテーションが付与された注入 `Instance` は、 `Instance#get()` 操作の結果をキャッシュします。結果は最初の呼び出しで計算され、 `@Dependent` Beanであっても、それ以降のすべての呼び出しで同じ値が返されます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "It is also possible to clear the cached value via `io.quarkus.arc.InjectableInstance.clearCache()`. In this case, you'll need to inject the Quarkus-specific `io.quarkus.arc.InjectableInstance` instead of `jakarta.enterprise.inject.Instance`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Declaratively Choose Beans That Can Be Obtained by Programmatic Lookup"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"It is sometimes useful to narrow down the set of beans that can be obtained by programmatic lookup via `jakarta.enterprise.inject.Instance`.\n"
"Typically, a user needs to choose the appropriate implementation of an interface based on a runtime configuration property."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Imagine that we have two beans implementing the interface `org.acme.Service`.\n"
"You can't inject the `org.acme.Service` directly unless your implementations declare a CDI qualifier.\n"
"However, you can inject the `Instance<Service>` instead, then iterate over all implementations and choose the correct one manually.\n"
"Alternatively, you can use the `@LookupIfProperty` and `@LookupUnlessProperty` annotations.\n"
"`@LookupIfProperty` indicates that a bean should only be obtained if a runtime configuration property matches the provided value.\n"
"`@LookupUnlessProperty`, on the other hand, indicates that a bean should only be obtained if a runtime configuration property does not match the provided value."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`@LookupIfProperty` Example"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Injecting Multiple Bean Instances Intuitively"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"In CDI, it's possible to inject multiple bean instances (aka contextual references) via the `jakarta.enterprise.inject.Instance` which implements `java.lang.Iterable`.\n"
"However, it's not exactly intuitive.\n"
"Therefore, a new way was introduced in Quarkus - you can inject a `java.util.List` annotated with the `io.quarkus.arc.All` qualifier.\n"
"The type of elements in the list is used as the required type when performing the lookup."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "The injected instance is an _immutable list_ of the contextual references of the _disambiguated_ beans."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "For this injection point the required type is `Service` and no additional qualifiers are declared."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The list is sorted by priority as defined by `io.quarkus.arc.InjectableBean#getPriority()`. Higher priority goes first. In general, the `@jakarta.annotation.Priority` annotation can be used to assign the priority to a class bean, producer method or producer field."
msgstr "リストは、 `io.quarkus.arc.InjectableBean#getPriority()` で定義されている優先度によってソートされます。一般に、 `@jakarta.annotation.Priority` アノテーションを使用して、クラス Bean、プロデューサ・メソッド、またはプロデューサ・フィールドに優先順位を割り当てることができます。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "If an injection point declares no other qualifier than `@All` then `@Any` is used, i.e. the behavior is equivalent to `@Inject @Any Instance<Service>`."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"You can also inject a list of bean instances wrapped in `io.quarkus.arc.InstanceHandle`.\n"
"This can be useful if you need to inspect the related bean metadata."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Neither a type variable nor a wildcard is a legal type parameter for an `@All List<>` injection point, i.e. `@Inject @All List<?> all` is not supported and results in a deployment error."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "It is also possible to obtain the list of all bean instance handles programmatically via the `Arc.container().listAll()` methods."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Ignoring Class-Level Interceptor Bindings for Methods and Constructors"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"If a managed bean declares interceptor binding annotations on the class level, the corresponding `@AroundInvoke` interceptors will apply to all business methods.\n"
"Similarly, the corresponding `@AroundConstruct` interceptors will apply to the bean constructor."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "For example, suppose we have a logging interceptor with the `@Logged` binding annotation and a tracing interceptor with the `@Traced` binding annotation:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"In this example, both `doSomething` and `doSomethingElse` will be intercepted by the hypothetical logging interceptor.\n"
"Additionally, the `doSomethingElse` method will be intercepted by the hypothetical tracing interceptor."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Now, if that `@Traced` interceptor also performed all the necessary logging, we'd like to skip the `@Logged` interceptor for this method, but keep it for all other methods.\n"
"To achieve that, you can annotate the method with `@NoClassInterceptors`:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"The `@NoClassInterceptors` annotation may be put on methods and constructors and means that all class-level interceptors are ignored for these methods and constructors.\n"
"In other words, if a method/constructor is annotated `@NoClassInterceptors`, then the only interceptors that will apply to this method/constructor are interceptors declared directly on the method/constructor."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "This annotation affects only business method interceptors (`@AroundInvoke`) and constructor lifecycle callback interceptors (`@AroundConstruct`)."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Exceptions Thrown By An Asynchronous Observer Method"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"If an exception is thrown by an asynchronous observer then the `CompletionStage` returned by the `fireAsync()` method completes exceptionally so that the event producer may react appropriately.\n"
"However, if the event producer does not care then the exception is ignored silently.\n"
"Therefore, Quarkus logs an error message by default.\n"
"It is also possible to implement a custom `AsyncObserverExceptionHandler`.\n"
"A bean that implements this interface should be `@jakarta.inject.Singleton` or `@jakarta.enterprise.context.ApplicationScoped`."
msgstr "非同期オブザーバによって例外がスローされた場合、 `fireAsync()` メソッドによって返される `CompletionStage` は例外的に完了し、イベントプロデューサが適切に対応できるようになります。しかし、イベントプロデューサが気にしない場合、例外は黙って無視されます。そのため、Quarkusはデフォルトでエラーメッセージを記録します。カスタム `AsyncObserverExceptionHandler` を実装することも可能です。このインタフェースを実装する Bean は、 `@jakarta.inject.Singleton` または `@jakarta.enterprise.context.ApplicationScoped` である必要があります。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`NoopAsyncObserverExceptionHandler`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Intercepted self-invocation"
msgstr "傍受された自己招聘"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Quarkus supports what is known as intercepted self-invocation or just self-interception - a scenario where CDI bean invokes its own intercepted method from within another method while triggering any associated interceptors.\n"
"This is a non-standard feature as CDI specification doesn't define whether self-interception should work or not."
msgstr "Quarkusは、インターセプトされた自己呼び出し、または単なる自己インターセプトとして知られているものをサポートしています。これは、CDI Beanが、関連するインターセプターをトリガーしながら、別のメソッド内から自身のインターセプトメソッドを呼び出すシナリオです。CDIの仕様では、自己インターセプトが機能するかどうかは定義されていないため、これは非標準的な機能です。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Suppose we have a CDI bean with two methods, one of which has the `@Transactional` interceptor binding associated with it:"
msgstr "2 つのメソッドを持つ CDI Bean があり、そのうちの 1 つに `@Transactional` インターセプター・バインディングが関連付けられているとします："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "One or more interceptor bindings; `@Transactional` is just an example."
msgstr "`@Transactional` はほんの一例です。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Non-intercepted method invoking another method from the same bean that has associated binding(s); this will trigger interception."
msgstr "インタセプトされないメソッドが，関連するバインディングをもつ同じBeanから別のメソッドを呼び出すこと。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"In the above example, any code calling the `doSomething()` method triggers interception - in this case, the method becomes transactional.\n"
"This is regardless of whether the invocation originated directly from the `MyService` bean (such as `MyService#doSomethingElse`) or from some other bean."
msgstr "上の例では、 `doSomething()` メソッドを呼び出すコードはすべて遮断を引き起こします - この場合、メソッドはトランザクションになります。これは、 `MyService` Bean ( `MyService#doSomethingElse` など) から直接呼び出されたか、他の Bean から呼び出されたかに関係ありません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Intercepting Producer Methods and Synthetic Beans"
msgstr "遮断する生産者の方法と合成豆"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"By default, interception is only supported for managed beans (also known as class-based beans).\n"
"To support interception of producer methods and synthetic beans, the CDI specification includes an `InterceptionFactory`, which is a runtime oriented concept and therefore cannot be supported in Quarkus."
msgstr "デフォルトでは、傍受はマネージドBean（クラスベースBeanとも呼ばれる）に対してのみサポートされます。プロデューサメソッドや合成Beanの傍受をサポートするために、CDI仕様には `InterceptionFactory` が含まれています。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Instead, Quarkus has its own API: `InterceptionProxy` and `@BindingsSource`.\n"
"The `InterceptionProxy` is very similar to `InterceptionFactory`: it creates a proxy that applies `@AroundInvoke` interceptors before forwarding the method call to the target instance.\n"
"The `@BindingsSource` annotation allows setting interceptor bindings in case the intercepted class is external and cannot be changed."
msgstr "その代わりに、Quarkusには独自のAPIがあります： `InterceptionProxy` と `@BindingsSource` です。 `InterceptionProxy` は `InterceptionFactory` とよく似ています。メソッドコールをターゲットのインスタンスに転送する前に、 `@AroundInvoke` インターセプターを適用するプロキシを作成します。 `@BindingsSource` アノテーションは、インターセプトされるクラスが外部で変更できない場合に、インターセプターのバインディングを設定することができます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Declares an injection point of type `InterceptionProxy<MyClass>`.\n"
"This means that at build time, a subclass of `MyClass` is generated that does the interception and forwarding.\n"
"Note that the type argument must be identical to the return type of the producer method."
msgstr "`InterceptionProxy<MyClass>` 型の注入ポイントを宣言します。これは、ビルド時に、インターセプトと転送を行う `MyClass` のサブクラスが生成されることを意味します。型の引数は、プロデューサ・メソッドの戻り値の型と同じでなければならないことに注意してください。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Creates an instance of the interception proxy for the given instance of `MyClass`.\n"
"The method calls will be forwarded to this target instance after all interceptors run."
msgstr "与えられた `MyClass` のインスタンスに対するインターセプションプロキシのインスタンスを作成します。 すべてのインターセプターが実行された後、メソッドコールはこのターゲットのインスタンスに転送されます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "In this example, interceptor bindings are read from the `MyClass` class."
msgstr "この例では、インターセプターのバインディングを `MyClass` クラスから読み込んでいます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Note that `InterceptionProxy` only supports `@AroundInvoke` interceptors declared on interceptor classes.\n"
"Other kinds of interception, as well as `@AroundInvoke` interceptors declared on the target class and its superclasses, are not supported."
msgstr "`InterceptionProxy` は、インターセプタ・クラス上で宣言された `@AroundInvoke` インターセプタのみをサポートしていることに注意してください。他の種類のインターセプタや、 `@AroundInvoke` ターゲットクラスとそのスーパークラスで宣言されたインターセプタはサポートされていません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The intercepted class should be https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1#unproxyable[proxyable] and therefore should not be `final`, should not have non-private `final` methods, and should have a non-private zero-parameter constructor.\n"
"If it isn't, a bytecode transformation will attempt to fix it if <<unproxyable_classes_transformation,enabled>>, but note that adding a zero-parameter constructor is not always possible."
msgstr "インターセプトされるクラスは link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1#unproxyable[プロキシ可能] であるべきであり、したがって `final` であってはならず、プライベートでない `final` メソッドを持ってはならず、プライベートでないゼロパラメータコンストラクタを持っているべきです。もしそうでない場合、バイトコード変換が xref:unproxyable_classes_transformation[有効で] あればそれを修正しようと試みますが、ゼロパラメータのコンストラクタを追加することは常に可能であるとは限らないことに注意してください。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"It is often the case that the produced classes come from external libraries and don't contain interceptor binding annotations at all.\n"
"To support such cases, the `@BindingsSource` annotation may be declared on the `InterceptionProxy` parameter:"
msgstr "生成されたクラスが外部ライブラリから来たもので、インターセプタ・バインディング・アノテーションをまったく含んでいないことはよくあります。このような場合に対応するために、 `InterceptionProxy` パラメータで `@BindingsSource` アノテーションを宣言することができます："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "A class that mirrors the `MyClass` structure and contains interceptor bindings."
msgstr "`MyClass` の構造を反映し、インターセプターのバインディングを含むクラス。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The `@BindingsSource` annotation says that interceptor bindings for `MyClass` should be read from `MyClassBindings`."
msgstr "`@BindingsSource` アノテーションは、 `MyClass` のインターセプターバインディングは `MyClassBindings` から読み込むべきであると述べています。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The concept of _bindings source_ is a build-time friendly equivalent of `InterceptionFactory.configure()`."
msgstr "_バインディング・ソースの_ 概念は、 `InterceptionFactory.configure()` に相当します。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Producer method interception and synthetic bean interception only works for instance methods.\n"
"<<interception_of_static_methods>> is not supported for producer methods and synthetic beans."
msgstr "<<interception_of_static_methods>> は、プロデューサ・メソッドと合成 Bean ではサポートされていません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Declaring `@BindingsSource`"
msgstr "宣言 `@BindingsSource`"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The `@BindingsSource` annotation specifies a class that mirrors the structure of the intercepted class.\n"
"Interceptor bindings are then read from that class and treated as if they were declared on the intercepted class."
msgstr "`@BindingsSource` アノテーションは、インターセプトされるクラスの構造を反映したクラスを指定します。そして、インターセプターのバインディングはそのクラスから読み込まれ、インターセプトされたクラスで宣言されているかのように扱われます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Specifically: class-level interceptor bindings declared on the bindings source class are treated as class-level bindings of the intercepted class.\n"
"Method-level interceptor bindings declared on the bindings source class are treated as method-level bindings of a method with the same name, return type, parameter types and `static` flag of the intercepted class."
msgstr "具体的には、バインディング元クラスで宣言されたクラスレベルのインターセプタバインディングは、 インターセプトされるクラスのクラスレベルのバインディングとして扱われます。バインディング元クラスで宣言されたメソッドレベルのインターセプタバインディングは、 インターセプトされるクラスの同じ名前、戻り値型、パラメータ型、 `static` フラグを持つメソッドのメソッドレベルのバインディングとして扱われます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "It is common to make the bindings source class and methods `abstract` so that you don't have to write method bodies:"
msgstr "バインディング・ソース・クラスとメソッドを `abstract` にすることで、メソッド本体を書かなくて済むようにするのが一般的です："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Since this class is never instantiated and its method are never invoked, this is okay, but it's also possible to create a non-`abstract` class:"
msgstr "このクラスはインスタンス化されることはなく、メソッドが呼び出されることもないので、これは問題ありませんが、 `abstract` のないクラスを作成することも可能です："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The method body does not matter."
msgstr "メソッド本体は関係ありません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Note that for generic classes, the type variable names must also be identical.\n"
"For example, for the following class:"
msgstr "ジェネリック・クラスでは、型変数名も同じでなければならないことに注意してください。例えば、以下のクラスでは"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "the bindings source class must also use `T` as the name of the type variable:"
msgstr "バインディング・ソース・クラスでは、型変数の名前として `T` を使用する必要があります："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"You don't need to declare methods that are not annotated simply because they exist on the intercepted class.\n"
"If you want to add method-level bindings to a subset of methods, you only have to declare the methods that are supposed to have an interceptor binding.\n"
"If you only want to add class-level bindings, you don't have to declare any methods at all."
msgstr "インターセプト対象のクラスに存在するからといって、 アノテーションのないメソッドを宣言する必要はありません。メソッドのサブセットにメソッドレベルのバインディングを追加したい場合は、 インターセプタバインディングを持つメソッドだけを宣言すればよいのです。クラスレベルのバインディングだけを追加したい場合は、 メソッドを宣言する必要はありません。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "These annotations can be present on a bindings source class:"
msgstr "これらのアノテーションは、バインディング・ソース・クラスに存在させることができます："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "_interceptor bindings_: on the class and on the methods"
msgstr "_インターセプター・バインディング_ : クラスとメソッドに対して"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "_stereotypes_: on the class"
msgstr "_ステレオタイプ_ ：クラスについて"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "`@NoClassInterceptors`: on the methods"
msgstr "`@NoClassInterceptors` 方法について"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Any other annotation present on a bindings source class is ignored."
msgstr "バインディング・ソース・クラスに存在するその他のアノテーションは無視されます。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Synthetic Beans"
msgstr "合成豆"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Using `InterceptionProxy` in synthetic beans is similar."
msgstr "合成豆に `InterceptionProxy` 。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "First, you have to declare that your synthetic bean injects the `InterceptionProxy`:"
msgstr "まず、あなたの合成豆が `InterceptionProxy` を注入することを宣言しなければなりません："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Once again, this means that at build time, a subclass of `MyClass` is generated that does the interception and forwarding."
msgstr "繰り返しますが、これはビルド時に、インターセプトと転送を行う `MyClass` のサブクラスが生成されることを意味します。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Second, you have to obtain the `InterceptionProxy` from the `SyntheticCreationalContext` in the `BeanCreator` and use it:"
msgstr "次に、 `BeanCreator` の `SyntheticCreationalContext` から `InterceptionProxy` を取得して使用する必要があります："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Obtains the `InterceptionProxy` for `MyClass`, as declared above.\n"
"It would also be possible to use the `getInjectedReference()` method, passing a `TypeLiteral`, but `getInterceptionProxy()` is easier."
msgstr "`MyClass` の `InterceptionProxy` を取得します。 `TypeLiteral` を渡して `getInjectedReference()` メソッドを使用することも可能ですが、 `getInterceptionProxy()` の方が簡単です。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"There's also an equivalent of `@BindingsSource`.\n"
"The `injectInterceptionProxy()` method has an overload with a parameter:"
msgstr "`@BindingsSource` `injectInterceptionProxy()` メソッドには、パラメータを持つオーバーロードがあります："

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "The argument is the bindings source class."
msgstr "引数はバインディングソースクラスです。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Pitfalls with Reactive Programming"
msgstr "リアクティブ・プログラミングの落とし穴"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"CDI is a purely synchronous framework.\n"
"Its notion of asynchrony is very limited and based solely on thread pools and thread offloading.\n"
"Therefore, there is a number of pitfalls when using CDI together with reactive programming."
msgstr "CDIは純粋に同期的なフレームワークです。その非同期の概念は非常に限定的で、スレッドプールとスレッドオフロードのみに基づいています。そのため、CDIをリアクティブ・プログラミングと併用すると、多くの落とし穴があります。"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "Detecting When Blocking Is Allowed"
msgstr "ブロッキングが許可された場合の検出"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The `io.quarkus.runtime.BlockingOperationControl#isBlockingAllowed()` method can be used to detect whether blocking is allowed on the current thread.\n"
"When it is not, and you need to perform a blocking operation, you have to offload it to another thread.\n"
"The easiest way is to use the `Vertx.executeBlocking()` method:"
msgstr "`io.quarkus.runtime.BlockingOperationControl#isBlockingAllowed()` メソッドを使用すると、現在のスレッドでブロッキングが許可されているかどうかを検出できます。ブロッキングが許可されておらず、ブロッキング処理を実行する必要がある場合は、別のスレッドにオフロードする必要があります。最も簡単な方法は、 `Vertx.executeBlocking()` メソッドを使用することです："

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Build Time Extensions"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Quarkus incorporates build-time optimizations in order to provide instant startup and low memory footprint.\n"
"The downside of this approach is that CDI Portable Extensions cannot be supported.\n"
"Nevertheless, most of the functionality can be achieved using Quarkus xref:writing-extensions.adoc[extensions].\n"
"See the xref:cdi-integration.adoc[integration guide] for more information."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "[[development-mode]] Dev mode"
msgstr " デブモード"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "In dev mode, two special endpoints are registered automatically to provide some basic debug info in the JSON format:"
msgstr "devモードでは、基本的なデバッグ情報をJSON形式で提供するために、2つの特別なエンドポイントが自動的に登録されます："

#: _versions/3.15/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc` - returns the summary; number of beans, config properties, etc."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/beans` - returns the list of all beans"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "You can use query params to filter the output:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`scope` - include beans with scope that ends with the given value, i.e. `http://localhost:8080/q/arc/beans?scope=ApplicationScoped`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`beanClass` - include beans with bean class that starts with the given value, i.e. `http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "`kind` - include beans of the specified kind (`CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, `INTERCEPTOR` or `SYNTHETIC`), i.e. `http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD`"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/removed-beans` - returns the list of unused beans removed during build"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/observers` - returns the list of all observer methods"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "These endpoints are only available in dev mode, i.e. when you run your application via `mvn quarkus:dev` (or `./gradlew quarkusDev`)."
msgstr "これらのエンドポイントは、 `mvn quarkus:dev` (または `./gradlew quarkusDev` ) 経由でアプリケーションを実行する場合など、dev モードでのみ利用可能です。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Monitoring Business Method Invocations and Events"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"In dev mode, it is also possible to enable monitoring of business method invocations and fired events.\n"
"Simply set the `quarkus.arc.dev-mode.monitoring-enabled` configuration property to `true` and explore the relevant Dev UI pages."
msgstr "dev モードでは、ビジネス・メソッドの呼び出しと発生したイベントの監視を有効にすることもできます。 `quarkus.arc.dev-mode.monitoring-enabled` 設定プロパティを `true` に設定し、関連する Dev UI ページを探索するだけです。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Strict Mode"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"By default, ArC does not perform all validations required by the CDI specification.\n"
"It also improves CDI usability in many ways, some of them being directly against the specification."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"To pass the CDI Lite TCK, ArC also has a _strict_ mode.\n"
"This mode enables additional validations and disables certain improvements that conflict with the specification."
msgstr "CDI Lite TCK をパスするために、ArC には _厳密_ モードもあります。このモードは追加の検証を有効にし、仕様に抵触する特定の改良を無効にします。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid "To enable the strict mode, use the following configuration:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "Some other features affect specification compatibility as well:"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "<<unproxyable_classes_transformation,Transformation of unproxyable classes>>"
msgstr "xref:unproxyable_classes_transformation[プロキシ不可能なクラスの変換]"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "<<remove_unused_beans,Unused beans removal>>"
msgstr "xref:remove_unused_beans[未使用豆の除去]"

#: _versions/3.15/guides/cdi-reference.adoc
#, fuzzy
msgid "To get a behavior closer to the specification, these features should be disabled."
msgstr "より仕様に近い動作を得るためには、これらの機能を無効にする必要があります。"

#: _versions/3.15/guides/cdi-reference.adoc
msgid ""
"Applications are recommended to use the default, non-strict mode, which makes CDI more convenient to use.\n"
"The \"strictness\" of the strict mode (the set of additional validations and the set of disabled improvements on top of the CDI specification) may change over time."
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "ArC Configuration Reference"
msgstr ""

#: _versions/3.15/guides/cdi-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
