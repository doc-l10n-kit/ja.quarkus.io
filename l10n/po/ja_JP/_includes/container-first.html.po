msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:9
msgid "From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "Quarkusは、当初からコンテナファーストの理念に基づいて設計されています。具体的には、Quarkusのアプリケーションは、以下のようにメモリ使用量が少なく、起動時間が短くなるように最適化されています。"

#. type: Attribute 'alt' of: <div><div><div><img>
#: upstream/_includes/container-first.html:10
msgid "Quarkus Build Time Principle"
msgstr "Quarkus ビルド時原則"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:13
msgid "Build Time Processing"
msgstr "ビルド時処理"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:14
msgid "The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr "Quarkusの中心的なアイデアは、従来のフレームワークが実行時に行うことをビルド時に行うことです。設定の解析、クラスパスのスキャン、クラスロードに基づく機能の切り替えなどです。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:15
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "可能な限り多くの処理がビルド時に行われるため、アプリケーションには実行時に使用されるクラスしか含まれません。従来のフレームワークでは、アプリケーションの初期展開を行うために必要なすべてのクラスは、一度しか使用されないにもかかわらず、アプリケーションの寿命が尽きるまで放置されます。Quarkusでは、これらのクラスは本番のJVMにもロードされません。Quarkusはそれで終わりません。ビルド時の処理では、アプリケーションで使用されるすべてのコンポーネントの初期化を準備します。すべてのメタデータの処理がすでに行われているため、メモリ使用量が少なくなり、起動時間が短縮されます。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:17
msgid "Reduction in Reflection Usage"
msgstr "リフレクション使用量の削減"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:18
msgid "As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr "Quarkusは、可能な限りリフレクションを回避し、起動時間とメモリ使用量を削減します。ビルド時の処理において、エクステンションはアプリケーションコードとクラスパス上で利用可能なクラスを分析し、リフレクションコールを通常の呼び出しに置き換えることができます。また、ビルド時にカスタムプロキシを生成することで、ダイナミックプロキシの使用を防ぐことができます。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:19
msgid "Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!"
msgstr "Quarkusで使用されている依存性注入フレームワークであるArcは、すべてのリフレクションコールを排除し、ビルド時に注入グラフを推論します。そのため、アプリケーションの起動時には、高価なルックアップは必要ありません。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:21
msgid "First-Class Support for GraalVM Native Images"
msgstr "GraalVMネイティブイメージのファーストクラスのサポート"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:22
msgid "GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No <code>-H:+ReportUnsupportedElementsAtRuntime</code> flag, no fallback, no compromise!"
msgstr "GraalVMネイティブ実行可能ファイルのサポートは、Quarkusの設計において当初から不可欠な要素でした。アプリケーションがネイティブ実行可能ファイルにコンパイルされると、標準的なJVMよりもはるかに高速に起動し、はるかに小さなヒープで実行できます。ネイティブコンパイラは、積極的にデッドコードを排除する技術を使用して、アプリケーションで絶対に必要なJVMやクラスの部分のみを埋め込みます。Quarkusでは、最適化されたネイティブ実行可能ファイルを簡単にビルドできます。ビルド時アプローチにより、Quarkusはアプリケーションに関する十分なメタデータを収集し、コンパイルを微調整することができます。<code>-H:+ReportUnsupportedElementsAtRuntime</code>フラグやフォールバック、妥協はありません。"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:24
msgid "Native Image Pre-Boot"
msgstr "ネイティブイメージのプリブート"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:25
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "Quarkusアプリケーションのネイティブコンパイル時に、可能な限り多くのフレームワークをプリブートしています。これは、結果として得られるネイティブ実行可能ファイルが、スタートアップコードのほとんどをすでに実行し、その結果を実行可能ファイルにシリアライズしていることを意味しており、起動がさらに速くなります"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:27
msgid "Kubernetes, but also bare metal"
msgstr "Kubernetesだけでなく、ベアメタルも"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:28
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running."
msgstr "メモリ使用量の削減や起動時間の短縮を可能にするすべての技術は、コンテナだけでなく、ベアメタルでもメリットがあります。ベアメタルであっても、メモリの使用量を減らすことができ、アプリケーションの実行を10秒も待つ必要がないのは、常に快適です。"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:29
msgid "When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster."
msgstr "Quarkusの設計時には、コンテナだけではなく、QuarkusアプリケーションをKubernetesなどのコンテナオーケストレーターにデプロイすることにも着目しました。Quarkusのビルド時の処理では、Kubernetesのメタデータも生成されるため、アプリケーションをKubernetesにデプロイする準備が整います。ヘルスチェックやメトリクスなどの実行時機能は、すぐに利用できます。Quarkusは、ビルド時に必要なメタデータをすべて収集し、Kubernetesのデプロイメント記述子を作成し、コンテナイメージを生成します。1つのコマンドラインで、アプリケーションをKubernetesクラスタにデプロイできます。"
